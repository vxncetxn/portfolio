diff --git a/build/three.module.js b/build/three.module.js
index 03b4125c33daf3b460a4bc69f67850fd381e6617..fce8bc0387d248406e29df4b3adec80f9afe769a 100644
--- a/build/three.module.js
+++ b/build/three.module.js
@@ -1,49769 +1,49769 @@
-/**
- * @license
- * Copyright 2010-2022 Three.js Authors
- * SPDX-License-Identifier: MIT
- */
-const REVISION = '145';
-const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
-const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
-const CullFaceNone = 0;
-const CullFaceBack = 1;
-const CullFaceFront = 2;
-const CullFaceFrontBack = 3;
-const BasicShadowMap = 0;
-const PCFShadowMap = 1;
-const PCFSoftShadowMap = 2;
-const VSMShadowMap = 3;
-const FrontSide = 0;
-const BackSide = 1;
-const DoubleSide = 2;
-const NoBlending = 0;
-const NormalBlending = 1;
-const AdditiveBlending = 2;
-const SubtractiveBlending = 3;
-const MultiplyBlending = 4;
-const CustomBlending = 5;
-const AddEquation = 100;
-const SubtractEquation = 101;
-const ReverseSubtractEquation = 102;
-const MinEquation = 103;
-const MaxEquation = 104;
-const ZeroFactor = 200;
-const OneFactor = 201;
-const SrcColorFactor = 202;
-const OneMinusSrcColorFactor = 203;
-const SrcAlphaFactor = 204;
-const OneMinusSrcAlphaFactor = 205;
-const DstAlphaFactor = 206;
-const OneMinusDstAlphaFactor = 207;
-const DstColorFactor = 208;
-const OneMinusDstColorFactor = 209;
-const SrcAlphaSaturateFactor = 210;
-const NeverDepth = 0;
-const AlwaysDepth = 1;
-const LessDepth = 2;
-const LessEqualDepth = 3;
-const EqualDepth = 4;
-const GreaterEqualDepth = 5;
-const GreaterDepth = 6;
-const NotEqualDepth = 7;
-const MultiplyOperation = 0;
-const MixOperation = 1;
-const AddOperation = 2;
-const NoToneMapping = 0;
-const LinearToneMapping = 1;
-const ReinhardToneMapping = 2;
-const CineonToneMapping = 3;
-const ACESFilmicToneMapping = 4;
-const CustomToneMapping = 5;
-
-const UVMapping = 300;
-const CubeReflectionMapping = 301;
-const CubeRefractionMapping = 302;
-const EquirectangularReflectionMapping = 303;
-const EquirectangularRefractionMapping = 304;
-const CubeUVReflectionMapping = 306;
-const RepeatWrapping = 1000;
-const ClampToEdgeWrapping = 1001;
-const MirroredRepeatWrapping = 1002;
-const NearestFilter = 1003;
-const NearestMipmapNearestFilter = 1004;
-const NearestMipMapNearestFilter = 1004;
-const NearestMipmapLinearFilter = 1005;
-const NearestMipMapLinearFilter = 1005;
-const LinearFilter = 1006;
-const LinearMipmapNearestFilter = 1007;
-const LinearMipMapNearestFilter = 1007;
-const LinearMipmapLinearFilter = 1008;
-const LinearMipMapLinearFilter = 1008;
-const UnsignedByteType = 1009;
-const ByteType = 1010;
-const ShortType = 1011;
-const UnsignedShortType = 1012;
-const IntType = 1013;
-const UnsignedIntType = 1014;
-const FloatType = 1015;
-const HalfFloatType = 1016;
-const UnsignedShort4444Type = 1017;
-const UnsignedShort5551Type = 1018;
-const UnsignedInt248Type = 1020;
-const AlphaFormat = 1021;
-const RGBFormat = 1022; // @deprecated since r137
-const RGBAFormat = 1023;
-const LuminanceFormat = 1024;
-const LuminanceAlphaFormat = 1025;
-const DepthFormat = 1026;
-const DepthStencilFormat = 1027;
-const RedFormat = 1028;
-const RedIntegerFormat = 1029;
-const RGFormat = 1030;
-const RGIntegerFormat = 1031;
-const RGBAIntegerFormat = 1033;
-
-const RGB_S3TC_DXT1_Format = 33776;
-const RGBA_S3TC_DXT1_Format = 33777;
-const RGBA_S3TC_DXT3_Format = 33778;
-const RGBA_S3TC_DXT5_Format = 33779;
-const RGB_PVRTC_4BPPV1_Format = 35840;
-const RGB_PVRTC_2BPPV1_Format = 35841;
-const RGBA_PVRTC_4BPPV1_Format = 35842;
-const RGBA_PVRTC_2BPPV1_Format = 35843;
-const RGB_ETC1_Format = 36196;
-const RGB_ETC2_Format = 37492;
-const RGBA_ETC2_EAC_Format = 37496;
-const RGBA_ASTC_4x4_Format = 37808;
-const RGBA_ASTC_5x4_Format = 37809;
-const RGBA_ASTC_5x5_Format = 37810;
-const RGBA_ASTC_6x5_Format = 37811;
-const RGBA_ASTC_6x6_Format = 37812;
-const RGBA_ASTC_8x5_Format = 37813;
-const RGBA_ASTC_8x6_Format = 37814;
-const RGBA_ASTC_8x8_Format = 37815;
-const RGBA_ASTC_10x5_Format = 37816;
-const RGBA_ASTC_10x6_Format = 37817;
-const RGBA_ASTC_10x8_Format = 37818;
-const RGBA_ASTC_10x10_Format = 37819;
-const RGBA_ASTC_12x10_Format = 37820;
-const RGBA_ASTC_12x12_Format = 37821;
-const RGBA_BPTC_Format = 36492;
-const LoopOnce = 2200;
-const LoopRepeat = 2201;
-const LoopPingPong = 2202;
-const InterpolateDiscrete = 2300;
-const InterpolateLinear = 2301;
-const InterpolateSmooth = 2302;
-const ZeroCurvatureEnding = 2400;
-const ZeroSlopeEnding = 2401;
-const WrapAroundEnding = 2402;
-const NormalAnimationBlendMode = 2500;
-const AdditiveAnimationBlendMode = 2501;
-const TrianglesDrawMode = 0;
-const TriangleStripDrawMode = 1;
-const TriangleFanDrawMode = 2;
-const LinearEncoding = 3000;
-const sRGBEncoding = 3001;
-const BasicDepthPacking = 3200;
-const RGBADepthPacking = 3201;
-const TangentSpaceNormalMap = 0;
-const ObjectSpaceNormalMap = 1;
-
-// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
-const NoColorSpace = '';
-const SRGBColorSpace = 'srgb';
-const LinearSRGBColorSpace = 'srgb-linear';
-
-const ZeroStencilOp = 0;
-const KeepStencilOp = 7680;
-const ReplaceStencilOp = 7681;
-const IncrementStencilOp = 7682;
-const DecrementStencilOp = 7683;
-const IncrementWrapStencilOp = 34055;
-const DecrementWrapStencilOp = 34056;
-const InvertStencilOp = 5386;
-
-const NeverStencilFunc = 512;
-const LessStencilFunc = 513;
-const EqualStencilFunc = 514;
-const LessEqualStencilFunc = 515;
-const GreaterStencilFunc = 516;
-const NotEqualStencilFunc = 517;
-const GreaterEqualStencilFunc = 518;
-const AlwaysStencilFunc = 519;
-
-const StaticDrawUsage = 35044;
-const DynamicDrawUsage = 35048;
-const StreamDrawUsage = 35040;
-const StaticReadUsage = 35045;
-const DynamicReadUsage = 35049;
-const StreamReadUsage = 35041;
-const StaticCopyUsage = 35046;
-const DynamicCopyUsage = 35050;
-const StreamCopyUsage = 35042;
+// /**
+//  * @license
+//  * Copyright 2010-2022 Three.js Authors
+//  * SPDX-License-Identifier: MIT
+//  */
+// const REVISION = '145';
+// const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
+// const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
+// const CullFaceNone = 0;
+// const CullFaceBack = 1;
+// const CullFaceFront = 2;
+// const CullFaceFrontBack = 3;
+// const BasicShadowMap = 0;
+// const PCFShadowMap = 1;
+// const PCFSoftShadowMap = 2;
+// const VSMShadowMap = 3;
+// const FrontSide = 0;
+// const BackSide = 1;
+// const DoubleSide = 2;
+// const NoBlending = 0;
+// const NormalBlending = 1;
+// const AdditiveBlending = 2;
+// const SubtractiveBlending = 3;
+// const MultiplyBlending = 4;
+// const CustomBlending = 5;
+// const AddEquation = 100;
+// const SubtractEquation = 101;
+// const ReverseSubtractEquation = 102;
+// const MinEquation = 103;
+// const MaxEquation = 104;
+// const ZeroFactor = 200;
+// const OneFactor = 201;
+// const SrcColorFactor = 202;
+// const OneMinusSrcColorFactor = 203;
+// const SrcAlphaFactor = 204;
+// const OneMinusSrcAlphaFactor = 205;
+// const DstAlphaFactor = 206;
+// const OneMinusDstAlphaFactor = 207;
+// const DstColorFactor = 208;
+// const OneMinusDstColorFactor = 209;
+// const SrcAlphaSaturateFactor = 210;
+// const NeverDepth = 0;
+// const AlwaysDepth = 1;
+// const LessDepth = 2;
+// const LessEqualDepth = 3;
+// const EqualDepth = 4;
+// const GreaterEqualDepth = 5;
+// const GreaterDepth = 6;
+// const NotEqualDepth = 7;
+// const MultiplyOperation = 0;
+// const MixOperation = 1;
+// const AddOperation = 2;
+// const NoToneMapping = 0;
+// const LinearToneMapping = 1;
+// const ReinhardToneMapping = 2;
+// const CineonToneMapping = 3;
+// const ACESFilmicToneMapping = 4;
+// const CustomToneMapping = 5;
+
+// const UVMapping = 300;
+// const CubeReflectionMapping = 301;
+// const CubeRefractionMapping = 302;
+// const EquirectangularReflectionMapping = 303;
+// const EquirectangularRefractionMapping = 304;
+// const CubeUVReflectionMapping = 306;
+// const RepeatWrapping = 1000;
+// const ClampToEdgeWrapping = 1001;
+// const MirroredRepeatWrapping = 1002;
+// const NearestFilter = 1003;
+// const NearestMipmapNearestFilter = 1004;
+// const NearestMipMapNearestFilter = 1004;
+// const NearestMipmapLinearFilter = 1005;
+// const NearestMipMapLinearFilter = 1005;
+// const LinearFilter = 1006;
+// const LinearMipmapNearestFilter = 1007;
+// const LinearMipMapNearestFilter = 1007;
+// const LinearMipmapLinearFilter = 1008;
+// const LinearMipMapLinearFilter = 1008;
+// const UnsignedByteType = 1009;
+// const ByteType = 1010;
+// const ShortType = 1011;
+// const UnsignedShortType = 1012;
+// const IntType = 1013;
+// const UnsignedIntType = 1014;
+// const FloatType = 1015;
+// const HalfFloatType = 1016;
+// const UnsignedShort4444Type = 1017;
+// const UnsignedShort5551Type = 1018;
+// const UnsignedInt248Type = 1020;
+// const AlphaFormat = 1021;
+// const RGBFormat = 1022; // @deprecated since r137
+// const RGBAFormat = 1023;
+// const LuminanceFormat = 1024;
+// const LuminanceAlphaFormat = 1025;
+// const DepthFormat = 1026;
+// const DepthStencilFormat = 1027;
+// const RedFormat = 1028;
+// const RedIntegerFormat = 1029;
+// const RGFormat = 1030;
+// const RGIntegerFormat = 1031;
+// const RGBAIntegerFormat = 1033;
+
+// const RGB_S3TC_DXT1_Format = 33776;
+// const RGBA_S3TC_DXT1_Format = 33777;
+// const RGBA_S3TC_DXT3_Format = 33778;
+// const RGBA_S3TC_DXT5_Format = 33779;
+// const RGB_PVRTC_4BPPV1_Format = 35840;
+// const RGB_PVRTC_2BPPV1_Format = 35841;
+// const RGBA_PVRTC_4BPPV1_Format = 35842;
+// const RGBA_PVRTC_2BPPV1_Format = 35843;
+// const RGB_ETC1_Format = 36196;
+// const RGB_ETC2_Format = 37492;
+// const RGBA_ETC2_EAC_Format = 37496;
+// const RGBA_ASTC_4x4_Format = 37808;
+// const RGBA_ASTC_5x4_Format = 37809;
+// const RGBA_ASTC_5x5_Format = 37810;
+// const RGBA_ASTC_6x5_Format = 37811;
+// const RGBA_ASTC_6x6_Format = 37812;
+// const RGBA_ASTC_8x5_Format = 37813;
+// const RGBA_ASTC_8x6_Format = 37814;
+// const RGBA_ASTC_8x8_Format = 37815;
+// const RGBA_ASTC_10x5_Format = 37816;
+// const RGBA_ASTC_10x6_Format = 37817;
+// const RGBA_ASTC_10x8_Format = 37818;
+// const RGBA_ASTC_10x10_Format = 37819;
+// const RGBA_ASTC_12x10_Format = 37820;
+// const RGBA_ASTC_12x12_Format = 37821;
+// const RGBA_BPTC_Format = 36492;
+// const LoopOnce = 2200;
+// const LoopRepeat = 2201;
+// const LoopPingPong = 2202;
+// const InterpolateDiscrete = 2300;
+// const InterpolateLinear = 2301;
+// const InterpolateSmooth = 2302;
+// const ZeroCurvatureEnding = 2400;
+// const ZeroSlopeEnding = 2401;
+// const WrapAroundEnding = 2402;
+// const NormalAnimationBlendMode = 2500;
+// const AdditiveAnimationBlendMode = 2501;
+// const TrianglesDrawMode = 0;
+// const TriangleStripDrawMode = 1;
+// const TriangleFanDrawMode = 2;
+// const LinearEncoding = 3000;
+// const sRGBEncoding = 3001;
+// const BasicDepthPacking = 3200;
+// const RGBADepthPacking = 3201;
+// const TangentSpaceNormalMap = 0;
+// const ObjectSpaceNormalMap = 1;
+
+// // Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
+// const NoColorSpace = '';
+// const SRGBColorSpace = 'srgb';
+// const LinearSRGBColorSpace = 'srgb-linear';
+
+// const ZeroStencilOp = 0;
+// const KeepStencilOp = 7680;
+// const ReplaceStencilOp = 7681;
+// const IncrementStencilOp = 7682;
+// const DecrementStencilOp = 7683;
+// const IncrementWrapStencilOp = 34055;
+// const DecrementWrapStencilOp = 34056;
+// const InvertStencilOp = 5386;
+
+// const NeverStencilFunc = 512;
+// const LessStencilFunc = 513;
+// const EqualStencilFunc = 514;
+// const LessEqualStencilFunc = 515;
+// const GreaterStencilFunc = 516;
+// const NotEqualStencilFunc = 517;
+// const GreaterEqualStencilFunc = 518;
+// const AlwaysStencilFunc = 519;
+
+// const StaticDrawUsage = 35044;
+// const DynamicDrawUsage = 35048;
+// const StreamDrawUsage = 35040;
+// const StaticReadUsage = 35045;
+// const DynamicReadUsage = 35049;
+// const StreamReadUsage = 35041;
+// const StaticCopyUsage = 35046;
+// const DynamicCopyUsage = 35050;
+// const StreamCopyUsage = 35042;
 
-const GLSL1 = '100';
-const GLSL3 = '300 es';
+// const GLSL1 = '100';
+// const GLSL3 = '300 es';
 
-const _SRGBAFormat = 1035; // fallback for WebGL 1
+// const _SRGBAFormat = 1035; // fallback for WebGL 1
 
-/**
- * https://github.com/mrdoob/eventdispatcher.js/
- */
+// /**
+//  * https://github.com/mrdoob/eventdispatcher.js/
+//  */
 
-class EventDispatcher {
+// class EventDispatcher {
 
-	addEventListener( type, listener ) {
+// 	addEventListener( type, listener ) {
 
-		if ( this._listeners === undefined ) this._listeners = {};
+// 		if ( this._listeners === undefined ) this._listeners = {};
 
-		const listeners = this._listeners;
+// 		const listeners = this._listeners;
 
-		if ( listeners[ type ] === undefined ) {
+// 		if ( listeners[ type ] === undefined ) {
 
-			listeners[ type ] = [];
+// 			listeners[ type ] = [];
 
-		}
+// 		}
 
-		if ( listeners[ type ].indexOf( listener ) === - 1 ) {
+// 		if ( listeners[ type ].indexOf( listener ) === - 1 ) {
 
-			listeners[ type ].push( listener );
+// 			listeners[ type ].push( listener );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	hasEventListener( type, listener ) {
+// 	hasEventListener( type, listener ) {
 
-		if ( this._listeners === undefined ) return false;
+// 		if ( this._listeners === undefined ) return false;
 
-		const listeners = this._listeners;
+// 		const listeners = this._listeners;
 
-		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;
+// 		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;
 
-	}
+// 	}
 
-	removeEventListener( type, listener ) {
+// 	removeEventListener( type, listener ) {
 
-		if ( this._listeners === undefined ) return;
+// 		if ( this._listeners === undefined ) return;
 
-		const listeners = this._listeners;
-		const listenerArray = listeners[ type ];
+// 		const listeners = this._listeners;
+// 		const listenerArray = listeners[ type ];
 
-		if ( listenerArray !== undefined ) {
+// 		if ( listenerArray !== undefined ) {
 
-			const index = listenerArray.indexOf( listener );
+// 			const index = listenerArray.indexOf( listener );
 
-			if ( index !== - 1 ) {
+// 			if ( index !== - 1 ) {
 
-				listenerArray.splice( index, 1 );
+// 				listenerArray.splice( index, 1 );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	dispatchEvent( event ) {
+// 	dispatchEvent( event ) {
 
-		if ( this._listeners === undefined ) return;
+// 		if ( this._listeners === undefined ) return;
 
-		const listeners = this._listeners;
-		const listenerArray = listeners[ event.type ];
+// 		const listeners = this._listeners;
+// 		const listenerArray = listeners[ event.type ];
 
-		if ( listenerArray !== undefined ) {
+// 		if ( listenerArray !== undefined ) {
 
-			event.target = this;
+// 			event.target = this;
 
-			// Make a copy, in case listeners are removed while iterating.
-			const array = listenerArray.slice( 0 );
+// 			// Make a copy, in case listeners are removed while iterating.
+// 			const array = listenerArray.slice( 0 );
 
-			for ( let i = 0, l = array.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = array.length; i < l; i ++ ) {
 
-				array[ i ].call( this, event );
+// 				array[ i ].call( this, event );
 
-			}
+// 			}
 
-			event.target = null;
+// 			event.target = null;
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];
+// const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];
 
-let _seed = 1234567;
+// let _seed = 1234567;
 
 
-const DEG2RAD = Math.PI / 180;
-const RAD2DEG = 180 / Math.PI;
+// const DEG2RAD = Math.PI / 180;
+// const RAD2DEG = 180 / Math.PI;
 
-// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
-function generateUUID() {
+// // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
+// function generateUUID() {
 
-	const d0 = Math.random() * 0xffffffff | 0;
-	const d1 = Math.random() * 0xffffffff | 0;
-	const d2 = Math.random() * 0xffffffff | 0;
-	const d3 = Math.random() * 0xffffffff | 0;
-	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
-			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
-			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
-			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];
+// 	const d0 = Math.random() * 0xffffffff | 0;
+// 	const d1 = Math.random() * 0xffffffff | 0;
+// 	const d2 = Math.random() * 0xffffffff | 0;
+// 	const d3 = Math.random() * 0xffffffff | 0;
+// 	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
+// 			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
+// 			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
+// 			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];
 
-	// .toLowerCase() here flattens concatenated strings to save heap memory space.
-	return uuid.toLowerCase();
+// 	// .toLowerCase() here flattens concatenated strings to save heap memory space.
+// 	return uuid.toLowerCase();
 
-}
+// }
 
-function clamp( value, min, max ) {
+// function clamp( value, min, max ) {
 
-	return Math.max( min, Math.min( max, value ) );
+// 	return Math.max( min, Math.min( max, value ) );
 
-}
+// }
 
-// compute euclidean modulo of m % n
-// https://en.wikipedia.org/wiki/Modulo_operation
-function euclideanModulo( n, m ) {
+// // compute euclidean modulo of m % n
+// // https://en.wikipedia.org/wiki/Modulo_operation
+// function euclideanModulo( n, m ) {
 
-	return ( ( n % m ) + m ) % m;
+// 	return ( ( n % m ) + m ) % m;
 
-}
+// }
 
-// Linear mapping from range <a1, a2> to range <b1, b2>
-function mapLinear( x, a1, a2, b1, b2 ) {
+// // Linear mapping from range <a1, a2> to range <b1, b2>
+// function mapLinear( x, a1, a2, b1, b2 ) {
 
-	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
+// 	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
 
-}
+// }
 
-// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
-function inverseLerp( x, y, value ) {
+// // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
+// function inverseLerp( x, y, value ) {
 
-	if ( x !== y ) {
+// 	if ( x !== y ) {
 
-		return ( value - x ) / ( y - x );
+// 		return ( value - x ) / ( y - x );
 
-	} else {
+// 	} else {
 
-		return 0;
+// 		return 0;
 
-	}
+// 	}
 
-}
+// }
 
-// https://en.wikipedia.org/wiki/Linear_interpolation
-function lerp( x, y, t ) {
+// // https://en.wikipedia.org/wiki/Linear_interpolation
+// function lerp( x, y, t ) {
 
-	return ( 1 - t ) * x + t * y;
+// 	return ( 1 - t ) * x + t * y;
 
-}
+// }
 
-// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
-function damp( x, y, lambda, dt ) {
+// // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
+// function damp( x, y, lambda, dt ) {
 
-	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );
+// 	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );
 
-}
+// }
 
-// https://www.desmos.com/calculator/vcsjnyz7x4
-function pingpong( x, length = 1 ) {
+// // https://www.desmos.com/calculator/vcsjnyz7x4
+// function pingpong( x, length = 1 ) {
 
-	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );
+// 	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );
 
-}
+// }
 
-// http://en.wikipedia.org/wiki/Smoothstep
-function smoothstep( x, min, max ) {
+// // http://en.wikipedia.org/wiki/Smoothstep
+// function smoothstep( x, min, max ) {
 
-	if ( x <= min ) return 0;
-	if ( x >= max ) return 1;
+// 	if ( x <= min ) return 0;
+// 	if ( x >= max ) return 1;
 
-	x = ( x - min ) / ( max - min );
+// 	x = ( x - min ) / ( max - min );
 
-	return x * x * ( 3 - 2 * x );
+// 	return x * x * ( 3 - 2 * x );
 
-}
+// }
 
-function smootherstep( x, min, max ) {
+// function smootherstep( x, min, max ) {
 
-	if ( x <= min ) return 0;
-	if ( x >= max ) return 1;
+// 	if ( x <= min ) return 0;
+// 	if ( x >= max ) return 1;
 
-	x = ( x - min ) / ( max - min );
+// 	x = ( x - min ) / ( max - min );
 
-	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
+// 	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
 
-}
+// }
 
-// Random integer from <low, high> interval
-function randInt( low, high ) {
+// // Random integer from <low, high> interval
+// function randInt( low, high ) {
 
-	return low + Math.floor( Math.random() * ( high - low + 1 ) );
+// 	return low + Math.floor( Math.random() * ( high - low + 1 ) );
 
-}
+// }
 
-// Random float from <low, high> interval
-function randFloat( low, high ) {
+// // Random float from <low, high> interval
+// function randFloat( low, high ) {
 
-	return low + Math.random() * ( high - low );
+// 	return low + Math.random() * ( high - low );
 
-}
+// }
 
-// Random float from <-range/2, range/2> interval
-function randFloatSpread( range ) {
+// // Random float from <-range/2, range/2> interval
+// function randFloatSpread( range ) {
 
-	return range * ( 0.5 - Math.random() );
+// 	return range * ( 0.5 - Math.random() );
 
-}
+// }
 
-// Deterministic pseudo-random float in the interval [ 0, 1 ]
-function seededRandom( s ) {
+// // Deterministic pseudo-random float in the interval [ 0, 1 ]
+// function seededRandom( s ) {
 
-	if ( s !== undefined ) _seed = s;
+// 	if ( s !== undefined ) _seed = s;
 
-	// Mulberry32 generator
+// 	// Mulberry32 generator
 
-	let t = _seed += 0x6D2B79F5;
+// 	let t = _seed += 0x6D2B79F5;
 
-	t = Math.imul( t ^ t >>> 15, t | 1 );
+// 	t = Math.imul( t ^ t >>> 15, t | 1 );
 
-	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );
+// 	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );
 
-	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;
+// 	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;
 
-}
+// }
 
-function degToRad( degrees ) {
+// function degToRad( degrees ) {
 
-	return degrees * DEG2RAD;
+// 	return degrees * DEG2RAD;
 
-}
+// }
 
-function radToDeg( radians ) {
+// function radToDeg( radians ) {
 
-	return radians * RAD2DEG;
+// 	return radians * RAD2DEG;
 
-}
+// }
 
-function isPowerOfTwo( value ) {
+// function isPowerOfTwo( value ) {
 
-	return ( value & ( value - 1 ) ) === 0 && value !== 0;
+// 	return ( value & ( value - 1 ) ) === 0 && value !== 0;
 
-}
+// }
 
-function ceilPowerOfTwo( value ) {
+// function ceilPowerOfTwo( value ) {
 
-	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );
+// 	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );
 
-}
+// }
 
-function floorPowerOfTwo( value ) {
+// function floorPowerOfTwo( value ) {
 
-	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );
+// 	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );
 
-}
+// }
 
-function setQuaternionFromProperEuler( q, a, b, c, order ) {
+// function setQuaternionFromProperEuler( q, a, b, c, order ) {
 
-	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
+// 	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
 
-	// rotations are applied to the axes in the order specified by 'order'
-	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
-	// angles are in radians
+// 	// rotations are applied to the axes in the order specified by 'order'
+// 	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
+// 	// angles are in radians
 
-	const cos = Math.cos;
-	const sin = Math.sin;
+// 	const cos = Math.cos;
+// 	const sin = Math.sin;
 
-	const c2 = cos( b / 2 );
-	const s2 = sin( b / 2 );
+// 	const c2 = cos( b / 2 );
+// 	const s2 = sin( b / 2 );
 
-	const c13 = cos( ( a + c ) / 2 );
-	const s13 = sin( ( a + c ) / 2 );
+// 	const c13 = cos( ( a + c ) / 2 );
+// 	const s13 = sin( ( a + c ) / 2 );
 
-	const c1_3 = cos( ( a - c ) / 2 );
-	const s1_3 = sin( ( a - c ) / 2 );
+// 	const c1_3 = cos( ( a - c ) / 2 );
+// 	const s1_3 = sin( ( a - c ) / 2 );
 
-	const c3_1 = cos( ( c - a ) / 2 );
-	const s3_1 = sin( ( c - a ) / 2 );
+// 	const c3_1 = cos( ( c - a ) / 2 );
+// 	const s3_1 = sin( ( c - a ) / 2 );
 
-	switch ( order ) {
+// 	switch ( order ) {
 
-		case 'XYX':
-			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
-			break;
+// 		case 'XYX':
+// 			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
+// 			break;
 
-		case 'YZY':
-			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
-			break;
+// 		case 'YZY':
+// 			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
+// 			break;
 
-		case 'ZXZ':
-			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
-			break;
+// 		case 'ZXZ':
+// 			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
+// 			break;
 
-		case 'XZX':
-			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
-			break;
+// 		case 'XZX':
+// 			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
+// 			break;
 
-		case 'YXY':
-			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
-			break;
+// 		case 'YXY':
+// 			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
+// 			break;
 
-		case 'ZYZ':
-			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
-			break;
+// 		case 'ZYZ':
+// 			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
+// 			break;
 
-		default:
-			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );
+// 		default:
+// 			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );
 
-	}
+// 	}
 
-}
+// }
 
-function denormalize( value, array ) {
+// function denormalize( value, array ) {
 
-	switch ( array.constructor ) {
+// 	switch ( array.constructor ) {
 
-		case Float32Array:
+// 		case Float32Array:
 
-			return value;
+// 			return value;
 
-		case Uint16Array:
+// 		case Uint16Array:
 
-			return value / 65535.0;
+// 			return value / 65535.0;
 
-		case Uint8Array:
+// 		case Uint8Array:
 
-			return value / 255.0;
+// 			return value / 255.0;
 
-		case Int16Array:
+// 		case Int16Array:
 
-			return Math.max( value / 32767.0, - 1.0 );
+// 			return Math.max( value / 32767.0, - 1.0 );
 
-		case Int8Array:
+// 		case Int8Array:
 
-			return Math.max( value / 127.0, - 1.0 );
+// 			return Math.max( value / 127.0, - 1.0 );
 
-		default:
+// 		default:
 
-			throw new Error( 'Invalid component type.' );
+// 			throw new Error( 'Invalid component type.' );
 
-	}
+// 	}
 
-}
+// }
 
-function normalize( value, array ) {
+// function normalize( value, array ) {
 
-	switch ( array.constructor ) {
+// 	switch ( array.constructor ) {
 
-		case Float32Array:
+// 		case Float32Array:
 
-			return value;
+// 			return value;
 
-		case Uint16Array:
+// 		case Uint16Array:
 
-			return Math.round( value * 65535.0 );
+// 			return Math.round( value * 65535.0 );
 
-		case Uint8Array:
+// 		case Uint8Array:
 
-			return Math.round( value * 255.0 );
+// 			return Math.round( value * 255.0 );
 
-		case Int16Array:
+// 		case Int16Array:
 
-			return Math.round( value * 32767.0 );
+// 			return Math.round( value * 32767.0 );
 
-		case Int8Array:
+// 		case Int8Array:
 
-			return Math.round( value * 127.0 );
+// 			return Math.round( value * 127.0 );
 
-		default:
+// 		default:
 
-			throw new Error( 'Invalid component type.' );
+// 			throw new Error( 'Invalid component type.' );
 
-	}
+// 	}
 
-}
+// }
 
-var MathUtils = /*#__PURE__*/Object.freeze({
-	__proto__: null,
-	DEG2RAD: DEG2RAD,
-	RAD2DEG: RAD2DEG,
-	generateUUID: generateUUID,
-	clamp: clamp,
-	euclideanModulo: euclideanModulo,
-	mapLinear: mapLinear,
-	inverseLerp: inverseLerp,
-	lerp: lerp,
-	damp: damp,
-	pingpong: pingpong,
-	smoothstep: smoothstep,
-	smootherstep: smootherstep,
-	randInt: randInt,
-	randFloat: randFloat,
-	randFloatSpread: randFloatSpread,
-	seededRandom: seededRandom,
-	degToRad: degToRad,
-	radToDeg: radToDeg,
-	isPowerOfTwo: isPowerOfTwo,
-	ceilPowerOfTwo: ceilPowerOfTwo,
-	floorPowerOfTwo: floorPowerOfTwo,
-	setQuaternionFromProperEuler: setQuaternionFromProperEuler,
-	normalize: normalize,
-	denormalize: denormalize
-});
+// var MathUtils = /*#__PURE__*/Object.freeze({
+// 	__proto__: null,
+// 	DEG2RAD: DEG2RAD,
+// 	RAD2DEG: RAD2DEG,
+// 	generateUUID: generateUUID,
+// 	clamp: clamp,
+// 	euclideanModulo: euclideanModulo,
+// 	mapLinear: mapLinear,
+// 	inverseLerp: inverseLerp,
+// 	lerp: lerp,
+// 	damp: damp,
+// 	pingpong: pingpong,
+// 	smoothstep: smoothstep,
+// 	smootherstep: smootherstep,
+// 	randInt: randInt,
+// 	randFloat: randFloat,
+// 	randFloatSpread: randFloatSpread,
+// 	seededRandom: seededRandom,
+// 	degToRad: degToRad,
+// 	radToDeg: radToDeg,
+// 	isPowerOfTwo: isPowerOfTwo,
+// 	ceilPowerOfTwo: ceilPowerOfTwo,
+// 	floorPowerOfTwo: floorPowerOfTwo,
+// 	setQuaternionFromProperEuler: setQuaternionFromProperEuler,
+// 	normalize: normalize,
+// 	denormalize: denormalize
+// });
 
-class Vector2 {
+// class Vector2 {
 
-	constructor( x = 0, y = 0 ) {
+// 	constructor( x = 0, y = 0 ) {
 
-		Vector2.prototype.isVector2 = true;
+// 		Vector2.prototype.isVector2 = true;
 
-		this.x = x;
-		this.y = y;
+// 		this.x = x;
+// 		this.y = y;
 
-	}
+// 	}
 
-	get width() {
+// 	get width() {
 
-		return this.x;
+// 		return this.x;
 
-	}
+// 	}
 
-	set width( value ) {
+// 	set width( value ) {
 
-		this.x = value;
+// 		this.x = value;
 
-	}
+// 	}
 
-	get height() {
+// 	get height() {
 
-		return this.y;
+// 		return this.y;
 
-	}
+// 	}
 
-	set height( value ) {
+// 	set height( value ) {
 
-		this.y = value;
+// 		this.y = value;
 
-	}
+// 	}
 
-	set( x, y ) {
+// 	set( x, y ) {
 
-		this.x = x;
-		this.y = y;
+// 		this.x = x;
+// 		this.y = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setScalar( scalar ) {
+// 	setScalar( scalar ) {
 
-		this.x = scalar;
-		this.y = scalar;
+// 		this.x = scalar;
+// 		this.y = scalar;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setX( x ) {
+// 	setX( x ) {
 
-		this.x = x;
+// 		this.x = x;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setY( y ) {
+// 	setY( y ) {
 
-		this.y = y;
+// 		this.y = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setComponent( index, value ) {
+// 	setComponent( index, value ) {
 
-		switch ( index ) {
+// 		switch ( index ) {
 
-			case 0: this.x = value; break;
-			case 1: this.y = value; break;
-			default: throw new Error( 'index is out of range: ' + index );
+// 			case 0: this.x = value; break;
+// 			case 1: this.y = value; break;
+// 			default: throw new Error( 'index is out of range: ' + index );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getComponent( index ) {
+// 	getComponent( index ) {
 
-		switch ( index ) {
+// 		switch ( index ) {
 
-			case 0: return this.x;
-			case 1: return this.y;
-			default: throw new Error( 'index is out of range: ' + index );
+// 			case 0: return this.x;
+// 			case 1: return this.y;
+// 			default: throw new Error( 'index is out of range: ' + index );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor( this.x, this.y );
+// 		return new this.constructor( this.x, this.y );
 
-	}
+// 	}
 
-	copy( v ) {
+// 	copy( v ) {
 
-		this.x = v.x;
-		this.y = v.y;
+// 		this.x = v.x;
+// 		this.y = v.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	add( v ) {
+// 	add( v ) {
 
-		this.x += v.x;
-		this.y += v.y;
+// 		this.x += v.x;
+// 		this.y += v.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addScalar( s ) {
+// 	addScalar( s ) {
 
-		this.x += s;
-		this.y += s;
+// 		this.x += s;
+// 		this.y += s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addVectors( a, b ) {
+// 	addVectors( a, b ) {
 
-		this.x = a.x + b.x;
-		this.y = a.y + b.y;
+// 		this.x = a.x + b.x;
+// 		this.y = a.y + b.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addScaledVector( v, s ) {
+// 	addScaledVector( v, s ) {
 
-		this.x += v.x * s;
-		this.y += v.y * s;
+// 		this.x += v.x * s;
+// 		this.y += v.y * s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	sub( v ) {
+// 	sub( v ) {
 
-		this.x -= v.x;
-		this.y -= v.y;
+// 		this.x -= v.x;
+// 		this.y -= v.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	subScalar( s ) {
+// 	subScalar( s ) {
 
-		this.x -= s;
-		this.y -= s;
+// 		this.x -= s;
+// 		this.y -= s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	subVectors( a, b ) {
+// 	subVectors( a, b ) {
 
-		this.x = a.x - b.x;
-		this.y = a.y - b.y;
+// 		this.x = a.x - b.x;
+// 		this.y = a.y - b.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiply( v ) {
+// 	multiply( v ) {
 
-		this.x *= v.x;
-		this.y *= v.y;
+// 		this.x *= v.x;
+// 		this.y *= v.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiplyScalar( scalar ) {
+// 	multiplyScalar( scalar ) {
 
-		this.x *= scalar;
-		this.y *= scalar;
+// 		this.x *= scalar;
+// 		this.y *= scalar;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	divide( v ) {
+// 	divide( v ) {
 
-		this.x /= v.x;
-		this.y /= v.y;
+// 		this.x /= v.x;
+// 		this.y /= v.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	divideScalar( scalar ) {
+// 	divideScalar( scalar ) {
 
-		return this.multiplyScalar( 1 / scalar );
+// 		return this.multiplyScalar( 1 / scalar );
 
-	}
+// 	}
 
-	applyMatrix3( m ) {
+// 	applyMatrix3( m ) {
 
-		const x = this.x, y = this.y;
-		const e = m.elements;
+// 		const x = this.x, y = this.y;
+// 		const e = m.elements;
 
-		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
-		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];
+// 		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
+// 		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	min( v ) {
+// 	min( v ) {
 
-		this.x = Math.min( this.x, v.x );
-		this.y = Math.min( this.y, v.y );
+// 		this.x = Math.min( this.x, v.x );
+// 		this.y = Math.min( this.y, v.y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	max( v ) {
+// 	max( v ) {
 
-		this.x = Math.max( this.x, v.x );
-		this.y = Math.max( this.y, v.y );
+// 		this.x = Math.max( this.x, v.x );
+// 		this.y = Math.max( this.y, v.y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clamp( min, max ) {
+// 	clamp( min, max ) {
 
-		// assumes min < max, componentwise
+// 		// assumes min < max, componentwise
 
-		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
-		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
+// 		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
+// 		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clampScalar( minVal, maxVal ) {
+// 	clampScalar( minVal, maxVal ) {
 
-		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
-		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
+// 		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
+// 		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clampLength( min, max ) {
+// 	clampLength( min, max ) {
 
-		const length = this.length();
+// 		const length = this.length();
 
-		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
+// 		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
 
-	}
+// 	}
 
-	floor() {
+// 	floor() {
 
-		this.x = Math.floor( this.x );
-		this.y = Math.floor( this.y );
+// 		this.x = Math.floor( this.x );
+// 		this.y = Math.floor( this.y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	ceil() {
+// 	ceil() {
 
-		this.x = Math.ceil( this.x );
-		this.y = Math.ceil( this.y );
+// 		this.x = Math.ceil( this.x );
+// 		this.y = Math.ceil( this.y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	round() {
+// 	round() {
 
-		this.x = Math.round( this.x );
-		this.y = Math.round( this.y );
+// 		this.x = Math.round( this.x );
+// 		this.y = Math.round( this.y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	roundToZero() {
+// 	roundToZero() {
 
-		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
-		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
+// 		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
+// 		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	negate() {
+// 	negate() {
 
-		this.x = - this.x;
-		this.y = - this.y;
+// 		this.x = - this.x;
+// 		this.y = - this.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dot( v ) {
+// 	dot( v ) {
 
-		return this.x * v.x + this.y * v.y;
+// 		return this.x * v.x + this.y * v.y;
 
-	}
+// 	}
 
-	cross( v ) {
+// 	cross( v ) {
 
-		return this.x * v.y - this.y * v.x;
+// 		return this.x * v.y - this.y * v.x;
 
-	}
+// 	}
 
-	lengthSq() {
+// 	lengthSq() {
 
-		return this.x * this.x + this.y * this.y;
+// 		return this.x * this.x + this.y * this.y;
 
-	}
+// 	}
 
-	length() {
+// 	length() {
 
-		return Math.sqrt( this.x * this.x + this.y * this.y );
+// 		return Math.sqrt( this.x * this.x + this.y * this.y );
 
-	}
+// 	}
 
-	manhattanLength() {
+// 	manhattanLength() {
 
-		return Math.abs( this.x ) + Math.abs( this.y );
+// 		return Math.abs( this.x ) + Math.abs( this.y );
 
-	}
+// 	}
 
-	normalize() {
+// 	normalize() {
 
-		return this.divideScalar( this.length() || 1 );
+// 		return this.divideScalar( this.length() || 1 );
 
-	}
+// 	}
 
-	angle() {
+// 	angle() {
 
-		// computes the angle in radians with respect to the positive x-axis
+// 		// computes the angle in radians with respect to the positive x-axis
 
-		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;
+// 		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;
 
-		return angle;
+// 		return angle;
 
-	}
+// 	}
 
-	distanceTo( v ) {
+// 	distanceTo( v ) {
 
-		return Math.sqrt( this.distanceToSquared( v ) );
+// 		return Math.sqrt( this.distanceToSquared( v ) );
 
-	}
+// 	}
 
-	distanceToSquared( v ) {
+// 	distanceToSquared( v ) {
 
-		const dx = this.x - v.x, dy = this.y - v.y;
-		return dx * dx + dy * dy;
+// 		const dx = this.x - v.x, dy = this.y - v.y;
+// 		return dx * dx + dy * dy;
 
-	}
+// 	}
 
-	manhattanDistanceTo( v ) {
+// 	manhattanDistanceTo( v ) {
 
-		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );
+// 		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );
 
-	}
+// 	}
 
-	setLength( length ) {
+// 	setLength( length ) {
 
-		return this.normalize().multiplyScalar( length );
+// 		return this.normalize().multiplyScalar( length );
 
-	}
+// 	}
 
-	lerp( v, alpha ) {
+// 	lerp( v, alpha ) {
 
-		this.x += ( v.x - this.x ) * alpha;
-		this.y += ( v.y - this.y ) * alpha;
+// 		this.x += ( v.x - this.x ) * alpha;
+// 		this.y += ( v.y - this.y ) * alpha;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lerpVectors( v1, v2, alpha ) {
+// 	lerpVectors( v1, v2, alpha ) {
 
-		this.x = v1.x + ( v2.x - v1.x ) * alpha;
-		this.y = v1.y + ( v2.y - v1.y ) * alpha;
+// 		this.x = v1.x + ( v2.x - v1.x ) * alpha;
+// 		this.y = v1.y + ( v2.y - v1.y ) * alpha;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( v ) {
+// 	equals( v ) {
 
-		return ( ( v.x === this.x ) && ( v.y === this.y ) );
+// 		return ( ( v.x === this.x ) && ( v.y === this.y ) );
 
-	}
+// 	}
 
-	fromArray( array, offset = 0 ) {
+// 	fromArray( array, offset = 0 ) {
 
-		this.x = array[ offset ];
-		this.y = array[ offset + 1 ];
+// 		this.x = array[ offset ];
+// 		this.y = array[ offset + 1 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		array[ offset ] = this.x;
-		array[ offset + 1 ] = this.y;
+// 		array[ offset ] = this.x;
+// 		array[ offset + 1 ] = this.y;
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-	fromBufferAttribute( attribute, index ) {
+// 	fromBufferAttribute( attribute, index ) {
 
-		this.x = attribute.getX( index );
-		this.y = attribute.getY( index );
+// 		this.x = attribute.getX( index );
+// 		this.y = attribute.getY( index );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	rotateAround( center, angle ) {
+// 	rotateAround( center, angle ) {
 
-		const c = Math.cos( angle ), s = Math.sin( angle );
+// 		const c = Math.cos( angle ), s = Math.sin( angle );
 
-		const x = this.x - center.x;
-		const y = this.y - center.y;
+// 		const x = this.x - center.x;
+// 		const y = this.y - center.y;
 
-		this.x = x * c - y * s + center.x;
-		this.y = x * s + y * c + center.y;
+// 		this.x = x * c - y * s + center.x;
+// 		this.y = x * s + y * c + center.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	random() {
+// 	random() {
 
-		this.x = Math.random();
-		this.y = Math.random();
+// 		this.x = Math.random();
+// 		this.y = Math.random();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	*[ Symbol.iterator ]() {
+// 	*[ Symbol.iterator ]() {
 
-		yield this.x;
-		yield this.y;
+// 		yield this.x;
+// 		yield this.y;
 
-	}
+// 	}
 
-}
+// }
 
-class Matrix3 {
+// class Matrix3 {
 
-	constructor() {
+// 	constructor() {
 
-		Matrix3.prototype.isMatrix3 = true;
+// 		Matrix3.prototype.isMatrix3 = true;
 
-		this.elements = [
+// 		this.elements = [
 
-			1, 0, 0,
-			0, 1, 0,
-			0, 0, 1
+// 			1, 0, 0,
+// 			0, 1, 0,
+// 			0, 0, 1
 
-		];
+// 		];
 
-	}
+// 	}
 
-	set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
+// 	set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
-		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
-		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;
+// 		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
+// 		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
+// 		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	identity() {
+// 	identity() {
 
-		this.set(
+// 		this.set(
 
-			1, 0, 0,
-			0, 1, 0,
-			0, 0, 1
+// 			1, 0, 0,
+// 			0, 1, 0,
+// 			0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( m ) {
+// 	copy( m ) {
 
-		const te = this.elements;
-		const me = m.elements;
+// 		const te = this.elements;
+// 		const me = m.elements;
 
-		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
-		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
-		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];
+// 		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
+// 		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
+// 		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	extractBasis( xAxis, yAxis, zAxis ) {
+// 	extractBasis( xAxis, yAxis, zAxis ) {
 
-		xAxis.setFromMatrix3Column( this, 0 );
-		yAxis.setFromMatrix3Column( this, 1 );
-		zAxis.setFromMatrix3Column( this, 2 );
+// 		xAxis.setFromMatrix3Column( this, 0 );
+// 		yAxis.setFromMatrix3Column( this, 1 );
+// 		zAxis.setFromMatrix3Column( this, 2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromMatrix4( m ) {
+// 	setFromMatrix4( m ) {
 
-		const me = m.elements;
+// 		const me = m.elements;
 
-		this.set(
+// 		this.set(
 
-			me[ 0 ], me[ 4 ], me[ 8 ],
-			me[ 1 ], me[ 5 ], me[ 9 ],
-			me[ 2 ], me[ 6 ], me[ 10 ]
+// 			me[ 0 ], me[ 4 ], me[ 8 ],
+// 			me[ 1 ], me[ 5 ], me[ 9 ],
+// 			me[ 2 ], me[ 6 ], me[ 10 ]
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiply( m ) {
+// 	multiply( m ) {
 
-		return this.multiplyMatrices( this, m );
+// 		return this.multiplyMatrices( this, m );
 
-	}
+// 	}
 
-	premultiply( m ) {
+// 	premultiply( m ) {
 
-		return this.multiplyMatrices( m, this );
+// 		return this.multiplyMatrices( m, this );
 
-	}
+// 	}
 
-	multiplyMatrices( a, b ) {
+// 	multiplyMatrices( a, b ) {
 
-		const ae = a.elements;
-		const be = b.elements;
-		const te = this.elements;
+// 		const ae = a.elements;
+// 		const be = b.elements;
+// 		const te = this.elements;
 
-		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
-		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
-		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];
+// 		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
+// 		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
+// 		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];
 
-		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
-		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
-		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];
+// 		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
+// 		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
+// 		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];
 
-		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
-		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
-		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;
+// 		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
+// 		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
+// 		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;
 
-		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
-		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
-		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;
+// 		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
+// 		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
+// 		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;
 
-		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
-		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
-		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;
+// 		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
+// 		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
+// 		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiplyScalar( s ) {
+// 	multiplyScalar( s ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
-		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
-		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
+// 		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
+// 		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
+// 		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	determinant() {
+// 	determinant() {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
-			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
-			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
+// 		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
+// 			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
+// 			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
 
-		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
+// 		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
 
-	}
+// 	}
 
-	invert() {
+// 	invert() {
 
-		const te = this.elements,
+// 		const te = this.elements,
 
-			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
-			n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
-			n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],
+// 			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
+// 			n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
+// 			n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],
 
-			t11 = n33 * n22 - n32 * n23,
-			t12 = n32 * n13 - n33 * n12,
-			t13 = n23 * n12 - n22 * n13,
+// 			t11 = n33 * n22 - n32 * n23,
+// 			t12 = n32 * n13 - n33 * n12,
+// 			t13 = n23 * n12 - n22 * n13,
 
-			det = n11 * t11 + n21 * t12 + n31 * t13;
+// 			det = n11 * t11 + n21 * t12 + n31 * t13;
 
-		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );
+// 		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );
 
-		const detInv = 1 / det;
+// 		const detInv = 1 / det;
 
-		te[ 0 ] = t11 * detInv;
-		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
-		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;
+// 		te[ 0 ] = t11 * detInv;
+// 		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
+// 		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;
 
-		te[ 3 ] = t12 * detInv;
-		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
-		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;
+// 		te[ 3 ] = t12 * detInv;
+// 		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
+// 		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;
 
-		te[ 6 ] = t13 * detInv;
-		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
-		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;
+// 		te[ 6 ] = t13 * detInv;
+// 		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
+// 		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	transpose() {
+// 	transpose() {
 
-		let tmp;
-		const m = this.elements;
+// 		let tmp;
+// 		const m = this.elements;
 
-		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
-		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
-		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
+// 		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
+// 		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
+// 		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getNormalMatrix( matrix4 ) {
+// 	getNormalMatrix( matrix4 ) {
 
-		return this.setFromMatrix4( matrix4 ).invert().transpose();
+// 		return this.setFromMatrix4( matrix4 ).invert().transpose();
 
-	}
+// 	}
 
-	transposeIntoArray( r ) {
+// 	transposeIntoArray( r ) {
 
-		const m = this.elements;
+// 		const m = this.elements;
 
-		r[ 0 ] = m[ 0 ];
-		r[ 1 ] = m[ 3 ];
-		r[ 2 ] = m[ 6 ];
-		r[ 3 ] = m[ 1 ];
-		r[ 4 ] = m[ 4 ];
-		r[ 5 ] = m[ 7 ];
-		r[ 6 ] = m[ 2 ];
-		r[ 7 ] = m[ 5 ];
-		r[ 8 ] = m[ 8 ];
+// 		r[ 0 ] = m[ 0 ];
+// 		r[ 1 ] = m[ 3 ];
+// 		r[ 2 ] = m[ 6 ];
+// 		r[ 3 ] = m[ 1 ];
+// 		r[ 4 ] = m[ 4 ];
+// 		r[ 5 ] = m[ 7 ];
+// 		r[ 6 ] = m[ 2 ];
+// 		r[ 7 ] = m[ 5 ];
+// 		r[ 8 ] = m[ 8 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {
+// 	setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {
 
-		const c = Math.cos( rotation );
-		const s = Math.sin( rotation );
+// 		const c = Math.cos( rotation );
+// 		const s = Math.sin( rotation );
 
-		this.set(
-			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
-			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
-			0, 0, 1
-		);
+// 		this.set(
+// 			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
+// 			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
+// 			0, 0, 1
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	scale( sx, sy ) {
+// 	scale( sx, sy ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
-		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;
+// 		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
+// 		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	rotate( theta ) {
+// 	rotate( theta ) {
 
-		const c = Math.cos( theta );
-		const s = Math.sin( theta );
+// 		const c = Math.cos( theta );
+// 		const s = Math.sin( theta );
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		const a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
-		const a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];
+// 		const a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
+// 		const a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];
 
-		te[ 0 ] = c * a11 + s * a21;
-		te[ 3 ] = c * a12 + s * a22;
-		te[ 6 ] = c * a13 + s * a23;
+// 		te[ 0 ] = c * a11 + s * a21;
+// 		te[ 3 ] = c * a12 + s * a22;
+// 		te[ 6 ] = c * a13 + s * a23;
 
-		te[ 1 ] = - s * a11 + c * a21;
-		te[ 4 ] = - s * a12 + c * a22;
-		te[ 7 ] = - s * a13 + c * a23;
+// 		te[ 1 ] = - s * a11 + c * a21;
+// 		te[ 4 ] = - s * a12 + c * a22;
+// 		te[ 7 ] = - s * a13 + c * a23;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	translate( tx, ty ) {
+// 	translate( tx, ty ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
-		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];
+// 		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
+// 		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( matrix ) {
+// 	equals( matrix ) {
 
-		const te = this.elements;
-		const me = matrix.elements;
+// 		const te = this.elements;
+// 		const me = matrix.elements;
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			if ( te[ i ] !== me[ i ] ) return false;
+// 			if ( te[ i ] !== me[ i ] ) return false;
 
-		}
+// 		}
 
-		return true;
+// 		return true;
 
-	}
+// 	}
 
-	fromArray( array, offset = 0 ) {
+// 	fromArray( array, offset = 0 ) {
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			this.elements[ i ] = array[ i + offset ];
+// 			this.elements[ i ] = array[ i + offset ];
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		array[ offset ] = te[ 0 ];
-		array[ offset + 1 ] = te[ 1 ];
-		array[ offset + 2 ] = te[ 2 ];
+// 		array[ offset ] = te[ 0 ];
+// 		array[ offset + 1 ] = te[ 1 ];
+// 		array[ offset + 2 ] = te[ 2 ];
 
-		array[ offset + 3 ] = te[ 3 ];
-		array[ offset + 4 ] = te[ 4 ];
-		array[ offset + 5 ] = te[ 5 ];
+// 		array[ offset + 3 ] = te[ 3 ];
+// 		array[ offset + 4 ] = te[ 4 ];
+// 		array[ offset + 5 ] = te[ 5 ];
 
-		array[ offset + 6 ] = te[ 6 ];
-		array[ offset + 7 ] = te[ 7 ];
-		array[ offset + 8 ] = te[ 8 ];
+// 		array[ offset + 6 ] = te[ 6 ];
+// 		array[ offset + 7 ] = te[ 7 ];
+// 		array[ offset + 8 ] = te[ 8 ];
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().fromArray( this.elements );
+// 		return new this.constructor().fromArray( this.elements );
 
-	}
+// 	}
 
-}
+// }
 
-function arrayNeedsUint32( array ) {
+// function arrayNeedsUint32( array ) {
 
-	// assumes larger values usually on last
+// 	// assumes larger values usually on last
 
-	for ( let i = array.length - 1; i >= 0; -- i ) {
+// 	for ( let i = array.length - 1; i >= 0; -- i ) {
 
-		if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565
+// 		if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565
 
-	}
+// 	}
 
-	return false;
+// 	return false;
 
-}
+// }
 
-const TYPED_ARRAYS = {
-	Int8Array: Int8Array,
-	Uint8Array: Uint8Array,
-	Uint8ClampedArray: Uint8ClampedArray,
-	Int16Array: Int16Array,
-	Uint16Array: Uint16Array,
-	Int32Array: Int32Array,
-	Uint32Array: Uint32Array,
-	Float32Array: Float32Array,
-	Float64Array: Float64Array
-};
+// const TYPED_ARRAYS = {
+// 	Int8Array: Int8Array,
+// 	Uint8Array: Uint8Array,
+// 	Uint8ClampedArray: Uint8ClampedArray,
+// 	Int16Array: Int16Array,
+// 	Uint16Array: Uint16Array,
+// 	Int32Array: Int32Array,
+// 	Uint32Array: Uint32Array,
+// 	Float32Array: Float32Array,
+// 	Float64Array: Float64Array
+// };
 
-function getTypedArray( type, buffer ) {
+// function getTypedArray( type, buffer ) {
 
-	return new TYPED_ARRAYS[ type ]( buffer );
+// 	return new TYPED_ARRAYS[ type ]( buffer );
 
-}
+// }
 
-function createElementNS( name ) {
+// function createElementNS( name ) {
 
-	return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );
+// 	return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );
 
-}
+// }
 
-function SRGBToLinear( c ) {
+// function SRGBToLinear( c ) {
 
-	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );
+// 	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );
 
-}
+// }
 
-function LinearToSRGB( c ) {
+// function LinearToSRGB( c ) {
 
-	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;
+// 	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;
 
-}
+// }
 
-// JavaScript RGB-to-RGB transforms, defined as
-// FN[InputColorSpace][OutputColorSpace] callback functions.
-const FN = {
-	[ SRGBColorSpace ]: { [ LinearSRGBColorSpace ]: SRGBToLinear },
-	[ LinearSRGBColorSpace ]: { [ SRGBColorSpace ]: LinearToSRGB },
-};
+// // JavaScript RGB-to-RGB transforms, defined as
+// // FN[InputColorSpace][OutputColorSpace] callback functions.
+// const FN = {
+// 	[ SRGBColorSpace ]: { [ LinearSRGBColorSpace ]: SRGBToLinear },
+// 	[ LinearSRGBColorSpace ]: { [ SRGBColorSpace ]: LinearToSRGB },
+// };
 
-const ColorManagement = {
+// const ColorManagement = {
 
-	legacyMode: true,
+// 	legacyMode: true,
 
-	get workingColorSpace() {
+// 	get workingColorSpace() {
 
-		return LinearSRGBColorSpace;
+// 		return LinearSRGBColorSpace;
 
-	},
+// 	},
 
-	set workingColorSpace( colorSpace ) {
+// 	set workingColorSpace( colorSpace ) {
 
-		console.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );
+// 		console.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );
 
-	},
+// 	},
 
-	convert: function ( color, sourceColorSpace, targetColorSpace ) {
+// 	convert: function ( color, sourceColorSpace, targetColorSpace ) {
 
-		if ( this.legacyMode || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {
+// 		if ( this.legacyMode || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {
 
-			return color;
+// 			return color;
 
-		}
+// 		}
 
-		if ( FN[ sourceColorSpace ] && FN[ sourceColorSpace ][ targetColorSpace ] !== undefined ) {
+// 		if ( FN[ sourceColorSpace ] && FN[ sourceColorSpace ][ targetColorSpace ] !== undefined ) {
 
-			const fn = FN[ sourceColorSpace ][ targetColorSpace ];
+// 			const fn = FN[ sourceColorSpace ][ targetColorSpace ];
 
-			color.r = fn( color.r );
-			color.g = fn( color.g );
-			color.b = fn( color.b );
+// 			color.r = fn( color.r );
+// 			color.g = fn( color.g );
+// 			color.b = fn( color.b );
 
-			return color;
+// 			return color;
 
-		}
+// 		}
 
-		throw new Error( 'Unsupported color space conversion.' );
+// 		throw new Error( 'Unsupported color space conversion.' );
 
-	},
+// 	},
 
-	fromWorkingColorSpace: function ( color, targetColorSpace ) {
+// 	fromWorkingColorSpace: function ( color, targetColorSpace ) {
 
-		return this.convert( color, this.workingColorSpace, targetColorSpace );
+// 		return this.convert( color, this.workingColorSpace, targetColorSpace );
 
-	},
+// 	},
 
-	toWorkingColorSpace: function ( color, sourceColorSpace ) {
+// 	toWorkingColorSpace: function ( color, sourceColorSpace ) {
 
-		return this.convert( color, sourceColorSpace, this.workingColorSpace );
+// 		return this.convert( color, sourceColorSpace, this.workingColorSpace );
 
-	},
+// 	},
 
-};
+// };
 
-const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
-	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
-	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
-	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
-	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
-	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
-	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
-	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
-	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
-	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
-	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
-	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
-	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
-	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
-	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
-	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
-	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
-	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
-	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
-	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
-	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
-	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
-	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
-	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
+// const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
+// 	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
+// 	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
+// 	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
+// 	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
+// 	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
+// 	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
+// 	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
+// 	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
+// 	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
+// 	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
+// 	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
+// 	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
+// 	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
+// 	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
+// 	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
+// 	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
+// 	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
+// 	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
+// 	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
+// 	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
+// 	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
+// 	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
+// 	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
 
-const _rgb = { r: 0, g: 0, b: 0 };
-const _hslA = { h: 0, s: 0, l: 0 };
-const _hslB = { h: 0, s: 0, l: 0 };
+// const _rgb = { r: 0, g: 0, b: 0 };
+// const _hslA = { h: 0, s: 0, l: 0 };
+// const _hslB = { h: 0, s: 0, l: 0 };
 
-function hue2rgb( p, q, t ) {
+// function hue2rgb( p, q, t ) {
 
-	if ( t < 0 ) t += 1;
-	if ( t > 1 ) t -= 1;
-	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
-	if ( t < 1 / 2 ) return q;
-	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
-	return p;
+// 	if ( t < 0 ) t += 1;
+// 	if ( t > 1 ) t -= 1;
+// 	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
+// 	if ( t < 1 / 2 ) return q;
+// 	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
+// 	return p;
 
-}
+// }
 
-function toComponents( source, target ) {
+// function toComponents( source, target ) {
 
-	target.r = source.r;
-	target.g = source.g;
-	target.b = source.b;
+// 	target.r = source.r;
+// 	target.g = source.g;
+// 	target.b = source.b;
 
-	return target;
+// 	return target;
 
-}
+// }
 
-class Color {
+// class Color {
 
-	constructor( r, g, b ) {
+// 	constructor( r, g, b ) {
 
-		this.isColor = true;
+// 		this.isColor = true;
 
-		this.r = 1;
-		this.g = 1;
-		this.b = 1;
+// 		this.r = 1;
+// 		this.g = 1;
+// 		this.b = 1;
 
-		if ( g === undefined && b === undefined ) {
+// 		if ( g === undefined && b === undefined ) {
 
-			// r is THREE.Color, hex or string
-			return this.set( r );
+// 			// r is THREE.Color, hex or string
+// 			return this.set( r );
 
-		}
+// 		}
 
-		return this.setRGB( r, g, b );
+// 		return this.setRGB( r, g, b );
 
-	}
+// 	}
 
-	set( value ) {
+// 	set( value ) {
 
-		if ( value && value.isColor ) {
+// 		if ( value && value.isColor ) {
 
-			this.copy( value );
+// 			this.copy( value );
 
-		} else if ( typeof value === 'number' ) {
+// 		} else if ( typeof value === 'number' ) {
 
-			this.setHex( value );
+// 			this.setHex( value );
 
-		} else if ( typeof value === 'string' ) {
+// 		} else if ( typeof value === 'string' ) {
 
-			this.setStyle( value );
+// 			this.setStyle( value );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setScalar( scalar ) {
+// 	setScalar( scalar ) {
 
-		this.r = scalar;
-		this.g = scalar;
-		this.b = scalar;
+// 		this.r = scalar;
+// 		this.g = scalar;
+// 		this.b = scalar;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setHex( hex, colorSpace = SRGBColorSpace ) {
+// 	setHex( hex, colorSpace = SRGBColorSpace ) {
 
-		hex = Math.floor( hex );
+// 		hex = Math.floor( hex );
 
-		this.r = ( hex >> 16 & 255 ) / 255;
-		this.g = ( hex >> 8 & 255 ) / 255;
-		this.b = ( hex & 255 ) / 255;
+// 		this.r = ( hex >> 16 & 255 ) / 255;
+// 		this.g = ( hex >> 8 & 255 ) / 255;
+// 		this.b = ( hex & 255 ) / 255;
 
-		ColorManagement.toWorkingColorSpace( this, colorSpace );
+// 		ColorManagement.toWorkingColorSpace( this, colorSpace );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setRGB( r, g, b, colorSpace = LinearSRGBColorSpace ) {
+// 	setRGB( r, g, b, colorSpace = LinearSRGBColorSpace ) {
 
-		this.r = r;
-		this.g = g;
-		this.b = b;
+// 		this.r = r;
+// 		this.g = g;
+// 		this.b = b;
 
-		ColorManagement.toWorkingColorSpace( this, colorSpace );
+// 		ColorManagement.toWorkingColorSpace( this, colorSpace );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setHSL( h, s, l, colorSpace = LinearSRGBColorSpace ) {
+// 	setHSL( h, s, l, colorSpace = LinearSRGBColorSpace ) {
 
-		// h,s,l ranges are in 0.0 - 1.0
-		h = euclideanModulo( h, 1 );
-		s = clamp( s, 0, 1 );
-		l = clamp( l, 0, 1 );
+// 		// h,s,l ranges are in 0.0 - 1.0
+// 		h = euclideanModulo( h, 1 );
+// 		s = clamp( s, 0, 1 );
+// 		l = clamp( l, 0, 1 );
 
-		if ( s === 0 ) {
+// 		if ( s === 0 ) {
 
-			this.r = this.g = this.b = l;
+// 			this.r = this.g = this.b = l;
 
-		} else {
+// 		} else {
 
-			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
-			const q = ( 2 * l ) - p;
+// 			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
+// 			const q = ( 2 * l ) - p;
 
-			this.r = hue2rgb( q, p, h + 1 / 3 );
-			this.g = hue2rgb( q, p, h );
-			this.b = hue2rgb( q, p, h - 1 / 3 );
+// 			this.r = hue2rgb( q, p, h + 1 / 3 );
+// 			this.g = hue2rgb( q, p, h );
+// 			this.b = hue2rgb( q, p, h - 1 / 3 );
 
-		}
+// 		}
 
-		ColorManagement.toWorkingColorSpace( this, colorSpace );
+// 		ColorManagement.toWorkingColorSpace( this, colorSpace );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setStyle( style, colorSpace = SRGBColorSpace ) {
+// 	setStyle( style, colorSpace = SRGBColorSpace ) {
 
-		function handleAlpha( string ) {
+// 		function handleAlpha( string ) {
 
-			if ( string === undefined ) return;
+// 			if ( string === undefined ) return;
 
-			if ( parseFloat( string ) < 1 ) {
+// 			if ( parseFloat( string ) < 1 ) {
 
-				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
+// 				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
 
-			}
+// 			}
 
-		}
+// 		}
 
 
-		let m;
+// 		let m;
 
-		if ( m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec( style ) ) {
+// 		if ( m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec( style ) ) {
 
-			// rgb / hsl
+// 			// rgb / hsl
 
-			let color;
-			const name = m[ 1 ];
-			const components = m[ 2 ];
+// 			let color;
+// 			const name = m[ 1 ];
+// 			const components = m[ 2 ];
 
-			switch ( name ) {
+// 			switch ( name ) {
 
-				case 'rgb':
-				case 'rgba':
+// 				case 'rgb':
+// 				case 'rgba':
 
-					if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {
+// 					if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {
 
-						// rgb(255,0,0) rgba(255,0,0,0.5)
-						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
-						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
-						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
+// 						// rgb(255,0,0) rgba(255,0,0,0.5)
+// 						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
+// 						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
+// 						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
 
-						ColorManagement.toWorkingColorSpace( this, colorSpace );
+// 						ColorManagement.toWorkingColorSpace( this, colorSpace );
 
-						handleAlpha( color[ 4 ] );
+// 						handleAlpha( color[ 4 ] );
 
-						return this;
+// 						return this;
 
-					}
+// 					}
 
-					if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {
+// 					if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {
 
-						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
-						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
-						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
-						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
+// 						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
+// 						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
+// 						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
+// 						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
 
-						ColorManagement.toWorkingColorSpace( this, colorSpace );
+// 						ColorManagement.toWorkingColorSpace( this, colorSpace );
 
-						handleAlpha( color[ 4 ] );
+// 						handleAlpha( color[ 4 ] );
 
-						return this;
+// 						return this;
 
-					}
+// 					}
 
-					break;
+// 					break;
 
-				case 'hsl':
-				case 'hsla':
+// 				case 'hsl':
+// 				case 'hsla':
 
-					if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {
+// 					if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {
 
-						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
-						const h = parseFloat( color[ 1 ] ) / 360;
-						const s = parseFloat( color[ 2 ] ) / 100;
-						const l = parseFloat( color[ 3 ] ) / 100;
+// 						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
+// 						const h = parseFloat( color[ 1 ] ) / 360;
+// 						const s = parseFloat( color[ 2 ] ) / 100;
+// 						const l = parseFloat( color[ 3 ] ) / 100;
 
-						handleAlpha( color[ 4 ] );
+// 						handleAlpha( color[ 4 ] );
 
-						return this.setHSL( h, s, l, colorSpace );
+// 						return this.setHSL( h, s, l, colorSpace );
 
-					}
+// 					}
 
-					break;
+// 					break;
 
-			}
+// 			}
 
-		} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {
+// 		} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {
 
-			// hex color
+// 			// hex color
 
-			const hex = m[ 1 ];
-			const size = hex.length;
+// 			const hex = m[ 1 ];
+// 			const size = hex.length;
 
-			if ( size === 3 ) {
+// 			if ( size === 3 ) {
 
-				// #ff0
-				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
-				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
-				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
+// 				// #ff0
+// 				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
+// 				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
+// 				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
 
-				ColorManagement.toWorkingColorSpace( this, colorSpace );
+// 				ColorManagement.toWorkingColorSpace( this, colorSpace );
 
-				return this;
+// 				return this;
 
-			} else if ( size === 6 ) {
+// 			} else if ( size === 6 ) {
 
-				// #ff0000
-				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
-				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
-				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
+// 				// #ff0000
+// 				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
+// 				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
+// 				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
 
-				ColorManagement.toWorkingColorSpace( this, colorSpace );
+// 				ColorManagement.toWorkingColorSpace( this, colorSpace );
 
-				return this;
+// 				return this;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( style && style.length > 0 ) {
+// 		if ( style && style.length > 0 ) {
 
-			return this.setColorName( style, colorSpace );
+// 			return this.setColorName( style, colorSpace );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setColorName( style, colorSpace = SRGBColorSpace ) {
+// 	setColorName( style, colorSpace = SRGBColorSpace ) {
 
-		// color keywords
-		const hex = _colorKeywords[ style.toLowerCase() ];
+// 		// color keywords
+// 		const hex = _colorKeywords[ style.toLowerCase() ];
 
-		if ( hex !== undefined ) {
+// 		if ( hex !== undefined ) {
 
-			// red
-			this.setHex( hex, colorSpace );
+// 			// red
+// 			this.setHex( hex, colorSpace );
 
-		} else {
+// 		} else {
 
-			// unknown color
-			console.warn( 'THREE.Color: Unknown color ' + style );
+// 			// unknown color
+// 			console.warn( 'THREE.Color: Unknown color ' + style );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor( this.r, this.g, this.b );
+// 		return new this.constructor( this.r, this.g, this.b );
 
-	}
+// 	}
 
-	copy( color ) {
+// 	copy( color ) {
 
-		this.r = color.r;
-		this.g = color.g;
-		this.b = color.b;
+// 		this.r = color.r;
+// 		this.g = color.g;
+// 		this.b = color.b;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copySRGBToLinear( color ) {
+// 	copySRGBToLinear( color ) {
 
-		this.r = SRGBToLinear( color.r );
-		this.g = SRGBToLinear( color.g );
-		this.b = SRGBToLinear( color.b );
+// 		this.r = SRGBToLinear( color.r );
+// 		this.g = SRGBToLinear( color.g );
+// 		this.b = SRGBToLinear( color.b );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copyLinearToSRGB( color ) {
+// 	copyLinearToSRGB( color ) {
 
-		this.r = LinearToSRGB( color.r );
-		this.g = LinearToSRGB( color.g );
-		this.b = LinearToSRGB( color.b );
+// 		this.r = LinearToSRGB( color.r );
+// 		this.g = LinearToSRGB( color.g );
+// 		this.b = LinearToSRGB( color.b );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	convertSRGBToLinear() {
+// 	convertSRGBToLinear() {
 
-		this.copySRGBToLinear( this );
+// 		this.copySRGBToLinear( this );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	convertLinearToSRGB() {
+// 	convertLinearToSRGB() {
 
-		this.copyLinearToSRGB( this );
+// 		this.copyLinearToSRGB( this );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getHex( colorSpace = SRGBColorSpace ) {
+// 	getHex( colorSpace = SRGBColorSpace ) {
 
-		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );
+// 		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );
 
-		return clamp( _rgb.r * 255, 0, 255 ) << 16 ^ clamp( _rgb.g * 255, 0, 255 ) << 8 ^ clamp( _rgb.b * 255, 0, 255 ) << 0;
+// 		return clamp( _rgb.r * 255, 0, 255 ) << 16 ^ clamp( _rgb.g * 255, 0, 255 ) << 8 ^ clamp( _rgb.b * 255, 0, 255 ) << 0;
 
-	}
+// 	}
 
-	getHexString( colorSpace = SRGBColorSpace ) {
+// 	getHexString( colorSpace = SRGBColorSpace ) {
 
-		return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );
+// 		return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );
 
-	}
+// 	}
 
-	getHSL( target, colorSpace = LinearSRGBColorSpace ) {
+// 	getHSL( target, colorSpace = LinearSRGBColorSpace ) {
 
-		// h,s,l ranges are in 0.0 - 1.0
+// 		// h,s,l ranges are in 0.0 - 1.0
 
-		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );
+// 		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );
 
-		const r = _rgb.r, g = _rgb.g, b = _rgb.b;
+// 		const r = _rgb.r, g = _rgb.g, b = _rgb.b;
 
-		const max = Math.max( r, g, b );
-		const min = Math.min( r, g, b );
+// 		const max = Math.max( r, g, b );
+// 		const min = Math.min( r, g, b );
 
-		let hue, saturation;
-		const lightness = ( min + max ) / 2.0;
+// 		let hue, saturation;
+// 		const lightness = ( min + max ) / 2.0;
 
-		if ( min === max ) {
+// 		if ( min === max ) {
 
-			hue = 0;
-			saturation = 0;
+// 			hue = 0;
+// 			saturation = 0;
 
-		} else {
+// 		} else {
 
-			const delta = max - min;
+// 			const delta = max - min;
 
-			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
+// 			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
 
-			switch ( max ) {
+// 			switch ( max ) {
 
-				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
-				case g: hue = ( b - r ) / delta + 2; break;
-				case b: hue = ( r - g ) / delta + 4; break;
+// 				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
+// 				case g: hue = ( b - r ) / delta + 2; break;
+// 				case b: hue = ( r - g ) / delta + 4; break;
 
-			}
+// 			}
 
-			hue /= 6;
+// 			hue /= 6;
 
-		}
+// 		}
 
-		target.h = hue;
-		target.s = saturation;
-		target.l = lightness;
+// 		target.h = hue;
+// 		target.s = saturation;
+// 		target.l = lightness;
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	getRGB( target, colorSpace = LinearSRGBColorSpace ) {
+// 	getRGB( target, colorSpace = LinearSRGBColorSpace ) {
 
-		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );
+// 		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );
 
-		target.r = _rgb.r;
-		target.g = _rgb.g;
-		target.b = _rgb.b;
+// 		target.r = _rgb.r;
+// 		target.g = _rgb.g;
+// 		target.b = _rgb.b;
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	getStyle( colorSpace = SRGBColorSpace ) {
+// 	getStyle( colorSpace = SRGBColorSpace ) {
 
-		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );
+// 		ColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );
 
-		if ( colorSpace !== SRGBColorSpace ) {
+// 		if ( colorSpace !== SRGBColorSpace ) {
 
-			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
-			return `color(${ colorSpace } ${ _rgb.r } ${ _rgb.g } ${ _rgb.b })`;
+// 			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
+// 			return `color(${ colorSpace } ${ _rgb.r } ${ _rgb.g } ${ _rgb.b })`;
 
-		}
+// 		}
 
-		return `rgb(${( _rgb.r * 255 ) | 0},${( _rgb.g * 255 ) | 0},${( _rgb.b * 255 ) | 0})`;
+// 		return `rgb(${( _rgb.r * 255 ) | 0},${( _rgb.g * 255 ) | 0},${( _rgb.b * 255 ) | 0})`;
 
-	}
+// 	}
 
-	offsetHSL( h, s, l ) {
+// 	offsetHSL( h, s, l ) {
 
-		this.getHSL( _hslA );
+// 		this.getHSL( _hslA );
 
-		_hslA.h += h; _hslA.s += s; _hslA.l += l;
+// 		_hslA.h += h; _hslA.s += s; _hslA.l += l;
 
-		this.setHSL( _hslA.h, _hslA.s, _hslA.l );
+// 		this.setHSL( _hslA.h, _hslA.s, _hslA.l );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	add( color ) {
+// 	add( color ) {
 
-		this.r += color.r;
-		this.g += color.g;
-		this.b += color.b;
+// 		this.r += color.r;
+// 		this.g += color.g;
+// 		this.b += color.b;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addColors( color1, color2 ) {
+// 	addColors( color1, color2 ) {
 
-		this.r = color1.r + color2.r;
-		this.g = color1.g + color2.g;
-		this.b = color1.b + color2.b;
+// 		this.r = color1.r + color2.r;
+// 		this.g = color1.g + color2.g;
+// 		this.b = color1.b + color2.b;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addScalar( s ) {
+// 	addScalar( s ) {
 
-		this.r += s;
-		this.g += s;
-		this.b += s;
+// 		this.r += s;
+// 		this.g += s;
+// 		this.b += s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	sub( color ) {
+// 	sub( color ) {
 
-		this.r = Math.max( 0, this.r - color.r );
-		this.g = Math.max( 0, this.g - color.g );
-		this.b = Math.max( 0, this.b - color.b );
+// 		this.r = Math.max( 0, this.r - color.r );
+// 		this.g = Math.max( 0, this.g - color.g );
+// 		this.b = Math.max( 0, this.b - color.b );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiply( color ) {
+// 	multiply( color ) {
 
-		this.r *= color.r;
-		this.g *= color.g;
-		this.b *= color.b;
+// 		this.r *= color.r;
+// 		this.g *= color.g;
+// 		this.b *= color.b;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiplyScalar( s ) {
+// 	multiplyScalar( s ) {
 
-		this.r *= s;
-		this.g *= s;
-		this.b *= s;
+// 		this.r *= s;
+// 		this.g *= s;
+// 		this.b *= s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lerp( color, alpha ) {
+// 	lerp( color, alpha ) {
 
-		this.r += ( color.r - this.r ) * alpha;
-		this.g += ( color.g - this.g ) * alpha;
-		this.b += ( color.b - this.b ) * alpha;
+// 		this.r += ( color.r - this.r ) * alpha;
+// 		this.g += ( color.g - this.g ) * alpha;
+// 		this.b += ( color.b - this.b ) * alpha;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lerpColors( color1, color2, alpha ) {
+// 	lerpColors( color1, color2, alpha ) {
 
-		this.r = color1.r + ( color2.r - color1.r ) * alpha;
-		this.g = color1.g + ( color2.g - color1.g ) * alpha;
-		this.b = color1.b + ( color2.b - color1.b ) * alpha;
+// 		this.r = color1.r + ( color2.r - color1.r ) * alpha;
+// 		this.g = color1.g + ( color2.g - color1.g ) * alpha;
+// 		this.b = color1.b + ( color2.b - color1.b ) * alpha;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lerpHSL( color, alpha ) {
+// 	lerpHSL( color, alpha ) {
 
-		this.getHSL( _hslA );
-		color.getHSL( _hslB );
+// 		this.getHSL( _hslA );
+// 		color.getHSL( _hslB );
 
-		const h = lerp( _hslA.h, _hslB.h, alpha );
-		const s = lerp( _hslA.s, _hslB.s, alpha );
-		const l = lerp( _hslA.l, _hslB.l, alpha );
+// 		const h = lerp( _hslA.h, _hslB.h, alpha );
+// 		const s = lerp( _hslA.s, _hslB.s, alpha );
+// 		const l = lerp( _hslA.l, _hslB.l, alpha );
 
-		this.setHSL( h, s, l );
+// 		this.setHSL( h, s, l );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( c ) {
+// 	equals( c ) {
 
-		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
+// 		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
 
-	}
+// 	}
 
-	fromArray( array, offset = 0 ) {
+// 	fromArray( array, offset = 0 ) {
 
-		this.r = array[ offset ];
-		this.g = array[ offset + 1 ];
-		this.b = array[ offset + 2 ];
+// 		this.r = array[ offset ];
+// 		this.g = array[ offset + 1 ];
+// 		this.b = array[ offset + 2 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		array[ offset ] = this.r;
-		array[ offset + 1 ] = this.g;
-		array[ offset + 2 ] = this.b;
+// 		array[ offset ] = this.r;
+// 		array[ offset + 1 ] = this.g;
+// 		array[ offset + 2 ] = this.b;
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-	fromBufferAttribute( attribute, index ) {
+// 	fromBufferAttribute( attribute, index ) {
 
-		this.r = attribute.getX( index );
-		this.g = attribute.getY( index );
-		this.b = attribute.getZ( index );
+// 		this.r = attribute.getX( index );
+// 		this.g = attribute.getY( index );
+// 		this.b = attribute.getZ( index );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		return this.getHex();
+// 		return this.getHex();
 
-	}
+// 	}
 
-	*[ Symbol.iterator ]() {
+// 	*[ Symbol.iterator ]() {
 
-		yield this.r;
-		yield this.g;
-		yield this.b;
+// 		yield this.r;
+// 		yield this.g;
+// 		yield this.b;
 
-	}
+// 	}
 
-}
+// }
 
-Color.NAMES = _colorKeywords;
+// Color.NAMES = _colorKeywords;
 
-let _canvas;
+// let _canvas;
 
-class ImageUtils {
+// class ImageUtils {
 
-	static getDataURL( image ) {
+// 	static getDataURL( image ) {
 
-		if ( /^data:/i.test( image.src ) ) {
+// 		if ( /^data:/i.test( image.src ) ) {
 
-			return image.src;
+// 			return image.src;
 
-		}
+// 		}
 
-		if ( typeof HTMLCanvasElement == 'undefined' ) {
+// 		if ( typeof HTMLCanvasElement == 'undefined' ) {
 
-			return image.src;
+// 			return image.src;
 
-		}
+// 		}
 
-		let canvas;
+// 		let canvas;
 
-		if ( image instanceof HTMLCanvasElement ) {
+// 		if ( image instanceof HTMLCanvasElement ) {
 
-			canvas = image;
+// 			canvas = image;
 
-		} else {
+// 		} else {
 
-			if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );
+// 			if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );
 
-			_canvas.width = image.width;
-			_canvas.height = image.height;
+// 			_canvas.width = image.width;
+// 			_canvas.height = image.height;
 
-			const context = _canvas.getContext( '2d' );
+// 			const context = _canvas.getContext( '2d' );
 
-			if ( image instanceof ImageData ) {
+// 			if ( image instanceof ImageData ) {
 
-				context.putImageData( image, 0, 0 );
+// 				context.putImageData( image, 0, 0 );
 
-			} else {
+// 			} else {
 
-				context.drawImage( image, 0, 0, image.width, image.height );
+// 				context.drawImage( image, 0, 0, image.width, image.height );
 
-			}
+// 			}
 
-			canvas = _canvas;
+// 			canvas = _canvas;
 
-		}
+// 		}
 
-		if ( canvas.width > 2048 || canvas.height > 2048 ) {
+// 		if ( canvas.width > 2048 || canvas.height > 2048 ) {
 
-			console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );
+// 			console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );
 
-			return canvas.toDataURL( 'image/jpeg', 0.6 );
+// 			return canvas.toDataURL( 'image/jpeg', 0.6 );
 
-		} else {
+// 		} else {
 
-			return canvas.toDataURL( 'image/png' );
+// 			return canvas.toDataURL( 'image/png' );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	static sRGBToLinear( image ) {
+// 	static sRGBToLinear( image ) {
 
-		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
-			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
-			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
+// 		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
+// 			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
+// 			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
 
-			const canvas = createElementNS( 'canvas' );
+// 			const canvas = createElementNS( 'canvas' );
 
-			canvas.width = image.width;
-			canvas.height = image.height;
+// 			canvas.width = image.width;
+// 			canvas.height = image.height;
 
-			const context = canvas.getContext( '2d' );
-			context.drawImage( image, 0, 0, image.width, image.height );
+// 			const context = canvas.getContext( '2d' );
+// 			context.drawImage( image, 0, 0, image.width, image.height );
 
-			const imageData = context.getImageData( 0, 0, image.width, image.height );
-			const data = imageData.data;
+// 			const imageData = context.getImageData( 0, 0, image.width, image.height );
+// 			const data = imageData.data;
 
-			for ( let i = 0; i < data.length; i ++ ) {
+// 			for ( let i = 0; i < data.length; i ++ ) {
 
-				data[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;
+// 				data[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;
 
-			}
+// 			}
 
-			context.putImageData( imageData, 0, 0 );
+// 			context.putImageData( imageData, 0, 0 );
 
-			return canvas;
+// 			return canvas;
 
-		} else if ( image.data ) {
+// 		} else if ( image.data ) {
 
-			const data = image.data.slice( 0 );
+// 			const data = image.data.slice( 0 );
 
-			for ( let i = 0; i < data.length; i ++ ) {
+// 			for ( let i = 0; i < data.length; i ++ ) {
 
-				if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {
+// 				if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {
 
-					data[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );
+// 					data[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );
 
-				} else {
+// 				} else {
 
-					// assuming float
+// 					// assuming float
 
-					data[ i ] = SRGBToLinear( data[ i ] );
+// 					data[ i ] = SRGBToLinear( data[ i ] );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			return {
-				data: data,
-				width: image.width,
-				height: image.height
-			};
+// 			return {
+// 				data: data,
+// 				width: image.width,
+// 				height: image.height
+// 			};
 
-		} else {
+// 		} else {
 
-			console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
-			return image;
+// 			console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
+// 			return image;
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-class Source {
+// class Source {
 
-	constructor( data = null ) {
+// 	constructor( data = null ) {
 
-		this.isSource = true;
+// 		this.isSource = true;
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		this.data = data;
+// 		this.data = data;
 
-		this.version = 0;
+// 		this.version = 0;
 
-	}
+// 	}
 
-	set needsUpdate( value ) {
+// 	set needsUpdate( value ) {
 
-		if ( value === true ) this.version ++;
+// 		if ( value === true ) this.version ++;
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const isRootObject = ( meta === undefined || typeof meta === 'string' );
+// 		const isRootObject = ( meta === undefined || typeof meta === 'string' );
 
-		if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {
+// 		if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {
 
-			return meta.images[ this.uuid ];
+// 			return meta.images[ this.uuid ];
 
-		}
+// 		}
 
-		const output = {
-			uuid: this.uuid,
-			url: ''
-		};
+// 		const output = {
+// 			uuid: this.uuid,
+// 			url: ''
+// 		};
 
-		const data = this.data;
+// 		const data = this.data;
 
-		if ( data !== null ) {
+// 		if ( data !== null ) {
 
-			let url;
+// 			let url;
 
-			if ( Array.isArray( data ) ) {
+// 			if ( Array.isArray( data ) ) {
 
-				// cube texture
+// 				// cube texture
 
-				url = [];
+// 				url = [];
 
-				for ( let i = 0, l = data.length; i < l; i ++ ) {
+// 				for ( let i = 0, l = data.length; i < l; i ++ ) {
 
-					if ( data[ i ].isDataTexture ) {
+// 					if ( data[ i ].isDataTexture ) {
 
-						url.push( serializeImage( data[ i ].image ) );
+// 						url.push( serializeImage( data[ i ].image ) );
 
-					} else {
+// 					} else {
 
-						url.push( serializeImage( data[ i ] ) );
+// 						url.push( serializeImage( data[ i ] ) );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				// texture
+// 				// texture
 
-				url = serializeImage( data );
+// 				url = serializeImage( data );
 
-			}
+// 			}
 
-			output.url = url;
+// 			output.url = url;
 
-		}
+// 		}
 
-		if ( ! isRootObject ) {
+// 		if ( ! isRootObject ) {
 
-			meta.images[ this.uuid ] = output;
+// 			meta.images[ this.uuid ] = output;
 
-		}
+// 		}
 
-		return output;
+// 		return output;
 
-	}
+// 	}
 
-}
+// }
 
-function serializeImage( image ) {
+// function serializeImage( image ) {
 
-	if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
-		( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
-		( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
+// 	if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
+// 		( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
+// 		( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
 
-		// default images
+// 		// default images
 
-		return ImageUtils.getDataURL( image );
+// 		return ImageUtils.getDataURL( image );
 
-	} else {
+// 	} else {
 
-		if ( image.data ) {
+// 		if ( image.data ) {
 
-			// images of DataTexture
+// 			// images of DataTexture
 
-			return {
-				data: Array.from( image.data ),
-				width: image.width,
-				height: image.height,
-				type: image.data.constructor.name
-			};
+// 			return {
+// 				data: Array.from( image.data ),
+// 				width: image.width,
+// 				height: image.height,
+// 				type: image.data.constructor.name
+// 			};
 
-		} else {
+// 		} else {
 
-			console.warn( 'THREE.Texture: Unable to serialize Texture.' );
-			return {};
+// 			console.warn( 'THREE.Texture: Unable to serialize Texture.' );
+// 			return {};
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-let textureId = 0;
+// let textureId = 0;
 
-class Texture extends EventDispatcher {
+// class Texture extends EventDispatcher {
 
-	constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {
+// 	constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {
 
-		super();
+// 		super();
 
-		this.isTexture = true;
+// 		this.isTexture = true;
 
-		Object.defineProperty( this, 'id', { value: textureId ++ } );
+// 		Object.defineProperty( this, 'id', { value: textureId ++ } );
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		this.name = '';
+// 		this.name = '';
 
-		this.source = new Source( image );
-		this.mipmaps = [];
+// 		this.source = new Source( image );
+// 		this.mipmaps = [];
 
-		this.mapping = mapping;
+// 		this.mapping = mapping;
 
-		this.wrapS = wrapS;
-		this.wrapT = wrapT;
+// 		this.wrapS = wrapS;
+// 		this.wrapT = wrapT;
 
-		this.magFilter = magFilter;
-		this.minFilter = minFilter;
+// 		this.magFilter = magFilter;
+// 		this.minFilter = minFilter;
 
-		this.anisotropy = anisotropy;
+// 		this.anisotropy = anisotropy;
 
-		this.format = format;
-		this.internalFormat = null;
-		this.type = type;
+// 		this.format = format;
+// 		this.internalFormat = null;
+// 		this.type = type;
 
-		this.offset = new Vector2( 0, 0 );
-		this.repeat = new Vector2( 1, 1 );
-		this.center = new Vector2( 0, 0 );
-		this.rotation = 0;
+// 		this.offset = new Vector2( 0, 0 );
+// 		this.repeat = new Vector2( 1, 1 );
+// 		this.center = new Vector2( 0, 0 );
+// 		this.rotation = 0;
 
-		this.matrixAutoUpdate = true;
-		this.matrix = new Matrix3();
+// 		this.matrixAutoUpdate = true;
+// 		this.matrix = new Matrix3();
 
-		this.generateMipmaps = true;
-		this.premultiplyAlpha = false;
-		this.flipY = true;
-		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
+// 		this.generateMipmaps = true;
+// 		this.premultiplyAlpha = false;
+// 		this.flipY = true;
+// 		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
 
-		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
-		//
-		// Also changing the encoding after already used by a Material will not automatically make the Material
-		// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
-		this.encoding = encoding;
+// 		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
+// 		//
+// 		// Also changing the encoding after already used by a Material will not automatically make the Material
+// 		// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
+// 		this.encoding = encoding;
 
-		this.userData = {};
+// 		this.userData = {};
 
-		this.version = 0;
-		this.onUpdate = null;
+// 		this.version = 0;
+// 		this.onUpdate = null;
 
-		this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
-		this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
+// 		this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
+// 		this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)
 
-	}
+// 	}
 
-	get image() {
+// 	get image() {
 
-		return this.source.data;
+// 		return this.source.data;
 
-	}
+// 	}
 
-	set image( value ) {
+// 	set image( value ) {
 
-		this.source.data = value;
+// 		this.source.data = value;
 
-	}
+// 	}
 
-	updateMatrix() {
+// 	updateMatrix() {
 
-		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );
+// 		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.name = source.name;
+// 		this.name = source.name;
 
-		this.source = source.source;
-		this.mipmaps = source.mipmaps.slice( 0 );
+// 		this.source = source.source;
+// 		this.mipmaps = source.mipmaps.slice( 0 );
 
-		this.mapping = source.mapping;
+// 		this.mapping = source.mapping;
 
-		this.wrapS = source.wrapS;
-		this.wrapT = source.wrapT;
+// 		this.wrapS = source.wrapS;
+// 		this.wrapT = source.wrapT;
 
-		this.magFilter = source.magFilter;
-		this.minFilter = source.minFilter;
+// 		this.magFilter = source.magFilter;
+// 		this.minFilter = source.minFilter;
 
-		this.anisotropy = source.anisotropy;
+// 		this.anisotropy = source.anisotropy;
 
-		this.format = source.format;
-		this.internalFormat = source.internalFormat;
-		this.type = source.type;
+// 		this.format = source.format;
+// 		this.internalFormat = source.internalFormat;
+// 		this.type = source.type;
 
-		this.offset.copy( source.offset );
-		this.repeat.copy( source.repeat );
-		this.center.copy( source.center );
-		this.rotation = source.rotation;
+// 		this.offset.copy( source.offset );
+// 		this.repeat.copy( source.repeat );
+// 		this.center.copy( source.center );
+// 		this.rotation = source.rotation;
 
-		this.matrixAutoUpdate = source.matrixAutoUpdate;
-		this.matrix.copy( source.matrix );
+// 		this.matrixAutoUpdate = source.matrixAutoUpdate;
+// 		this.matrix.copy( source.matrix );
 
-		this.generateMipmaps = source.generateMipmaps;
-		this.premultiplyAlpha = source.premultiplyAlpha;
-		this.flipY = source.flipY;
-		this.unpackAlignment = source.unpackAlignment;
-		this.encoding = source.encoding;
+// 		this.generateMipmaps = source.generateMipmaps;
+// 		this.premultiplyAlpha = source.premultiplyAlpha;
+// 		this.flipY = source.flipY;
+// 		this.unpackAlignment = source.unpackAlignment;
+// 		this.encoding = source.encoding;
 
-		this.userData = JSON.parse( JSON.stringify( source.userData ) );
+// 		this.userData = JSON.parse( JSON.stringify( source.userData ) );
 
-		this.needsUpdate = true;
+// 		this.needsUpdate = true;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const isRootObject = ( meta === undefined || typeof meta === 'string' );
+// 		const isRootObject = ( meta === undefined || typeof meta === 'string' );
 
-		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {
+// 		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {
 
-			return meta.textures[ this.uuid ];
+// 			return meta.textures[ this.uuid ];
 
-		}
+// 		}
 
-		const output = {
+// 		const output = {
 
-			metadata: {
-				version: 4.5,
-				type: 'Texture',
-				generator: 'Texture.toJSON'
-			},
+// 			metadata: {
+// 				version: 4.5,
+// 				type: 'Texture',
+// 				generator: 'Texture.toJSON'
+// 			},
 
-			uuid: this.uuid,
-			name: this.name,
+// 			uuid: this.uuid,
+// 			name: this.name,
 
-			image: this.source.toJSON( meta ).uuid,
+// 			image: this.source.toJSON( meta ).uuid,
 
-			mapping: this.mapping,
+// 			mapping: this.mapping,
 
-			repeat: [ this.repeat.x, this.repeat.y ],
-			offset: [ this.offset.x, this.offset.y ],
-			center: [ this.center.x, this.center.y ],
-			rotation: this.rotation,
+// 			repeat: [ this.repeat.x, this.repeat.y ],
+// 			offset: [ this.offset.x, this.offset.y ],
+// 			center: [ this.center.x, this.center.y ],
+// 			rotation: this.rotation,
 
-			wrap: [ this.wrapS, this.wrapT ],
+// 			wrap: [ this.wrapS, this.wrapT ],
 
-			format: this.format,
-			type: this.type,
-			encoding: this.encoding,
+// 			format: this.format,
+// 			type: this.type,
+// 			encoding: this.encoding,
 
-			minFilter: this.minFilter,
-			magFilter: this.magFilter,
-			anisotropy: this.anisotropy,
+// 			minFilter: this.minFilter,
+// 			magFilter: this.magFilter,
+// 			anisotropy: this.anisotropy,
 
-			flipY: this.flipY,
+// 			flipY: this.flipY,
 
-			premultiplyAlpha: this.premultiplyAlpha,
-			unpackAlignment: this.unpackAlignment
+// 			premultiplyAlpha: this.premultiplyAlpha,
+// 			unpackAlignment: this.unpackAlignment
 
-		};
+// 		};
 
-		if ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;
+// 		if ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;
 
-		if ( ! isRootObject ) {
+// 		if ( ! isRootObject ) {
 
-			meta.textures[ this.uuid ] = output;
+// 			meta.textures[ this.uuid ] = output;
 
-		}
+// 		}
 
-		return output;
+// 		return output;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.dispatchEvent( { type: 'dispose' } );
+// 		this.dispatchEvent( { type: 'dispose' } );
 
-	}
+// 	}
 
-	transformUv( uv ) {
+// 	transformUv( uv ) {
 
-		if ( this.mapping !== UVMapping ) return uv;
+// 		if ( this.mapping !== UVMapping ) return uv;
 
-		uv.applyMatrix3( this.matrix );
+// 		uv.applyMatrix3( this.matrix );
 
-		if ( uv.x < 0 || uv.x > 1 ) {
+// 		if ( uv.x < 0 || uv.x > 1 ) {
 
-			switch ( this.wrapS ) {
+// 			switch ( this.wrapS ) {
 
-				case RepeatWrapping:
+// 				case RepeatWrapping:
 
-					uv.x = uv.x - Math.floor( uv.x );
-					break;
+// 					uv.x = uv.x - Math.floor( uv.x );
+// 					break;
 
-				case ClampToEdgeWrapping:
+// 				case ClampToEdgeWrapping:
 
-					uv.x = uv.x < 0 ? 0 : 1;
-					break;
+// 					uv.x = uv.x < 0 ? 0 : 1;
+// 					break;
 
-				case MirroredRepeatWrapping:
+// 				case MirroredRepeatWrapping:
 
-					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
+// 					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
 
-						uv.x = Math.ceil( uv.x ) - uv.x;
+// 						uv.x = Math.ceil( uv.x ) - uv.x;
 
-					} else {
+// 					} else {
 
-						uv.x = uv.x - Math.floor( uv.x );
+// 						uv.x = uv.x - Math.floor( uv.x );
 
-					}
+// 					}
 
-					break;
+// 					break;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( uv.y < 0 || uv.y > 1 ) {
+// 		if ( uv.y < 0 || uv.y > 1 ) {
 
-			switch ( this.wrapT ) {
+// 			switch ( this.wrapT ) {
 
-				case RepeatWrapping:
+// 				case RepeatWrapping:
 
-					uv.y = uv.y - Math.floor( uv.y );
-					break;
+// 					uv.y = uv.y - Math.floor( uv.y );
+// 					break;
 
-				case ClampToEdgeWrapping:
+// 				case ClampToEdgeWrapping:
 
-					uv.y = uv.y < 0 ? 0 : 1;
-					break;
+// 					uv.y = uv.y < 0 ? 0 : 1;
+// 					break;
 
-				case MirroredRepeatWrapping:
+// 				case MirroredRepeatWrapping:
 
-					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
+// 					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
 
-						uv.y = Math.ceil( uv.y ) - uv.y;
+// 						uv.y = Math.ceil( uv.y ) - uv.y;
 
-					} else {
+// 					} else {
 
-						uv.y = uv.y - Math.floor( uv.y );
+// 						uv.y = uv.y - Math.floor( uv.y );
 
-					}
+// 					}
 
-					break;
+// 					break;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( this.flipY ) {
+// 		if ( this.flipY ) {
 
-			uv.y = 1 - uv.y;
+// 			uv.y = 1 - uv.y;
 
-		}
+// 		}
 
-		return uv;
+// 		return uv;
 
-	}
+// 	}
 
-	set needsUpdate( value ) {
+// 	set needsUpdate( value ) {
 
-		if ( value === true ) {
+// 		if ( value === true ) {
 
-			this.version ++;
-			this.source.needsUpdate = true;
+// 			this.version ++;
+// 			this.source.needsUpdate = true;
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-Texture.DEFAULT_IMAGE = null;
-Texture.DEFAULT_MAPPING = UVMapping;
+// Texture.DEFAULT_IMAGE = null;
+// Texture.DEFAULT_MAPPING = UVMapping;
 
-class Vector4 {
+// class Vector4 {
 
-	constructor( x = 0, y = 0, z = 0, w = 1 ) {
+// 	constructor( x = 0, y = 0, z = 0, w = 1 ) {
 
-		Vector4.prototype.isVector4 = true;
+// 		Vector4.prototype.isVector4 = true;
 
-		this.x = x;
-		this.y = y;
-		this.z = z;
-		this.w = w;
+// 		this.x = x;
+// 		this.y = y;
+// 		this.z = z;
+// 		this.w = w;
 
-	}
+// 	}
 
-	get width() {
+// 	get width() {
 
-		return this.z;
+// 		return this.z;
 
-	}
+// 	}
 
-	set width( value ) {
+// 	set width( value ) {
 
-		this.z = value;
+// 		this.z = value;
 
-	}
+// 	}
 
-	get height() {
+// 	get height() {
 
-		return this.w;
+// 		return this.w;
 
-	}
+// 	}
 
-	set height( value ) {
+// 	set height( value ) {
 
-		this.w = value;
+// 		this.w = value;
 
-	}
+// 	}
 
-	set( x, y, z, w ) {
+// 	set( x, y, z, w ) {
 
-		this.x = x;
-		this.y = y;
-		this.z = z;
-		this.w = w;
+// 		this.x = x;
+// 		this.y = y;
+// 		this.z = z;
+// 		this.w = w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setScalar( scalar ) {
+// 	setScalar( scalar ) {
 
-		this.x = scalar;
-		this.y = scalar;
-		this.z = scalar;
-		this.w = scalar;
+// 		this.x = scalar;
+// 		this.y = scalar;
+// 		this.z = scalar;
+// 		this.w = scalar;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setX( x ) {
+// 	setX( x ) {
 
-		this.x = x;
+// 		this.x = x;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setY( y ) {
+// 	setY( y ) {
 
-		this.y = y;
+// 		this.y = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setZ( z ) {
+// 	setZ( z ) {
 
-		this.z = z;
+// 		this.z = z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setW( w ) {
+// 	setW( w ) {
 
-		this.w = w;
+// 		this.w = w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setComponent( index, value ) {
+// 	setComponent( index, value ) {
 
-		switch ( index ) {
+// 		switch ( index ) {
 
-			case 0: this.x = value; break;
-			case 1: this.y = value; break;
-			case 2: this.z = value; break;
-			case 3: this.w = value; break;
-			default: throw new Error( 'index is out of range: ' + index );
+// 			case 0: this.x = value; break;
+// 			case 1: this.y = value; break;
+// 			case 2: this.z = value; break;
+// 			case 3: this.w = value; break;
+// 			default: throw new Error( 'index is out of range: ' + index );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getComponent( index ) {
+// 	getComponent( index ) {
 
-		switch ( index ) {
+// 		switch ( index ) {
 
-			case 0: return this.x;
-			case 1: return this.y;
-			case 2: return this.z;
-			case 3: return this.w;
-			default: throw new Error( 'index is out of range: ' + index );
+// 			case 0: return this.x;
+// 			case 1: return this.y;
+// 			case 2: return this.z;
+// 			case 3: return this.w;
+// 			default: throw new Error( 'index is out of range: ' + index );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor( this.x, this.y, this.z, this.w );
+// 		return new this.constructor( this.x, this.y, this.z, this.w );
 
-	}
+// 	}
 
-	copy( v ) {
+// 	copy( v ) {
 
-		this.x = v.x;
-		this.y = v.y;
-		this.z = v.z;
-		this.w = ( v.w !== undefined ) ? v.w : 1;
+// 		this.x = v.x;
+// 		this.y = v.y;
+// 		this.z = v.z;
+// 		this.w = ( v.w !== undefined ) ? v.w : 1;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	add( v ) {
+// 	add( v ) {
 
-		this.x += v.x;
-		this.y += v.y;
-		this.z += v.z;
-		this.w += v.w;
+// 		this.x += v.x;
+// 		this.y += v.y;
+// 		this.z += v.z;
+// 		this.w += v.w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addScalar( s ) {
+// 	addScalar( s ) {
 
-		this.x += s;
-		this.y += s;
-		this.z += s;
-		this.w += s;
+// 		this.x += s;
+// 		this.y += s;
+// 		this.z += s;
+// 		this.w += s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addVectors( a, b ) {
+// 	addVectors( a, b ) {
 
-		this.x = a.x + b.x;
-		this.y = a.y + b.y;
-		this.z = a.z + b.z;
-		this.w = a.w + b.w;
+// 		this.x = a.x + b.x;
+// 		this.y = a.y + b.y;
+// 		this.z = a.z + b.z;
+// 		this.w = a.w + b.w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addScaledVector( v, s ) {
+// 	addScaledVector( v, s ) {
 
-		this.x += v.x * s;
-		this.y += v.y * s;
-		this.z += v.z * s;
-		this.w += v.w * s;
+// 		this.x += v.x * s;
+// 		this.y += v.y * s;
+// 		this.z += v.z * s;
+// 		this.w += v.w * s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	sub( v ) {
+// 	sub( v ) {
 
-		this.x -= v.x;
-		this.y -= v.y;
-		this.z -= v.z;
-		this.w -= v.w;
+// 		this.x -= v.x;
+// 		this.y -= v.y;
+// 		this.z -= v.z;
+// 		this.w -= v.w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	subScalar( s ) {
+// 	subScalar( s ) {
 
-		this.x -= s;
-		this.y -= s;
-		this.z -= s;
-		this.w -= s;
+// 		this.x -= s;
+// 		this.y -= s;
+// 		this.z -= s;
+// 		this.w -= s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	subVectors( a, b ) {
+// 	subVectors( a, b ) {
 
-		this.x = a.x - b.x;
-		this.y = a.y - b.y;
-		this.z = a.z - b.z;
-		this.w = a.w - b.w;
+// 		this.x = a.x - b.x;
+// 		this.y = a.y - b.y;
+// 		this.z = a.z - b.z;
+// 		this.w = a.w - b.w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiply( v ) {
+// 	multiply( v ) {
 
-		this.x *= v.x;
-		this.y *= v.y;
-		this.z *= v.z;
-		this.w *= v.w;
+// 		this.x *= v.x;
+// 		this.y *= v.y;
+// 		this.z *= v.z;
+// 		this.w *= v.w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiplyScalar( scalar ) {
+// 	multiplyScalar( scalar ) {
 
-		this.x *= scalar;
-		this.y *= scalar;
-		this.z *= scalar;
-		this.w *= scalar;
+// 		this.x *= scalar;
+// 		this.y *= scalar;
+// 		this.z *= scalar;
+// 		this.w *= scalar;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyMatrix4( m ) {
+// 	applyMatrix4( m ) {
 
-		const x = this.x, y = this.y, z = this.z, w = this.w;
-		const e = m.elements;
+// 		const x = this.x, y = this.y, z = this.z, w = this.w;
+// 		const e = m.elements;
 
-		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
-		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
-		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
-		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
+// 		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
+// 		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
+// 		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
+// 		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	divideScalar( scalar ) {
+// 	divideScalar( scalar ) {
 
-		return this.multiplyScalar( 1 / scalar );
+// 		return this.multiplyScalar( 1 / scalar );
 
-	}
+// 	}
 
-	setAxisAngleFromQuaternion( q ) {
+// 	setAxisAngleFromQuaternion( q ) {
 
-		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
+// 		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
 
-		// q is assumed to be normalized
+// 		// q is assumed to be normalized
 
-		this.w = 2 * Math.acos( q.w );
+// 		this.w = 2 * Math.acos( q.w );
 
-		const s = Math.sqrt( 1 - q.w * q.w );
+// 		const s = Math.sqrt( 1 - q.w * q.w );
 
-		if ( s < 0.0001 ) {
+// 		if ( s < 0.0001 ) {
 
-			this.x = 1;
-			this.y = 0;
-			this.z = 0;
+// 			this.x = 1;
+// 			this.y = 0;
+// 			this.z = 0;
 
-		} else {
+// 		} else {
 
-			this.x = q.x / s;
-			this.y = q.y / s;
-			this.z = q.z / s;
+// 			this.x = q.x / s;
+// 			this.y = q.y / s;
+// 			this.z = q.z / s;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setAxisAngleFromRotationMatrix( m ) {
+// 	setAxisAngleFromRotationMatrix( m ) {
 
-		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
+// 		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
 
-		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
+// 		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
 
-		let angle, x, y, z; // variables for result
-		const epsilon = 0.01,		// margin to allow for rounding errors
-			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
+// 		let angle, x, y, z; // variables for result
+// 		const epsilon = 0.01,		// margin to allow for rounding errors
+// 			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
 
-			te = m.elements,
+// 			te = m.elements,
 
-			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
-			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
-			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
+// 			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
+// 			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
+// 			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
 
-		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
-		     ( Math.abs( m13 - m31 ) < epsilon ) &&
-		     ( Math.abs( m23 - m32 ) < epsilon ) ) {
+// 		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
+// 		     ( Math.abs( m13 - m31 ) < epsilon ) &&
+// 		     ( Math.abs( m23 - m32 ) < epsilon ) ) {
 
-			// singularity found
-			// first check for identity matrix which must have +1 for all terms
-			// in leading diagonal and zero in other terms
+// 			// singularity found
+// 			// first check for identity matrix which must have +1 for all terms
+// 			// in leading diagonal and zero in other terms
 
-			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
-			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
-			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
-			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
+// 			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
+// 			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
+// 			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
+// 			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
 
-				// this singularity is identity matrix so angle = 0
+// 				// this singularity is identity matrix so angle = 0
 
-				this.set( 1, 0, 0, 0 );
+// 				this.set( 1, 0, 0, 0 );
 
-				return this; // zero angle, arbitrary axis
+// 				return this; // zero angle, arbitrary axis
 
-			}
+// 			}
 
-			// otherwise this singularity is angle = 180
+// 			// otherwise this singularity is angle = 180
 
-			angle = Math.PI;
+// 			angle = Math.PI;
 
-			const xx = ( m11 + 1 ) / 2;
-			const yy = ( m22 + 1 ) / 2;
-			const zz = ( m33 + 1 ) / 2;
-			const xy = ( m12 + m21 ) / 4;
-			const xz = ( m13 + m31 ) / 4;
-			const yz = ( m23 + m32 ) / 4;
+// 			const xx = ( m11 + 1 ) / 2;
+// 			const yy = ( m22 + 1 ) / 2;
+// 			const zz = ( m33 + 1 ) / 2;
+// 			const xy = ( m12 + m21 ) / 4;
+// 			const xz = ( m13 + m31 ) / 4;
+// 			const yz = ( m23 + m32 ) / 4;
 
-			if ( ( xx > yy ) && ( xx > zz ) ) {
+// 			if ( ( xx > yy ) && ( xx > zz ) ) {
 
-				// m11 is the largest diagonal term
+// 				// m11 is the largest diagonal term
 
-				if ( xx < epsilon ) {
+// 				if ( xx < epsilon ) {
 
-					x = 0;
-					y = 0.707106781;
-					z = 0.707106781;
+// 					x = 0;
+// 					y = 0.707106781;
+// 					z = 0.707106781;
 
-				} else {
+// 				} else {
 
-					x = Math.sqrt( xx );
-					y = xy / x;
-					z = xz / x;
+// 					x = Math.sqrt( xx );
+// 					y = xy / x;
+// 					z = xz / x;
 
-				}
+// 				}
 
-			} else if ( yy > zz ) {
+// 			} else if ( yy > zz ) {
 
-				// m22 is the largest diagonal term
+// 				// m22 is the largest diagonal term
 
-				if ( yy < epsilon ) {
+// 				if ( yy < epsilon ) {
 
-					x = 0.707106781;
-					y = 0;
-					z = 0.707106781;
+// 					x = 0.707106781;
+// 					y = 0;
+// 					z = 0.707106781;
 
-				} else {
+// 				} else {
 
-					y = Math.sqrt( yy );
-					x = xy / y;
-					z = yz / y;
+// 					y = Math.sqrt( yy );
+// 					x = xy / y;
+// 					z = yz / y;
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				// m33 is the largest diagonal term so base result on this
+// 				// m33 is the largest diagonal term so base result on this
 
-				if ( zz < epsilon ) {
+// 				if ( zz < epsilon ) {
 
-					x = 0.707106781;
-					y = 0.707106781;
-					z = 0;
+// 					x = 0.707106781;
+// 					y = 0.707106781;
+// 					z = 0;
 
-				} else {
+// 				} else {
 
-					z = Math.sqrt( zz );
-					x = xz / z;
-					y = yz / z;
+// 					z = Math.sqrt( zz );
+// 					x = xz / z;
+// 					y = yz / z;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			this.set( x, y, z, angle );
+// 			this.set( x, y, z, angle );
 
-			return this; // return 180 deg rotation
+// 			return this; // return 180 deg rotation
 
-		}
+// 		}
 
-		// as we have reached here there are no singularities so we can handle normally
+// 		// as we have reached here there are no singularities so we can handle normally
 
-		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
-			( m13 - m31 ) * ( m13 - m31 ) +
-			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
+// 		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
+// 			( m13 - m31 ) * ( m13 - m31 ) +
+// 			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
 
-		if ( Math.abs( s ) < 0.001 ) s = 1;
+// 		if ( Math.abs( s ) < 0.001 ) s = 1;
 
-		// prevent divide by zero, should not happen if matrix is orthogonal and should be
-		// caught by singularity test above, but I've left it in just in case
+// 		// prevent divide by zero, should not happen if matrix is orthogonal and should be
+// 		// caught by singularity test above, but I've left it in just in case
 
-		this.x = ( m32 - m23 ) / s;
-		this.y = ( m13 - m31 ) / s;
-		this.z = ( m21 - m12 ) / s;
-		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
+// 		this.x = ( m32 - m23 ) / s;
+// 		this.y = ( m13 - m31 ) / s;
+// 		this.z = ( m21 - m12 ) / s;
+// 		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	min( v ) {
+// 	min( v ) {
 
-		this.x = Math.min( this.x, v.x );
-		this.y = Math.min( this.y, v.y );
-		this.z = Math.min( this.z, v.z );
-		this.w = Math.min( this.w, v.w );
+// 		this.x = Math.min( this.x, v.x );
+// 		this.y = Math.min( this.y, v.y );
+// 		this.z = Math.min( this.z, v.z );
+// 		this.w = Math.min( this.w, v.w );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	max( v ) {
+// 	max( v ) {
 
-		this.x = Math.max( this.x, v.x );
-		this.y = Math.max( this.y, v.y );
-		this.z = Math.max( this.z, v.z );
-		this.w = Math.max( this.w, v.w );
+// 		this.x = Math.max( this.x, v.x );
+// 		this.y = Math.max( this.y, v.y );
+// 		this.z = Math.max( this.z, v.z );
+// 		this.w = Math.max( this.w, v.w );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clamp( min, max ) {
+// 	clamp( min, max ) {
 
-		// assumes min < max, componentwise
+// 		// assumes min < max, componentwise
 
-		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
-		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
-		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
-		this.w = Math.max( min.w, Math.min( max.w, this.w ) );
+// 		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
+// 		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
+// 		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
+// 		this.w = Math.max( min.w, Math.min( max.w, this.w ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clampScalar( minVal, maxVal ) {
+// 	clampScalar( minVal, maxVal ) {
 
-		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
-		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
-		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
-		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );
+// 		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
+// 		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
+// 		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
+// 		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clampLength( min, max ) {
+// 	clampLength( min, max ) {
 
-		const length = this.length();
+// 		const length = this.length();
 
-		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
+// 		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
 
-	}
+// 	}
 
-	floor() {
+// 	floor() {
 
-		this.x = Math.floor( this.x );
-		this.y = Math.floor( this.y );
-		this.z = Math.floor( this.z );
-		this.w = Math.floor( this.w );
+// 		this.x = Math.floor( this.x );
+// 		this.y = Math.floor( this.y );
+// 		this.z = Math.floor( this.z );
+// 		this.w = Math.floor( this.w );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	ceil() {
+// 	ceil() {
 
-		this.x = Math.ceil( this.x );
-		this.y = Math.ceil( this.y );
-		this.z = Math.ceil( this.z );
-		this.w = Math.ceil( this.w );
+// 		this.x = Math.ceil( this.x );
+// 		this.y = Math.ceil( this.y );
+// 		this.z = Math.ceil( this.z );
+// 		this.w = Math.ceil( this.w );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	round() {
+// 	round() {
 
-		this.x = Math.round( this.x );
-		this.y = Math.round( this.y );
-		this.z = Math.round( this.z );
-		this.w = Math.round( this.w );
+// 		this.x = Math.round( this.x );
+// 		this.y = Math.round( this.y );
+// 		this.z = Math.round( this.z );
+// 		this.w = Math.round( this.w );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	roundToZero() {
+// 	roundToZero() {
 
-		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
-		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
-		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
-		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
+// 		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
+// 		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
+// 		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
+// 		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	negate() {
+// 	negate() {
 
-		this.x = - this.x;
-		this.y = - this.y;
-		this.z = - this.z;
-		this.w = - this.w;
+// 		this.x = - this.x;
+// 		this.y = - this.y;
+// 		this.z = - this.z;
+// 		this.w = - this.w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dot( v ) {
+// 	dot( v ) {
 
-		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
+// 		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
 
-	}
+// 	}
 
-	lengthSq() {
+// 	lengthSq() {
 
-		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
+// 		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
 
-	}
+// 	}
 
-	length() {
+// 	length() {
 
-		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
+// 		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
 
-	}
+// 	}
 
-	manhattanLength() {
+// 	manhattanLength() {
 
-		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
+// 		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
 
-	}
+// 	}
 
-	normalize() {
+// 	normalize() {
 
-		return this.divideScalar( this.length() || 1 );
+// 		return this.divideScalar( this.length() || 1 );
 
-	}
+// 	}
 
-	setLength( length ) {
+// 	setLength( length ) {
 
-		return this.normalize().multiplyScalar( length );
+// 		return this.normalize().multiplyScalar( length );
 
-	}
+// 	}
 
-	lerp( v, alpha ) {
+// 	lerp( v, alpha ) {
 
-		this.x += ( v.x - this.x ) * alpha;
-		this.y += ( v.y - this.y ) * alpha;
-		this.z += ( v.z - this.z ) * alpha;
-		this.w += ( v.w - this.w ) * alpha;
+// 		this.x += ( v.x - this.x ) * alpha;
+// 		this.y += ( v.y - this.y ) * alpha;
+// 		this.z += ( v.z - this.z ) * alpha;
+// 		this.w += ( v.w - this.w ) * alpha;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lerpVectors( v1, v2, alpha ) {
+// 	lerpVectors( v1, v2, alpha ) {
 
-		this.x = v1.x + ( v2.x - v1.x ) * alpha;
-		this.y = v1.y + ( v2.y - v1.y ) * alpha;
-		this.z = v1.z + ( v2.z - v1.z ) * alpha;
-		this.w = v1.w + ( v2.w - v1.w ) * alpha;
+// 		this.x = v1.x + ( v2.x - v1.x ) * alpha;
+// 		this.y = v1.y + ( v2.y - v1.y ) * alpha;
+// 		this.z = v1.z + ( v2.z - v1.z ) * alpha;
+// 		this.w = v1.w + ( v2.w - v1.w ) * alpha;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( v ) {
+// 	equals( v ) {
 
-		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
+// 		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
 
-	}
+// 	}
 
-	fromArray( array, offset = 0 ) {
+// 	fromArray( array, offset = 0 ) {
 
-		this.x = array[ offset ];
-		this.y = array[ offset + 1 ];
-		this.z = array[ offset + 2 ];
-		this.w = array[ offset + 3 ];
+// 		this.x = array[ offset ];
+// 		this.y = array[ offset + 1 ];
+// 		this.z = array[ offset + 2 ];
+// 		this.w = array[ offset + 3 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		array[ offset ] = this.x;
-		array[ offset + 1 ] = this.y;
-		array[ offset + 2 ] = this.z;
-		array[ offset + 3 ] = this.w;
+// 		array[ offset ] = this.x;
+// 		array[ offset + 1 ] = this.y;
+// 		array[ offset + 2 ] = this.z;
+// 		array[ offset + 3 ] = this.w;
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-	fromBufferAttribute( attribute, index ) {
+// 	fromBufferAttribute( attribute, index ) {
 
-		this.x = attribute.getX( index );
-		this.y = attribute.getY( index );
-		this.z = attribute.getZ( index );
-		this.w = attribute.getW( index );
+// 		this.x = attribute.getX( index );
+// 		this.y = attribute.getY( index );
+// 		this.z = attribute.getZ( index );
+// 		this.w = attribute.getW( index );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	random() {
+// 	random() {
 
-		this.x = Math.random();
-		this.y = Math.random();
-		this.z = Math.random();
-		this.w = Math.random();
+// 		this.x = Math.random();
+// 		this.y = Math.random();
+// 		this.z = Math.random();
+// 		this.w = Math.random();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	*[ Symbol.iterator ]() {
+// 	*[ Symbol.iterator ]() {
 
-		yield this.x;
-		yield this.y;
-		yield this.z;
-		yield this.w;
+// 		yield this.x;
+// 		yield this.y;
+// 		yield this.z;
+// 		yield this.w;
 
-	}
+// 	}
 
-}
+// }
 
-/*
- In options, we can specify:
- * Texture parameters for an auto-generated target texture
- * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
-*/
-class WebGLRenderTarget extends EventDispatcher {
+// /*
+//  In options, we can specify:
+//  * Texture parameters for an auto-generated target texture
+//  * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
+// */
+// class WebGLRenderTarget extends EventDispatcher {
 
-	constructor( width, height, options = {} ) {
+// 	constructor( width, height, options = {} ) {
 
-		super();
+// 		super();
 
-		this.isWebGLRenderTarget = true;
+// 		this.isWebGLRenderTarget = true;
 
-		this.width = width;
-		this.height = height;
-		this.depth = 1;
+// 		this.width = width;
+// 		this.height = height;
+// 		this.depth = 1;
 
-		this.scissor = new Vector4( 0, 0, width, height );
-		this.scissorTest = false;
+// 		this.scissor = new Vector4( 0, 0, width, height );
+// 		this.scissorTest = false;
 
-		this.viewport = new Vector4( 0, 0, width, height );
+// 		this.viewport = new Vector4( 0, 0, width, height );
 
-		const image = { width: width, height: height, depth: 1 };
+// 		const image = { width: width, height: height, depth: 1 };
 
-		this.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
-		this.texture.isRenderTargetTexture = true;
+// 		this.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
+// 		this.texture.isRenderTargetTexture = true;
 
-		this.texture.flipY = false;
-		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
-		this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
-		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
+// 		this.texture.flipY = false;
+// 		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
+// 		this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
+// 		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
 
-		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
-		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
+// 		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
+// 		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
 
-		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
+// 		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
 
-		this.samples = options.samples !== undefined ? options.samples : 0;
+// 		this.samples = options.samples !== undefined ? options.samples : 0;
 
-	}
+// 	}
 
-	setSize( width, height, depth = 1 ) {
+// 	setSize( width, height, depth = 1 ) {
 
-		if ( this.width !== width || this.height !== height || this.depth !== depth ) {
+// 		if ( this.width !== width || this.height !== height || this.depth !== depth ) {
 
-			this.width = width;
-			this.height = height;
-			this.depth = depth;
+// 			this.width = width;
+// 			this.height = height;
+// 			this.depth = depth;
 
-			this.texture.image.width = width;
-			this.texture.image.height = height;
-			this.texture.image.depth = depth;
+// 			this.texture.image.width = width;
+// 			this.texture.image.height = height;
+// 			this.texture.image.depth = depth;
 
-			this.dispose();
+// 			this.dispose();
 
-		}
+// 		}
 
-		this.viewport.set( 0, 0, width, height );
-		this.scissor.set( 0, 0, width, height );
+// 		this.viewport.set( 0, 0, width, height );
+// 		this.scissor.set( 0, 0, width, height );
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.width = source.width;
-		this.height = source.height;
-		this.depth = source.depth;
+// 		this.width = source.width;
+// 		this.height = source.height;
+// 		this.depth = source.depth;
 
-		this.viewport.copy( source.viewport );
+// 		this.viewport.copy( source.viewport );
 
-		this.texture = source.texture.clone();
-		this.texture.isRenderTargetTexture = true;
+// 		this.texture = source.texture.clone();
+// 		this.texture.isRenderTargetTexture = true;
 
-		// ensure image object is not shared, see #20328
+// 		// ensure image object is not shared, see #20328
 
-		const image = Object.assign( {}, source.texture.image );
-		this.texture.source = new Source( image );
+// 		const image = Object.assign( {}, source.texture.image );
+// 		this.texture.source = new Source( image );
 
-		this.depthBuffer = source.depthBuffer;
-		this.stencilBuffer = source.stencilBuffer;
+// 		this.depthBuffer = source.depthBuffer;
+// 		this.stencilBuffer = source.stencilBuffer;
 
-		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();
+// 		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();
 
-		this.samples = source.samples;
+// 		this.samples = source.samples;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.dispatchEvent( { type: 'dispose' } );
+// 		this.dispatchEvent( { type: 'dispose' } );
 
-	}
+// 	}
 
-}
+// }
 
-class DataArrayTexture extends Texture {
+// class DataArrayTexture extends Texture {
 
-	constructor( data = null, width = 1, height = 1, depth = 1 ) {
+// 	constructor( data = null, width = 1, height = 1, depth = 1 ) {
 
-		super( null );
+// 		super( null );
 
-		this.isDataArrayTexture = true;
+// 		this.isDataArrayTexture = true;
 
-		this.image = { data, width, height, depth };
+// 		this.image = { data, width, height, depth };
 
-		this.magFilter = NearestFilter;
-		this.minFilter = NearestFilter;
+// 		this.magFilter = NearestFilter;
+// 		this.minFilter = NearestFilter;
 
-		this.wrapR = ClampToEdgeWrapping;
+// 		this.wrapR = ClampToEdgeWrapping;
 
-		this.generateMipmaps = false;
-		this.flipY = false;
-		this.unpackAlignment = 1;
+// 		this.generateMipmaps = false;
+// 		this.flipY = false;
+// 		this.unpackAlignment = 1;
 
-	}
+// 	}
 
-}
+// }
 
-class WebGLArrayRenderTarget extends WebGLRenderTarget {
+// class WebGLArrayRenderTarget extends WebGLRenderTarget {
 
-	constructor( width, height, depth ) {
+// 	constructor( width, height, depth ) {
 
-		super( width, height );
+// 		super( width, height );
 
-		this.isWebGLArrayRenderTarget = true;
+// 		this.isWebGLArrayRenderTarget = true;
 
-		this.depth = depth;
+// 		this.depth = depth;
 
-		this.texture = new DataArrayTexture( null, width, height, depth );
+// 		this.texture = new DataArrayTexture( null, width, height, depth );
 
-		this.texture.isRenderTargetTexture = true;
+// 		this.texture.isRenderTargetTexture = true;
 
-	}
+// 	}
 
-}
+// }
 
-class Data3DTexture extends Texture {
+// class Data3DTexture extends Texture {
 
-	constructor( data = null, width = 1, height = 1, depth = 1 ) {
+// 	constructor( data = null, width = 1, height = 1, depth = 1 ) {
 
-		// We're going to add .setXXX() methods for setting properties later.
-		// Users can still set in DataTexture3D directly.
-		//
-		//	const texture = new THREE.DataTexture3D( data, width, height, depth );
-		// 	texture.anisotropy = 16;
-		//
-		// See #14839
+// 		// We're going to add .setXXX() methods for setting properties later.
+// 		// Users can still set in DataTexture3D directly.
+// 		//
+// 		//	const texture = new THREE.DataTexture3D( data, width, height, depth );
+// 		// 	texture.anisotropy = 16;
+// 		//
+// 		// See #14839
 
-		super( null );
+// 		super( null );
 
-		this.isData3DTexture = true;
+// 		this.isData3DTexture = true;
 
-		this.image = { data, width, height, depth };
+// 		this.image = { data, width, height, depth };
 
-		this.magFilter = NearestFilter;
-		this.minFilter = NearestFilter;
+// 		this.magFilter = NearestFilter;
+// 		this.minFilter = NearestFilter;
 
-		this.wrapR = ClampToEdgeWrapping;
+// 		this.wrapR = ClampToEdgeWrapping;
 
-		this.generateMipmaps = false;
-		this.flipY = false;
-		this.unpackAlignment = 1;
+// 		this.generateMipmaps = false;
+// 		this.flipY = false;
+// 		this.unpackAlignment = 1;
 
-	}
+// 	}
 
-}
+// }
 
-class WebGL3DRenderTarget extends WebGLRenderTarget {
+// class WebGL3DRenderTarget extends WebGLRenderTarget {
 
-	constructor( width, height, depth ) {
+// 	constructor( width, height, depth ) {
 
-		super( width, height );
+// 		super( width, height );
 
-		this.isWebGL3DRenderTarget = true;
+// 		this.isWebGL3DRenderTarget = true;
 
-		this.depth = depth;
+// 		this.depth = depth;
 
-		this.texture = new Data3DTexture( null, width, height, depth );
+// 		this.texture = new Data3DTexture( null, width, height, depth );
 
-		this.texture.isRenderTargetTexture = true;
+// 		this.texture.isRenderTargetTexture = true;
 
-	}
+// 	}
 
-}
+// }
 
-class WebGLMultipleRenderTargets extends WebGLRenderTarget {
+// class WebGLMultipleRenderTargets extends WebGLRenderTarget {
 
-	constructor( width, height, count, options = {} ) {
+// 	constructor( width, height, count, options = {} ) {
 
-		super( width, height, options );
+// 		super( width, height, options );
 
-		this.isWebGLMultipleRenderTargets = true;
+// 		this.isWebGLMultipleRenderTargets = true;
 
-		const texture = this.texture;
+// 		const texture = this.texture;
 
-		this.texture = [];
+// 		this.texture = [];
 
-		for ( let i = 0; i < count; i ++ ) {
+// 		for ( let i = 0; i < count; i ++ ) {
 
-			this.texture[ i ] = texture.clone();
-			this.texture[ i ].isRenderTargetTexture = true;
+// 			this.texture[ i ] = texture.clone();
+// 			this.texture[ i ].isRenderTargetTexture = true;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	setSize( width, height, depth = 1 ) {
+// 	setSize( width, height, depth = 1 ) {
 
-		if ( this.width !== width || this.height !== height || this.depth !== depth ) {
+// 		if ( this.width !== width || this.height !== height || this.depth !== depth ) {
 
-			this.width = width;
-			this.height = height;
-			this.depth = depth;
+// 			this.width = width;
+// 			this.height = height;
+// 			this.depth = depth;
 
-			for ( let i = 0, il = this.texture.length; i < il; i ++ ) {
+// 			for ( let i = 0, il = this.texture.length; i < il; i ++ ) {
 
-				this.texture[ i ].image.width = width;
-				this.texture[ i ].image.height = height;
-				this.texture[ i ].image.depth = depth;
+// 				this.texture[ i ].image.width = width;
+// 				this.texture[ i ].image.height = height;
+// 				this.texture[ i ].image.depth = depth;
 
-			}
+// 			}
 
-			this.dispose();
+// 			this.dispose();
 
-		}
+// 		}
 
-		this.viewport.set( 0, 0, width, height );
-		this.scissor.set( 0, 0, width, height );
+// 		this.viewport.set( 0, 0, width, height );
+// 		this.scissor.set( 0, 0, width, height );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.dispose();
+// 		this.dispose();
 
-		this.width = source.width;
-		this.height = source.height;
-		this.depth = source.depth;
+// 		this.width = source.width;
+// 		this.height = source.height;
+// 		this.depth = source.depth;
 
-		this.viewport.set( 0, 0, this.width, this.height );
-		this.scissor.set( 0, 0, this.width, this.height );
+// 		this.viewport.set( 0, 0, this.width, this.height );
+// 		this.scissor.set( 0, 0, this.width, this.height );
 
-		this.depthBuffer = source.depthBuffer;
-		this.stencilBuffer = source.stencilBuffer;
+// 		this.depthBuffer = source.depthBuffer;
+// 		this.stencilBuffer = source.stencilBuffer;
 
-		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();
+// 		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();
 
-		this.texture.length = 0;
+// 		this.texture.length = 0;
 
-		for ( let i = 0, il = source.texture.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = source.texture.length; i < il; i ++ ) {
 
-			this.texture[ i ] = source.texture[ i ].clone();
-			this.texture[ i ].isRenderTargetTexture = true;
+// 			this.texture[ i ] = source.texture[ i ].clone();
+// 			this.texture[ i ].isRenderTargetTexture = true;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class Quaternion {
+// class Quaternion {
 
-	constructor( x = 0, y = 0, z = 0, w = 1 ) {
+// 	constructor( x = 0, y = 0, z = 0, w = 1 ) {
 
-		this.isQuaternion = true;
+// 		this.isQuaternion = true;
 
-		this._x = x;
-		this._y = y;
-		this._z = z;
-		this._w = w;
+// 		this._x = x;
+// 		this._y = y;
+// 		this._z = z;
+// 		this._w = w;
 
-	}
+// 	}
 
-	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {
+// 	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {
 
-		// fuzz-free, array-based Quaternion SLERP operation
+// 		// fuzz-free, array-based Quaternion SLERP operation
 
-		let x0 = src0[ srcOffset0 + 0 ],
-			y0 = src0[ srcOffset0 + 1 ],
-			z0 = src0[ srcOffset0 + 2 ],
-			w0 = src0[ srcOffset0 + 3 ];
+// 		let x0 = src0[ srcOffset0 + 0 ],
+// 			y0 = src0[ srcOffset0 + 1 ],
+// 			z0 = src0[ srcOffset0 + 2 ],
+// 			w0 = src0[ srcOffset0 + 3 ];
 
-		const x1 = src1[ srcOffset1 + 0 ],
-			y1 = src1[ srcOffset1 + 1 ],
-			z1 = src1[ srcOffset1 + 2 ],
-			w1 = src1[ srcOffset1 + 3 ];
+// 		const x1 = src1[ srcOffset1 + 0 ],
+// 			y1 = src1[ srcOffset1 + 1 ],
+// 			z1 = src1[ srcOffset1 + 2 ],
+// 			w1 = src1[ srcOffset1 + 3 ];
 
-		if ( t === 0 ) {
+// 		if ( t === 0 ) {
 
-			dst[ dstOffset + 0 ] = x0;
-			dst[ dstOffset + 1 ] = y0;
-			dst[ dstOffset + 2 ] = z0;
-			dst[ dstOffset + 3 ] = w0;
-			return;
+// 			dst[ dstOffset + 0 ] = x0;
+// 			dst[ dstOffset + 1 ] = y0;
+// 			dst[ dstOffset + 2 ] = z0;
+// 			dst[ dstOffset + 3 ] = w0;
+// 			return;
 
-		}
+// 		}
 
-		if ( t === 1 ) {
+// 		if ( t === 1 ) {
 
-			dst[ dstOffset + 0 ] = x1;
-			dst[ dstOffset + 1 ] = y1;
-			dst[ dstOffset + 2 ] = z1;
-			dst[ dstOffset + 3 ] = w1;
-			return;
+// 			dst[ dstOffset + 0 ] = x1;
+// 			dst[ dstOffset + 1 ] = y1;
+// 			dst[ dstOffset + 2 ] = z1;
+// 			dst[ dstOffset + 3 ] = w1;
+// 			return;
 
-		}
+// 		}
 
-		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {
+// 		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {
 
-			let s = 1 - t;
-			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
-				dir = ( cos >= 0 ? 1 : - 1 ),
-				sqrSin = 1 - cos * cos;
+// 			let s = 1 - t;
+// 			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
+// 				dir = ( cos >= 0 ? 1 : - 1 ),
+// 				sqrSin = 1 - cos * cos;
 
-			// Skip the Slerp for tiny steps to avoid numeric problems:
-			if ( sqrSin > Number.EPSILON ) {
+// 			// Skip the Slerp for tiny steps to avoid numeric problems:
+// 			if ( sqrSin > Number.EPSILON ) {
 
-				const sin = Math.sqrt( sqrSin ),
-					len = Math.atan2( sin, cos * dir );
+// 				const sin = Math.sqrt( sqrSin ),
+// 					len = Math.atan2( sin, cos * dir );
 
-				s = Math.sin( s * len ) / sin;
-				t = Math.sin( t * len ) / sin;
+// 				s = Math.sin( s * len ) / sin;
+// 				t = Math.sin( t * len ) / sin;
 
-			}
+// 			}
 
-			const tDir = t * dir;
+// 			const tDir = t * dir;
 
-			x0 = x0 * s + x1 * tDir;
-			y0 = y0 * s + y1 * tDir;
-			z0 = z0 * s + z1 * tDir;
-			w0 = w0 * s + w1 * tDir;
+// 			x0 = x0 * s + x1 * tDir;
+// 			y0 = y0 * s + y1 * tDir;
+// 			z0 = z0 * s + z1 * tDir;
+// 			w0 = w0 * s + w1 * tDir;
 
-			// Normalize in case we just did a lerp:
-			if ( s === 1 - t ) {
+// 			// Normalize in case we just did a lerp:
+// 			if ( s === 1 - t ) {
 
-				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );
+// 				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );
 
-				x0 *= f;
-				y0 *= f;
-				z0 *= f;
-				w0 *= f;
+// 				x0 *= f;
+// 				y0 *= f;
+// 				z0 *= f;
+// 				w0 *= f;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		dst[ dstOffset ] = x0;
-		dst[ dstOffset + 1 ] = y0;
-		dst[ dstOffset + 2 ] = z0;
-		dst[ dstOffset + 3 ] = w0;
+// 		dst[ dstOffset ] = x0;
+// 		dst[ dstOffset + 1 ] = y0;
+// 		dst[ dstOffset + 2 ] = z0;
+// 		dst[ dstOffset + 3 ] = w0;
 
-	}
+// 	}
 
-	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {
+// 	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {
 
-		const x0 = src0[ srcOffset0 ];
-		const y0 = src0[ srcOffset0 + 1 ];
-		const z0 = src0[ srcOffset0 + 2 ];
-		const w0 = src0[ srcOffset0 + 3 ];
+// 		const x0 = src0[ srcOffset0 ];
+// 		const y0 = src0[ srcOffset0 + 1 ];
+// 		const z0 = src0[ srcOffset0 + 2 ];
+// 		const w0 = src0[ srcOffset0 + 3 ];
 
-		const x1 = src1[ srcOffset1 ];
-		const y1 = src1[ srcOffset1 + 1 ];
-		const z1 = src1[ srcOffset1 + 2 ];
-		const w1 = src1[ srcOffset1 + 3 ];
+// 		const x1 = src1[ srcOffset1 ];
+// 		const y1 = src1[ srcOffset1 + 1 ];
+// 		const z1 = src1[ srcOffset1 + 2 ];
+// 		const w1 = src1[ srcOffset1 + 3 ];
 
-		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
-		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
-		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
-		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
+// 		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
+// 		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
+// 		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
+// 		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
 
-		return dst;
+// 		return dst;
 
-	}
+// 	}
 
-	get x() {
+// 	get x() {
 
-		return this._x;
+// 		return this._x;
 
-	}
+// 	}
 
-	set x( value ) {
+// 	set x( value ) {
 
-		this._x = value;
-		this._onChangeCallback();
+// 		this._x = value;
+// 		this._onChangeCallback();
 
-	}
+// 	}
 
-	get y() {
+// 	get y() {
 
-		return this._y;
+// 		return this._y;
 
-	}
+// 	}
 
-	set y( value ) {
+// 	set y( value ) {
 
-		this._y = value;
-		this._onChangeCallback();
+// 		this._y = value;
+// 		this._onChangeCallback();
 
-	}
+// 	}
 
-	get z() {
+// 	get z() {
 
-		return this._z;
+// 		return this._z;
 
-	}
+// 	}
 
-	set z( value ) {
+// 	set z( value ) {
 
-		this._z = value;
-		this._onChangeCallback();
+// 		this._z = value;
+// 		this._onChangeCallback();
 
-	}
+// 	}
 
-	get w() {
+// 	get w() {
 
-		return this._w;
+// 		return this._w;
 
-	}
+// 	}
 
-	set w( value ) {
+// 	set w( value ) {
 
-		this._w = value;
-		this._onChangeCallback();
+// 		this._w = value;
+// 		this._onChangeCallback();
 
-	}
+// 	}
 
-	set( x, y, z, w ) {
+// 	set( x, y, z, w ) {
 
-		this._x = x;
-		this._y = y;
-		this._z = z;
-		this._w = w;
+// 		this._x = x;
+// 		this._y = y;
+// 		this._z = z;
+// 		this._w = w;
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor( this._x, this._y, this._z, this._w );
+// 		return new this.constructor( this._x, this._y, this._z, this._w );
 
-	}
+// 	}
 
-	copy( quaternion ) {
+// 	copy( quaternion ) {
 
-		this._x = quaternion.x;
-		this._y = quaternion.y;
-		this._z = quaternion.z;
-		this._w = quaternion.w;
+// 		this._x = quaternion.x;
+// 		this._y = quaternion.y;
+// 		this._z = quaternion.z;
+// 		this._w = quaternion.w;
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromEuler( euler, update ) {
+// 	setFromEuler( euler, update ) {
 
-		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
+// 		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
 
-		// http://www.mathworks.com/matlabcentral/fileexchange/
-		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
-		//	content/SpinCalc.m
+// 		// http://www.mathworks.com/matlabcentral/fileexchange/
+// 		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
+// 		//	content/SpinCalc.m
 
-		const cos = Math.cos;
-		const sin = Math.sin;
+// 		const cos = Math.cos;
+// 		const sin = Math.sin;
 
-		const c1 = cos( x / 2 );
-		const c2 = cos( y / 2 );
-		const c3 = cos( z / 2 );
+// 		const c1 = cos( x / 2 );
+// 		const c2 = cos( y / 2 );
+// 		const c3 = cos( z / 2 );
 
-		const s1 = sin( x / 2 );
-		const s2 = sin( y / 2 );
-		const s3 = sin( z / 2 );
+// 		const s1 = sin( x / 2 );
+// 		const s2 = sin( y / 2 );
+// 		const s3 = sin( z / 2 );
 
-		switch ( order ) {
+// 		switch ( order ) {
 
-			case 'XYZ':
-				this._x = s1 * c2 * c3 + c1 * s2 * s3;
-				this._y = c1 * s2 * c3 - s1 * c2 * s3;
-				this._z = c1 * c2 * s3 + s1 * s2 * c3;
-				this._w = c1 * c2 * c3 - s1 * s2 * s3;
-				break;
+// 			case 'XYZ':
+// 				this._x = s1 * c2 * c3 + c1 * s2 * s3;
+// 				this._y = c1 * s2 * c3 - s1 * c2 * s3;
+// 				this._z = c1 * c2 * s3 + s1 * s2 * c3;
+// 				this._w = c1 * c2 * c3 - s1 * s2 * s3;
+// 				break;
 
-			case 'YXZ':
-				this._x = s1 * c2 * c3 + c1 * s2 * s3;
-				this._y = c1 * s2 * c3 - s1 * c2 * s3;
-				this._z = c1 * c2 * s3 - s1 * s2 * c3;
-				this._w = c1 * c2 * c3 + s1 * s2 * s3;
-				break;
+// 			case 'YXZ':
+// 				this._x = s1 * c2 * c3 + c1 * s2 * s3;
+// 				this._y = c1 * s2 * c3 - s1 * c2 * s3;
+// 				this._z = c1 * c2 * s3 - s1 * s2 * c3;
+// 				this._w = c1 * c2 * c3 + s1 * s2 * s3;
+// 				break;
 
-			case 'ZXY':
-				this._x = s1 * c2 * c3 - c1 * s2 * s3;
-				this._y = c1 * s2 * c3 + s1 * c2 * s3;
-				this._z = c1 * c2 * s3 + s1 * s2 * c3;
-				this._w = c1 * c2 * c3 - s1 * s2 * s3;
-				break;
+// 			case 'ZXY':
+// 				this._x = s1 * c2 * c3 - c1 * s2 * s3;
+// 				this._y = c1 * s2 * c3 + s1 * c2 * s3;
+// 				this._z = c1 * c2 * s3 + s1 * s2 * c3;
+// 				this._w = c1 * c2 * c3 - s1 * s2 * s3;
+// 				break;
 
-			case 'ZYX':
-				this._x = s1 * c2 * c3 - c1 * s2 * s3;
-				this._y = c1 * s2 * c3 + s1 * c2 * s3;
-				this._z = c1 * c2 * s3 - s1 * s2 * c3;
-				this._w = c1 * c2 * c3 + s1 * s2 * s3;
-				break;
+// 			case 'ZYX':
+// 				this._x = s1 * c2 * c3 - c1 * s2 * s3;
+// 				this._y = c1 * s2 * c3 + s1 * c2 * s3;
+// 				this._z = c1 * c2 * s3 - s1 * s2 * c3;
+// 				this._w = c1 * c2 * c3 + s1 * s2 * s3;
+// 				break;
 
-			case 'YZX':
-				this._x = s1 * c2 * c3 + c1 * s2 * s3;
-				this._y = c1 * s2 * c3 + s1 * c2 * s3;
-				this._z = c1 * c2 * s3 - s1 * s2 * c3;
-				this._w = c1 * c2 * c3 - s1 * s2 * s3;
-				break;
+// 			case 'YZX':
+// 				this._x = s1 * c2 * c3 + c1 * s2 * s3;
+// 				this._y = c1 * s2 * c3 + s1 * c2 * s3;
+// 				this._z = c1 * c2 * s3 - s1 * s2 * c3;
+// 				this._w = c1 * c2 * c3 - s1 * s2 * s3;
+// 				break;
 
-			case 'XZY':
-				this._x = s1 * c2 * c3 - c1 * s2 * s3;
-				this._y = c1 * s2 * c3 - s1 * c2 * s3;
-				this._z = c1 * c2 * s3 + s1 * s2 * c3;
-				this._w = c1 * c2 * c3 + s1 * s2 * s3;
-				break;
+// 			case 'XZY':
+// 				this._x = s1 * c2 * c3 - c1 * s2 * s3;
+// 				this._y = c1 * s2 * c3 - s1 * c2 * s3;
+// 				this._z = c1 * c2 * s3 + s1 * s2 * c3;
+// 				this._w = c1 * c2 * c3 + s1 * s2 * s3;
+// 				break;
 
-			default:
-				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );
+// 			default:
+// 				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );
 
-		}
+// 		}
 
-		if ( update !== false ) this._onChangeCallback();
+// 		if ( update !== false ) this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromAxisAngle( axis, angle ) {
+// 	setFromAxisAngle( axis, angle ) {
 
-		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
+// 		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
 
-		// assumes axis is normalized
+// 		// assumes axis is normalized
 
-		const halfAngle = angle / 2, s = Math.sin( halfAngle );
+// 		const halfAngle = angle / 2, s = Math.sin( halfAngle );
 
-		this._x = axis.x * s;
-		this._y = axis.y * s;
-		this._z = axis.z * s;
-		this._w = Math.cos( halfAngle );
+// 		this._x = axis.x * s;
+// 		this._y = axis.y * s;
+// 		this._z = axis.z * s;
+// 		this._w = Math.cos( halfAngle );
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromRotationMatrix( m ) {
+// 	setFromRotationMatrix( m ) {
 
-		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
+// 		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
 
-		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
+// 		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
 
-		const te = m.elements,
+// 		const te = m.elements,
 
-			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
-			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
-			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
+// 			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
+// 			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
+// 			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
 
-			trace = m11 + m22 + m33;
+// 			trace = m11 + m22 + m33;
 
-		if ( trace > 0 ) {
+// 		if ( trace > 0 ) {
 
-			const s = 0.5 / Math.sqrt( trace + 1.0 );
+// 			const s = 0.5 / Math.sqrt( trace + 1.0 );
 
-			this._w = 0.25 / s;
-			this._x = ( m32 - m23 ) * s;
-			this._y = ( m13 - m31 ) * s;
-			this._z = ( m21 - m12 ) * s;
+// 			this._w = 0.25 / s;
+// 			this._x = ( m32 - m23 ) * s;
+// 			this._y = ( m13 - m31 ) * s;
+// 			this._z = ( m21 - m12 ) * s;
 
-		} else if ( m11 > m22 && m11 > m33 ) {
+// 		} else if ( m11 > m22 && m11 > m33 ) {
 
-			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
+// 			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
 
-			this._w = ( m32 - m23 ) / s;
-			this._x = 0.25 * s;
-			this._y = ( m12 + m21 ) / s;
-			this._z = ( m13 + m31 ) / s;
+// 			this._w = ( m32 - m23 ) / s;
+// 			this._x = 0.25 * s;
+// 			this._y = ( m12 + m21 ) / s;
+// 			this._z = ( m13 + m31 ) / s;
 
-		} else if ( m22 > m33 ) {
+// 		} else if ( m22 > m33 ) {
 
-			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
+// 			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
 
-			this._w = ( m13 - m31 ) / s;
-			this._x = ( m12 + m21 ) / s;
-			this._y = 0.25 * s;
-			this._z = ( m23 + m32 ) / s;
+// 			this._w = ( m13 - m31 ) / s;
+// 			this._x = ( m12 + m21 ) / s;
+// 			this._y = 0.25 * s;
+// 			this._z = ( m23 + m32 ) / s;
 
-		} else {
+// 		} else {
 
-			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
+// 			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
 
-			this._w = ( m21 - m12 ) / s;
-			this._x = ( m13 + m31 ) / s;
-			this._y = ( m23 + m32 ) / s;
-			this._z = 0.25 * s;
+// 			this._w = ( m21 - m12 ) / s;
+// 			this._x = ( m13 + m31 ) / s;
+// 			this._y = ( m23 + m32 ) / s;
+// 			this._z = 0.25 * s;
 
-		}
+// 		}
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromUnitVectors( vFrom, vTo ) {
+// 	setFromUnitVectors( vFrom, vTo ) {
 
-		// assumes direction vectors vFrom and vTo are normalized
+// 		// assumes direction vectors vFrom and vTo are normalized
 
-		let r = vFrom.dot( vTo ) + 1;
+// 		let r = vFrom.dot( vTo ) + 1;
 
-		if ( r < Number.EPSILON ) {
+// 		if ( r < Number.EPSILON ) {
 
-			// vFrom and vTo point in opposite directions
+// 			// vFrom and vTo point in opposite directions
 
-			r = 0;
+// 			r = 0;
 
-			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
+// 			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
 
-				this._x = - vFrom.y;
-				this._y = vFrom.x;
-				this._z = 0;
-				this._w = r;
+// 				this._x = - vFrom.y;
+// 				this._y = vFrom.x;
+// 				this._z = 0;
+// 				this._w = r;
 
-			} else {
+// 			} else {
 
-				this._x = 0;
-				this._y = - vFrom.z;
-				this._z = vFrom.y;
-				this._w = r;
+// 				this._x = 0;
+// 				this._y = - vFrom.z;
+// 				this._z = vFrom.y;
+// 				this._w = r;
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
+// 			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
 
-			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
-			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
-			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
-			this._w = r;
+// 			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
+// 			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
+// 			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
+// 			this._w = r;
 
-		}
+// 		}
 
-		return this.normalize();
+// 		return this.normalize();
 
-	}
+// 	}
 
-	angleTo( q ) {
+// 	angleTo( q ) {
 
-		return 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );
+// 		return 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );
 
-	}
+// 	}
 
-	rotateTowards( q, step ) {
+// 	rotateTowards( q, step ) {
 
-		const angle = this.angleTo( q );
+// 		const angle = this.angleTo( q );
 
-		if ( angle === 0 ) return this;
+// 		if ( angle === 0 ) return this;
 
-		const t = Math.min( 1, step / angle );
+// 		const t = Math.min( 1, step / angle );
 
-		this.slerp( q, t );
+// 		this.slerp( q, t );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	identity() {
+// 	identity() {
 
-		return this.set( 0, 0, 0, 1 );
+// 		return this.set( 0, 0, 0, 1 );
 
-	}
+// 	}
 
-	invert() {
+// 	invert() {
 
-		// quaternion is assumed to have unit length
+// 		// quaternion is assumed to have unit length
 
-		return this.conjugate();
+// 		return this.conjugate();
 
-	}
+// 	}
 
-	conjugate() {
+// 	conjugate() {
 
-		this._x *= - 1;
-		this._y *= - 1;
-		this._z *= - 1;
+// 		this._x *= - 1;
+// 		this._y *= - 1;
+// 		this._z *= - 1;
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dot( v ) {
+// 	dot( v ) {
 
-		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
+// 		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
 
-	}
+// 	}
 
-	lengthSq() {
+// 	lengthSq() {
 
-		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
+// 		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
 
-	}
+// 	}
 
-	length() {
+// 	length() {
 
-		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
+// 		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
 
-	}
+// 	}
 
-	normalize() {
+// 	normalize() {
 
-		let l = this.length();
+// 		let l = this.length();
 
-		if ( l === 0 ) {
+// 		if ( l === 0 ) {
 
-			this._x = 0;
-			this._y = 0;
-			this._z = 0;
-			this._w = 1;
+// 			this._x = 0;
+// 			this._y = 0;
+// 			this._z = 0;
+// 			this._w = 1;
 
-		} else {
+// 		} else {
 
-			l = 1 / l;
+// 			l = 1 / l;
 
-			this._x = this._x * l;
-			this._y = this._y * l;
-			this._z = this._z * l;
-			this._w = this._w * l;
+// 			this._x = this._x * l;
+// 			this._y = this._y * l;
+// 			this._z = this._z * l;
+// 			this._w = this._w * l;
 
-		}
+// 		}
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiply( q ) {
+// 	multiply( q ) {
 
-		return this.multiplyQuaternions( this, q );
+// 		return this.multiplyQuaternions( this, q );
 
-	}
+// 	}
 
-	premultiply( q ) {
+// 	premultiply( q ) {
 
-		return this.multiplyQuaternions( q, this );
+// 		return this.multiplyQuaternions( q, this );
 
-	}
+// 	}
 
-	multiplyQuaternions( a, b ) {
+// 	multiplyQuaternions( a, b ) {
 
-		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
+// 		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
 
-		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
-		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
+// 		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
+// 		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
 
-		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
-		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
-		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
-		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
+// 		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
+// 		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
+// 		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
+// 		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	slerp( qb, t ) {
+// 	slerp( qb, t ) {
 
-		if ( t === 0 ) return this;
-		if ( t === 1 ) return this.copy( qb );
+// 		if ( t === 0 ) return this;
+// 		if ( t === 1 ) return this.copy( qb );
 
-		const x = this._x, y = this._y, z = this._z, w = this._w;
+// 		const x = this._x, y = this._y, z = this._z, w = this._w;
 
-		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
+// 		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
 
-		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
+// 		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
 
-		if ( cosHalfTheta < 0 ) {
+// 		if ( cosHalfTheta < 0 ) {
 
-			this._w = - qb._w;
-			this._x = - qb._x;
-			this._y = - qb._y;
-			this._z = - qb._z;
+// 			this._w = - qb._w;
+// 			this._x = - qb._x;
+// 			this._y = - qb._y;
+// 			this._z = - qb._z;
 
-			cosHalfTheta = - cosHalfTheta;
+// 			cosHalfTheta = - cosHalfTheta;
 
-		} else {
+// 		} else {
 
-			this.copy( qb );
+// 			this.copy( qb );
 
-		}
+// 		}
 
-		if ( cosHalfTheta >= 1.0 ) {
+// 		if ( cosHalfTheta >= 1.0 ) {
 
-			this._w = w;
-			this._x = x;
-			this._y = y;
-			this._z = z;
+// 			this._w = w;
+// 			this._x = x;
+// 			this._y = y;
+// 			this._z = z;
 
-			return this;
+// 			return this;
 
-		}
+// 		}
 
-		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
+// 		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
 
-		if ( sqrSinHalfTheta <= Number.EPSILON ) {
+// 		if ( sqrSinHalfTheta <= Number.EPSILON ) {
 
-			const s = 1 - t;
-			this._w = s * w + t * this._w;
-			this._x = s * x + t * this._x;
-			this._y = s * y + t * this._y;
-			this._z = s * z + t * this._z;
+// 			const s = 1 - t;
+// 			this._w = s * w + t * this._w;
+// 			this._x = s * x + t * this._x;
+// 			this._y = s * y + t * this._y;
+// 			this._z = s * z + t * this._z;
 
-			this.normalize();
-			this._onChangeCallback();
+// 			this.normalize();
+// 			this._onChangeCallback();
 
-			return this;
+// 			return this;
 
-		}
+// 		}
 
-		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
-		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
-		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
-			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
+// 		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
+// 		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
+// 		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
+// 			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
 
-		this._w = ( w * ratioA + this._w * ratioB );
-		this._x = ( x * ratioA + this._x * ratioB );
-		this._y = ( y * ratioA + this._y * ratioB );
-		this._z = ( z * ratioA + this._z * ratioB );
+// 		this._w = ( w * ratioA + this._w * ratioB );
+// 		this._x = ( x * ratioA + this._x * ratioB );
+// 		this._y = ( y * ratioA + this._y * ratioB );
+// 		this._z = ( z * ratioA + this._z * ratioB );
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	slerpQuaternions( qa, qb, t ) {
+// 	slerpQuaternions( qa, qb, t ) {
 
-		return this.copy( qa ).slerp( qb, t );
+// 		return this.copy( qa ).slerp( qb, t );
 
-	}
+// 	}
 
-	random() {
+// 	random() {
 
-		// Derived from http://planning.cs.uiuc.edu/node198.html
-		// Note, this source uses w, x, y, z ordering,
-		// so we swap the order below.
+// 		// Derived from http://planning.cs.uiuc.edu/node198.html
+// 		// Note, this source uses w, x, y, z ordering,
+// 		// so we swap the order below.
 
-		const u1 = Math.random();
-		const sqrt1u1 = Math.sqrt( 1 - u1 );
-		const sqrtu1 = Math.sqrt( u1 );
+// 		const u1 = Math.random();
+// 		const sqrt1u1 = Math.sqrt( 1 - u1 );
+// 		const sqrtu1 = Math.sqrt( u1 );
 
-		const u2 = 2 * Math.PI * Math.random();
+// 		const u2 = 2 * Math.PI * Math.random();
 
-		const u3 = 2 * Math.PI * Math.random();
+// 		const u3 = 2 * Math.PI * Math.random();
 
-		return this.set(
-			sqrt1u1 * Math.cos( u2 ),
-			sqrtu1 * Math.sin( u3 ),
-			sqrtu1 * Math.cos( u3 ),
-			sqrt1u1 * Math.sin( u2 ),
-		);
+// 		return this.set(
+// 			sqrt1u1 * Math.cos( u2 ),
+// 			sqrtu1 * Math.sin( u3 ),
+// 			sqrtu1 * Math.cos( u3 ),
+// 			sqrt1u1 * Math.sin( u2 ),
+// 		);
 
-	}
+// 	}
 
-	equals( quaternion ) {
+// 	equals( quaternion ) {
 
-		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
+// 		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
 
-	}
+// 	}
 
-	fromArray( array, offset = 0 ) {
+// 	fromArray( array, offset = 0 ) {
 
-		this._x = array[ offset ];
-		this._y = array[ offset + 1 ];
-		this._z = array[ offset + 2 ];
-		this._w = array[ offset + 3 ];
+// 		this._x = array[ offset ];
+// 		this._y = array[ offset + 1 ];
+// 		this._z = array[ offset + 2 ];
+// 		this._w = array[ offset + 3 ];
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		array[ offset ] = this._x;
-		array[ offset + 1 ] = this._y;
-		array[ offset + 2 ] = this._z;
-		array[ offset + 3 ] = this._w;
+// 		array[ offset ] = this._x;
+// 		array[ offset + 1 ] = this._y;
+// 		array[ offset + 2 ] = this._z;
+// 		array[ offset + 3 ] = this._w;
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-	fromBufferAttribute( attribute, index ) {
+// 	fromBufferAttribute( attribute, index ) {
 
-		this._x = attribute.getX( index );
-		this._y = attribute.getY( index );
-		this._z = attribute.getZ( index );
-		this._w = attribute.getW( index );
+// 		this._x = attribute.getX( index );
+// 		this._y = attribute.getY( index );
+// 		this._z = attribute.getZ( index );
+// 		this._w = attribute.getW( index );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	_onChange( callback ) {
+// 	_onChange( callback ) {
 
-		this._onChangeCallback = callback;
+// 		this._onChangeCallback = callback;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	_onChangeCallback() {}
+// 	_onChangeCallback() {}
 
-	*[ Symbol.iterator ]() {
+// 	*[ Symbol.iterator ]() {
 
-		yield this._x;
-		yield this._y;
-		yield this._z;
-		yield this._w;
+// 		yield this._x;
+// 		yield this._y;
+// 		yield this._z;
+// 		yield this._w;
 
-	}
+// 	}
 
-}
+// }
 
-class Vector3 {
+// class Vector3 {
 
-	constructor( x = 0, y = 0, z = 0 ) {
+// 	constructor( x = 0, y = 0, z = 0 ) {
 
-		Vector3.prototype.isVector3 = true;
+// 		Vector3.prototype.isVector3 = true;
 
-		this.x = x;
-		this.y = y;
-		this.z = z;
+// 		this.x = x;
+// 		this.y = y;
+// 		this.z = z;
 
-	}
+// 	}
 
-	set( x, y, z ) {
+// 	set( x, y, z ) {
 
-		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)
+// 		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)
 
-		this.x = x;
-		this.y = y;
-		this.z = z;
+// 		this.x = x;
+// 		this.y = y;
+// 		this.z = z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setScalar( scalar ) {
+// 	setScalar( scalar ) {
 
-		this.x = scalar;
-		this.y = scalar;
-		this.z = scalar;
+// 		this.x = scalar;
+// 		this.y = scalar;
+// 		this.z = scalar;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setX( x ) {
+// 	setX( x ) {
 
-		this.x = x;
+// 		this.x = x;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setY( y ) {
+// 	setY( y ) {
 
-		this.y = y;
+// 		this.y = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setZ( z ) {
+// 	setZ( z ) {
 
-		this.z = z;
+// 		this.z = z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setComponent( index, value ) {
+// 	setComponent( index, value ) {
 
-		switch ( index ) {
+// 		switch ( index ) {
 
-			case 0: this.x = value; break;
-			case 1: this.y = value; break;
-			case 2: this.z = value; break;
-			default: throw new Error( 'index is out of range: ' + index );
+// 			case 0: this.x = value; break;
+// 			case 1: this.y = value; break;
+// 			case 2: this.z = value; break;
+// 			default: throw new Error( 'index is out of range: ' + index );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getComponent( index ) {
+// 	getComponent( index ) {
 
-		switch ( index ) {
+// 		switch ( index ) {
 
-			case 0: return this.x;
-			case 1: return this.y;
-			case 2: return this.z;
-			default: throw new Error( 'index is out of range: ' + index );
+// 			case 0: return this.x;
+// 			case 1: return this.y;
+// 			case 2: return this.z;
+// 			default: throw new Error( 'index is out of range: ' + index );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor( this.x, this.y, this.z );
+// 		return new this.constructor( this.x, this.y, this.z );
 
-	}
+// 	}
 
-	copy( v ) {
+// 	copy( v ) {
 
-		this.x = v.x;
-		this.y = v.y;
-		this.z = v.z;
+// 		this.x = v.x;
+// 		this.y = v.y;
+// 		this.z = v.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	add( v ) {
+// 	add( v ) {
 
-		this.x += v.x;
-		this.y += v.y;
-		this.z += v.z;
+// 		this.x += v.x;
+// 		this.y += v.y;
+// 		this.z += v.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addScalar( s ) {
+// 	addScalar( s ) {
 
-		this.x += s;
-		this.y += s;
-		this.z += s;
+// 		this.x += s;
+// 		this.y += s;
+// 		this.z += s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addVectors( a, b ) {
+// 	addVectors( a, b ) {
 
-		this.x = a.x + b.x;
-		this.y = a.y + b.y;
-		this.z = a.z + b.z;
+// 		this.x = a.x + b.x;
+// 		this.y = a.y + b.y;
+// 		this.z = a.z + b.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addScaledVector( v, s ) {
+// 	addScaledVector( v, s ) {
 
-		this.x += v.x * s;
-		this.y += v.y * s;
-		this.z += v.z * s;
+// 		this.x += v.x * s;
+// 		this.y += v.y * s;
+// 		this.z += v.z * s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	sub( v ) {
+// 	sub( v ) {
 
-		this.x -= v.x;
-		this.y -= v.y;
-		this.z -= v.z;
+// 		this.x -= v.x;
+// 		this.y -= v.y;
+// 		this.z -= v.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	subScalar( s ) {
+// 	subScalar( s ) {
 
-		this.x -= s;
-		this.y -= s;
-		this.z -= s;
+// 		this.x -= s;
+// 		this.y -= s;
+// 		this.z -= s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	subVectors( a, b ) {
+// 	subVectors( a, b ) {
 
-		this.x = a.x - b.x;
-		this.y = a.y - b.y;
-		this.z = a.z - b.z;
+// 		this.x = a.x - b.x;
+// 		this.y = a.y - b.y;
+// 		this.z = a.z - b.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiply( v ) {
+// 	multiply( v ) {
 
-		this.x *= v.x;
-		this.y *= v.y;
-		this.z *= v.z;
+// 		this.x *= v.x;
+// 		this.y *= v.y;
+// 		this.z *= v.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiplyScalar( scalar ) {
+// 	multiplyScalar( scalar ) {
 
-		this.x *= scalar;
-		this.y *= scalar;
-		this.z *= scalar;
+// 		this.x *= scalar;
+// 		this.y *= scalar;
+// 		this.z *= scalar;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiplyVectors( a, b ) {
+// 	multiplyVectors( a, b ) {
 
-		this.x = a.x * b.x;
-		this.y = a.y * b.y;
-		this.z = a.z * b.z;
+// 		this.x = a.x * b.x;
+// 		this.y = a.y * b.y;
+// 		this.z = a.z * b.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyEuler( euler ) {
+// 	applyEuler( euler ) {
 
-		return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );
+// 		return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );
 
-	}
+// 	}
 
-	applyAxisAngle( axis, angle ) {
+// 	applyAxisAngle( axis, angle ) {
 
-		return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );
+// 		return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );
 
-	}
+// 	}
 
-	applyMatrix3( m ) {
+// 	applyMatrix3( m ) {
 
-		const x = this.x, y = this.y, z = this.z;
-		const e = m.elements;
+// 		const x = this.x, y = this.y, z = this.z;
+// 		const e = m.elements;
 
-		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
-		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
-		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
+// 		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
+// 		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
+// 		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyNormalMatrix( m ) {
+// 	applyNormalMatrix( m ) {
 
-		return this.applyMatrix3( m ).normalize();
+// 		return this.applyMatrix3( m ).normalize();
 
-	}
+// 	}
 
-	applyMatrix4( m ) {
+// 	applyMatrix4( m ) {
 
-		const x = this.x, y = this.y, z = this.z;
-		const e = m.elements;
+// 		const x = this.x, y = this.y, z = this.z;
+// 		const e = m.elements;
 
-		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );
+// 		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );
 
-		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
-		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
-		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;
+// 		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
+// 		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
+// 		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyQuaternion( q ) {
+// 	applyQuaternion( q ) {
 
-		const x = this.x, y = this.y, z = this.z;
-		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
+// 		const x = this.x, y = this.y, z = this.z;
+// 		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
 
-		// calculate quat * vector
+// 		// calculate quat * vector
 
-		const ix = qw * x + qy * z - qz * y;
-		const iy = qw * y + qz * x - qx * z;
-		const iz = qw * z + qx * y - qy * x;
-		const iw = - qx * x - qy * y - qz * z;
+// 		const ix = qw * x + qy * z - qz * y;
+// 		const iy = qw * y + qz * x - qx * z;
+// 		const iz = qw * z + qx * y - qy * x;
+// 		const iw = - qx * x - qy * y - qz * z;
 
-		// calculate result * inverse quat
+// 		// calculate result * inverse quat
 
-		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
-		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
-		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
+// 		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
+// 		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
+// 		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	project( camera ) {
+// 	project( camera ) {
 
-		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );
+// 		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );
 
-	}
+// 	}
 
-	unproject( camera ) {
+// 	unproject( camera ) {
 
-		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );
+// 		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );
 
-	}
+// 	}
 
-	transformDirection( m ) {
+// 	transformDirection( m ) {
 
-		// input: THREE.Matrix4 affine matrix
-		// vector interpreted as a direction
+// 		// input: THREE.Matrix4 affine matrix
+// 		// vector interpreted as a direction
 
-		const x = this.x, y = this.y, z = this.z;
-		const e = m.elements;
+// 		const x = this.x, y = this.y, z = this.z;
+// 		const e = m.elements;
 
-		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
-		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
-		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
+// 		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
+// 		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
+// 		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
 
-		return this.normalize();
+// 		return this.normalize();
 
-	}
+// 	}
 
-	divide( v ) {
+// 	divide( v ) {
 
-		this.x /= v.x;
-		this.y /= v.y;
-		this.z /= v.z;
+// 		this.x /= v.x;
+// 		this.y /= v.y;
+// 		this.z /= v.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	divideScalar( scalar ) {
+// 	divideScalar( scalar ) {
 
-		return this.multiplyScalar( 1 / scalar );
+// 		return this.multiplyScalar( 1 / scalar );
 
-	}
+// 	}
 
-	min( v ) {
+// 	min( v ) {
 
-		this.x = Math.min( this.x, v.x );
-		this.y = Math.min( this.y, v.y );
-		this.z = Math.min( this.z, v.z );
+// 		this.x = Math.min( this.x, v.x );
+// 		this.y = Math.min( this.y, v.y );
+// 		this.z = Math.min( this.z, v.z );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	max( v ) {
+// 	max( v ) {
 
-		this.x = Math.max( this.x, v.x );
-		this.y = Math.max( this.y, v.y );
-		this.z = Math.max( this.z, v.z );
+// 		this.x = Math.max( this.x, v.x );
+// 		this.y = Math.max( this.y, v.y );
+// 		this.z = Math.max( this.z, v.z );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clamp( min, max ) {
+// 	clamp( min, max ) {
 
-		// assumes min < max, componentwise
+// 		// assumes min < max, componentwise
 
-		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
-		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
-		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
+// 		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
+// 		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
+// 		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clampScalar( minVal, maxVal ) {
+// 	clampScalar( minVal, maxVal ) {
 
-		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
-		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
-		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
+// 		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
+// 		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
+// 		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clampLength( min, max ) {
+// 	clampLength( min, max ) {
 
-		const length = this.length();
+// 		const length = this.length();
 
-		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
+// 		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
 
-	}
+// 	}
 
-	floor() {
+// 	floor() {
 
-		this.x = Math.floor( this.x );
-		this.y = Math.floor( this.y );
-		this.z = Math.floor( this.z );
+// 		this.x = Math.floor( this.x );
+// 		this.y = Math.floor( this.y );
+// 		this.z = Math.floor( this.z );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	ceil() {
+// 	ceil() {
 
-		this.x = Math.ceil( this.x );
-		this.y = Math.ceil( this.y );
-		this.z = Math.ceil( this.z );
+// 		this.x = Math.ceil( this.x );
+// 		this.y = Math.ceil( this.y );
+// 		this.z = Math.ceil( this.z );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	round() {
+// 	round() {
 
-		this.x = Math.round( this.x );
-		this.y = Math.round( this.y );
-		this.z = Math.round( this.z );
+// 		this.x = Math.round( this.x );
+// 		this.y = Math.round( this.y );
+// 		this.z = Math.round( this.z );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	roundToZero() {
+// 	roundToZero() {
 
-		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
-		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
-		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
+// 		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
+// 		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
+// 		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	negate() {
+// 	negate() {
 
-		this.x = - this.x;
-		this.y = - this.y;
-		this.z = - this.z;
+// 		this.x = - this.x;
+// 		this.y = - this.y;
+// 		this.z = - this.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dot( v ) {
+// 	dot( v ) {
 
-		return this.x * v.x + this.y * v.y + this.z * v.z;
+// 		return this.x * v.x + this.y * v.y + this.z * v.z;
 
-	}
+// 	}
 
-	// TODO lengthSquared?
+// 	// TODO lengthSquared?
 
-	lengthSq() {
+// 	lengthSq() {
 
-		return this.x * this.x + this.y * this.y + this.z * this.z;
+// 		return this.x * this.x + this.y * this.y + this.z * this.z;
 
-	}
+// 	}
 
-	length() {
+// 	length() {
 
-		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
+// 		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
 
-	}
+// 	}
 
-	manhattanLength() {
+// 	manhattanLength() {
 
-		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
+// 		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
 
-	}
+// 	}
 
-	normalize() {
+// 	normalize() {
 
-		return this.divideScalar( this.length() || 1 );
+// 		return this.divideScalar( this.length() || 1 );
 
-	}
+// 	}
 
-	setLength( length ) {
+// 	setLength( length ) {
 
-		return this.normalize().multiplyScalar( length );
+// 		return this.normalize().multiplyScalar( length );
 
-	}
+// 	}
 
-	lerp( v, alpha ) {
+// 	lerp( v, alpha ) {
 
-		this.x += ( v.x - this.x ) * alpha;
-		this.y += ( v.y - this.y ) * alpha;
-		this.z += ( v.z - this.z ) * alpha;
+// 		this.x += ( v.x - this.x ) * alpha;
+// 		this.y += ( v.y - this.y ) * alpha;
+// 		this.z += ( v.z - this.z ) * alpha;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lerpVectors( v1, v2, alpha ) {
+// 	lerpVectors( v1, v2, alpha ) {
 
-		this.x = v1.x + ( v2.x - v1.x ) * alpha;
-		this.y = v1.y + ( v2.y - v1.y ) * alpha;
-		this.z = v1.z + ( v2.z - v1.z ) * alpha;
+// 		this.x = v1.x + ( v2.x - v1.x ) * alpha;
+// 		this.y = v1.y + ( v2.y - v1.y ) * alpha;
+// 		this.z = v1.z + ( v2.z - v1.z ) * alpha;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	cross( v ) {
+// 	cross( v ) {
 
-		return this.crossVectors( this, v );
+// 		return this.crossVectors( this, v );
 
-	}
+// 	}
 
-	crossVectors( a, b ) {
+// 	crossVectors( a, b ) {
 
-		const ax = a.x, ay = a.y, az = a.z;
-		const bx = b.x, by = b.y, bz = b.z;
+// 		const ax = a.x, ay = a.y, az = a.z;
+// 		const bx = b.x, by = b.y, bz = b.z;
 
-		this.x = ay * bz - az * by;
-		this.y = az * bx - ax * bz;
-		this.z = ax * by - ay * bx;
+// 		this.x = ay * bz - az * by;
+// 		this.y = az * bx - ax * bz;
+// 		this.z = ax * by - ay * bx;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	projectOnVector( v ) {
+// 	projectOnVector( v ) {
 
-		const denominator = v.lengthSq();
+// 		const denominator = v.lengthSq();
 
-		if ( denominator === 0 ) return this.set( 0, 0, 0 );
+// 		if ( denominator === 0 ) return this.set( 0, 0, 0 );
 
-		const scalar = v.dot( this ) / denominator;
+// 		const scalar = v.dot( this ) / denominator;
 
-		return this.copy( v ).multiplyScalar( scalar );
+// 		return this.copy( v ).multiplyScalar( scalar );
 
-	}
+// 	}
 
-	projectOnPlane( planeNormal ) {
+// 	projectOnPlane( planeNormal ) {
 
-		_vector$c.copy( this ).projectOnVector( planeNormal );
+// 		_vector$c.copy( this ).projectOnVector( planeNormal );
 
-		return this.sub( _vector$c );
+// 		return this.sub( _vector$c );
 
-	}
+// 	}
 
-	reflect( normal ) {
+// 	reflect( normal ) {
 
-		// reflect incident vector off plane orthogonal to normal
-		// normal is assumed to have unit length
+// 		// reflect incident vector off plane orthogonal to normal
+// 		// normal is assumed to have unit length
 
-		return this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
+// 		return this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
 
-	}
+// 	}
 
-	angleTo( v ) {
+// 	angleTo( v ) {
 
-		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );
+// 		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );
 
-		if ( denominator === 0 ) return Math.PI / 2;
+// 		if ( denominator === 0 ) return Math.PI / 2;
 
-		const theta = this.dot( v ) / denominator;
+// 		const theta = this.dot( v ) / denominator;
 
-		// clamp, to handle numerical problems
+// 		// clamp, to handle numerical problems
 
-		return Math.acos( clamp( theta, - 1, 1 ) );
+// 		return Math.acos( clamp( theta, - 1, 1 ) );
 
-	}
+// 	}
 
-	distanceTo( v ) {
+// 	distanceTo( v ) {
 
-		return Math.sqrt( this.distanceToSquared( v ) );
+// 		return Math.sqrt( this.distanceToSquared( v ) );
 
-	}
+// 	}
 
-	distanceToSquared( v ) {
+// 	distanceToSquared( v ) {
 
-		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
+// 		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
 
-		return dx * dx + dy * dy + dz * dz;
+// 		return dx * dx + dy * dy + dz * dz;
 
-	}
+// 	}
 
-	manhattanDistanceTo( v ) {
+// 	manhattanDistanceTo( v ) {
 
-		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );
+// 		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );
 
-	}
+// 	}
 
-	setFromSpherical( s ) {
+// 	setFromSpherical( s ) {
 
-		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );
+// 		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );
 
-	}
+// 	}
 
-	setFromSphericalCoords( radius, phi, theta ) {
+// 	setFromSphericalCoords( radius, phi, theta ) {
 
-		const sinPhiRadius = Math.sin( phi ) * radius;
+// 		const sinPhiRadius = Math.sin( phi ) * radius;
 
-		this.x = sinPhiRadius * Math.sin( theta );
-		this.y = Math.cos( phi ) * radius;
-		this.z = sinPhiRadius * Math.cos( theta );
+// 		this.x = sinPhiRadius * Math.sin( theta );
+// 		this.y = Math.cos( phi ) * radius;
+// 		this.z = sinPhiRadius * Math.cos( theta );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromCylindrical( c ) {
+// 	setFromCylindrical( c ) {
 
-		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );
+// 		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );
 
-	}
+// 	}
 
-	setFromCylindricalCoords( radius, theta, y ) {
+// 	setFromCylindricalCoords( radius, theta, y ) {
 
-		this.x = radius * Math.sin( theta );
-		this.y = y;
-		this.z = radius * Math.cos( theta );
+// 		this.x = radius * Math.sin( theta );
+// 		this.y = y;
+// 		this.z = radius * Math.cos( theta );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromMatrixPosition( m ) {
+// 	setFromMatrixPosition( m ) {
 
-		const e = m.elements;
+// 		const e = m.elements;
 
-		this.x = e[ 12 ];
-		this.y = e[ 13 ];
-		this.z = e[ 14 ];
+// 		this.x = e[ 12 ];
+// 		this.y = e[ 13 ];
+// 		this.z = e[ 14 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromMatrixScale( m ) {
+// 	setFromMatrixScale( m ) {
 
-		const sx = this.setFromMatrixColumn( m, 0 ).length();
-		const sy = this.setFromMatrixColumn( m, 1 ).length();
-		const sz = this.setFromMatrixColumn( m, 2 ).length();
+// 		const sx = this.setFromMatrixColumn( m, 0 ).length();
+// 		const sy = this.setFromMatrixColumn( m, 1 ).length();
+// 		const sz = this.setFromMatrixColumn( m, 2 ).length();
 
-		this.x = sx;
-		this.y = sy;
-		this.z = sz;
+// 		this.x = sx;
+// 		this.y = sy;
+// 		this.z = sz;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromMatrixColumn( m, index ) {
+// 	setFromMatrixColumn( m, index ) {
 
-		return this.fromArray( m.elements, index * 4 );
+// 		return this.fromArray( m.elements, index * 4 );
 
-	}
+// 	}
 
-	setFromMatrix3Column( m, index ) {
+// 	setFromMatrix3Column( m, index ) {
 
-		return this.fromArray( m.elements, index * 3 );
+// 		return this.fromArray( m.elements, index * 3 );
 
-	}
+// 	}
 
-	setFromEuler( e ) {
+// 	setFromEuler( e ) {
 
-		this.x = e._x;
-		this.y = e._y;
-		this.z = e._z;
+// 		this.x = e._x;
+// 		this.y = e._y;
+// 		this.z = e._z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( v ) {
+// 	equals( v ) {
 
-		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
+// 		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
 
-	}
+// 	}
 
-	fromArray( array, offset = 0 ) {
+// 	fromArray( array, offset = 0 ) {
 
-		this.x = array[ offset ];
-		this.y = array[ offset + 1 ];
-		this.z = array[ offset + 2 ];
+// 		this.x = array[ offset ];
+// 		this.y = array[ offset + 1 ];
+// 		this.z = array[ offset + 2 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		array[ offset ] = this.x;
-		array[ offset + 1 ] = this.y;
-		array[ offset + 2 ] = this.z;
+// 		array[ offset ] = this.x;
+// 		array[ offset + 1 ] = this.y;
+// 		array[ offset + 2 ] = this.z;
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-	fromBufferAttribute( attribute, index ) {
+// 	fromBufferAttribute( attribute, index ) {
 
-		this.x = attribute.getX( index );
-		this.y = attribute.getY( index );
-		this.z = attribute.getZ( index );
+// 		this.x = attribute.getX( index );
+// 		this.y = attribute.getY( index );
+// 		this.z = attribute.getZ( index );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	random() {
+// 	random() {
 
-		this.x = Math.random();
-		this.y = Math.random();
-		this.z = Math.random();
+// 		this.x = Math.random();
+// 		this.y = Math.random();
+// 		this.z = Math.random();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	randomDirection() {
+// 	randomDirection() {
 
-		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html
+// 		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html
 
-		const u = ( Math.random() - 0.5 ) * 2;
-		const t = Math.random() * Math.PI * 2;
-		const f = Math.sqrt( 1 - u ** 2 );
+// 		const u = ( Math.random() - 0.5 ) * 2;
+// 		const t = Math.random() * Math.PI * 2;
+// 		const f = Math.sqrt( 1 - u ** 2 );
 
-		this.x = f * Math.cos( t );
-		this.y = f * Math.sin( t );
-		this.z = u;
+// 		this.x = f * Math.cos( t );
+// 		this.y = f * Math.sin( t );
+// 		this.z = u;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	*[ Symbol.iterator ]() {
+// 	*[ Symbol.iterator ]() {
 
-		yield this.x;
-		yield this.y;
-		yield this.z;
+// 		yield this.x;
+// 		yield this.y;
+// 		yield this.z;
 
-	}
+// 	}
 
-}
+// }
 
-const _vector$c = /*@__PURE__*/ new Vector3();
-const _quaternion$4 = /*@__PURE__*/ new Quaternion();
+// const _vector$c = /*@__PURE__*/ new Vector3();
+// const _quaternion$4 = /*@__PURE__*/ new Quaternion();
 
-class Box3 {
+// class Box3 {
 
-	constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {
+// 	constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {
 
-		this.isBox3 = true;
+// 		this.isBox3 = true;
 
-		this.min = min;
-		this.max = max;
+// 		this.min = min;
+// 		this.max = max;
 
-	}
+// 	}
 
-	set( min, max ) {
+// 	set( min, max ) {
 
-		this.min.copy( min );
-		this.max.copy( max );
+// 		this.min.copy( min );
+// 		this.max.copy( max );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromArray( array ) {
+// 	setFromArray( array ) {
 
-		let minX = + Infinity;
-		let minY = + Infinity;
-		let minZ = + Infinity;
+// 		let minX = + Infinity;
+// 		let minY = + Infinity;
+// 		let minZ = + Infinity;
 
-		let maxX = - Infinity;
-		let maxY = - Infinity;
-		let maxZ = - Infinity;
+// 		let maxX = - Infinity;
+// 		let maxY = - Infinity;
+// 		let maxZ = - Infinity;
 
-		for ( let i = 0, l = array.length; i < l; i += 3 ) {
+// 		for ( let i = 0, l = array.length; i < l; i += 3 ) {
 
-			const x = array[ i ];
-			const y = array[ i + 1 ];
-			const z = array[ i + 2 ];
+// 			const x = array[ i ];
+// 			const y = array[ i + 1 ];
+// 			const z = array[ i + 2 ];
 
-			if ( x < minX ) minX = x;
-			if ( y < minY ) minY = y;
-			if ( z < minZ ) minZ = z;
+// 			if ( x < minX ) minX = x;
+// 			if ( y < minY ) minY = y;
+// 			if ( z < minZ ) minZ = z;
 
-			if ( x > maxX ) maxX = x;
-			if ( y > maxY ) maxY = y;
-			if ( z > maxZ ) maxZ = z;
+// 			if ( x > maxX ) maxX = x;
+// 			if ( y > maxY ) maxY = y;
+// 			if ( z > maxZ ) maxZ = z;
 
-		}
+// 		}
 
-		this.min.set( minX, minY, minZ );
-		this.max.set( maxX, maxY, maxZ );
+// 		this.min.set( minX, minY, minZ );
+// 		this.max.set( maxX, maxY, maxZ );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromBufferAttribute( attribute ) {
+// 	setFromBufferAttribute( attribute ) {
 
-		let minX = + Infinity;
-		let minY = + Infinity;
-		let minZ = + Infinity;
+// 		let minX = + Infinity;
+// 		let minY = + Infinity;
+// 		let minZ = + Infinity;
 
-		let maxX = - Infinity;
-		let maxY = - Infinity;
-		let maxZ = - Infinity;
+// 		let maxX = - Infinity;
+// 		let maxY = - Infinity;
+// 		let maxZ = - Infinity;
 
-		for ( let i = 0, l = attribute.count; i < l; i ++ ) {
+// 		for ( let i = 0, l = attribute.count; i < l; i ++ ) {
 
-			const x = attribute.getX( i );
-			const y = attribute.getY( i );
-			const z = attribute.getZ( i );
+// 			const x = attribute.getX( i );
+// 			const y = attribute.getY( i );
+// 			const z = attribute.getZ( i );
 
-			if ( x < minX ) minX = x;
-			if ( y < minY ) minY = y;
-			if ( z < minZ ) minZ = z;
+// 			if ( x < minX ) minX = x;
+// 			if ( y < minY ) minY = y;
+// 			if ( z < minZ ) minZ = z;
 
-			if ( x > maxX ) maxX = x;
-			if ( y > maxY ) maxY = y;
-			if ( z > maxZ ) maxZ = z;
+// 			if ( x > maxX ) maxX = x;
+// 			if ( y > maxY ) maxY = y;
+// 			if ( z > maxZ ) maxZ = z;
 
-		}
+// 		}
 
-		this.min.set( minX, minY, minZ );
-		this.max.set( maxX, maxY, maxZ );
+// 		this.min.set( minX, minY, minZ );
+// 		this.max.set( maxX, maxY, maxZ );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromPoints( points ) {
+// 	setFromPoints( points ) {
 
-		this.makeEmpty();
+// 		this.makeEmpty();
 
-		for ( let i = 0, il = points.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = points.length; i < il; i ++ ) {
 
-			this.expandByPoint( points[ i ] );
+// 			this.expandByPoint( points[ i ] );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromCenterAndSize( center, size ) {
+// 	setFromCenterAndSize( center, size ) {
 
-		const halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );
+// 		const halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );
 
-		this.min.copy( center ).sub( halfSize );
-		this.max.copy( center ).add( halfSize );
+// 		this.min.copy( center ).sub( halfSize );
+// 		this.max.copy( center ).add( halfSize );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromObject( object, precise = false ) {
+// 	setFromObject( object, precise = false ) {
 
-		this.makeEmpty();
+// 		this.makeEmpty();
 
-		return this.expandByObject( object, precise );
+// 		return this.expandByObject( object, precise );
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	copy( box ) {
+// 	copy( box ) {
 
-		this.min.copy( box.min );
-		this.max.copy( box.max );
+// 		this.min.copy( box.min );
+// 		this.max.copy( box.max );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeEmpty() {
+// 	makeEmpty() {
 
-		this.min.x = this.min.y = this.min.z = + Infinity;
-		this.max.x = this.max.y = this.max.z = - Infinity;
+// 		this.min.x = this.min.y = this.min.z = + Infinity;
+// 		this.max.x = this.max.y = this.max.z = - Infinity;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	isEmpty() {
+// 	isEmpty() {
 
-		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
+// 		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
 
-		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
+// 		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
 
-	}
+// 	}
 
-	getCenter( target ) {
+// 	getCenter( target ) {
 
-		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
+// 		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
 
-	}
+// 	}
 
-	getSize( target ) {
+// 	getSize( target ) {
 
-		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );
+// 		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );
 
-	}
+// 	}
 
-	expandByPoint( point ) {
+// 	expandByPoint( point ) {
 
-		this.min.min( point );
-		this.max.max( point );
+// 		this.min.min( point );
+// 		this.max.max( point );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	expandByVector( vector ) {
+// 	expandByVector( vector ) {
 
-		this.min.sub( vector );
-		this.max.add( vector );
+// 		this.min.sub( vector );
+// 		this.max.add( vector );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	expandByScalar( scalar ) {
+// 	expandByScalar( scalar ) {
 
-		this.min.addScalar( - scalar );
-		this.max.addScalar( scalar );
+// 		this.min.addScalar( - scalar );
+// 		this.max.addScalar( scalar );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	expandByObject( object, precise = false ) {
+// 	expandByObject( object, precise = false ) {
 
-		// Computes the world-axis-aligned bounding box of an object (including its children),
-		// accounting for both the object's, and children's, world transforms
+// 		// Computes the world-axis-aligned bounding box of an object (including its children),
+// 		// accounting for both the object's, and children's, world transforms
 
-		object.updateWorldMatrix( false, false );
+// 		object.updateWorldMatrix( false, false );
 
-		const geometry = object.geometry;
+// 		const geometry = object.geometry;
 
-		if ( geometry !== undefined ) {
+// 		if ( geometry !== undefined ) {
 
-			if ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {
+// 			if ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {
 
-				const position = geometry.attributes.position;
-				for ( let i = 0, l = position.count; i < l; i ++ ) {
+// 				const position = geometry.attributes.position;
+// 				for ( let i = 0, l = position.count; i < l; i ++ ) {
 
-					_vector$b.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );
-					this.expandByPoint( _vector$b );
+// 					_vector$b.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );
+// 					this.expandByPoint( _vector$b );
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				if ( geometry.boundingBox === null ) {
+// 				if ( geometry.boundingBox === null ) {
 
-					geometry.computeBoundingBox();
+// 					geometry.computeBoundingBox();
 
-				}
+// 				}
 
-				_box$3.copy( geometry.boundingBox );
-				_box$3.applyMatrix4( object.matrixWorld );
+// 				_box$3.copy( geometry.boundingBox );
+// 				_box$3.applyMatrix4( object.matrixWorld );
 
-				this.union( _box$3 );
+// 				this.union( _box$3 );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const children = object.children;
+// 		const children = object.children;
 
-		for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-			this.expandByObject( children[ i ], precise );
+// 			this.expandByObject( children[ i ], precise );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	containsPoint( point ) {
+// 	containsPoint( point ) {
 
-		return point.x < this.min.x || point.x > this.max.x ||
-			point.y < this.min.y || point.y > this.max.y ||
-			point.z < this.min.z || point.z > this.max.z ? false : true;
+// 		return point.x < this.min.x || point.x > this.max.x ||
+// 			point.y < this.min.y || point.y > this.max.y ||
+// 			point.z < this.min.z || point.z > this.max.z ? false : true;
 
-	}
+// 	}
 
-	containsBox( box ) {
+// 	containsBox( box ) {
 
-		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
-			this.min.y <= box.min.y && box.max.y <= this.max.y &&
-			this.min.z <= box.min.z && box.max.z <= this.max.z;
+// 		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
+// 			this.min.y <= box.min.y && box.max.y <= this.max.y &&
+// 			this.min.z <= box.min.z && box.max.z <= this.max.z;
 
-	}
+// 	}
 
-	getParameter( point, target ) {
+// 	getParameter( point, target ) {
 
-		// This can potentially have a divide by zero if the box
-		// has a size dimension of 0.
+// 		// This can potentially have a divide by zero if the box
+// 		// has a size dimension of 0.
 
-		return target.set(
-			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
-			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
-			( point.z - this.min.z ) / ( this.max.z - this.min.z )
-		);
+// 		return target.set(
+// 			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
+// 			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
+// 			( point.z - this.min.z ) / ( this.max.z - this.min.z )
+// 		);
 
-	}
+// 	}
 
-	intersectsBox( box ) {
+// 	intersectsBox( box ) {
 
-		// using 6 splitting planes to rule out intersections.
-		return box.max.x < this.min.x || box.min.x > this.max.x ||
-			box.max.y < this.min.y || box.min.y > this.max.y ||
-			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
+// 		// using 6 splitting planes to rule out intersections.
+// 		return box.max.x < this.min.x || box.min.x > this.max.x ||
+// 			box.max.y < this.min.y || box.min.y > this.max.y ||
+// 			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
 
-	}
+// 	}
 
-	intersectsSphere( sphere ) {
+// 	intersectsSphere( sphere ) {
 
-		// Find the point on the AABB closest to the sphere center.
-		this.clampPoint( sphere.center, _vector$b );
+// 		// Find the point on the AABB closest to the sphere center.
+// 		this.clampPoint( sphere.center, _vector$b );
 
-		// If that point is inside the sphere, the AABB and sphere intersect.
-		return _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );
+// 		// If that point is inside the sphere, the AABB and sphere intersect.
+// 		return _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );
 
-	}
+// 	}
 
-	intersectsPlane( plane ) {
+// 	intersectsPlane( plane ) {
 
-		// We compute the minimum and maximum dot product values. If those values
-		// are on the same side (back or front) of the plane, then there is no intersection.
+// 		// We compute the minimum and maximum dot product values. If those values
+// 		// are on the same side (back or front) of the plane, then there is no intersection.
 
-		let min, max;
+// 		let min, max;
 
-		if ( plane.normal.x > 0 ) {
+// 		if ( plane.normal.x > 0 ) {
 
-			min = plane.normal.x * this.min.x;
-			max = plane.normal.x * this.max.x;
+// 			min = plane.normal.x * this.min.x;
+// 			max = plane.normal.x * this.max.x;
 
-		} else {
+// 		} else {
 
-			min = plane.normal.x * this.max.x;
-			max = plane.normal.x * this.min.x;
+// 			min = plane.normal.x * this.max.x;
+// 			max = plane.normal.x * this.min.x;
 
-		}
+// 		}
 
-		if ( plane.normal.y > 0 ) {
+// 		if ( plane.normal.y > 0 ) {
 
-			min += plane.normal.y * this.min.y;
-			max += plane.normal.y * this.max.y;
+// 			min += plane.normal.y * this.min.y;
+// 			max += plane.normal.y * this.max.y;
 
-		} else {
+// 		} else {
 
-			min += plane.normal.y * this.max.y;
-			max += plane.normal.y * this.min.y;
+// 			min += plane.normal.y * this.max.y;
+// 			max += plane.normal.y * this.min.y;
 
-		}
+// 		}
 
-		if ( plane.normal.z > 0 ) {
+// 		if ( plane.normal.z > 0 ) {
 
-			min += plane.normal.z * this.min.z;
-			max += plane.normal.z * this.max.z;
+// 			min += plane.normal.z * this.min.z;
+// 			max += plane.normal.z * this.max.z;
 
-		} else {
+// 		} else {
 
-			min += plane.normal.z * this.max.z;
-			max += plane.normal.z * this.min.z;
+// 			min += plane.normal.z * this.max.z;
+// 			max += plane.normal.z * this.min.z;
 
-		}
+// 		}
 
-		return ( min <= - plane.constant && max >= - plane.constant );
+// 		return ( min <= - plane.constant && max >= - plane.constant );
 
-	}
+// 	}
 
-	intersectsTriangle( triangle ) {
+// 	intersectsTriangle( triangle ) {
 
-		if ( this.isEmpty() ) {
+// 		if ( this.isEmpty() ) {
 
-			return false;
+// 			return false;
 
-		}
+// 		}
 
-		// compute box center and extents
-		this.getCenter( _center );
-		_extents.subVectors( this.max, _center );
+// 		// compute box center and extents
+// 		this.getCenter( _center );
+// 		_extents.subVectors( this.max, _center );
 
-		// translate triangle to aabb origin
-		_v0$2.subVectors( triangle.a, _center );
-		_v1$7.subVectors( triangle.b, _center );
-		_v2$3.subVectors( triangle.c, _center );
+// 		// translate triangle to aabb origin
+// 		_v0$2.subVectors( triangle.a, _center );
+// 		_v1$7.subVectors( triangle.b, _center );
+// 		_v2$3.subVectors( triangle.c, _center );
 
-		// compute edge vectors for triangle
-		_f0.subVectors( _v1$7, _v0$2 );
-		_f1.subVectors( _v2$3, _v1$7 );
-		_f2.subVectors( _v0$2, _v2$3 );
+// 		// compute edge vectors for triangle
+// 		_f0.subVectors( _v1$7, _v0$2 );
+// 		_f1.subVectors( _v2$3, _v1$7 );
+// 		_f2.subVectors( _v0$2, _v2$3 );
 
-		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
-		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
-		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
-		let axes = [
-			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
-			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
-			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
-		];
-		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {
+// 		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
+// 		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
+// 		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
+// 		let axes = [
+// 			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
+// 			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
+// 			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
+// 		];
+// 		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {
 
-			return false;
+// 			return false;
 
-		}
+// 		}
 
-		// test 3 face normals from the aabb
-		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
-		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {
+// 		// test 3 face normals from the aabb
+// 		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
+// 		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {
 
-			return false;
+// 			return false;
 
-		}
+// 		}
 
-		// finally testing the face normal of the triangle
-		// use already existing triangle edge vectors here
-		_triangleNormal.crossVectors( _f0, _f1 );
-		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];
+// 		// finally testing the face normal of the triangle
+// 		// use already existing triangle edge vectors here
+// 		_triangleNormal.crossVectors( _f0, _f1 );
+// 		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];
 
-		return satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );
+// 		return satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );
 
-	}
+// 	}
 
-	clampPoint( point, target ) {
+// 	clampPoint( point, target ) {
 
-		return target.copy( point ).clamp( this.min, this.max );
+// 		return target.copy( point ).clamp( this.min, this.max );
 
-	}
+// 	}
 
-	distanceToPoint( point ) {
+// 	distanceToPoint( point ) {
 
-		const clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );
+// 		const clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );
 
-		return clampedPoint.sub( point ).length();
+// 		return clampedPoint.sub( point ).length();
 
-	}
+// 	}
 
-	getBoundingSphere( target ) {
+// 	getBoundingSphere( target ) {
 
-		this.getCenter( target.center );
+// 		this.getCenter( target.center );
 
-		target.radius = this.getSize( _vector$b ).length() * 0.5;
+// 		target.radius = this.getSize( _vector$b ).length() * 0.5;
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	intersect( box ) {
+// 	intersect( box ) {
 
-		this.min.max( box.min );
-		this.max.min( box.max );
+// 		this.min.max( box.min );
+// 		this.max.min( box.max );
 
-		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
-		if ( this.isEmpty() ) this.makeEmpty();
+// 		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
+// 		if ( this.isEmpty() ) this.makeEmpty();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	union( box ) {
+// 	union( box ) {
 
-		this.min.min( box.min );
-		this.max.max( box.max );
+// 		this.min.min( box.min );
+// 		this.max.max( box.max );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyMatrix4( matrix ) {
+// 	applyMatrix4( matrix ) {
 
-		// transform of empty box is an empty box.
-		if ( this.isEmpty() ) return this;
+// 		// transform of empty box is an empty box.
+// 		if ( this.isEmpty() ) return this;
 
-		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
-		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
-		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
-		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
-		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
-		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
-		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
-		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
-		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111
+// 		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
+// 		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
+// 		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
+// 		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
+// 		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
+// 		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
+// 		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
+// 		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
+// 		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111
 
-		this.setFromPoints( _points );
+// 		this.setFromPoints( _points );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	translate( offset ) {
+// 	translate( offset ) {
 
-		this.min.add( offset );
-		this.max.add( offset );
+// 		this.min.add( offset );
+// 		this.max.add( offset );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( box ) {
+// 	equals( box ) {
 
-		return box.min.equals( this.min ) && box.max.equals( this.max );
+// 		return box.min.equals( this.min ) && box.max.equals( this.max );
 
-	}
+// 	}
 
-}
+// }
 
-const _points = [
-	/*@__PURE__*/ new Vector3(),
-	/*@__PURE__*/ new Vector3(),
-	/*@__PURE__*/ new Vector3(),
-	/*@__PURE__*/ new Vector3(),
-	/*@__PURE__*/ new Vector3(),
-	/*@__PURE__*/ new Vector3(),
-	/*@__PURE__*/ new Vector3(),
-	/*@__PURE__*/ new Vector3()
-];
+// const _points = [
+// 	/*@__PURE__*/ new Vector3(),
+// 	/*@__PURE__*/ new Vector3(),
+// 	/*@__PURE__*/ new Vector3(),
+// 	/*@__PURE__*/ new Vector3(),
+// 	/*@__PURE__*/ new Vector3(),
+// 	/*@__PURE__*/ new Vector3(),
+// 	/*@__PURE__*/ new Vector3(),
+// 	/*@__PURE__*/ new Vector3()
+// ];
 
-const _vector$b = /*@__PURE__*/ new Vector3();
+// const _vector$b = /*@__PURE__*/ new Vector3();
 
-const _box$3 = /*@__PURE__*/ new Box3();
+// const _box$3 = /*@__PURE__*/ new Box3();
 
-// triangle centered vertices
+// // triangle centered vertices
 
-const _v0$2 = /*@__PURE__*/ new Vector3();
-const _v1$7 = /*@__PURE__*/ new Vector3();
-const _v2$3 = /*@__PURE__*/ new Vector3();
+// const _v0$2 = /*@__PURE__*/ new Vector3();
+// const _v1$7 = /*@__PURE__*/ new Vector3();
+// const _v2$3 = /*@__PURE__*/ new Vector3();
 
-// triangle edge vectors
+// // triangle edge vectors
 
-const _f0 = /*@__PURE__*/ new Vector3();
-const _f1 = /*@__PURE__*/ new Vector3();
-const _f2 = /*@__PURE__*/ new Vector3();
+// const _f0 = /*@__PURE__*/ new Vector3();
+// const _f1 = /*@__PURE__*/ new Vector3();
+// const _f2 = /*@__PURE__*/ new Vector3();
 
-const _center = /*@__PURE__*/ new Vector3();
-const _extents = /*@__PURE__*/ new Vector3();
-const _triangleNormal = /*@__PURE__*/ new Vector3();
-const _testAxis = /*@__PURE__*/ new Vector3();
+// const _center = /*@__PURE__*/ new Vector3();
+// const _extents = /*@__PURE__*/ new Vector3();
+// const _triangleNormal = /*@__PURE__*/ new Vector3();
+// const _testAxis = /*@__PURE__*/ new Vector3();
 
-function satForAxes( axes, v0, v1, v2, extents ) {
+// function satForAxes( axes, v0, v1, v2, extents ) {
 
-	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {
+// 	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {
 
-		_testAxis.fromArray( axes, i );
-		// project the aabb onto the separating axis
-		const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
-		// project all 3 vertices of the triangle onto the separating axis
-		const p0 = v0.dot( _testAxis );
-		const p1 = v1.dot( _testAxis );
-		const p2 = v2.dot( _testAxis );
-		// actual test, basically see if either of the most extreme of the triangle points intersects r
-		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {
+// 		_testAxis.fromArray( axes, i );
+// 		// project the aabb onto the separating axis
+// 		const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
+// 		// project all 3 vertices of the triangle onto the separating axis
+// 		const p0 = v0.dot( _testAxis );
+// 		const p1 = v1.dot( _testAxis );
+// 		const p2 = v2.dot( _testAxis );
+// 		// actual test, basically see if either of the most extreme of the triangle points intersects r
+// 		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {
 
-			// points of the projected triangle are outside the projected half-length of the aabb
-			// the axis is separating and we can exit
-			return false;
+// 			// points of the projected triangle are outside the projected half-length of the aabb
+// 			// the axis is separating and we can exit
+// 			return false;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return true;
+// 	return true;
 
-}
+// }
 
-const _box$2 = /*@__PURE__*/ new Box3();
-const _v1$6 = /*@__PURE__*/ new Vector3();
-const _toFarthestPoint = /*@__PURE__*/ new Vector3();
-const _toPoint = /*@__PURE__*/ new Vector3();
+// const _box$2 = /*@__PURE__*/ new Box3();
+// const _v1$6 = /*@__PURE__*/ new Vector3();
+// const _toFarthestPoint = /*@__PURE__*/ new Vector3();
+// const _toPoint = /*@__PURE__*/ new Vector3();
 
-class Sphere {
+// class Sphere {
 
-	constructor( center = new Vector3(), radius = - 1 ) {
+// 	constructor( center = new Vector3(), radius = - 1 ) {
 
-		this.center = center;
-		this.radius = radius;
+// 		this.center = center;
+// 		this.radius = radius;
 
-	}
+// 	}
 
-	set( center, radius ) {
+// 	set( center, radius ) {
 
-		this.center.copy( center );
-		this.radius = radius;
+// 		this.center.copy( center );
+// 		this.radius = radius;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromPoints( points, optionalCenter ) {
+// 	setFromPoints( points, optionalCenter ) {
 
-		const center = this.center;
+// 		const center = this.center;
 
-		if ( optionalCenter !== undefined ) {
+// 		if ( optionalCenter !== undefined ) {
 
-			center.copy( optionalCenter );
+// 			center.copy( optionalCenter );
 
-		} else {
+// 		} else {
 
-			_box$2.setFromPoints( points ).getCenter( center );
+// 			_box$2.setFromPoints( points ).getCenter( center );
 
-		}
+// 		}
 
-		let maxRadiusSq = 0;
+// 		let maxRadiusSq = 0;
 
-		for ( let i = 0, il = points.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = points.length; i < il; i ++ ) {
 
-			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
+// 			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
 
-		}
+// 		}
 
-		this.radius = Math.sqrt( maxRadiusSq );
+// 		this.radius = Math.sqrt( maxRadiusSq );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( sphere ) {
+// 	copy( sphere ) {
 
-		this.center.copy( sphere.center );
-		this.radius = sphere.radius;
+// 		this.center.copy( sphere.center );
+// 		this.radius = sphere.radius;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	isEmpty() {
+// 	isEmpty() {
 
-		return ( this.radius < 0 );
+// 		return ( this.radius < 0 );
 
-	}
+// 	}
 
-	makeEmpty() {
+// 	makeEmpty() {
 
-		this.center.set( 0, 0, 0 );
-		this.radius = - 1;
+// 		this.center.set( 0, 0, 0 );
+// 		this.radius = - 1;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	containsPoint( point ) {
+// 	containsPoint( point ) {
 
-		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
+// 		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
 
-	}
+// 	}
 
-	distanceToPoint( point ) {
+// 	distanceToPoint( point ) {
 
-		return ( point.distanceTo( this.center ) - this.radius );
+// 		return ( point.distanceTo( this.center ) - this.radius );
 
-	}
+// 	}
 
-	intersectsSphere( sphere ) {
+// 	intersectsSphere( sphere ) {
 
-		const radiusSum = this.radius + sphere.radius;
+// 		const radiusSum = this.radius + sphere.radius;
 
-		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
+// 		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
 
-	}
+// 	}
 
-	intersectsBox( box ) {
+// 	intersectsBox( box ) {
 
-		return box.intersectsSphere( this );
+// 		return box.intersectsSphere( this );
 
-	}
+// 	}
 
-	intersectsPlane( plane ) {
+// 	intersectsPlane( plane ) {
 
-		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;
+// 		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;
 
-	}
+// 	}
 
-	clampPoint( point, target ) {
+// 	clampPoint( point, target ) {
 
-		const deltaLengthSq = this.center.distanceToSquared( point );
+// 		const deltaLengthSq = this.center.distanceToSquared( point );
 
-		target.copy( point );
+// 		target.copy( point );
 
-		if ( deltaLengthSq > ( this.radius * this.radius ) ) {
+// 		if ( deltaLengthSq > ( this.radius * this.radius ) ) {
 
-			target.sub( this.center ).normalize();
-			target.multiplyScalar( this.radius ).add( this.center );
+// 			target.sub( this.center ).normalize();
+// 			target.multiplyScalar( this.radius ).add( this.center );
 
-		}
+// 		}
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	getBoundingBox( target ) {
+// 	getBoundingBox( target ) {
 
-		if ( this.isEmpty() ) {
+// 		if ( this.isEmpty() ) {
 
-			// Empty sphere produces empty bounding box
-			target.makeEmpty();
-			return target;
+// 			// Empty sphere produces empty bounding box
+// 			target.makeEmpty();
+// 			return target;
 
-		}
+// 		}
 
-		target.set( this.center, this.center );
-		target.expandByScalar( this.radius );
+// 		target.set( this.center, this.center );
+// 		target.expandByScalar( this.radius );
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	applyMatrix4( matrix ) {
+// 	applyMatrix4( matrix ) {
 
-		this.center.applyMatrix4( matrix );
-		this.radius = this.radius * matrix.getMaxScaleOnAxis();
+// 		this.center.applyMatrix4( matrix );
+// 		this.radius = this.radius * matrix.getMaxScaleOnAxis();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	translate( offset ) {
+// 	translate( offset ) {
 
-		this.center.add( offset );
+// 		this.center.add( offset );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	expandByPoint( point ) {
+// 	expandByPoint( point ) {
 
-		if ( this.isEmpty() ) {
+// 		if ( this.isEmpty() ) {
 
-			this.center.copy( point );
-			this.radius = 0;
+// 			this.center.copy( point );
+// 			this.radius = 0;
 
-			return this;
+// 			return this;
 
-		}
+// 		}
 
-		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
+// 		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
 
-		_toPoint.subVectors( point, this.center );
+// 		_toPoint.subVectors( point, this.center );
 
-		const lengthSq = _toPoint.lengthSq();
+// 		const lengthSq = _toPoint.lengthSq();
 
-		if ( lengthSq > ( this.radius * this.radius ) ) {
+// 		if ( lengthSq > ( this.radius * this.radius ) ) {
 
-			const length = Math.sqrt( lengthSq );
-			const missingRadiusHalf = ( length - this.radius ) * 0.5;
+// 			const length = Math.sqrt( lengthSq );
+// 			const missingRadiusHalf = ( length - this.radius ) * 0.5;
 
-			// Nudge this sphere towards the target point. Add half the missing distance to radius,
-			// and the other half to position. This gives a tighter enclosure, instead of if
-			// the whole missing distance were just added to radius.
+// 			// Nudge this sphere towards the target point. Add half the missing distance to radius,
+// 			// and the other half to position. This gives a tighter enclosure, instead of if
+// 			// the whole missing distance were just added to radius.
 
-			this.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );
-			this.radius += missingRadiusHalf;
+// 			this.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );
+// 			this.radius += missingRadiusHalf;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	union( sphere ) {
+// 	union( sphere ) {
 
-		// handle empty sphere cases
-		if ( sphere.isEmpty() ) {
+// 		// handle empty sphere cases
+// 		if ( sphere.isEmpty() ) {
 
-			return this;
+// 			return this;
 
-		} else if ( this.isEmpty() ) {
+// 		} else if ( this.isEmpty() ) {
 
-			this.copy( sphere );
+// 			this.copy( sphere );
 
-			return this;
+// 			return this;
 
-		}
+// 		}
 
-		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
+// 		// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
 
-		// To enclose another sphere into this sphere, we only need to enclose two points:
-		// 1) Enclose the farthest point on the other sphere into this sphere.
-		// 2) Enclose the opposite point of the farthest point into this sphere.
+// 		// To enclose another sphere into this sphere, we only need to enclose two points:
+// 		// 1) Enclose the farthest point on the other sphere into this sphere.
+// 		// 2) Enclose the opposite point of the farthest point into this sphere.
 
-		 if ( this.center.equals( sphere.center ) === true ) {
+// 		 if ( this.center.equals( sphere.center ) === true ) {
 
-			 _toFarthestPoint.set( 0, 0, 1 ).multiplyScalar( sphere.radius );
+// 			 _toFarthestPoint.set( 0, 0, 1 ).multiplyScalar( sphere.radius );
 
 
-		} else {
+// 		} else {
 
-			_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );
+// 			_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );
 
-		}
+// 		}
 
-		this.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );
-		this.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );
+// 		this.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );
+// 		this.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( sphere ) {
+// 	equals( sphere ) {
 
-		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
+// 		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-const _vector$a = /*@__PURE__*/ new Vector3();
-const _segCenter = /*@__PURE__*/ new Vector3();
-const _segDir = /*@__PURE__*/ new Vector3();
-const _diff = /*@__PURE__*/ new Vector3();
+// const _vector$a = /*@__PURE__*/ new Vector3();
+// const _segCenter = /*@__PURE__*/ new Vector3();
+// const _segDir = /*@__PURE__*/ new Vector3();
+// const _diff = /*@__PURE__*/ new Vector3();
 
-const _edge1 = /*@__PURE__*/ new Vector3();
-const _edge2 = /*@__PURE__*/ new Vector3();
-const _normal$1 = /*@__PURE__*/ new Vector3();
+// const _edge1 = /*@__PURE__*/ new Vector3();
+// const _edge2 = /*@__PURE__*/ new Vector3();
+// const _normal$1 = /*@__PURE__*/ new Vector3();
 
-class Ray {
+// class Ray {
 
-	constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {
+// 	constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {
 
-		this.origin = origin;
-		this.direction = direction;
+// 		this.origin = origin;
+// 		this.direction = direction;
 
-	}
+// 	}
 
-	set( origin, direction ) {
+// 	set( origin, direction ) {
 
-		this.origin.copy( origin );
-		this.direction.copy( direction );
+// 		this.origin.copy( origin );
+// 		this.direction.copy( direction );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( ray ) {
+// 	copy( ray ) {
 
-		this.origin.copy( ray.origin );
-		this.direction.copy( ray.direction );
+// 		this.origin.copy( ray.origin );
+// 		this.direction.copy( ray.direction );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	at( t, target ) {
+// 	at( t, target ) {
 
-		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );
+// 		return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );
 
-	}
+// 	}
 
-	lookAt( v ) {
+// 	lookAt( v ) {
 
-		this.direction.copy( v ).sub( this.origin ).normalize();
+// 		this.direction.copy( v ).sub( this.origin ).normalize();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	recast( t ) {
+// 	recast( t ) {
 
-		this.origin.copy( this.at( t, _vector$a ) );
+// 		this.origin.copy( this.at( t, _vector$a ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	closestPointToPoint( point, target ) {
+// 	closestPointToPoint( point, target ) {
 
-		target.subVectors( point, this.origin );
+// 		target.subVectors( point, this.origin );
 
-		const directionDistance = target.dot( this.direction );
+// 		const directionDistance = target.dot( this.direction );
 
-		if ( directionDistance < 0 ) {
+// 		if ( directionDistance < 0 ) {
 
-			return target.copy( this.origin );
+// 			return target.copy( this.origin );
 
-		}
+// 		}
 
-		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
+// 		return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
 
-	}
+// 	}
 
-	distanceToPoint( point ) {
+// 	distanceToPoint( point ) {
 
-		return Math.sqrt( this.distanceSqToPoint( point ) );
+// 		return Math.sqrt( this.distanceSqToPoint( point ) );
 
-	}
+// 	}
 
-	distanceSqToPoint( point ) {
+// 	distanceSqToPoint( point ) {
 
-		const directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );
+// 		const directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );
 
-		// point behind the ray
+// 		// point behind the ray
 
-		if ( directionDistance < 0 ) {
+// 		if ( directionDistance < 0 ) {
 
-			return this.origin.distanceToSquared( point );
+// 			return this.origin.distanceToSquared( point );
 
-		}
+// 		}
 
-		_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
+// 		_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
 
-		return _vector$a.distanceToSquared( point );
+// 		return _vector$a.distanceToSquared( point );
 
-	}
+// 	}
 
-	distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
+// 	distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
 
-		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
-		// It returns the min distance between the ray and the segment
-		// defined by v0 and v1
-		// It can also set two optional targets :
-		// - The closest point on the ray
-		// - The closest point on the segment
+// 		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
+// 		// It returns the min distance between the ray and the segment
+// 		// defined by v0 and v1
+// 		// It can also set two optional targets :
+// 		// - The closest point on the ray
+// 		// - The closest point on the segment
 
-		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
-		_segDir.copy( v1 ).sub( v0 ).normalize();
-		_diff.copy( this.origin ).sub( _segCenter );
+// 		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
+// 		_segDir.copy( v1 ).sub( v0 ).normalize();
+// 		_diff.copy( this.origin ).sub( _segCenter );
 
-		const segExtent = v0.distanceTo( v1 ) * 0.5;
-		const a01 = - this.direction.dot( _segDir );
-		const b0 = _diff.dot( this.direction );
-		const b1 = - _diff.dot( _segDir );
-		const c = _diff.lengthSq();
-		const det = Math.abs( 1 - a01 * a01 );
-		let s0, s1, sqrDist, extDet;
+// 		const segExtent = v0.distanceTo( v1 ) * 0.5;
+// 		const a01 = - this.direction.dot( _segDir );
+// 		const b0 = _diff.dot( this.direction );
+// 		const b1 = - _diff.dot( _segDir );
+// 		const c = _diff.lengthSq();
+// 		const det = Math.abs( 1 - a01 * a01 );
+// 		let s0, s1, sqrDist, extDet;
 
-		if ( det > 0 ) {
+// 		if ( det > 0 ) {
 
-			// The ray and segment are not parallel.
+// 			// The ray and segment are not parallel.
 
-			s0 = a01 * b1 - b0;
-			s1 = a01 * b0 - b1;
-			extDet = segExtent * det;
+// 			s0 = a01 * b1 - b0;
+// 			s1 = a01 * b0 - b1;
+// 			extDet = segExtent * det;
 
-			if ( s0 >= 0 ) {
+// 			if ( s0 >= 0 ) {
 
-				if ( s1 >= - extDet ) {
+// 				if ( s1 >= - extDet ) {
 
-					if ( s1 <= extDet ) {
+// 					if ( s1 <= extDet ) {
 
-						// region 0
-						// Minimum at interior points of ray and segment.
+// 						// region 0
+// 						// Minimum at interior points of ray and segment.
 
-						const invDet = 1 / det;
-						s0 *= invDet;
-						s1 *= invDet;
-						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
+// 						const invDet = 1 / det;
+// 						s0 *= invDet;
+// 						s1 *= invDet;
+// 						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
 
-					} else {
+// 					} else {
 
-						// region 1
+// 						// region 1
 
-						s1 = segExtent;
-						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
-						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
+// 						s1 = segExtent;
+// 						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
+// 						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					// region 5
+// 					// region 5
 
-					s1 = - segExtent;
-					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
-					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
+// 					s1 = - segExtent;
+// 					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
+// 					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				if ( s1 <= - extDet ) {
+// 				if ( s1 <= - extDet ) {
 
-					// region 4
+// 					// region 4
 
-					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
-					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
-					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
+// 					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
+// 					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
+// 					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
 
-				} else if ( s1 <= extDet ) {
+// 				} else if ( s1 <= extDet ) {
 
-					// region 3
+// 					// region 3
 
-					s0 = 0;
-					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
-					sqrDist = s1 * ( s1 + 2 * b1 ) + c;
+// 					s0 = 0;
+// 					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
+// 					sqrDist = s1 * ( s1 + 2 * b1 ) + c;
 
-				} else {
+// 				} else {
 
-					// region 2
+// 					// region 2
 
-					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
-					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
-					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
+// 					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
+// 					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
+// 					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			// Ray and segment are parallel.
+// 			// Ray and segment are parallel.
 
-			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
-			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
-			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
+// 			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
+// 			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
+// 			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
 
-		}
+// 		}
 
-		if ( optionalPointOnRay ) {
+// 		if ( optionalPointOnRay ) {
 
-			optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
+// 			optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
 
-		}
+// 		}
 
-		if ( optionalPointOnSegment ) {
+// 		if ( optionalPointOnSegment ) {
 
-			optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );
+// 			optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );
 
-		}
+// 		}
 
-		return sqrDist;
+// 		return sqrDist;
 
-	}
+// 	}
 
-	intersectSphere( sphere, target ) {
+// 	intersectSphere( sphere, target ) {
 
-		_vector$a.subVectors( sphere.center, this.origin );
-		const tca = _vector$a.dot( this.direction );
-		const d2 = _vector$a.dot( _vector$a ) - tca * tca;
-		const radius2 = sphere.radius * sphere.radius;
+// 		_vector$a.subVectors( sphere.center, this.origin );
+// 		const tca = _vector$a.dot( this.direction );
+// 		const d2 = _vector$a.dot( _vector$a ) - tca * tca;
+// 		const radius2 = sphere.radius * sphere.radius;
 
-		if ( d2 > radius2 ) return null;
+// 		if ( d2 > radius2 ) return null;
 
-		const thc = Math.sqrt( radius2 - d2 );
+// 		const thc = Math.sqrt( radius2 - d2 );
 
-		// t0 = first intersect point - entrance on front of sphere
-		const t0 = tca - thc;
+// 		// t0 = first intersect point - entrance on front of sphere
+// 		const t0 = tca - thc;
 
-		// t1 = second intersect point - exit point on back of sphere
-		const t1 = tca + thc;
+// 		// t1 = second intersect point - exit point on back of sphere
+// 		const t1 = tca + thc;
 
-		// test to see if both t0 and t1 are behind the ray - if so, return null
-		if ( t0 < 0 && t1 < 0 ) return null;
+// 		// test to see if both t0 and t1 are behind the ray - if so, return null
+// 		if ( t0 < 0 && t1 < 0 ) return null;
 
-		// test to see if t0 is behind the ray:
-		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
-		// in order to always return an intersect point that is in front of the ray.
-		if ( t0 < 0 ) return this.at( t1, target );
+// 		// test to see if t0 is behind the ray:
+// 		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
+// 		// in order to always return an intersect point that is in front of the ray.
+// 		if ( t0 < 0 ) return this.at( t1, target );
 
-		// else t0 is in front of the ray, so return the first collision point scaled by t0
-		return this.at( t0, target );
+// 		// else t0 is in front of the ray, so return the first collision point scaled by t0
+// 		return this.at( t0, target );
 
-	}
+// 	}
 
-	intersectsSphere( sphere ) {
+// 	intersectsSphere( sphere ) {
 
-		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );
+// 		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );
 
-	}
+// 	}
 
-	distanceToPlane( plane ) {
+// 	distanceToPlane( plane ) {
 
-		const denominator = plane.normal.dot( this.direction );
+// 		const denominator = plane.normal.dot( this.direction );
 
-		if ( denominator === 0 ) {
+// 		if ( denominator === 0 ) {
 
-			// line is coplanar, return origin
-			if ( plane.distanceToPoint( this.origin ) === 0 ) {
+// 			// line is coplanar, return origin
+// 			if ( plane.distanceToPoint( this.origin ) === 0 ) {
 
-				return 0;
+// 				return 0;
 
-			}
+// 			}
 
-			// Null is preferable to undefined since undefined means.... it is undefined
+// 			// Null is preferable to undefined since undefined means.... it is undefined
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
+// 		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
 
-		// Return if the ray never intersects the plane
+// 		// Return if the ray never intersects the plane
 
-		return t >= 0 ? t : null;
+// 		return t >= 0 ? t : null;
 
-	}
+// 	}
 
-	intersectPlane( plane, target ) {
+// 	intersectPlane( plane, target ) {
 
-		const t = this.distanceToPlane( plane );
+// 		const t = this.distanceToPlane( plane );
 
-		if ( t === null ) {
+// 		if ( t === null ) {
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		return this.at( t, target );
+// 		return this.at( t, target );
 
-	}
+// 	}
 
-	intersectsPlane( plane ) {
+// 	intersectsPlane( plane ) {
 
-		// check if the ray lies on the plane first
+// 		// check if the ray lies on the plane first
 
-		const distToPoint = plane.distanceToPoint( this.origin );
+// 		const distToPoint = plane.distanceToPoint( this.origin );
 
-		if ( distToPoint === 0 ) {
+// 		if ( distToPoint === 0 ) {
 
-			return true;
+// 			return true;
 
-		}
+// 		}
 
-		const denominator = plane.normal.dot( this.direction );
+// 		const denominator = plane.normal.dot( this.direction );
 
-		if ( denominator * distToPoint < 0 ) {
+// 		if ( denominator * distToPoint < 0 ) {
 
-			return true;
+// 			return true;
 
-		}
+// 		}
 
-		// ray origin is behind the plane (and is pointing behind it)
+// 		// ray origin is behind the plane (and is pointing behind it)
 
-		return false;
+// 		return false;
 
-	}
+// 	}
 
-	intersectBox( box, target ) {
+// 	intersectBox( box, target ) {
 
-		let tmin, tmax, tymin, tymax, tzmin, tzmax;
+// 		let tmin, tmax, tymin, tymax, tzmin, tzmax;
 
-		const invdirx = 1 / this.direction.x,
-			invdiry = 1 / this.direction.y,
-			invdirz = 1 / this.direction.z;
+// 		const invdirx = 1 / this.direction.x,
+// 			invdiry = 1 / this.direction.y,
+// 			invdirz = 1 / this.direction.z;
 
-		const origin = this.origin;
+// 		const origin = this.origin;
 
-		if ( invdirx >= 0 ) {
+// 		if ( invdirx >= 0 ) {
 
-			tmin = ( box.min.x - origin.x ) * invdirx;
-			tmax = ( box.max.x - origin.x ) * invdirx;
+// 			tmin = ( box.min.x - origin.x ) * invdirx;
+// 			tmax = ( box.max.x - origin.x ) * invdirx;
 
-		} else {
+// 		} else {
 
-			tmin = ( box.max.x - origin.x ) * invdirx;
-			tmax = ( box.min.x - origin.x ) * invdirx;
+// 			tmin = ( box.max.x - origin.x ) * invdirx;
+// 			tmax = ( box.min.x - origin.x ) * invdirx;
 
-		}
+// 		}
 
-		if ( invdiry >= 0 ) {
+// 		if ( invdiry >= 0 ) {
 
-			tymin = ( box.min.y - origin.y ) * invdiry;
-			tymax = ( box.max.y - origin.y ) * invdiry;
+// 			tymin = ( box.min.y - origin.y ) * invdiry;
+// 			tymax = ( box.max.y - origin.y ) * invdiry;
 
-		} else {
+// 		} else {
 
-			tymin = ( box.max.y - origin.y ) * invdiry;
-			tymax = ( box.min.y - origin.y ) * invdiry;
+// 			tymin = ( box.max.y - origin.y ) * invdiry;
+// 			tymax = ( box.min.y - origin.y ) * invdiry;
 
-		}
+// 		}
 
-		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
+// 		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
 
-		// These lines also handle the case where tmin or tmax is NaN
-		// (result of 0 * Infinity). x !== x returns true if x is NaN
+// 		// These lines also handle the case where tmin or tmax is NaN
+// 		// (result of 0 * Infinity). x !== x returns true if x is NaN
 
-		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
+// 		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
 
-		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
+// 		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
 
-		if ( invdirz >= 0 ) {
+// 		if ( invdirz >= 0 ) {
 
-			tzmin = ( box.min.z - origin.z ) * invdirz;
-			tzmax = ( box.max.z - origin.z ) * invdirz;
+// 			tzmin = ( box.min.z - origin.z ) * invdirz;
+// 			tzmax = ( box.max.z - origin.z ) * invdirz;
 
-		} else {
+// 		} else {
 
-			tzmin = ( box.max.z - origin.z ) * invdirz;
-			tzmax = ( box.min.z - origin.z ) * invdirz;
+// 			tzmin = ( box.max.z - origin.z ) * invdirz;
+// 			tzmax = ( box.min.z - origin.z ) * invdirz;
 
-		}
+// 		}
 
-		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
+// 		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
 
-		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
+// 		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
 
-		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
+// 		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
 
-		//return point closest to the ray (positive side)
+// 		//return point closest to the ray (positive side)
 
-		if ( tmax < 0 ) return null;
+// 		if ( tmax < 0 ) return null;
 
-		return this.at( tmin >= 0 ? tmin : tmax, target );
+// 		return this.at( tmin >= 0 ? tmin : tmax, target );
 
-	}
+// 	}
 
-	intersectsBox( box ) {
+// 	intersectsBox( box ) {
 
-		return this.intersectBox( box, _vector$a ) !== null;
+// 		return this.intersectBox( box, _vector$a ) !== null;
 
-	}
+// 	}
 
-	intersectTriangle( a, b, c, backfaceCulling, target ) {
+// 	intersectTriangle( a, b, c, backfaceCulling, target ) {
 
-		// Compute the offset origin, edges, and normal.
+// 		// Compute the offset origin, edges, and normal.
 
-		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
+// 		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
 
-		_edge1.subVectors( b, a );
-		_edge2.subVectors( c, a );
-		_normal$1.crossVectors( _edge1, _edge2 );
+// 		_edge1.subVectors( b, a );
+// 		_edge2.subVectors( c, a );
+// 		_normal$1.crossVectors( _edge1, _edge2 );
 
-		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
-		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
-		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
-		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
-		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
-		let DdN = this.direction.dot( _normal$1 );
-		let sign;
+// 		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
+// 		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
+// 		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
+// 		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
+// 		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
+// 		let DdN = this.direction.dot( _normal$1 );
+// 		let sign;
 
-		if ( DdN > 0 ) {
+// 		if ( DdN > 0 ) {
 
-			if ( backfaceCulling ) return null;
-			sign = 1;
+// 			if ( backfaceCulling ) return null;
+// 			sign = 1;
 
-		} else if ( DdN < 0 ) {
+// 		} else if ( DdN < 0 ) {
 
-			sign = - 1;
-			DdN = - DdN;
+// 			sign = - 1;
+// 			DdN = - DdN;
 
-		} else {
+// 		} else {
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		_diff.subVectors( this.origin, a );
-		const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );
+// 		_diff.subVectors( this.origin, a );
+// 		const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );
 
-		// b1 < 0, no intersection
-		if ( DdQxE2 < 0 ) {
+// 		// b1 < 0, no intersection
+// 		if ( DdQxE2 < 0 ) {
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );
+// 		const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );
 
-		// b2 < 0, no intersection
-		if ( DdE1xQ < 0 ) {
+// 		// b2 < 0, no intersection
+// 		if ( DdE1xQ < 0 ) {
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		// b1+b2 > 1, no intersection
-		if ( DdQxE2 + DdE1xQ > DdN ) {
+// 		// b1+b2 > 1, no intersection
+// 		if ( DdQxE2 + DdE1xQ > DdN ) {
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		// Line intersects triangle, check if ray does.
-		const QdN = - sign * _diff.dot( _normal$1 );
+// 		// Line intersects triangle, check if ray does.
+// 		const QdN = - sign * _diff.dot( _normal$1 );
 
-		// t < 0, no intersection
-		if ( QdN < 0 ) {
+// 		// t < 0, no intersection
+// 		if ( QdN < 0 ) {
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		// Ray intersects triangle.
-		return this.at( QdN / DdN, target );
+// 		// Ray intersects triangle.
+// 		return this.at( QdN / DdN, target );
 
-	}
+// 	}
 
-	applyMatrix4( matrix4 ) {
+// 	applyMatrix4( matrix4 ) {
 
-		this.origin.applyMatrix4( matrix4 );
-		this.direction.transformDirection( matrix4 );
+// 		this.origin.applyMatrix4( matrix4 );
+// 		this.direction.transformDirection( matrix4 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( ray ) {
+// 	equals( ray ) {
 
-		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
+// 		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-class Matrix4 {
+// class Matrix4 {
 
-	constructor() {
+// 	constructor() {
 
-		Matrix4.prototype.isMatrix4 = true;
+// 		Matrix4.prototype.isMatrix4 = true;
 
-		this.elements = [
+// 		this.elements = [
 
-			1, 0, 0, 0,
-			0, 1, 0, 0,
-			0, 0, 1, 0,
-			0, 0, 0, 1
+// 			1, 0, 0, 0,
+// 			0, 1, 0, 0,
+// 			0, 0, 1, 0,
+// 			0, 0, 0, 1
 
-		];
+// 		];
 
-	}
+// 	}
 
-	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
+// 	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
-		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
-		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
-		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
+// 		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
+// 		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
+// 		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
+// 		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	identity() {
+// 	identity() {
 
-		this.set(
+// 		this.set(
 
-			1, 0, 0, 0,
-			0, 1, 0, 0,
-			0, 0, 1, 0,
-			0, 0, 0, 1
+// 			1, 0, 0, 0,
+// 			0, 1, 0, 0,
+// 			0, 0, 1, 0,
+// 			0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new Matrix4().fromArray( this.elements );
+// 		return new Matrix4().fromArray( this.elements );
 
-	}
+// 	}
 
-	copy( m ) {
+// 	copy( m ) {
 
-		const te = this.elements;
-		const me = m.elements;
+// 		const te = this.elements;
+// 		const me = m.elements;
 
-		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
-		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
-		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
-		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];
+// 		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
+// 		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
+// 		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
+// 		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copyPosition( m ) {
+// 	copyPosition( m ) {
 
-		const te = this.elements, me = m.elements;
+// 		const te = this.elements, me = m.elements;
 
-		te[ 12 ] = me[ 12 ];
-		te[ 13 ] = me[ 13 ];
-		te[ 14 ] = me[ 14 ];
+// 		te[ 12 ] = me[ 12 ];
+// 		te[ 13 ] = me[ 13 ];
+// 		te[ 14 ] = me[ 14 ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromMatrix3( m ) {
+// 	setFromMatrix3( m ) {
 
-		const me = m.elements;
+// 		const me = m.elements;
 
-		this.set(
+// 		this.set(
 
-			me[ 0 ], me[ 3 ], me[ 6 ], 0,
-			me[ 1 ], me[ 4 ], me[ 7 ], 0,
-			me[ 2 ], me[ 5 ], me[ 8 ], 0,
-			0, 0, 0, 1
+// 			me[ 0 ], me[ 3 ], me[ 6 ], 0,
+// 			me[ 1 ], me[ 4 ], me[ 7 ], 0,
+// 			me[ 2 ], me[ 5 ], me[ 8 ], 0,
+// 			0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	extractBasis( xAxis, yAxis, zAxis ) {
+// 	extractBasis( xAxis, yAxis, zAxis ) {
 
-		xAxis.setFromMatrixColumn( this, 0 );
-		yAxis.setFromMatrixColumn( this, 1 );
-		zAxis.setFromMatrixColumn( this, 2 );
+// 		xAxis.setFromMatrixColumn( this, 0 );
+// 		yAxis.setFromMatrixColumn( this, 1 );
+// 		zAxis.setFromMatrixColumn( this, 2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeBasis( xAxis, yAxis, zAxis ) {
+// 	makeBasis( xAxis, yAxis, zAxis ) {
 
-		this.set(
-			xAxis.x, yAxis.x, zAxis.x, 0,
-			xAxis.y, yAxis.y, zAxis.y, 0,
-			xAxis.z, yAxis.z, zAxis.z, 0,
-			0, 0, 0, 1
-		);
+// 		this.set(
+// 			xAxis.x, yAxis.x, zAxis.x, 0,
+// 			xAxis.y, yAxis.y, zAxis.y, 0,
+// 			xAxis.z, yAxis.z, zAxis.z, 0,
+// 			0, 0, 0, 1
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	extractRotation( m ) {
+// 	extractRotation( m ) {
 
-		// this method does not support reflection matrices
+// 		// this method does not support reflection matrices
 
-		const te = this.elements;
-		const me = m.elements;
+// 		const te = this.elements;
+// 		const me = m.elements;
 
-		const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
-		const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
-		const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();
+// 		const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
+// 		const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
+// 		const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();
 
-		te[ 0 ] = me[ 0 ] * scaleX;
-		te[ 1 ] = me[ 1 ] * scaleX;
-		te[ 2 ] = me[ 2 ] * scaleX;
-		te[ 3 ] = 0;
+// 		te[ 0 ] = me[ 0 ] * scaleX;
+// 		te[ 1 ] = me[ 1 ] * scaleX;
+// 		te[ 2 ] = me[ 2 ] * scaleX;
+// 		te[ 3 ] = 0;
 
-		te[ 4 ] = me[ 4 ] * scaleY;
-		te[ 5 ] = me[ 5 ] * scaleY;
-		te[ 6 ] = me[ 6 ] * scaleY;
-		te[ 7 ] = 0;
+// 		te[ 4 ] = me[ 4 ] * scaleY;
+// 		te[ 5 ] = me[ 5 ] * scaleY;
+// 		te[ 6 ] = me[ 6 ] * scaleY;
+// 		te[ 7 ] = 0;
 
-		te[ 8 ] = me[ 8 ] * scaleZ;
-		te[ 9 ] = me[ 9 ] * scaleZ;
-		te[ 10 ] = me[ 10 ] * scaleZ;
-		te[ 11 ] = 0;
+// 		te[ 8 ] = me[ 8 ] * scaleZ;
+// 		te[ 9 ] = me[ 9 ] * scaleZ;
+// 		te[ 10 ] = me[ 10 ] * scaleZ;
+// 		te[ 11 ] = 0;
 
-		te[ 12 ] = 0;
-		te[ 13 ] = 0;
-		te[ 14 ] = 0;
-		te[ 15 ] = 1;
+// 		te[ 12 ] = 0;
+// 		te[ 13 ] = 0;
+// 		te[ 14 ] = 0;
+// 		te[ 15 ] = 1;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeRotationFromEuler( euler ) {
+// 	makeRotationFromEuler( euler ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		const x = euler.x, y = euler.y, z = euler.z;
-		const a = Math.cos( x ), b = Math.sin( x );
-		const c = Math.cos( y ), d = Math.sin( y );
-		const e = Math.cos( z ), f = Math.sin( z );
+// 		const x = euler.x, y = euler.y, z = euler.z;
+// 		const a = Math.cos( x ), b = Math.sin( x );
+// 		const c = Math.cos( y ), d = Math.sin( y );
+// 		const e = Math.cos( z ), f = Math.sin( z );
 
-		if ( euler.order === 'XYZ' ) {
+// 		if ( euler.order === 'XYZ' ) {
 
-			const ae = a * e, af = a * f, be = b * e, bf = b * f;
+// 			const ae = a * e, af = a * f, be = b * e, bf = b * f;
 
-			te[ 0 ] = c * e;
-			te[ 4 ] = - c * f;
-			te[ 8 ] = d;
+// 			te[ 0 ] = c * e;
+// 			te[ 4 ] = - c * f;
+// 			te[ 8 ] = d;
 
-			te[ 1 ] = af + be * d;
-			te[ 5 ] = ae - bf * d;
-			te[ 9 ] = - b * c;
+// 			te[ 1 ] = af + be * d;
+// 			te[ 5 ] = ae - bf * d;
+// 			te[ 9 ] = - b * c;
 
-			te[ 2 ] = bf - ae * d;
-			te[ 6 ] = be + af * d;
-			te[ 10 ] = a * c;
+// 			te[ 2 ] = bf - ae * d;
+// 			te[ 6 ] = be + af * d;
+// 			te[ 10 ] = a * c;
 
-		} else if ( euler.order === 'YXZ' ) {
+// 		} else if ( euler.order === 'YXZ' ) {
 
-			const ce = c * e, cf = c * f, de = d * e, df = d * f;
+// 			const ce = c * e, cf = c * f, de = d * e, df = d * f;
 
-			te[ 0 ] = ce + df * b;
-			te[ 4 ] = de * b - cf;
-			te[ 8 ] = a * d;
+// 			te[ 0 ] = ce + df * b;
+// 			te[ 4 ] = de * b - cf;
+// 			te[ 8 ] = a * d;
 
-			te[ 1 ] = a * f;
-			te[ 5 ] = a * e;
-			te[ 9 ] = - b;
+// 			te[ 1 ] = a * f;
+// 			te[ 5 ] = a * e;
+// 			te[ 9 ] = - b;
 
-			te[ 2 ] = cf * b - de;
-			te[ 6 ] = df + ce * b;
-			te[ 10 ] = a * c;
+// 			te[ 2 ] = cf * b - de;
+// 			te[ 6 ] = df + ce * b;
+// 			te[ 10 ] = a * c;
 
-		} else if ( euler.order === 'ZXY' ) {
+// 		} else if ( euler.order === 'ZXY' ) {
 
-			const ce = c * e, cf = c * f, de = d * e, df = d * f;
+// 			const ce = c * e, cf = c * f, de = d * e, df = d * f;
 
-			te[ 0 ] = ce - df * b;
-			te[ 4 ] = - a * f;
-			te[ 8 ] = de + cf * b;
+// 			te[ 0 ] = ce - df * b;
+// 			te[ 4 ] = - a * f;
+// 			te[ 8 ] = de + cf * b;
 
-			te[ 1 ] = cf + de * b;
-			te[ 5 ] = a * e;
-			te[ 9 ] = df - ce * b;
+// 			te[ 1 ] = cf + de * b;
+// 			te[ 5 ] = a * e;
+// 			te[ 9 ] = df - ce * b;
 
-			te[ 2 ] = - a * d;
-			te[ 6 ] = b;
-			te[ 10 ] = a * c;
+// 			te[ 2 ] = - a * d;
+// 			te[ 6 ] = b;
+// 			te[ 10 ] = a * c;
 
-		} else if ( euler.order === 'ZYX' ) {
+// 		} else if ( euler.order === 'ZYX' ) {
 
-			const ae = a * e, af = a * f, be = b * e, bf = b * f;
+// 			const ae = a * e, af = a * f, be = b * e, bf = b * f;
 
-			te[ 0 ] = c * e;
-			te[ 4 ] = be * d - af;
-			te[ 8 ] = ae * d + bf;
+// 			te[ 0 ] = c * e;
+// 			te[ 4 ] = be * d - af;
+// 			te[ 8 ] = ae * d + bf;
 
-			te[ 1 ] = c * f;
-			te[ 5 ] = bf * d + ae;
-			te[ 9 ] = af * d - be;
+// 			te[ 1 ] = c * f;
+// 			te[ 5 ] = bf * d + ae;
+// 			te[ 9 ] = af * d - be;
 
-			te[ 2 ] = - d;
-			te[ 6 ] = b * c;
-			te[ 10 ] = a * c;
+// 			te[ 2 ] = - d;
+// 			te[ 6 ] = b * c;
+// 			te[ 10 ] = a * c;
 
-		} else if ( euler.order === 'YZX' ) {
+// 		} else if ( euler.order === 'YZX' ) {
 
-			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
+// 			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
 
-			te[ 0 ] = c * e;
-			te[ 4 ] = bd - ac * f;
-			te[ 8 ] = bc * f + ad;
+// 			te[ 0 ] = c * e;
+// 			te[ 4 ] = bd - ac * f;
+// 			te[ 8 ] = bc * f + ad;
 
-			te[ 1 ] = f;
-			te[ 5 ] = a * e;
-			te[ 9 ] = - b * e;
+// 			te[ 1 ] = f;
+// 			te[ 5 ] = a * e;
+// 			te[ 9 ] = - b * e;
 
-			te[ 2 ] = - d * e;
-			te[ 6 ] = ad * f + bc;
-			te[ 10 ] = ac - bd * f;
+// 			te[ 2 ] = - d * e;
+// 			te[ 6 ] = ad * f + bc;
+// 			te[ 10 ] = ac - bd * f;
 
-		} else if ( euler.order === 'XZY' ) {
+// 		} else if ( euler.order === 'XZY' ) {
 
-			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
+// 			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
 
-			te[ 0 ] = c * e;
-			te[ 4 ] = - f;
-			te[ 8 ] = d * e;
+// 			te[ 0 ] = c * e;
+// 			te[ 4 ] = - f;
+// 			te[ 8 ] = d * e;
 
-			te[ 1 ] = ac * f + bd;
-			te[ 5 ] = a * e;
-			te[ 9 ] = ad * f - bc;
+// 			te[ 1 ] = ac * f + bd;
+// 			te[ 5 ] = a * e;
+// 			te[ 9 ] = ad * f - bc;
 
-			te[ 2 ] = bc * f - ad;
-			te[ 6 ] = b * e;
-			te[ 10 ] = bd * f + ac;
+// 			te[ 2 ] = bc * f - ad;
+// 			te[ 6 ] = b * e;
+// 			te[ 10 ] = bd * f + ac;
 
-		}
+// 		}
 
-		// bottom row
-		te[ 3 ] = 0;
-		te[ 7 ] = 0;
-		te[ 11 ] = 0;
+// 		// bottom row
+// 		te[ 3 ] = 0;
+// 		te[ 7 ] = 0;
+// 		te[ 11 ] = 0;
 
-		// last column
-		te[ 12 ] = 0;
-		te[ 13 ] = 0;
-		te[ 14 ] = 0;
-		te[ 15 ] = 1;
+// 		// last column
+// 		te[ 12 ] = 0;
+// 		te[ 13 ] = 0;
+// 		te[ 14 ] = 0;
+// 		te[ 15 ] = 1;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeRotationFromQuaternion( q ) {
+// 	makeRotationFromQuaternion( q ) {
 
-		return this.compose( _zero, q, _one );
+// 		return this.compose( _zero, q, _one );
 
-	}
+// 	}
 
-	lookAt( eye, target, up ) {
+// 	lookAt( eye, target, up ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		_z.subVectors( eye, target );
+// 		_z.subVectors( eye, target );
 
-		if ( _z.lengthSq() === 0 ) {
+// 		if ( _z.lengthSq() === 0 ) {
 
-			// eye and target are in the same position
+// 			// eye and target are in the same position
 
-			_z.z = 1;
+// 			_z.z = 1;
 
-		}
+// 		}
 
-		_z.normalize();
-		_x.crossVectors( up, _z );
+// 		_z.normalize();
+// 		_x.crossVectors( up, _z );
 
-		if ( _x.lengthSq() === 0 ) {
+// 		if ( _x.lengthSq() === 0 ) {
 
-			// up and z are parallel
+// 			// up and z are parallel
 
-			if ( Math.abs( up.z ) === 1 ) {
+// 			if ( Math.abs( up.z ) === 1 ) {
 
-				_z.x += 0.0001;
+// 				_z.x += 0.0001;
 
-			} else {
+// 			} else {
 
-				_z.z += 0.0001;
+// 				_z.z += 0.0001;
 
-			}
+// 			}
 
-			_z.normalize();
-			_x.crossVectors( up, _z );
+// 			_z.normalize();
+// 			_x.crossVectors( up, _z );
 
-		}
+// 		}
 
-		_x.normalize();
-		_y.crossVectors( _z, _x );
+// 		_x.normalize();
+// 		_y.crossVectors( _z, _x );
 
-		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
-		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
-		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;
+// 		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
+// 		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
+// 		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiply( m ) {
+// 	multiply( m ) {
 
-		return this.multiplyMatrices( this, m );
+// 		return this.multiplyMatrices( this, m );
 
-	}
+// 	}
 
-	premultiply( m ) {
+// 	premultiply( m ) {
 
-		return this.multiplyMatrices( m, this );
+// 		return this.multiplyMatrices( m, this );
 
-	}
+// 	}
 
-	multiplyMatrices( a, b ) {
+// 	multiplyMatrices( a, b ) {
 
-		const ae = a.elements;
-		const be = b.elements;
-		const te = this.elements;
+// 		const ae = a.elements;
+// 		const be = b.elements;
+// 		const te = this.elements;
 
-		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
-		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
-		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
-		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
+// 		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
+// 		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
+// 		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
+// 		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
 
-		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
-		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
-		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
-		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
+// 		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
+// 		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
+// 		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
+// 		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
 
-		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
-		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
-		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
-		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
+// 		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
+// 		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
+// 		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
+// 		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
 
-		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
-		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
-		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
-		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
+// 		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
+// 		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
+// 		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
+// 		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
 
-		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
-		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
-		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
-		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
+// 		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
+// 		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
+// 		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
+// 		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
 
-		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
-		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
-		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
-		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
+// 		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
+// 		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
+// 		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
+// 		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	multiplyScalar( s ) {
+// 	multiplyScalar( s ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
-		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
-		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
-		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
+// 		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
+// 		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
+// 		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
+// 		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	determinant() {
+// 	determinant() {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
-		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
-		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
-		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
+// 		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
+// 		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
+// 		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
+// 		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
 
-		//TODO: make this more efficient
-		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
+// 		//TODO: make this more efficient
+// 		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
 
-		return (
-			n41 * (
-				+ n14 * n23 * n32
-				 - n13 * n24 * n32
-				 - n14 * n22 * n33
-				 + n12 * n24 * n33
-				 + n13 * n22 * n34
-				 - n12 * n23 * n34
-			) +
-			n42 * (
-				+ n11 * n23 * n34
-				 - n11 * n24 * n33
-				 + n14 * n21 * n33
-				 - n13 * n21 * n34
-				 + n13 * n24 * n31
-				 - n14 * n23 * n31
-			) +
-			n43 * (
-				+ n11 * n24 * n32
-				 - n11 * n22 * n34
-				 - n14 * n21 * n32
-				 + n12 * n21 * n34
-				 + n14 * n22 * n31
-				 - n12 * n24 * n31
-			) +
-			n44 * (
-				- n13 * n22 * n31
-				 - n11 * n23 * n32
-				 + n11 * n22 * n33
-				 + n13 * n21 * n32
-				 - n12 * n21 * n33
-				 + n12 * n23 * n31
-			)
+// 		return (
+// 			n41 * (
+// 				+ n14 * n23 * n32
+// 				 - n13 * n24 * n32
+// 				 - n14 * n22 * n33
+// 				 + n12 * n24 * n33
+// 				 + n13 * n22 * n34
+// 				 - n12 * n23 * n34
+// 			) +
+// 			n42 * (
+// 				+ n11 * n23 * n34
+// 				 - n11 * n24 * n33
+// 				 + n14 * n21 * n33
+// 				 - n13 * n21 * n34
+// 				 + n13 * n24 * n31
+// 				 - n14 * n23 * n31
+// 			) +
+// 			n43 * (
+// 				+ n11 * n24 * n32
+// 				 - n11 * n22 * n34
+// 				 - n14 * n21 * n32
+// 				 + n12 * n21 * n34
+// 				 + n14 * n22 * n31
+// 				 - n12 * n24 * n31
+// 			) +
+// 			n44 * (
+// 				- n13 * n22 * n31
+// 				 - n11 * n23 * n32
+// 				 + n11 * n22 * n33
+// 				 + n13 * n21 * n32
+// 				 - n12 * n21 * n33
+// 				 + n12 * n23 * n31
+// 			)
 
-		);
+// 		);
 
-	}
+// 	}
 
-	transpose() {
+// 	transpose() {
 
-		const te = this.elements;
-		let tmp;
+// 		const te = this.elements;
+// 		let tmp;
 
-		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
-		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
-		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
+// 		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
+// 		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
+// 		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
 
-		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
-		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
-		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
+// 		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
+// 		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
+// 		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setPosition( x, y, z ) {
+// 	setPosition( x, y, z ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		if ( x.isVector3 ) {
+// 		if ( x.isVector3 ) {
 
-			te[ 12 ] = x.x;
-			te[ 13 ] = x.y;
-			te[ 14 ] = x.z;
+// 			te[ 12 ] = x.x;
+// 			te[ 13 ] = x.y;
+// 			te[ 14 ] = x.z;
 
-		} else {
+// 		} else {
 
-			te[ 12 ] = x;
-			te[ 13 ] = y;
-			te[ 14 ] = z;
+// 			te[ 12 ] = x;
+// 			te[ 13 ] = y;
+// 			te[ 14 ] = z;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	invert() {
+// 	invert() {
 
-		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
-		const te = this.elements,
+// 		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
+// 		const te = this.elements,
 
-			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
-			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
-			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
-			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],
+// 			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
+// 			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
+// 			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
+// 			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],
 
-			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
-			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
-			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
-			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
+// 			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
+// 			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
+// 			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
+// 			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
 
-		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
+// 		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
 
-		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );
+// 		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );
 
-		const detInv = 1 / det;
+// 		const detInv = 1 / det;
 
-		te[ 0 ] = t11 * detInv;
-		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
-		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
-		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;
+// 		te[ 0 ] = t11 * detInv;
+// 		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
+// 		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
+// 		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;
 
-		te[ 4 ] = t12 * detInv;
-		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
-		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
-		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;
+// 		te[ 4 ] = t12 * detInv;
+// 		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
+// 		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
+// 		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;
 
-		te[ 8 ] = t13 * detInv;
-		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
-		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
-		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;
+// 		te[ 8 ] = t13 * detInv;
+// 		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
+// 		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
+// 		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;
 
-		te[ 12 ] = t14 * detInv;
-		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
-		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
-		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;
+// 		te[ 12 ] = t14 * detInv;
+// 		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
+// 		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
+// 		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	scale( v ) {
+// 	scale( v ) {
 
-		const te = this.elements;
-		const x = v.x, y = v.y, z = v.z;
+// 		const te = this.elements;
+// 		const x = v.x, y = v.y, z = v.z;
 
-		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
-		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
-		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
-		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
+// 		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
+// 		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
+// 		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
+// 		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getMaxScaleOnAxis() {
+// 	getMaxScaleOnAxis() {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
-		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
-		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
+// 		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
+// 		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
+// 		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
 
-		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
+// 		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
 
-	}
+// 	}
 
-	makeTranslation( x, y, z ) {
+// 	makeTranslation( x, y, z ) {
 
-		this.set(
+// 		this.set(
 
-			1, 0, 0, x,
-			0, 1, 0, y,
-			0, 0, 1, z,
-			0, 0, 0, 1
+// 			1, 0, 0, x,
+// 			0, 1, 0, y,
+// 			0, 0, 1, z,
+// 			0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeRotationX( theta ) {
+// 	makeRotationX( theta ) {
 
-		const c = Math.cos( theta ), s = Math.sin( theta );
+// 		const c = Math.cos( theta ), s = Math.sin( theta );
 
-		this.set(
+// 		this.set(
 
-			1, 0, 0, 0,
-			0, c, - s, 0,
-			0, s, c, 0,
-			0, 0, 0, 1
+// 			1, 0, 0, 0,
+// 			0, c, - s, 0,
+// 			0, s, c, 0,
+// 			0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeRotationY( theta ) {
+// 	makeRotationY( theta ) {
 
-		const c = Math.cos( theta ), s = Math.sin( theta );
+// 		const c = Math.cos( theta ), s = Math.sin( theta );
 
-		this.set(
+// 		this.set(
 
-			 c, 0, s, 0,
-			 0, 1, 0, 0,
-			- s, 0, c, 0,
-			 0, 0, 0, 1
+// 			 c, 0, s, 0,
+// 			 0, 1, 0, 0,
+// 			- s, 0, c, 0,
+// 			 0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeRotationZ( theta ) {
+// 	makeRotationZ( theta ) {
 
-		const c = Math.cos( theta ), s = Math.sin( theta );
+// 		const c = Math.cos( theta ), s = Math.sin( theta );
 
-		this.set(
+// 		this.set(
 
-			c, - s, 0, 0,
-			s, c, 0, 0,
-			0, 0, 1, 0,
-			0, 0, 0, 1
+// 			c, - s, 0, 0,
+// 			s, c, 0, 0,
+// 			0, 0, 1, 0,
+// 			0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeRotationAxis( axis, angle ) {
+// 	makeRotationAxis( axis, angle ) {
 
-		// Based on http://www.gamedev.net/reference/articles/article1199.asp
+// 		// Based on http://www.gamedev.net/reference/articles/article1199.asp
 
-		const c = Math.cos( angle );
-		const s = Math.sin( angle );
-		const t = 1 - c;
-		const x = axis.x, y = axis.y, z = axis.z;
-		const tx = t * x, ty = t * y;
+// 		const c = Math.cos( angle );
+// 		const s = Math.sin( angle );
+// 		const t = 1 - c;
+// 		const x = axis.x, y = axis.y, z = axis.z;
+// 		const tx = t * x, ty = t * y;
 
-		this.set(
+// 		this.set(
 
-			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
-			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
-			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
-			0, 0, 0, 1
+// 			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
+// 			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
+// 			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
+// 			0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeScale( x, y, z ) {
+// 	makeScale( x, y, z ) {
 
-		this.set(
+// 		this.set(
 
-			x, 0, 0, 0,
-			0, y, 0, 0,
-			0, 0, z, 0,
-			0, 0, 0, 1
+// 			x, 0, 0, 0,
+// 			0, y, 0, 0,
+// 			0, 0, z, 0,
+// 			0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeShear( xy, xz, yx, yz, zx, zy ) {
+// 	makeShear( xy, xz, yx, yz, zx, zy ) {
 
-		this.set(
+// 		this.set(
 
-			1, yx, zx, 0,
-			xy, 1, zy, 0,
-			xz, yz, 1, 0,
-			0, 0, 0, 1
+// 			1, yx, zx, 0,
+// 			xy, 1, zy, 0,
+// 			xz, yz, 1, 0,
+// 			0, 0, 0, 1
 
-		);
+// 		);
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	compose( position, quaternion, scale ) {
+// 	compose( position, quaternion, scale ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
-		const x2 = x + x,	y2 = y + y, z2 = z + z;
-		const xx = x * x2, xy = x * y2, xz = x * z2;
-		const yy = y * y2, yz = y * z2, zz = z * z2;
-		const wx = w * x2, wy = w * y2, wz = w * z2;
+// 		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
+// 		const x2 = x + x,	y2 = y + y, z2 = z + z;
+// 		const xx = x * x2, xy = x * y2, xz = x * z2;
+// 		const yy = y * y2, yz = y * z2, zz = z * z2;
+// 		const wx = w * x2, wy = w * y2, wz = w * z2;
 
-		const sx = scale.x, sy = scale.y, sz = scale.z;
+// 		const sx = scale.x, sy = scale.y, sz = scale.z;
 
-		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
-		te[ 1 ] = ( xy + wz ) * sx;
-		te[ 2 ] = ( xz - wy ) * sx;
-		te[ 3 ] = 0;
+// 		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
+// 		te[ 1 ] = ( xy + wz ) * sx;
+// 		te[ 2 ] = ( xz - wy ) * sx;
+// 		te[ 3 ] = 0;
 
-		te[ 4 ] = ( xy - wz ) * sy;
-		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
-		te[ 6 ] = ( yz + wx ) * sy;
-		te[ 7 ] = 0;
+// 		te[ 4 ] = ( xy - wz ) * sy;
+// 		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
+// 		te[ 6 ] = ( yz + wx ) * sy;
+// 		te[ 7 ] = 0;
 
-		te[ 8 ] = ( xz + wy ) * sz;
-		te[ 9 ] = ( yz - wx ) * sz;
-		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
-		te[ 11 ] = 0;
+// 		te[ 8 ] = ( xz + wy ) * sz;
+// 		te[ 9 ] = ( yz - wx ) * sz;
+// 		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
+// 		te[ 11 ] = 0;
 
-		te[ 12 ] = position.x;
-		te[ 13 ] = position.y;
-		te[ 14 ] = position.z;
-		te[ 15 ] = 1;
+// 		te[ 12 ] = position.x;
+// 		te[ 13 ] = position.y;
+// 		te[ 14 ] = position.z;
+// 		te[ 15 ] = 1;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	decompose( position, quaternion, scale ) {
+// 	decompose( position, quaternion, scale ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
-		const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
-		const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
+// 		let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
+// 		const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
+// 		const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
 
-		// if determine is negative, we need to invert one scale
-		const det = this.determinant();
-		if ( det < 0 ) sx = - sx;
+// 		// if determine is negative, we need to invert one scale
+// 		const det = this.determinant();
+// 		if ( det < 0 ) sx = - sx;
 
-		position.x = te[ 12 ];
-		position.y = te[ 13 ];
-		position.z = te[ 14 ];
+// 		position.x = te[ 12 ];
+// 		position.y = te[ 13 ];
+// 		position.z = te[ 14 ];
 
-		// scale the rotation part
-		_m1$2.copy( this );
+// 		// scale the rotation part
+// 		_m1$2.copy( this );
 
-		const invSX = 1 / sx;
-		const invSY = 1 / sy;
-		const invSZ = 1 / sz;
+// 		const invSX = 1 / sx;
+// 		const invSY = 1 / sy;
+// 		const invSZ = 1 / sz;
 
-		_m1$2.elements[ 0 ] *= invSX;
-		_m1$2.elements[ 1 ] *= invSX;
-		_m1$2.elements[ 2 ] *= invSX;
+// 		_m1$2.elements[ 0 ] *= invSX;
+// 		_m1$2.elements[ 1 ] *= invSX;
+// 		_m1$2.elements[ 2 ] *= invSX;
 
-		_m1$2.elements[ 4 ] *= invSY;
-		_m1$2.elements[ 5 ] *= invSY;
-		_m1$2.elements[ 6 ] *= invSY;
+// 		_m1$2.elements[ 4 ] *= invSY;
+// 		_m1$2.elements[ 5 ] *= invSY;
+// 		_m1$2.elements[ 6 ] *= invSY;
 
-		_m1$2.elements[ 8 ] *= invSZ;
-		_m1$2.elements[ 9 ] *= invSZ;
-		_m1$2.elements[ 10 ] *= invSZ;
+// 		_m1$2.elements[ 8 ] *= invSZ;
+// 		_m1$2.elements[ 9 ] *= invSZ;
+// 		_m1$2.elements[ 10 ] *= invSZ;
 
-		quaternion.setFromRotationMatrix( _m1$2 );
+// 		quaternion.setFromRotationMatrix( _m1$2 );
 
-		scale.x = sx;
-		scale.y = sy;
-		scale.z = sz;
+// 		scale.x = sx;
+// 		scale.y = sy;
+// 		scale.z = sz;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makePerspective( left, right, top, bottom, near, far ) {
+// 	makePerspective( left, right, top, bottom, near, far ) {
 
-		const te = this.elements;
-		const x = 2 * near / ( right - left );
-		const y = 2 * near / ( top - bottom );
+// 		const te = this.elements;
+// 		const x = 2 * near / ( right - left );
+// 		const y = 2 * near / ( top - bottom );
 
-		const a = ( right + left ) / ( right - left );
-		const b = ( top + bottom ) / ( top - bottom );
-		const c = - ( far + near ) / ( far - near );
-		const d = - 2 * far * near / ( far - near );
+// 		const a = ( right + left ) / ( right - left );
+// 		const b = ( top + bottom ) / ( top - bottom );
+// 		const c = - ( far + near ) / ( far - near );
+// 		const d = - 2 * far * near / ( far - near );
 
-		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
-		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
-		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
-		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
+// 		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
+// 		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
+// 		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
+// 		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeOrthographic( left, right, top, bottom, near, far ) {
+// 	makeOrthographic( left, right, top, bottom, near, far ) {
 
-		const te = this.elements;
-		const w = 1.0 / ( right - left );
-		const h = 1.0 / ( top - bottom );
-		const p = 1.0 / ( far - near );
+// 		const te = this.elements;
+// 		const w = 1.0 / ( right - left );
+// 		const h = 1.0 / ( top - bottom );
+// 		const p = 1.0 / ( far - near );
 
-		const x = ( right + left ) * w;
-		const y = ( top + bottom ) * h;
-		const z = ( far + near ) * p;
+// 		const x = ( right + left ) * w;
+// 		const y = ( top + bottom ) * h;
+// 		const z = ( far + near ) * p;
 
-		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
-		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
-		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
-		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
+// 		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
+// 		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
+// 		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
+// 		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( matrix ) {
+// 	equals( matrix ) {
 
-		const te = this.elements;
-		const me = matrix.elements;
+// 		const te = this.elements;
+// 		const me = matrix.elements;
 
-		for ( let i = 0; i < 16; i ++ ) {
+// 		for ( let i = 0; i < 16; i ++ ) {
 
-			if ( te[ i ] !== me[ i ] ) return false;
+// 			if ( te[ i ] !== me[ i ] ) return false;
 
-		}
+// 		}
 
-		return true;
+// 		return true;
 
-	}
+// 	}
 
-	fromArray( array, offset = 0 ) {
+// 	fromArray( array, offset = 0 ) {
 
-		for ( let i = 0; i < 16; i ++ ) {
+// 		for ( let i = 0; i < 16; i ++ ) {
 
-			this.elements[ i ] = array[ i + offset ];
+// 			this.elements[ i ] = array[ i + offset ];
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		const te = this.elements;
+// 		const te = this.elements;
 
-		array[ offset ] = te[ 0 ];
-		array[ offset + 1 ] = te[ 1 ];
-		array[ offset + 2 ] = te[ 2 ];
-		array[ offset + 3 ] = te[ 3 ];
+// 		array[ offset ] = te[ 0 ];
+// 		array[ offset + 1 ] = te[ 1 ];
+// 		array[ offset + 2 ] = te[ 2 ];
+// 		array[ offset + 3 ] = te[ 3 ];
 
-		array[ offset + 4 ] = te[ 4 ];
-		array[ offset + 5 ] = te[ 5 ];
-		array[ offset + 6 ] = te[ 6 ];
-		array[ offset + 7 ] = te[ 7 ];
+// 		array[ offset + 4 ] = te[ 4 ];
+// 		array[ offset + 5 ] = te[ 5 ];
+// 		array[ offset + 6 ] = te[ 6 ];
+// 		array[ offset + 7 ] = te[ 7 ];
 
-		array[ offset + 8 ] = te[ 8 ];
-		array[ offset + 9 ] = te[ 9 ];
-		array[ offset + 10 ] = te[ 10 ];
-		array[ offset + 11 ] = te[ 11 ];
+// 		array[ offset + 8 ] = te[ 8 ];
+// 		array[ offset + 9 ] = te[ 9 ];
+// 		array[ offset + 10 ] = te[ 10 ];
+// 		array[ offset + 11 ] = te[ 11 ];
 
-		array[ offset + 12 ] = te[ 12 ];
-		array[ offset + 13 ] = te[ 13 ];
-		array[ offset + 14 ] = te[ 14 ];
-		array[ offset + 15 ] = te[ 15 ];
+// 		array[ offset + 12 ] = te[ 12 ];
+// 		array[ offset + 13 ] = te[ 13 ];
+// 		array[ offset + 14 ] = te[ 14 ];
+// 		array[ offset + 15 ] = te[ 15 ];
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-}
+// }
 
-const _v1$5 = /*@__PURE__*/ new Vector3();
-const _m1$2 = /*@__PURE__*/ new Matrix4();
-const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
-const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
-const _x = /*@__PURE__*/ new Vector3();
-const _y = /*@__PURE__*/ new Vector3();
-const _z = /*@__PURE__*/ new Vector3();
+// const _v1$5 = /*@__PURE__*/ new Vector3();
+// const _m1$2 = /*@__PURE__*/ new Matrix4();
+// const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
+// const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
+// const _x = /*@__PURE__*/ new Vector3();
+// const _y = /*@__PURE__*/ new Vector3();
+// const _z = /*@__PURE__*/ new Vector3();
 
-const _matrix$1 = /*@__PURE__*/ new Matrix4();
-const _quaternion$3 = /*@__PURE__*/ new Quaternion();
+// const _matrix$1 = /*@__PURE__*/ new Matrix4();
+// const _quaternion$3 = /*@__PURE__*/ new Quaternion();
 
-class Euler {
+// class Euler {
 
-	constructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {
+// 	constructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {
 
-		this.isEuler = true;
+// 		this.isEuler = true;
 
-		this._x = x;
-		this._y = y;
-		this._z = z;
-		this._order = order;
+// 		this._x = x;
+// 		this._y = y;
+// 		this._z = z;
+// 		this._order = order;
 
-	}
+// 	}
 
-	get x() {
+// 	get x() {
 
-		return this._x;
+// 		return this._x;
 
-	}
+// 	}
 
-	set x( value ) {
+// 	set x( value ) {
 
-		this._x = value;
-		this._onChangeCallback();
+// 		this._x = value;
+// 		this._onChangeCallback();
 
-	}
+// 	}
 
-	get y() {
+// 	get y() {
 
-		return this._y;
+// 		return this._y;
 
-	}
+// 	}
 
-	set y( value ) {
+// 	set y( value ) {
 
-		this._y = value;
-		this._onChangeCallback();
+// 		this._y = value;
+// 		this._onChangeCallback();
 
-	}
+// 	}
 
-	get z() {
+// 	get z() {
 
-		return this._z;
+// 		return this._z;
 
-	}
+// 	}
 
-	set z( value ) {
+// 	set z( value ) {
 
-		this._z = value;
-		this._onChangeCallback();
+// 		this._z = value;
+// 		this._onChangeCallback();
 
-	}
+// 	}
 
-	get order() {
+// 	get order() {
 
-		return this._order;
+// 		return this._order;
 
-	}
+// 	}
 
-	set order( value ) {
+// 	set order( value ) {
 
-		this._order = value;
-		this._onChangeCallback();
+// 		this._order = value;
+// 		this._onChangeCallback();
 
-	}
+// 	}
 
-	set( x, y, z, order = this._order ) {
+// 	set( x, y, z, order = this._order ) {
 
-		this._x = x;
-		this._y = y;
-		this._z = z;
-		this._order = order;
+// 		this._x = x;
+// 		this._y = y;
+// 		this._z = z;
+// 		this._order = order;
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor( this._x, this._y, this._z, this._order );
+// 		return new this.constructor( this._x, this._y, this._z, this._order );
 
-	}
+// 	}
 
-	copy( euler ) {
+// 	copy( euler ) {
 
-		this._x = euler._x;
-		this._y = euler._y;
-		this._z = euler._z;
-		this._order = euler._order;
+// 		this._x = euler._x;
+// 		this._y = euler._y;
+// 		this._z = euler._z;
+// 		this._order = euler._order;
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromRotationMatrix( m, order = this._order, update = true ) {
+// 	setFromRotationMatrix( m, order = this._order, update = true ) {
 
-		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
+// 		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
 
-		const te = m.elements;
-		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
-		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
-		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
+// 		const te = m.elements;
+// 		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
+// 		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
+// 		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
 
-		switch ( order ) {
+// 		switch ( order ) {
 
-			case 'XYZ':
+// 			case 'XYZ':
 
-				this._y = Math.asin( clamp( m13, - 1, 1 ) );
+// 				this._y = Math.asin( clamp( m13, - 1, 1 ) );
 
-				if ( Math.abs( m13 ) < 0.9999999 ) {
+// 				if ( Math.abs( m13 ) < 0.9999999 ) {
 
-					this._x = Math.atan2( - m23, m33 );
-					this._z = Math.atan2( - m12, m11 );
+// 					this._x = Math.atan2( - m23, m33 );
+// 					this._z = Math.atan2( - m12, m11 );
 
-				} else {
+// 				} else {
 
-					this._x = Math.atan2( m32, m22 );
-					this._z = 0;
+// 					this._x = Math.atan2( m32, m22 );
+// 					this._z = 0;
 
-				}
+// 				}
 
-				break;
+// 				break;
 
-			case 'YXZ':
+// 			case 'YXZ':
 
-				this._x = Math.asin( - clamp( m23, - 1, 1 ) );
+// 				this._x = Math.asin( - clamp( m23, - 1, 1 ) );
 
-				if ( Math.abs( m23 ) < 0.9999999 ) {
+// 				if ( Math.abs( m23 ) < 0.9999999 ) {
 
-					this._y = Math.atan2( m13, m33 );
-					this._z = Math.atan2( m21, m22 );
+// 					this._y = Math.atan2( m13, m33 );
+// 					this._z = Math.atan2( m21, m22 );
 
-				} else {
+// 				} else {
 
-					this._y = Math.atan2( - m31, m11 );
-					this._z = 0;
+// 					this._y = Math.atan2( - m31, m11 );
+// 					this._z = 0;
 
-				}
+// 				}
 
-				break;
+// 				break;
 
-			case 'ZXY':
+// 			case 'ZXY':
 
-				this._x = Math.asin( clamp( m32, - 1, 1 ) );
+// 				this._x = Math.asin( clamp( m32, - 1, 1 ) );
 
-				if ( Math.abs( m32 ) < 0.9999999 ) {
+// 				if ( Math.abs( m32 ) < 0.9999999 ) {
 
-					this._y = Math.atan2( - m31, m33 );
-					this._z = Math.atan2( - m12, m22 );
+// 					this._y = Math.atan2( - m31, m33 );
+// 					this._z = Math.atan2( - m12, m22 );
 
-				} else {
+// 				} else {
 
-					this._y = 0;
-					this._z = Math.atan2( m21, m11 );
+// 					this._y = 0;
+// 					this._z = Math.atan2( m21, m11 );
 
-				}
+// 				}
 
-				break;
+// 				break;
 
-			case 'ZYX':
+// 			case 'ZYX':
 
-				this._y = Math.asin( - clamp( m31, - 1, 1 ) );
+// 				this._y = Math.asin( - clamp( m31, - 1, 1 ) );
 
-				if ( Math.abs( m31 ) < 0.9999999 ) {
+// 				if ( Math.abs( m31 ) < 0.9999999 ) {
 
-					this._x = Math.atan2( m32, m33 );
-					this._z = Math.atan2( m21, m11 );
+// 					this._x = Math.atan2( m32, m33 );
+// 					this._z = Math.atan2( m21, m11 );
 
-				} else {
+// 				} else {
 
-					this._x = 0;
-					this._z = Math.atan2( - m12, m22 );
+// 					this._x = 0;
+// 					this._z = Math.atan2( - m12, m22 );
 
-				}
+// 				}
 
-				break;
+// 				break;
 
-			case 'YZX':
+// 			case 'YZX':
 
-				this._z = Math.asin( clamp( m21, - 1, 1 ) );
+// 				this._z = Math.asin( clamp( m21, - 1, 1 ) );
 
-				if ( Math.abs( m21 ) < 0.9999999 ) {
+// 				if ( Math.abs( m21 ) < 0.9999999 ) {
 
-					this._x = Math.atan2( - m23, m22 );
-					this._y = Math.atan2( - m31, m11 );
+// 					this._x = Math.atan2( - m23, m22 );
+// 					this._y = Math.atan2( - m31, m11 );
 
-				} else {
+// 				} else {
 
-					this._x = 0;
-					this._y = Math.atan2( m13, m33 );
+// 					this._x = 0;
+// 					this._y = Math.atan2( m13, m33 );
 
-				}
+// 				}
 
-				break;
+// 				break;
 
-			case 'XZY':
+// 			case 'XZY':
 
-				this._z = Math.asin( - clamp( m12, - 1, 1 ) );
+// 				this._z = Math.asin( - clamp( m12, - 1, 1 ) );
 
-				if ( Math.abs( m12 ) < 0.9999999 ) {
+// 				if ( Math.abs( m12 ) < 0.9999999 ) {
 
-					this._x = Math.atan2( m32, m22 );
-					this._y = Math.atan2( m13, m11 );
+// 					this._x = Math.atan2( m32, m22 );
+// 					this._y = Math.atan2( m13, m11 );
 
-				} else {
+// 				} else {
 
-					this._x = Math.atan2( - m23, m33 );
-					this._y = 0;
+// 					this._x = Math.atan2( - m23, m33 );
+// 					this._y = 0;
 
-				}
+// 				}
 
-				break;
+// 				break;
 
-			default:
+// 			default:
 
-				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );
+// 				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );
 
-		}
+// 		}
 
-		this._order = order;
+// 		this._order = order;
 
-		if ( update === true ) this._onChangeCallback();
+// 		if ( update === true ) this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromQuaternion( q, order, update ) {
+// 	setFromQuaternion( q, order, update ) {
 
-		_matrix$1.makeRotationFromQuaternion( q );
+// 		_matrix$1.makeRotationFromQuaternion( q );
 
-		return this.setFromRotationMatrix( _matrix$1, order, update );
+// 		return this.setFromRotationMatrix( _matrix$1, order, update );
 
-	}
+// 	}
 
-	setFromVector3( v, order = this._order ) {
+// 	setFromVector3( v, order = this._order ) {
 
-		return this.set( v.x, v.y, v.z, order );
+// 		return this.set( v.x, v.y, v.z, order );
 
-	}
+// 	}
 
-	reorder( newOrder ) {
+// 	reorder( newOrder ) {
 
-		// WARNING: this discards revolution information -bhouston
+// 		// WARNING: this discards revolution information -bhouston
 
-		_quaternion$3.setFromEuler( this );
+// 		_quaternion$3.setFromEuler( this );
 
-		return this.setFromQuaternion( _quaternion$3, newOrder );
+// 		return this.setFromQuaternion( _quaternion$3, newOrder );
 
-	}
+// 	}
 
-	equals( euler ) {
+// 	equals( euler ) {
 
-		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
+// 		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
 
-	}
+// 	}
 
-	fromArray( array ) {
+// 	fromArray( array ) {
 
-		this._x = array[ 0 ];
-		this._y = array[ 1 ];
-		this._z = array[ 2 ];
-		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
+// 		this._x = array[ 0 ];
+// 		this._y = array[ 1 ];
+// 		this._z = array[ 2 ];
+// 		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
 
-		this._onChangeCallback();
+// 		this._onChangeCallback();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		array[ offset ] = this._x;
-		array[ offset + 1 ] = this._y;
-		array[ offset + 2 ] = this._z;
-		array[ offset + 3 ] = this._order;
+// 		array[ offset ] = this._x;
+// 		array[ offset + 1 ] = this._y;
+// 		array[ offset + 2 ] = this._z;
+// 		array[ offset + 3 ] = this._order;
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-	_onChange( callback ) {
+// 	_onChange( callback ) {
 
-		this._onChangeCallback = callback;
+// 		this._onChangeCallback = callback;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	_onChangeCallback() {}
+// 	_onChangeCallback() {}
 
-	*[ Symbol.iterator ]() {
+// 	*[ Symbol.iterator ]() {
 
-		yield this._x;
-		yield this._y;
-		yield this._z;
-		yield this._order;
+// 		yield this._x;
+// 		yield this._y;
+// 		yield this._z;
+// 		yield this._order;
 
-	}
+// 	}
 
-	// @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53
+// 	// @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53
 
-	toVector3() {
+// 	toVector3() {
 
-		console.error( 'THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead' );
+// 		console.error( 'THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead' );
 
-	}
+// 	}
 
-}
+// }
 
-Euler.DefaultOrder = 'XYZ';
-Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
+// Euler.DefaultOrder = 'XYZ';
+// Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
 
-class Layers {
+// class Layers {
 
-	constructor() {
+// 	constructor() {
 
-		this.mask = 1 | 0;
+// 		this.mask = 1 | 0;
 
-	}
+// 	}
 
-	set( channel ) {
+// 	set( channel ) {
 
-		this.mask = ( 1 << channel | 0 ) >>> 0;
+// 		this.mask = ( 1 << channel | 0 ) >>> 0;
 
-	}
+// 	}
 
-	enable( channel ) {
+// 	enable( channel ) {
 
-		this.mask |= 1 << channel | 0;
+// 		this.mask |= 1 << channel | 0;
 
-	}
+// 	}
 
-	enableAll() {
+// 	enableAll() {
 
-		this.mask = 0xffffffff | 0;
+// 		this.mask = 0xffffffff | 0;
 
-	}
+// 	}
 
-	toggle( channel ) {
+// 	toggle( channel ) {
 
-		this.mask ^= 1 << channel | 0;
+// 		this.mask ^= 1 << channel | 0;
 
-	}
+// 	}
 
-	disable( channel ) {
+// 	disable( channel ) {
 
-		this.mask &= ~ ( 1 << channel | 0 );
+// 		this.mask &= ~ ( 1 << channel | 0 );
 
-	}
+// 	}
 
-	disableAll() {
+// 	disableAll() {
 
-		this.mask = 0;
+// 		this.mask = 0;
 
-	}
+// 	}
 
-	test( layers ) {
+// 	test( layers ) {
 
-		return ( this.mask & layers.mask ) !== 0;
+// 		return ( this.mask & layers.mask ) !== 0;
 
-	}
+// 	}
 
-	isEnabled( channel ) {
+// 	isEnabled( channel ) {
 
-		return ( this.mask & ( 1 << channel | 0 ) ) !== 0;
+// 		return ( this.mask & ( 1 << channel | 0 ) ) !== 0;
 
-	}
+// 	}
 
-}
+// }
 
-let _object3DId = 0;
+// let _object3DId = 0;
 
-const _v1$4 = /*@__PURE__*/ new Vector3();
-const _q1 = /*@__PURE__*/ new Quaternion();
-const _m1$1 = /*@__PURE__*/ new Matrix4();
-const _target = /*@__PURE__*/ new Vector3();
+// const _v1$4 = /*@__PURE__*/ new Vector3();
+// const _q1 = /*@__PURE__*/ new Quaternion();
+// const _m1$1 = /*@__PURE__*/ new Matrix4();
+// const _target = /*@__PURE__*/ new Vector3();
 
-const _position$3 = /*@__PURE__*/ new Vector3();
-const _scale$2 = /*@__PURE__*/ new Vector3();
-const _quaternion$2 = /*@__PURE__*/ new Quaternion();
+// const _position$3 = /*@__PURE__*/ new Vector3();
+// const _scale$2 = /*@__PURE__*/ new Vector3();
+// const _quaternion$2 = /*@__PURE__*/ new Quaternion();
 
-const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
-const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
-const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );
+// const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
+// const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
+// const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );
 
-const _addedEvent = { type: 'added' };
-const _removedEvent = { type: 'removed' };
+// const _addedEvent = { type: 'added' };
+// const _removedEvent = { type: 'removed' };
 
-class Object3D extends EventDispatcher {
+// class Object3D extends EventDispatcher {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isObject3D = true;
+// 		this.isObject3D = true;
 
-		Object.defineProperty( this, 'id', { value: _object3DId ++ } );
+// 		Object.defineProperty( this, 'id', { value: _object3DId ++ } );
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		this.name = '';
-		this.type = 'Object3D';
+// 		this.name = '';
+// 		this.type = 'Object3D';
 
-		this.parent = null;
-		this.children = [];
+// 		this.parent = null;
+// 		this.children = [];
 
-		this.up = Object3D.DefaultUp.clone();
+// 		this.up = Object3D.DefaultUp.clone();
 
-		const position = new Vector3();
-		const rotation = new Euler();
-		const quaternion = new Quaternion();
-		const scale = new Vector3( 1, 1, 1 );
+// 		const position = new Vector3();
+// 		const rotation = new Euler();
+// 		const quaternion = new Quaternion();
+// 		const scale = new Vector3( 1, 1, 1 );
 
-		function onRotationChange() {
+// 		function onRotationChange() {
 
-			quaternion.setFromEuler( rotation, false );
+// 			quaternion.setFromEuler( rotation, false );
 
-		}
+// 		}
 
-		function onQuaternionChange() {
+// 		function onQuaternionChange() {
 
-			rotation.setFromQuaternion( quaternion, undefined, false );
+// 			rotation.setFromQuaternion( quaternion, undefined, false );
 
-		}
+// 		}
 
-		rotation._onChange( onRotationChange );
-		quaternion._onChange( onQuaternionChange );
+// 		rotation._onChange( onRotationChange );
+// 		quaternion._onChange( onQuaternionChange );
 
-		Object.defineProperties( this, {
-			position: {
-				configurable: true,
-				enumerable: true,
-				value: position
-			},
-			rotation: {
-				configurable: true,
-				enumerable: true,
-				value: rotation
-			},
-			quaternion: {
-				configurable: true,
-				enumerable: true,
-				value: quaternion
-			},
-			scale: {
-				configurable: true,
-				enumerable: true,
-				value: scale
-			},
-			modelViewMatrix: {
-				value: new Matrix4()
-			},
-			normalMatrix: {
-				value: new Matrix3()
-			}
-		} );
+// 		Object.defineProperties( this, {
+// 			position: {
+// 				configurable: true,
+// 				enumerable: true,
+// 				value: position
+// 			},
+// 			rotation: {
+// 				configurable: true,
+// 				enumerable: true,
+// 				value: rotation
+// 			},
+// 			quaternion: {
+// 				configurable: true,
+// 				enumerable: true,
+// 				value: quaternion
+// 			},
+// 			scale: {
+// 				configurable: true,
+// 				enumerable: true,
+// 				value: scale
+// 			},
+// 			modelViewMatrix: {
+// 				value: new Matrix4()
+// 			},
+// 			normalMatrix: {
+// 				value: new Matrix3()
+// 			}
+// 		} );
 
-		this.matrix = new Matrix4();
-		this.matrixWorld = new Matrix4();
+// 		this.matrix = new Matrix4();
+// 		this.matrixWorld = new Matrix4();
 
-		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
-		this.matrixWorldNeedsUpdate = false;
+// 		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
+// 		this.matrixWorldNeedsUpdate = false;
 
-		this.matrixWorldAutoUpdate = Object3D.DefaultMatrixWorldAutoUpdate; // checked by the renderer
+// 		this.matrixWorldAutoUpdate = Object3D.DefaultMatrixWorldAutoUpdate; // checked by the renderer
 
-		this.layers = new Layers();
-		this.visible = true;
+// 		this.layers = new Layers();
+// 		this.visible = true;
 
-		this.castShadow = false;
-		this.receiveShadow = false;
+// 		this.castShadow = false;
+// 		this.receiveShadow = false;
 
-		this.frustumCulled = true;
-		this.renderOrder = 0;
+// 		this.frustumCulled = true;
+// 		this.renderOrder = 0;
 
-		this.animations = [];
+// 		this.animations = [];
 
-		this.userData = {};
+// 		this.userData = {};
 
-	}
+// 	}
 
-	onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}
+// 	onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}
 
-	onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}
+// 	onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}
 
-	applyMatrix4( matrix ) {
+// 	applyMatrix4( matrix ) {
 
-		if ( this.matrixAutoUpdate ) this.updateMatrix();
+// 		if ( this.matrixAutoUpdate ) this.updateMatrix();
 
-		this.matrix.premultiply( matrix );
+// 		this.matrix.premultiply( matrix );
 
-		this.matrix.decompose( this.position, this.quaternion, this.scale );
+// 		this.matrix.decompose( this.position, this.quaternion, this.scale );
 
-	}
+// 	}
 
-	applyQuaternion( q ) {
+// 	applyQuaternion( q ) {
 
-		this.quaternion.premultiply( q );
+// 		this.quaternion.premultiply( q );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setRotationFromAxisAngle( axis, angle ) {
+// 	setRotationFromAxisAngle( axis, angle ) {
 
-		// assumes axis is normalized
+// 		// assumes axis is normalized
 
-		this.quaternion.setFromAxisAngle( axis, angle );
+// 		this.quaternion.setFromAxisAngle( axis, angle );
 
-	}
+// 	}
 
-	setRotationFromEuler( euler ) {
+// 	setRotationFromEuler( euler ) {
 
-		this.quaternion.setFromEuler( euler, true );
+// 		this.quaternion.setFromEuler( euler, true );
 
-	}
+// 	}
 
-	setRotationFromMatrix( m ) {
+// 	setRotationFromMatrix( m ) {
 
-		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
+// 		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
 
-		this.quaternion.setFromRotationMatrix( m );
+// 		this.quaternion.setFromRotationMatrix( m );
 
-	}
+// 	}
 
-	setRotationFromQuaternion( q ) {
+// 	setRotationFromQuaternion( q ) {
 
-		// assumes q is normalized
+// 		// assumes q is normalized
 
-		this.quaternion.copy( q );
+// 		this.quaternion.copy( q );
 
-	}
+// 	}
 
-	rotateOnAxis( axis, angle ) {
+// 	rotateOnAxis( axis, angle ) {
 
-		// rotate object on axis in object space
-		// axis is assumed to be normalized
+// 		// rotate object on axis in object space
+// 		// axis is assumed to be normalized
 
-		_q1.setFromAxisAngle( axis, angle );
+// 		_q1.setFromAxisAngle( axis, angle );
 
-		this.quaternion.multiply( _q1 );
+// 		this.quaternion.multiply( _q1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	rotateOnWorldAxis( axis, angle ) {
+// 	rotateOnWorldAxis( axis, angle ) {
 
-		// rotate object on axis in world space
-		// axis is assumed to be normalized
-		// method assumes no rotated parent
+// 		// rotate object on axis in world space
+// 		// axis is assumed to be normalized
+// 		// method assumes no rotated parent
 
-		_q1.setFromAxisAngle( axis, angle );
+// 		_q1.setFromAxisAngle( axis, angle );
 
-		this.quaternion.premultiply( _q1 );
+// 		this.quaternion.premultiply( _q1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	rotateX( angle ) {
+// 	rotateX( angle ) {
 
-		return this.rotateOnAxis( _xAxis, angle );
+// 		return this.rotateOnAxis( _xAxis, angle );
 
-	}
+// 	}
 
-	rotateY( angle ) {
+// 	rotateY( angle ) {
 
-		return this.rotateOnAxis( _yAxis, angle );
+// 		return this.rotateOnAxis( _yAxis, angle );
 
-	}
+// 	}
 
-	rotateZ( angle ) {
+// 	rotateZ( angle ) {
 
-		return this.rotateOnAxis( _zAxis, angle );
+// 		return this.rotateOnAxis( _zAxis, angle );
 
-	}
+// 	}
 
-	translateOnAxis( axis, distance ) {
+// 	translateOnAxis( axis, distance ) {
 
-		// translate object by distance along axis in object space
-		// axis is assumed to be normalized
+// 		// translate object by distance along axis in object space
+// 		// axis is assumed to be normalized
 
-		_v1$4.copy( axis ).applyQuaternion( this.quaternion );
+// 		_v1$4.copy( axis ).applyQuaternion( this.quaternion );
 
-		this.position.add( _v1$4.multiplyScalar( distance ) );
+// 		this.position.add( _v1$4.multiplyScalar( distance ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	translateX( distance ) {
+// 	translateX( distance ) {
 
-		return this.translateOnAxis( _xAxis, distance );
+// 		return this.translateOnAxis( _xAxis, distance );
 
-	}
+// 	}
 
-	translateY( distance ) {
+// 	translateY( distance ) {
 
-		return this.translateOnAxis( _yAxis, distance );
+// 		return this.translateOnAxis( _yAxis, distance );
 
-	}
+// 	}
 
-	translateZ( distance ) {
+// 	translateZ( distance ) {
 
-		return this.translateOnAxis( _zAxis, distance );
+// 		return this.translateOnAxis( _zAxis, distance );
 
-	}
+// 	}
 
-	localToWorld( vector ) {
+// 	localToWorld( vector ) {
 
-		return vector.applyMatrix4( this.matrixWorld );
+// 		return vector.applyMatrix4( this.matrixWorld );
 
-	}
+// 	}
 
-	worldToLocal( vector ) {
+// 	worldToLocal( vector ) {
 
-		return vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );
+// 		return vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );
 
-	}
+// 	}
 
-	lookAt( x, y, z ) {
+// 	lookAt( x, y, z ) {
 
-		// This method does not support objects having non-uniformly-scaled parent(s)
+// 		// This method does not support objects having non-uniformly-scaled parent(s)
 
-		if ( x.isVector3 ) {
+// 		if ( x.isVector3 ) {
 
-			_target.copy( x );
+// 			_target.copy( x );
 
-		} else {
+// 		} else {
 
-			_target.set( x, y, z );
+// 			_target.set( x, y, z );
 
-		}
+// 		}
 
-		const parent = this.parent;
+// 		const parent = this.parent;
 
-		this.updateWorldMatrix( true, false );
+// 		this.updateWorldMatrix( true, false );
 
-		_position$3.setFromMatrixPosition( this.matrixWorld );
+// 		_position$3.setFromMatrixPosition( this.matrixWorld );
 
-		if ( this.isCamera || this.isLight ) {
+// 		if ( this.isCamera || this.isLight ) {
 
-			_m1$1.lookAt( _position$3, _target, this.up );
+// 			_m1$1.lookAt( _position$3, _target, this.up );
 
-		} else {
+// 		} else {
 
-			_m1$1.lookAt( _target, _position$3, this.up );
+// 			_m1$1.lookAt( _target, _position$3, this.up );
 
-		}
+// 		}
 
-		this.quaternion.setFromRotationMatrix( _m1$1 );
+// 		this.quaternion.setFromRotationMatrix( _m1$1 );
 
-		if ( parent ) {
+// 		if ( parent ) {
 
-			_m1$1.extractRotation( parent.matrixWorld );
-			_q1.setFromRotationMatrix( _m1$1 );
-			this.quaternion.premultiply( _q1.invert() );
+// 			_m1$1.extractRotation( parent.matrixWorld );
+// 			_q1.setFromRotationMatrix( _m1$1 );
+// 			this.quaternion.premultiply( _q1.invert() );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	add( object ) {
+// 	add( object ) {
 
-		if ( arguments.length > 1 ) {
+// 		if ( arguments.length > 1 ) {
 
-			for ( let i = 0; i < arguments.length; i ++ ) {
+// 			for ( let i = 0; i < arguments.length; i ++ ) {
 
-				this.add( arguments[ i ] );
+// 				this.add( arguments[ i ] );
 
-			}
+// 			}
 
-			return this;
+// 			return this;
 
-		}
+// 		}
 
-		if ( object === this ) {
+// 		if ( object === this ) {
 
-			console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
-			return this;
+// 			console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
+// 			return this;
 
-		}
+// 		}
 
-		if ( object && object.isObject3D ) {
+// 		if ( object && object.isObject3D ) {
 
-			if ( object.parent !== null ) {
+// 			if ( object.parent !== null ) {
 
-				object.parent.remove( object );
+// 				object.parent.remove( object );
 
-			}
+// 			}
 
-			object.parent = this;
-			this.children.push( object );
+// 			object.parent = this;
+// 			this.children.push( object );
 
-			object.dispatchEvent( _addedEvent );
+// 			object.dispatchEvent( _addedEvent );
 
-		} else {
+// 		} else {
 
-			console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );
+// 			console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	remove( object ) {
+// 	remove( object ) {
 
-		if ( arguments.length > 1 ) {
+// 		if ( arguments.length > 1 ) {
 
-			for ( let i = 0; i < arguments.length; i ++ ) {
+// 			for ( let i = 0; i < arguments.length; i ++ ) {
 
-				this.remove( arguments[ i ] );
+// 				this.remove( arguments[ i ] );
 
-			}
+// 			}
 
-			return this;
+// 			return this;
 
-		}
+// 		}
 
-		const index = this.children.indexOf( object );
+// 		const index = this.children.indexOf( object );
 
-		if ( index !== - 1 ) {
+// 		if ( index !== - 1 ) {
 
-			object.parent = null;
-			this.children.splice( index, 1 );
+// 			object.parent = null;
+// 			this.children.splice( index, 1 );
 
-			object.dispatchEvent( _removedEvent );
+// 			object.dispatchEvent( _removedEvent );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	removeFromParent() {
+// 	removeFromParent() {
 
-		const parent = this.parent;
+// 		const parent = this.parent;
 
-		if ( parent !== null ) {
+// 		if ( parent !== null ) {
 
-			parent.remove( this );
+// 			parent.remove( this );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clear() {
+// 	clear() {
 
-		for ( let i = 0; i < this.children.length; i ++ ) {
+// 		for ( let i = 0; i < this.children.length; i ++ ) {
 
-			const object = this.children[ i ];
+// 			const object = this.children[ i ];
 
-			object.parent = null;
+// 			object.parent = null;
 
-			object.dispatchEvent( _removedEvent );
+// 			object.dispatchEvent( _removedEvent );
 
-		}
+// 		}
 
-		this.children.length = 0;
+// 		this.children.length = 0;
 
-		return this;
+// 		return this;
 
 
-	}
+// 	}
 
-	attach( object ) {
+// 	attach( object ) {
 
-		// adds object as a child of this, while maintaining the object's world transform
+// 		// adds object as a child of this, while maintaining the object's world transform
 
-		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
+// 		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
 
-		this.updateWorldMatrix( true, false );
+// 		this.updateWorldMatrix( true, false );
 
-		_m1$1.copy( this.matrixWorld ).invert();
+// 		_m1$1.copy( this.matrixWorld ).invert();
 
-		if ( object.parent !== null ) {
+// 		if ( object.parent !== null ) {
 
-			object.parent.updateWorldMatrix( true, false );
+// 			object.parent.updateWorldMatrix( true, false );
 
-			_m1$1.multiply( object.parent.matrixWorld );
+// 			_m1$1.multiply( object.parent.matrixWorld );
 
-		}
+// 		}
 
-		object.applyMatrix4( _m1$1 );
+// 		object.applyMatrix4( _m1$1 );
 
-		this.add( object );
+// 		this.add( object );
 
-		object.updateWorldMatrix( false, true );
+// 		object.updateWorldMatrix( false, true );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getObjectById( id ) {
+// 	getObjectById( id ) {
 
-		return this.getObjectByProperty( 'id', id );
+// 		return this.getObjectByProperty( 'id', id );
 
-	}
+// 	}
 
-	getObjectByName( name ) {
+// 	getObjectByName( name ) {
 
-		return this.getObjectByProperty( 'name', name );
+// 		return this.getObjectByProperty( 'name', name );
 
-	}
+// 	}
 
-	getObjectByProperty( name, value ) {
+// 	getObjectByProperty( name, value ) {
 
-		if ( this[ name ] === value ) return this;
+// 		if ( this[ name ] === value ) return this;
 
-		for ( let i = 0, l = this.children.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.children.length; i < l; i ++ ) {
 
-			const child = this.children[ i ];
-			const object = child.getObjectByProperty( name, value );
+// 			const child = this.children[ i ];
+// 			const object = child.getObjectByProperty( name, value );
 
-			if ( object !== undefined ) {
+// 			if ( object !== undefined ) {
 
-				return object;
+// 				return object;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return undefined;
+// 		return undefined;
 
-	}
+// 	}
 
-	getWorldPosition( target ) {
+// 	getWorldPosition( target ) {
 
-		this.updateWorldMatrix( true, false );
+// 		this.updateWorldMatrix( true, false );
 
-		return target.setFromMatrixPosition( this.matrixWorld );
+// 		return target.setFromMatrixPosition( this.matrixWorld );
 
-	}
+// 	}
 
-	getWorldQuaternion( target ) {
+// 	getWorldQuaternion( target ) {
 
-		this.updateWorldMatrix( true, false );
+// 		this.updateWorldMatrix( true, false );
 
-		this.matrixWorld.decompose( _position$3, target, _scale$2 );
+// 		this.matrixWorld.decompose( _position$3, target, _scale$2 );
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	getWorldScale( target ) {
+// 	getWorldScale( target ) {
 
-		this.updateWorldMatrix( true, false );
+// 		this.updateWorldMatrix( true, false );
 
-		this.matrixWorld.decompose( _position$3, _quaternion$2, target );
+// 		this.matrixWorld.decompose( _position$3, _quaternion$2, target );
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	getWorldDirection( target ) {
+// 	getWorldDirection( target ) {
 
-		this.updateWorldMatrix( true, false );
+// 		this.updateWorldMatrix( true, false );
 
-		const e = this.matrixWorld.elements;
+// 		const e = this.matrixWorld.elements;
 
-		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();
+// 		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();
 
-	}
+// 	}
 
-	raycast( /* raycaster, intersects */ ) {}
+// 	raycast( /* raycaster, intersects */ ) {}
 
-	traverse( callback ) {
+// 	traverse( callback ) {
 
-		callback( this );
+// 		callback( this );
 
-		const children = this.children;
+// 		const children = this.children;
 
-		for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-			children[ i ].traverse( callback );
+// 			children[ i ].traverse( callback );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	traverseVisible( callback ) {
+// 	traverseVisible( callback ) {
 
-		if ( this.visible === false ) return;
+// 		if ( this.visible === false ) return;
 
-		callback( this );
+// 		callback( this );
 
-		const children = this.children;
+// 		const children = this.children;
 
-		for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-			children[ i ].traverseVisible( callback );
+// 			children[ i ].traverseVisible( callback );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	traverseAncestors( callback ) {
+// 	traverseAncestors( callback ) {
 
-		const parent = this.parent;
+// 		const parent = this.parent;
 
-		if ( parent !== null ) {
+// 		if ( parent !== null ) {
 
-			callback( parent );
+// 			callback( parent );
 
-			parent.traverseAncestors( callback );
+// 			parent.traverseAncestors( callback );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	updateMatrix() {
+// 	updateMatrix() {
 
-		this.matrix.compose( this.position, this.quaternion, this.scale );
+// 		this.matrix.compose( this.position, this.quaternion, this.scale );
 
-		this.matrixWorldNeedsUpdate = true;
+// 		this.matrixWorldNeedsUpdate = true;
 
-	}
+// 	}
 
-	updateMatrixWorld( force ) {
+// 	updateMatrixWorld( force ) {
 
-		if ( this.matrixAutoUpdate ) this.updateMatrix();
+// 		if ( this.matrixAutoUpdate ) this.updateMatrix();
 
-		if ( this.matrixWorldNeedsUpdate || force ) {
+// 		if ( this.matrixWorldNeedsUpdate || force ) {
 
-			if ( this.parent === null ) {
+// 			if ( this.parent === null ) {
 
-				this.matrixWorld.copy( this.matrix );
+// 				this.matrixWorld.copy( this.matrix );
 
-			} else {
+// 			} else {
 
-				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
+// 				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
 
-			}
+// 			}
 
-			this.matrixWorldNeedsUpdate = false;
+// 			this.matrixWorldNeedsUpdate = false;
 
-			force = true;
+// 			force = true;
 
-		}
+// 		}
 
-		// update children
+// 		// update children
 
-		const children = this.children;
+// 		const children = this.children;
 
-		for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-			const child = children[ i ];
+// 			const child = children[ i ];
 
-			if ( child.matrixWorldAutoUpdate === true || force === true ) {
+// 			if ( child.matrixWorldAutoUpdate === true || force === true ) {
 
-				child.updateMatrixWorld( force );
+// 				child.updateMatrixWorld( force );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	updateWorldMatrix( updateParents, updateChildren ) {
+// 	updateWorldMatrix( updateParents, updateChildren ) {
 
-		const parent = this.parent;
+// 		const parent = this.parent;
 
-		if ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {
+// 		if ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {
 
-			parent.updateWorldMatrix( true, false );
+// 			parent.updateWorldMatrix( true, false );
 
-		}
+// 		}
 
-		if ( this.matrixAutoUpdate ) this.updateMatrix();
+// 		if ( this.matrixAutoUpdate ) this.updateMatrix();
 
-		if ( this.parent === null ) {
+// 		if ( this.parent === null ) {
 
-			this.matrixWorld.copy( this.matrix );
+// 			this.matrixWorld.copy( this.matrix );
 
-		} else {
+// 		} else {
 
-			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
+// 			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
 
-		}
+// 		}
 
-		// update children
+// 		// update children
 
-		if ( updateChildren === true ) {
+// 		if ( updateChildren === true ) {
 
-			const children = this.children;
+// 			const children = this.children;
 
-			for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-				const child = children[ i ];
+// 				const child = children[ i ];
 
-				if ( child.matrixWorldAutoUpdate === true ) {
+// 				if ( child.matrixWorldAutoUpdate === true ) {
 
-					child.updateWorldMatrix( false, true );
+// 					child.updateWorldMatrix( false, true );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		// meta is a string when called from JSON.stringify
-		const isRootObject = ( meta === undefined || typeof meta === 'string' );
+// 		// meta is a string when called from JSON.stringify
+// 		const isRootObject = ( meta === undefined || typeof meta === 'string' );
 
-		const output = {};
+// 		const output = {};
 
-		// meta is a hash used to collect geometries, materials.
-		// not providing it implies that this is the root object
-		// being serialized.
-		if ( isRootObject ) {
+// 		// meta is a hash used to collect geometries, materials.
+// 		// not providing it implies that this is the root object
+// 		// being serialized.
+// 		if ( isRootObject ) {
 
-			// initialize meta obj
-			meta = {
-				geometries: {},
-				materials: {},
-				textures: {},
-				images: {},
-				shapes: {},
-				skeletons: {},
-				animations: {},
-				nodes: {}
-			};
+// 			// initialize meta obj
+// 			meta = {
+// 				geometries: {},
+// 				materials: {},
+// 				textures: {},
+// 				images: {},
+// 				shapes: {},
+// 				skeletons: {},
+// 				animations: {},
+// 				nodes: {}
+// 			};
 
-			output.metadata = {
-				version: 4.5,
-				type: 'Object',
-				generator: 'Object3D.toJSON'
-			};
+// 			output.metadata = {
+// 				version: 4.5,
+// 				type: 'Object',
+// 				generator: 'Object3D.toJSON'
+// 			};
 
-		}
+// 		}
 
-		// standard Object3D serialization
+// 		// standard Object3D serialization
 
-		const object = {};
+// 		const object = {};
 
-		object.uuid = this.uuid;
-		object.type = this.type;
+// 		object.uuid = this.uuid;
+// 		object.type = this.type;
 
-		if ( this.name !== '' ) object.name = this.name;
-		if ( this.castShadow === true ) object.castShadow = true;
-		if ( this.receiveShadow === true ) object.receiveShadow = true;
-		if ( this.visible === false ) object.visible = false;
-		if ( this.frustumCulled === false ) object.frustumCulled = false;
-		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
-		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
+// 		if ( this.name !== '' ) object.name = this.name;
+// 		if ( this.castShadow === true ) object.castShadow = true;
+// 		if ( this.receiveShadow === true ) object.receiveShadow = true;
+// 		if ( this.visible === false ) object.visible = false;
+// 		if ( this.frustumCulled === false ) object.frustumCulled = false;
+// 		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
+// 		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
 
-		object.layers = this.layers.mask;
-		object.matrix = this.matrix.toArray();
+// 		object.layers = this.layers.mask;
+// 		object.matrix = this.matrix.toArray();
 
-		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;
+// 		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;
 
-		// object specific properties
+// 		// object specific properties
 
-		if ( this.isInstancedMesh ) {
+// 		if ( this.isInstancedMesh ) {
 
-			object.type = 'InstancedMesh';
-			object.count = this.count;
-			object.instanceMatrix = this.instanceMatrix.toJSON();
-			if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();
+// 			object.type = 'InstancedMesh';
+// 			object.count = this.count;
+// 			object.instanceMatrix = this.instanceMatrix.toJSON();
+// 			if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();
 
-		}
+// 		}
 
-		//
+// 		//
 
-		function serialize( library, element ) {
+// 		function serialize( library, element ) {
 
-			if ( library[ element.uuid ] === undefined ) {
+// 			if ( library[ element.uuid ] === undefined ) {
 
-				library[ element.uuid ] = element.toJSON( meta );
+// 				library[ element.uuid ] = element.toJSON( meta );
 
-			}
+// 			}
 
-			return element.uuid;
+// 			return element.uuid;
 
-		}
+// 		}
 
-		if ( this.isScene ) {
+// 		if ( this.isScene ) {
 
-			if ( this.background ) {
+// 			if ( this.background ) {
 
-				if ( this.background.isColor ) {
+// 				if ( this.background.isColor ) {
 
-					object.background = this.background.toJSON();
+// 					object.background = this.background.toJSON();
 
-				} else if ( this.background.isTexture ) {
+// 				} else if ( this.background.isTexture ) {
 
-					object.background = this.background.toJSON( meta ).uuid;
+// 					object.background = this.background.toJSON( meta ).uuid;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {
+// 			if ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {
 
-				object.environment = this.environment.toJSON( meta ).uuid;
+// 				object.environment = this.environment.toJSON( meta ).uuid;
 
-			}
+// 			}
 
-		} else if ( this.isMesh || this.isLine || this.isPoints ) {
+// 		} else if ( this.isMesh || this.isLine || this.isPoints ) {
 
-			object.geometry = serialize( meta.geometries, this.geometry );
+// 			object.geometry = serialize( meta.geometries, this.geometry );
 
-			const parameters = this.geometry.parameters;
+// 			const parameters = this.geometry.parameters;
 
-			if ( parameters !== undefined && parameters.shapes !== undefined ) {
+// 			if ( parameters !== undefined && parameters.shapes !== undefined ) {
 
-				const shapes = parameters.shapes;
+// 				const shapes = parameters.shapes;
 
-				if ( Array.isArray( shapes ) ) {
+// 				if ( Array.isArray( shapes ) ) {
 
-					for ( let i = 0, l = shapes.length; i < l; i ++ ) {
+// 					for ( let i = 0, l = shapes.length; i < l; i ++ ) {
 
-						const shape = shapes[ i ];
+// 						const shape = shapes[ i ];
 
-						serialize( meta.shapes, shape );
+// 						serialize( meta.shapes, shape );
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					serialize( meta.shapes, shapes );
+// 					serialize( meta.shapes, shapes );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( this.isSkinnedMesh ) {
+// 		if ( this.isSkinnedMesh ) {
 
-			object.bindMode = this.bindMode;
-			object.bindMatrix = this.bindMatrix.toArray();
+// 			object.bindMode = this.bindMode;
+// 			object.bindMatrix = this.bindMatrix.toArray();
 
-			if ( this.skeleton !== undefined ) {
+// 			if ( this.skeleton !== undefined ) {
 
-				serialize( meta.skeletons, this.skeleton );
+// 				serialize( meta.skeletons, this.skeleton );
 
-				object.skeleton = this.skeleton.uuid;
+// 				object.skeleton = this.skeleton.uuid;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( this.material !== undefined ) {
+// 		if ( this.material !== undefined ) {
 
-			if ( Array.isArray( this.material ) ) {
+// 			if ( Array.isArray( this.material ) ) {
 
-				const uuids = [];
+// 				const uuids = [];
 
-				for ( let i = 0, l = this.material.length; i < l; i ++ ) {
+// 				for ( let i = 0, l = this.material.length; i < l; i ++ ) {
 
-					uuids.push( serialize( meta.materials, this.material[ i ] ) );
+// 					uuids.push( serialize( meta.materials, this.material[ i ] ) );
 
-				}
+// 				}
 
-				object.material = uuids;
+// 				object.material = uuids;
 
-			} else {
+// 			} else {
 
-				object.material = serialize( meta.materials, this.material );
+// 				object.material = serialize( meta.materials, this.material );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		//
+// 		//
 
-		if ( this.children.length > 0 ) {
+// 		if ( this.children.length > 0 ) {
 
-			object.children = [];
+// 			object.children = [];
 
-			for ( let i = 0; i < this.children.length; i ++ ) {
+// 			for ( let i = 0; i < this.children.length; i ++ ) {
 
-				object.children.push( this.children[ i ].toJSON( meta ).object );
+// 				object.children.push( this.children[ i ].toJSON( meta ).object );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		//
+// 		//
 
-		if ( this.animations.length > 0 ) {
+// 		if ( this.animations.length > 0 ) {
 
-			object.animations = [];
+// 			object.animations = [];
 
-			for ( let i = 0; i < this.animations.length; i ++ ) {
+// 			for ( let i = 0; i < this.animations.length; i ++ ) {
 
-				const animation = this.animations[ i ];
+// 				const animation = this.animations[ i ];
 
-				object.animations.push( serialize( meta.animations, animation ) );
+// 				object.animations.push( serialize( meta.animations, animation ) );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( isRootObject ) {
+// 		if ( isRootObject ) {
 
-			const geometries = extractFromCache( meta.geometries );
-			const materials = extractFromCache( meta.materials );
-			const textures = extractFromCache( meta.textures );
-			const images = extractFromCache( meta.images );
-			const shapes = extractFromCache( meta.shapes );
-			const skeletons = extractFromCache( meta.skeletons );
-			const animations = extractFromCache( meta.animations );
-			const nodes = extractFromCache( meta.nodes );
+// 			const geometries = extractFromCache( meta.geometries );
+// 			const materials = extractFromCache( meta.materials );
+// 			const textures = extractFromCache( meta.textures );
+// 			const images = extractFromCache( meta.images );
+// 			const shapes = extractFromCache( meta.shapes );
+// 			const skeletons = extractFromCache( meta.skeletons );
+// 			const animations = extractFromCache( meta.animations );
+// 			const nodes = extractFromCache( meta.nodes );
 
-			if ( geometries.length > 0 ) output.geometries = geometries;
-			if ( materials.length > 0 ) output.materials = materials;
-			if ( textures.length > 0 ) output.textures = textures;
-			if ( images.length > 0 ) output.images = images;
-			if ( shapes.length > 0 ) output.shapes = shapes;
-			if ( skeletons.length > 0 ) output.skeletons = skeletons;
-			if ( animations.length > 0 ) output.animations = animations;
-			if ( nodes.length > 0 ) output.nodes = nodes;
+// 			if ( geometries.length > 0 ) output.geometries = geometries;
+// 			if ( materials.length > 0 ) output.materials = materials;
+// 			if ( textures.length > 0 ) output.textures = textures;
+// 			if ( images.length > 0 ) output.images = images;
+// 			if ( shapes.length > 0 ) output.shapes = shapes;
+// 			if ( skeletons.length > 0 ) output.skeletons = skeletons;
+// 			if ( animations.length > 0 ) output.animations = animations;
+// 			if ( nodes.length > 0 ) output.nodes = nodes;
 
-		}
+// 		}
 
-		output.object = object;
+// 		output.object = object;
 
-		return output;
+// 		return output;
 
-		// extract data from the cache hash
-		// remove metadata on each item
-		// and return as array
-		function extractFromCache( cache ) {
+// 		// extract data from the cache hash
+// 		// remove metadata on each item
+// 		// and return as array
+// 		function extractFromCache( cache ) {
 
-			const values = [];
-			for ( const key in cache ) {
+// 			const values = [];
+// 			for ( const key in cache ) {
 
-				const data = cache[ key ];
-				delete data.metadata;
-				values.push( data );
+// 				const data = cache[ key ];
+// 				delete data.metadata;
+// 				values.push( data );
 
-			}
+// 			}
 
-			return values;
+// 			return values;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	clone( recursive ) {
+// 	clone( recursive ) {
 
-		return new this.constructor().copy( this, recursive );
+// 		return new this.constructor().copy( this, recursive );
 
-	}
+// 	}
 
-	copy( source, recursive = true ) {
+// 	copy( source, recursive = true ) {
 
-		this.name = source.name;
+// 		this.name = source.name;
 
-		this.up.copy( source.up );
+// 		this.up.copy( source.up );
 
-		this.position.copy( source.position );
-		this.rotation.order = source.rotation.order;
-		this.quaternion.copy( source.quaternion );
-		this.scale.copy( source.scale );
+// 		this.position.copy( source.position );
+// 		this.rotation.order = source.rotation.order;
+// 		this.quaternion.copy( source.quaternion );
+// 		this.scale.copy( source.scale );
 
-		this.matrix.copy( source.matrix );
-		this.matrixWorld.copy( source.matrixWorld );
+// 		this.matrix.copy( source.matrix );
+// 		this.matrixWorld.copy( source.matrixWorld );
 
-		this.matrixAutoUpdate = source.matrixAutoUpdate;
-		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
+// 		this.matrixAutoUpdate = source.matrixAutoUpdate;
+// 		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
 
-		this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
+// 		this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
 
-		this.layers.mask = source.layers.mask;
-		this.visible = source.visible;
+// 		this.layers.mask = source.layers.mask;
+// 		this.visible = source.visible;
 
-		this.castShadow = source.castShadow;
-		this.receiveShadow = source.receiveShadow;
+// 		this.castShadow = source.castShadow;
+// 		this.receiveShadow = source.receiveShadow;
 
-		this.frustumCulled = source.frustumCulled;
-		this.renderOrder = source.renderOrder;
+// 		this.frustumCulled = source.frustumCulled;
+// 		this.renderOrder = source.renderOrder;
 
-		this.userData = JSON.parse( JSON.stringify( source.userData ) );
+// 		this.userData = JSON.parse( JSON.stringify( source.userData ) );
 
-		if ( recursive === true ) {
+// 		if ( recursive === true ) {
 
-			for ( let i = 0; i < source.children.length; i ++ ) {
+// 			for ( let i = 0; i < source.children.length; i ++ ) {
 
-				const child = source.children[ i ];
-				this.add( child.clone() );
+// 				const child = source.children[ i ];
+// 				this.add( child.clone() );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-Object3D.DefaultUp = /*@__PURE__*/ new Vector3( 0, 1, 0 );
-Object3D.DefaultMatrixAutoUpdate = true;
-Object3D.DefaultMatrixWorldAutoUpdate = true;
+// Object3D.DefaultUp = /*@__PURE__*/ new Vector3( 0, 1, 0 );
+// Object3D.DefaultMatrixAutoUpdate = true;
+// Object3D.DefaultMatrixWorldAutoUpdate = true;
 
-const _v0$1 = /*@__PURE__*/ new Vector3();
-const _v1$3 = /*@__PURE__*/ new Vector3();
-const _v2$2 = /*@__PURE__*/ new Vector3();
-const _v3$1 = /*@__PURE__*/ new Vector3();
+// const _v0$1 = /*@__PURE__*/ new Vector3();
+// const _v1$3 = /*@__PURE__*/ new Vector3();
+// const _v2$2 = /*@__PURE__*/ new Vector3();
+// const _v3$1 = /*@__PURE__*/ new Vector3();
 
-const _vab = /*@__PURE__*/ new Vector3();
-const _vac = /*@__PURE__*/ new Vector3();
-const _vbc = /*@__PURE__*/ new Vector3();
-const _vap = /*@__PURE__*/ new Vector3();
-const _vbp = /*@__PURE__*/ new Vector3();
-const _vcp = /*@__PURE__*/ new Vector3();
+// const _vab = /*@__PURE__*/ new Vector3();
+// const _vac = /*@__PURE__*/ new Vector3();
+// const _vbc = /*@__PURE__*/ new Vector3();
+// const _vap = /*@__PURE__*/ new Vector3();
+// const _vbp = /*@__PURE__*/ new Vector3();
+// const _vcp = /*@__PURE__*/ new Vector3();
 
-class Triangle {
+// class Triangle {
 
-	constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {
+// 	constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {
 
-		this.a = a;
-		this.b = b;
-		this.c = c;
+// 		this.a = a;
+// 		this.b = b;
+// 		this.c = c;
 
-	}
+// 	}
 
-	static getNormal( a, b, c, target ) {
+// 	static getNormal( a, b, c, target ) {
 
-		target.subVectors( c, b );
-		_v0$1.subVectors( a, b );
-		target.cross( _v0$1 );
+// 		target.subVectors( c, b );
+// 		_v0$1.subVectors( a, b );
+// 		target.cross( _v0$1 );
 
-		const targetLengthSq = target.lengthSq();
-		if ( targetLengthSq > 0 ) {
+// 		const targetLengthSq = target.lengthSq();
+// 		if ( targetLengthSq > 0 ) {
 
-			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );
+// 			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );
 
-		}
+// 		}
 
-		return target.set( 0, 0, 0 );
+// 		return target.set( 0, 0, 0 );
 
-	}
+// 	}
 
-	// static/instance method to calculate barycentric coordinates
-	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
-	static getBarycoord( point, a, b, c, target ) {
+// 	// static/instance method to calculate barycentric coordinates
+// 	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
+// 	static getBarycoord( point, a, b, c, target ) {
 
-		_v0$1.subVectors( c, a );
-		_v1$3.subVectors( b, a );
-		_v2$2.subVectors( point, a );
+// 		_v0$1.subVectors( c, a );
+// 		_v1$3.subVectors( b, a );
+// 		_v2$2.subVectors( point, a );
 
-		const dot00 = _v0$1.dot( _v0$1 );
-		const dot01 = _v0$1.dot( _v1$3 );
-		const dot02 = _v0$1.dot( _v2$2 );
-		const dot11 = _v1$3.dot( _v1$3 );
-		const dot12 = _v1$3.dot( _v2$2 );
+// 		const dot00 = _v0$1.dot( _v0$1 );
+// 		const dot01 = _v0$1.dot( _v1$3 );
+// 		const dot02 = _v0$1.dot( _v2$2 );
+// 		const dot11 = _v1$3.dot( _v1$3 );
+// 		const dot12 = _v1$3.dot( _v2$2 );
 
-		const denom = ( dot00 * dot11 - dot01 * dot01 );
+// 		const denom = ( dot00 * dot11 - dot01 * dot01 );
 
-		// collinear or singular triangle
-		if ( denom === 0 ) {
+// 		// collinear or singular triangle
+// 		if ( denom === 0 ) {
 
-			// arbitrary location outside of triangle?
-			// not sure if this is the best idea, maybe should be returning undefined
-			return target.set( - 2, - 1, - 1 );
+// 			// arbitrary location outside of triangle?
+// 			// not sure if this is the best idea, maybe should be returning undefined
+// 			return target.set( - 2, - 1, - 1 );
 
-		}
+// 		}
 
-		const invDenom = 1 / denom;
-		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
-		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
+// 		const invDenom = 1 / denom;
+// 		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
+// 		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
 
-		// barycentric coordinates must always sum to 1
-		return target.set( 1 - u - v, v, u );
+// 		// barycentric coordinates must always sum to 1
+// 		return target.set( 1 - u - v, v, u );
 
-	}
+// 	}
 
-	static containsPoint( point, a, b, c ) {
+// 	static containsPoint( point, a, b, c ) {
 
-		this.getBarycoord( point, a, b, c, _v3$1 );
+// 		this.getBarycoord( point, a, b, c, _v3$1 );
 
-		return ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );
+// 		return ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );
 
-	}
+// 	}
 
-	static getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {
+// 	static getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {
 
-		this.getBarycoord( point, p1, p2, p3, _v3$1 );
+// 		this.getBarycoord( point, p1, p2, p3, _v3$1 );
 
-		target.set( 0, 0 );
-		target.addScaledVector( uv1, _v3$1.x );
-		target.addScaledVector( uv2, _v3$1.y );
-		target.addScaledVector( uv3, _v3$1.z );
+// 		target.set( 0, 0 );
+// 		target.addScaledVector( uv1, _v3$1.x );
+// 		target.addScaledVector( uv2, _v3$1.y );
+// 		target.addScaledVector( uv3, _v3$1.z );
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	static isFrontFacing( a, b, c, direction ) {
+// 	static isFrontFacing( a, b, c, direction ) {
 
-		_v0$1.subVectors( c, b );
-		_v1$3.subVectors( a, b );
+// 		_v0$1.subVectors( c, b );
+// 		_v1$3.subVectors( a, b );
 
-		// strictly front facing
-		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;
+// 		// strictly front facing
+// 		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;
 
-	}
+// 	}
 
-	set( a, b, c ) {
+// 	set( a, b, c ) {
 
-		this.a.copy( a );
-		this.b.copy( b );
-		this.c.copy( c );
+// 		this.a.copy( a );
+// 		this.b.copy( b );
+// 		this.c.copy( c );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromPointsAndIndices( points, i0, i1, i2 ) {
+// 	setFromPointsAndIndices( points, i0, i1, i2 ) {
 
-		this.a.copy( points[ i0 ] );
-		this.b.copy( points[ i1 ] );
-		this.c.copy( points[ i2 ] );
+// 		this.a.copy( points[ i0 ] );
+// 		this.b.copy( points[ i1 ] );
+// 		this.c.copy( points[ i2 ] );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromAttributeAndIndices( attribute, i0, i1, i2 ) {
+// 	setFromAttributeAndIndices( attribute, i0, i1, i2 ) {
 
-		this.a.fromBufferAttribute( attribute, i0 );
-		this.b.fromBufferAttribute( attribute, i1 );
-		this.c.fromBufferAttribute( attribute, i2 );
+// 		this.a.fromBufferAttribute( attribute, i0 );
+// 		this.b.fromBufferAttribute( attribute, i1 );
+// 		this.c.fromBufferAttribute( attribute, i2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	copy( triangle ) {
+// 	copy( triangle ) {
 
-		this.a.copy( triangle.a );
-		this.b.copy( triangle.b );
-		this.c.copy( triangle.c );
+// 		this.a.copy( triangle.a );
+// 		this.b.copy( triangle.b );
+// 		this.c.copy( triangle.c );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getArea() {
+// 	getArea() {
 
-		_v0$1.subVectors( this.c, this.b );
-		_v1$3.subVectors( this.a, this.b );
+// 		_v0$1.subVectors( this.c, this.b );
+// 		_v1$3.subVectors( this.a, this.b );
 
-		return _v0$1.cross( _v1$3 ).length() * 0.5;
+// 		return _v0$1.cross( _v1$3 ).length() * 0.5;
 
-	}
+// 	}
 
-	getMidpoint( target ) {
+// 	getMidpoint( target ) {
 
-		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
+// 		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
 
-	}
+// 	}
 
-	getNormal( target ) {
+// 	getNormal( target ) {
 
-		return Triangle.getNormal( this.a, this.b, this.c, target );
+// 		return Triangle.getNormal( this.a, this.b, this.c, target );
 
-	}
+// 	}
 
-	getPlane( target ) {
+// 	getPlane( target ) {
 
-		return target.setFromCoplanarPoints( this.a, this.b, this.c );
+// 		return target.setFromCoplanarPoints( this.a, this.b, this.c );
 
-	}
+// 	}
 
-	getBarycoord( point, target ) {
+// 	getBarycoord( point, target ) {
 
-		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );
+// 		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );
 
-	}
+// 	}
 
-	getUV( point, uv1, uv2, uv3, target ) {
+// 	getUV( point, uv1, uv2, uv3, target ) {
 
-		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );
+// 		return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );
 
-	}
+// 	}
 
-	containsPoint( point ) {
+// 	containsPoint( point ) {
 
-		return Triangle.containsPoint( point, this.a, this.b, this.c );
+// 		return Triangle.containsPoint( point, this.a, this.b, this.c );
 
-	}
+// 	}
 
-	isFrontFacing( direction ) {
+// 	isFrontFacing( direction ) {
 
-		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );
+// 		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );
 
-	}
+// 	}
 
-	intersectsBox( box ) {
+// 	intersectsBox( box ) {
 
-		return box.intersectsTriangle( this );
+// 		return box.intersectsTriangle( this );
 
-	}
+// 	}
 
-	closestPointToPoint( p, target ) {
+// 	closestPointToPoint( p, target ) {
 
-		const a = this.a, b = this.b, c = this.c;
-		let v, w;
+// 		const a = this.a, b = this.b, c = this.c;
+// 		let v, w;
 
-		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
-		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
-		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
-		// basically, we're distinguishing which of the voronoi regions of the triangle
-		// the point lies in with the minimum amount of redundant computation.
+// 		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
+// 		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
+// 		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
+// 		// basically, we're distinguishing which of the voronoi regions of the triangle
+// 		// the point lies in with the minimum amount of redundant computation.
 
-		_vab.subVectors( b, a );
-		_vac.subVectors( c, a );
-		_vap.subVectors( p, a );
-		const d1 = _vab.dot( _vap );
-		const d2 = _vac.dot( _vap );
-		if ( d1 <= 0 && d2 <= 0 ) {
+// 		_vab.subVectors( b, a );
+// 		_vac.subVectors( c, a );
+// 		_vap.subVectors( p, a );
+// 		const d1 = _vab.dot( _vap );
+// 		const d2 = _vac.dot( _vap );
+// 		if ( d1 <= 0 && d2 <= 0 ) {
 
-			// vertex region of A; barycentric coords (1, 0, 0)
-			return target.copy( a );
+// 			// vertex region of A; barycentric coords (1, 0, 0)
+// 			return target.copy( a );
 
-		}
+// 		}
 
-		_vbp.subVectors( p, b );
-		const d3 = _vab.dot( _vbp );
-		const d4 = _vac.dot( _vbp );
-		if ( d3 >= 0 && d4 <= d3 ) {
+// 		_vbp.subVectors( p, b );
+// 		const d3 = _vab.dot( _vbp );
+// 		const d4 = _vac.dot( _vbp );
+// 		if ( d3 >= 0 && d4 <= d3 ) {
 
-			// vertex region of B; barycentric coords (0, 1, 0)
-			return target.copy( b );
+// 			// vertex region of B; barycentric coords (0, 1, 0)
+// 			return target.copy( b );
 
-		}
+// 		}
 
-		const vc = d1 * d4 - d3 * d2;
-		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {
+// 		const vc = d1 * d4 - d3 * d2;
+// 		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {
 
-			v = d1 / ( d1 - d3 );
-			// edge region of AB; barycentric coords (1-v, v, 0)
-			return target.copy( a ).addScaledVector( _vab, v );
+// 			v = d1 / ( d1 - d3 );
+// 			// edge region of AB; barycentric coords (1-v, v, 0)
+// 			return target.copy( a ).addScaledVector( _vab, v );
 
-		}
+// 		}
 
-		_vcp.subVectors( p, c );
-		const d5 = _vab.dot( _vcp );
-		const d6 = _vac.dot( _vcp );
-		if ( d6 >= 0 && d5 <= d6 ) {
+// 		_vcp.subVectors( p, c );
+// 		const d5 = _vab.dot( _vcp );
+// 		const d6 = _vac.dot( _vcp );
+// 		if ( d6 >= 0 && d5 <= d6 ) {
 
-			// vertex region of C; barycentric coords (0, 0, 1)
-			return target.copy( c );
+// 			// vertex region of C; barycentric coords (0, 0, 1)
+// 			return target.copy( c );
 
-		}
+// 		}
 
-		const vb = d5 * d2 - d1 * d6;
-		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {
+// 		const vb = d5 * d2 - d1 * d6;
+// 		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {
 
-			w = d2 / ( d2 - d6 );
-			// edge region of AC; barycentric coords (1-w, 0, w)
-			return target.copy( a ).addScaledVector( _vac, w );
+// 			w = d2 / ( d2 - d6 );
+// 			// edge region of AC; barycentric coords (1-w, 0, w)
+// 			return target.copy( a ).addScaledVector( _vac, w );
 
-		}
+// 		}
 
-		const va = d3 * d6 - d5 * d4;
-		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {
+// 		const va = d3 * d6 - d5 * d4;
+// 		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {
 
-			_vbc.subVectors( c, b );
-			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
-			// edge region of BC; barycentric coords (0, 1-w, w)
-			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC
+// 			_vbc.subVectors( c, b );
+// 			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
+// 			// edge region of BC; barycentric coords (0, 1-w, w)
+// 			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC
 
-		}
+// 		}
 
-		// face region
-		const denom = 1 / ( va + vb + vc );
-		// u = va * denom
-		v = vb * denom;
-		w = vc * denom;
+// 		// face region
+// 		const denom = 1 / ( va + vb + vc );
+// 		// u = va * denom
+// 		v = vb * denom;
+// 		w = vc * denom;
 
-		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );
+// 		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );
 
-	}
+// 	}
 
-	equals( triangle ) {
+// 	equals( triangle ) {
 
-		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
+// 		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
 
-	}
+// 	}
 
-}
+// }
 
-let materialId = 0;
+// let materialId = 0;
 
-class Material extends EventDispatcher {
+// class Material extends EventDispatcher {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isMaterial = true;
+// 		this.isMaterial = true;
 
-		Object.defineProperty( this, 'id', { value: materialId ++ } );
+// 		Object.defineProperty( this, 'id', { value: materialId ++ } );
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		this.name = '';
-		this.type = 'Material';
+// 		this.name = '';
+// 		this.type = 'Material';
 
-		this.blending = NormalBlending;
-		this.side = FrontSide;
-		this.vertexColors = false;
+// 		this.blending = NormalBlending;
+// 		this.side = FrontSide;
+// 		this.vertexColors = false;
 
-		this.opacity = 1;
-		this.transparent = false;
+// 		this.opacity = 1;
+// 		this.transparent = false;
 
-		this.blendSrc = SrcAlphaFactor;
-		this.blendDst = OneMinusSrcAlphaFactor;
-		this.blendEquation = AddEquation;
-		this.blendSrcAlpha = null;
-		this.blendDstAlpha = null;
-		this.blendEquationAlpha = null;
+// 		this.blendSrc = SrcAlphaFactor;
+// 		this.blendDst = OneMinusSrcAlphaFactor;
+// 		this.blendEquation = AddEquation;
+// 		this.blendSrcAlpha = null;
+// 		this.blendDstAlpha = null;
+// 		this.blendEquationAlpha = null;
 
-		this.depthFunc = LessEqualDepth;
-		this.depthTest = true;
-		this.depthWrite = true;
+// 		this.depthFunc = LessEqualDepth;
+// 		this.depthTest = true;
+// 		this.depthWrite = true;
 
-		this.stencilWriteMask = 0xff;
-		this.stencilFunc = AlwaysStencilFunc;
-		this.stencilRef = 0;
-		this.stencilFuncMask = 0xff;
-		this.stencilFail = KeepStencilOp;
-		this.stencilZFail = KeepStencilOp;
-		this.stencilZPass = KeepStencilOp;
-		this.stencilWrite = false;
+// 		this.stencilWriteMask = 0xff;
+// 		this.stencilFunc = AlwaysStencilFunc;
+// 		this.stencilRef = 0;
+// 		this.stencilFuncMask = 0xff;
+// 		this.stencilFail = KeepStencilOp;
+// 		this.stencilZFail = KeepStencilOp;
+// 		this.stencilZPass = KeepStencilOp;
+// 		this.stencilWrite = false;
 
-		this.clippingPlanes = null;
-		this.clipIntersection = false;
-		this.clipShadows = false;
+// 		this.clippingPlanes = null;
+// 		this.clipIntersection = false;
+// 		this.clipShadows = false;
 
-		this.shadowSide = null;
+// 		this.shadowSide = null;
 
-		this.colorWrite = true;
+// 		this.colorWrite = true;
 
-		this.precision = null; // override the renderer's default precision for this material
+// 		this.precision = null; // override the renderer's default precision for this material
 
-		this.polygonOffset = false;
-		this.polygonOffsetFactor = 0;
-		this.polygonOffsetUnits = 0;
+// 		this.polygonOffset = false;
+// 		this.polygonOffsetFactor = 0;
+// 		this.polygonOffsetUnits = 0;
 
-		this.dithering = false;
+// 		this.dithering = false;
 
-		this.alphaToCoverage = false;
-		this.premultipliedAlpha = false;
+// 		this.alphaToCoverage = false;
+// 		this.premultipliedAlpha = false;
 
-		this.visible = true;
+// 		this.visible = true;
 
-		this.toneMapped = true;
+// 		this.toneMapped = true;
 
-		this.userData = {};
+// 		this.userData = {};
 
-		this.version = 0;
+// 		this.version = 0;
 
-		this._alphaTest = 0;
+// 		this._alphaTest = 0;
 
-	}
+// 	}
 
-	get alphaTest() {
+// 	get alphaTest() {
 
-		return this._alphaTest;
+// 		return this._alphaTest;
 
-	}
+// 	}
 
-	set alphaTest( value ) {
+// 	set alphaTest( value ) {
 
-		if ( this._alphaTest > 0 !== value > 0 ) {
+// 		if ( this._alphaTest > 0 !== value > 0 ) {
 
-			this.version ++;
+// 			this.version ++;
 
-		}
+// 		}
 
-		this._alphaTest = value;
+// 		this._alphaTest = value;
 
-	}
+// 	}
 
-	onBuild( /* shaderobject, renderer */ ) {}
+// 	onBuild( /* shaderobject, renderer */ ) {}
 
-	onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}
+// 	onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}
 
-	onBeforeCompile( /* shaderobject, renderer */ ) {}
+// 	onBeforeCompile( /* shaderobject, renderer */ ) {}
 
-	customProgramCacheKey() {
+// 	customProgramCacheKey() {
 
-		return this.onBeforeCompile.toString();
+// 		return this.onBeforeCompile.toString();
 
-	}
+// 	}
 
-	setValues( values ) {
+// 	setValues( values ) {
 
-		if ( values === undefined ) return;
+// 		if ( values === undefined ) return;
 
-		for ( const key in values ) {
+// 		for ( const key in values ) {
 
-			const newValue = values[ key ];
+// 			const newValue = values[ key ];
 
-			if ( newValue === undefined ) {
+// 			if ( newValue === undefined ) {
 
-				console.warn( 'THREE.Material: \'' + key + '\' parameter is undefined.' );
-				continue;
+// 				console.warn( 'THREE.Material: \'' + key + '\' parameter is undefined.' );
+// 				continue;
 
-			}
+// 			}
 
-			const currentValue = this[ key ];
+// 			const currentValue = this[ key ];
 
-			if ( currentValue === undefined ) {
+// 			if ( currentValue === undefined ) {
 
-				console.warn( 'THREE.' + this.type + ': \'' + key + '\' is not a property of this material.' );
-				continue;
+// 				console.warn( 'THREE.' + this.type + ': \'' + key + '\' is not a property of this material.' );
+// 				continue;
 
-			}
+// 			}
 
-			if ( currentValue && currentValue.isColor ) {
+// 			if ( currentValue && currentValue.isColor ) {
 
-				currentValue.set( newValue );
+// 				currentValue.set( newValue );
 
-			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {
+// 			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {
 
-				currentValue.copy( newValue );
+// 				currentValue.copy( newValue );
 
-			} else {
+// 			} else {
 
-				this[ key ] = newValue;
+// 				this[ key ] = newValue;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const isRootObject = ( meta === undefined || typeof meta === 'string' );
+// 		const isRootObject = ( meta === undefined || typeof meta === 'string' );
 
-		if ( isRootObject ) {
+// 		if ( isRootObject ) {
 
-			meta = {
-				textures: {},
-				images: {}
-			};
+// 			meta = {
+// 				textures: {},
+// 				images: {}
+// 			};
 
-		}
+// 		}
 
-		const data = {
-			metadata: {
-				version: 4.5,
-				type: 'Material',
-				generator: 'Material.toJSON'
-			}
-		};
+// 		const data = {
+// 			metadata: {
+// 				version: 4.5,
+// 				type: 'Material',
+// 				generator: 'Material.toJSON'
+// 			}
+// 		};
 
-		// standard Material serialization
-		data.uuid = this.uuid;
-		data.type = this.type;
+// 		// standard Material serialization
+// 		data.uuid = this.uuid;
+// 		data.type = this.type;
 
-		if ( this.name !== '' ) data.name = this.name;
+// 		if ( this.name !== '' ) data.name = this.name;
 
-		if ( this.color && this.color.isColor ) data.color = this.color.getHex();
+// 		if ( this.color && this.color.isColor ) data.color = this.color.getHex();
 
-		if ( this.roughness !== undefined ) data.roughness = this.roughness;
-		if ( this.metalness !== undefined ) data.metalness = this.metalness;
+// 		if ( this.roughness !== undefined ) data.roughness = this.roughness;
+// 		if ( this.metalness !== undefined ) data.metalness = this.metalness;
 
-		if ( this.sheen !== undefined ) data.sheen = this.sheen;
-		if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
-		if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
-		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
-		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;
+// 		if ( this.sheen !== undefined ) data.sheen = this.sheen;
+// 		if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
+// 		if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
+// 		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
+// 		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;
 
-		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
-		if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
-		if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
-		if ( this.shininess !== undefined ) data.shininess = this.shininess;
-		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
-		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;
+// 		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
+// 		if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
+// 		if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
+// 		if ( this.shininess !== undefined ) data.shininess = this.shininess;
+// 		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
+// 		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;
 
-		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {
+// 		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {
 
-			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;
+// 			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;
 
-		}
+// 		}
 
-		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {
+// 		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {
 
-			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;
+// 			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;
 
-		}
+// 		}
 
-		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {
+// 		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {
 
-			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
-			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
+// 			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
+// 			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
 
-		}
+// 		}
 
-		if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
-		if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
-		if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
+// 		if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
+// 		if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
+// 		if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
 
-		if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {
+// 		if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {
 
-			data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;
+// 			data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;
 
-		}
+// 		}
 
-		if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {
+// 		if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {
 
-			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;
+// 			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;
 
-		}
+// 		}
 
-		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
-		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
-		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
+// 		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
+// 		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
+// 		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
 
-		if ( this.lightMap && this.lightMap.isTexture ) {
+// 		if ( this.lightMap && this.lightMap.isTexture ) {
 
-			data.lightMap = this.lightMap.toJSON( meta ).uuid;
-			data.lightMapIntensity = this.lightMapIntensity;
+// 			data.lightMap = this.lightMap.toJSON( meta ).uuid;
+// 			data.lightMapIntensity = this.lightMapIntensity;
 
-		}
+// 		}
 
-		if ( this.aoMap && this.aoMap.isTexture ) {
+// 		if ( this.aoMap && this.aoMap.isTexture ) {
 
-			data.aoMap = this.aoMap.toJSON( meta ).uuid;
-			data.aoMapIntensity = this.aoMapIntensity;
+// 			data.aoMap = this.aoMap.toJSON( meta ).uuid;
+// 			data.aoMapIntensity = this.aoMapIntensity;
 
-		}
+// 		}
 
-		if ( this.bumpMap && this.bumpMap.isTexture ) {
+// 		if ( this.bumpMap && this.bumpMap.isTexture ) {
 
-			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
-			data.bumpScale = this.bumpScale;
+// 			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
+// 			data.bumpScale = this.bumpScale;
 
-		}
+// 		}
 
-		if ( this.normalMap && this.normalMap.isTexture ) {
+// 		if ( this.normalMap && this.normalMap.isTexture ) {
 
-			data.normalMap = this.normalMap.toJSON( meta ).uuid;
-			data.normalMapType = this.normalMapType;
-			data.normalScale = this.normalScale.toArray();
+// 			data.normalMap = this.normalMap.toJSON( meta ).uuid;
+// 			data.normalMapType = this.normalMapType;
+// 			data.normalScale = this.normalScale.toArray();
 
-		}
+// 		}
 
-		if ( this.displacementMap && this.displacementMap.isTexture ) {
+// 		if ( this.displacementMap && this.displacementMap.isTexture ) {
 
-			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
-			data.displacementScale = this.displacementScale;
-			data.displacementBias = this.displacementBias;
+// 			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
+// 			data.displacementScale = this.displacementScale;
+// 			data.displacementBias = this.displacementBias;
 
-		}
+// 		}
 
-		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
-		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;
+// 		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
+// 		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;
 
-		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
-		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
-		if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
-		if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;
+// 		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
+// 		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
+// 		if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
+// 		if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;
 
-		if ( this.envMap && this.envMap.isTexture ) {
+// 		if ( this.envMap && this.envMap.isTexture ) {
 
-			data.envMap = this.envMap.toJSON( meta ).uuid;
+// 			data.envMap = this.envMap.toJSON( meta ).uuid;
 
-			if ( this.combine !== undefined ) data.combine = this.combine;
+// 			if ( this.combine !== undefined ) data.combine = this.combine;
 
-		}
+// 		}
 
-		if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
-		if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
-		if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;
+// 		if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
+// 		if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
+// 		if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;
 
-		if ( this.gradientMap && this.gradientMap.isTexture ) {
+// 		if ( this.gradientMap && this.gradientMap.isTexture ) {
 
-			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;
+// 			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;
 
-		}
+// 		}
 
-		if ( this.transmission !== undefined ) data.transmission = this.transmission;
-		if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
-		if ( this.thickness !== undefined ) data.thickness = this.thickness;
-		if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
-		if ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;
-		if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();
+// 		if ( this.transmission !== undefined ) data.transmission = this.transmission;
+// 		if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
+// 		if ( this.thickness !== undefined ) data.thickness = this.thickness;
+// 		if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
+// 		if ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;
+// 		if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();
 
-		if ( this.size !== undefined ) data.size = this.size;
-		if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
-		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;
+// 		if ( this.size !== undefined ) data.size = this.size;
+// 		if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
+// 		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;
 
-		if ( this.blending !== NormalBlending ) data.blending = this.blending;
-		if ( this.side !== FrontSide ) data.side = this.side;
-		if ( this.vertexColors ) data.vertexColors = true;
+// 		if ( this.blending !== NormalBlending ) data.blending = this.blending;
+// 		if ( this.side !== FrontSide ) data.side = this.side;
+// 		if ( this.vertexColors ) data.vertexColors = true;
 
-		if ( this.opacity < 1 ) data.opacity = this.opacity;
-		if ( this.transparent === true ) data.transparent = this.transparent;
+// 		if ( this.opacity < 1 ) data.opacity = this.opacity;
+// 		if ( this.transparent === true ) data.transparent = this.transparent;
 
-		data.depthFunc = this.depthFunc;
-		data.depthTest = this.depthTest;
-		data.depthWrite = this.depthWrite;
-		data.colorWrite = this.colorWrite;
+// 		data.depthFunc = this.depthFunc;
+// 		data.depthTest = this.depthTest;
+// 		data.depthWrite = this.depthWrite;
+// 		data.colorWrite = this.colorWrite;
 
-		data.stencilWrite = this.stencilWrite;
-		data.stencilWriteMask = this.stencilWriteMask;
-		data.stencilFunc = this.stencilFunc;
-		data.stencilRef = this.stencilRef;
-		data.stencilFuncMask = this.stencilFuncMask;
-		data.stencilFail = this.stencilFail;
-		data.stencilZFail = this.stencilZFail;
-		data.stencilZPass = this.stencilZPass;
+// 		data.stencilWrite = this.stencilWrite;
+// 		data.stencilWriteMask = this.stencilWriteMask;
+// 		data.stencilFunc = this.stencilFunc;
+// 		data.stencilRef = this.stencilRef;
+// 		data.stencilFuncMask = this.stencilFuncMask;
+// 		data.stencilFail = this.stencilFail;
+// 		data.stencilZFail = this.stencilZFail;
+// 		data.stencilZPass = this.stencilZPass;
 
-		// rotation (SpriteMaterial)
-		if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;
+// 		// rotation (SpriteMaterial)
+// 		if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;
 
-		if ( this.polygonOffset === true ) data.polygonOffset = true;
-		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
-		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;
+// 		if ( this.polygonOffset === true ) data.polygonOffset = true;
+// 		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
+// 		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;
 
-		if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
-		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
-		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
-		if ( this.scale !== undefined ) data.scale = this.scale;
+// 		if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
+// 		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
+// 		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
+// 		if ( this.scale !== undefined ) data.scale = this.scale;
 
-		if ( this.dithering === true ) data.dithering = true;
+// 		if ( this.dithering === true ) data.dithering = true;
 
-		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
-		if ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;
-		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
+// 		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
+// 		if ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;
+// 		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
 
-		if ( this.wireframe === true ) data.wireframe = this.wireframe;
-		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
-		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
-		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;
+// 		if ( this.wireframe === true ) data.wireframe = this.wireframe;
+// 		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
+// 		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
+// 		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;
 
-		if ( this.flatShading === true ) data.flatShading = this.flatShading;
+// 		if ( this.flatShading === true ) data.flatShading = this.flatShading;
 
-		if ( this.visible === false ) data.visible = false;
+// 		if ( this.visible === false ) data.visible = false;
 
-		if ( this.toneMapped === false ) data.toneMapped = false;
+// 		if ( this.toneMapped === false ) data.toneMapped = false;
 
-		if ( this.fog === false ) data.fog = false;
+// 		if ( this.fog === false ) data.fog = false;
 
-		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;
+// 		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;
 
-		// TODO: Copied from Object3D.toJSON
+// 		// TODO: Copied from Object3D.toJSON
 
-		function extractFromCache( cache ) {
+// 		function extractFromCache( cache ) {
 
-			const values = [];
+// 			const values = [];
 
-			for ( const key in cache ) {
+// 			for ( const key in cache ) {
 
-				const data = cache[ key ];
-				delete data.metadata;
-				values.push( data );
+// 				const data = cache[ key ];
+// 				delete data.metadata;
+// 				values.push( data );
 
-			}
+// 			}
 
-			return values;
+// 			return values;
 
-		}
+// 		}
 
-		if ( isRootObject ) {
+// 		if ( isRootObject ) {
 
-			const textures = extractFromCache( meta.textures );
-			const images = extractFromCache( meta.images );
+// 			const textures = extractFromCache( meta.textures );
+// 			const images = extractFromCache( meta.images );
 
-			if ( textures.length > 0 ) data.textures = textures;
-			if ( images.length > 0 ) data.images = images;
+// 			if ( textures.length > 0 ) data.textures = textures;
+// 			if ( images.length > 0 ) data.images = images;
 
-		}
+// 		}
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.name = source.name;
+// 		this.name = source.name;
 
-		this.blending = source.blending;
-		this.side = source.side;
-		this.vertexColors = source.vertexColors;
+// 		this.blending = source.blending;
+// 		this.side = source.side;
+// 		this.vertexColors = source.vertexColors;
 
-		this.opacity = source.opacity;
-		this.transparent = source.transparent;
+// 		this.opacity = source.opacity;
+// 		this.transparent = source.transparent;
 
-		this.blendSrc = source.blendSrc;
-		this.blendDst = source.blendDst;
-		this.blendEquation = source.blendEquation;
-		this.blendSrcAlpha = source.blendSrcAlpha;
-		this.blendDstAlpha = source.blendDstAlpha;
-		this.blendEquationAlpha = source.blendEquationAlpha;
+// 		this.blendSrc = source.blendSrc;
+// 		this.blendDst = source.blendDst;
+// 		this.blendEquation = source.blendEquation;
+// 		this.blendSrcAlpha = source.blendSrcAlpha;
+// 		this.blendDstAlpha = source.blendDstAlpha;
+// 		this.blendEquationAlpha = source.blendEquationAlpha;
 
-		this.depthFunc = source.depthFunc;
-		this.depthTest = source.depthTest;
-		this.depthWrite = source.depthWrite;
+// 		this.depthFunc = source.depthFunc;
+// 		this.depthTest = source.depthTest;
+// 		this.depthWrite = source.depthWrite;
 
-		this.stencilWriteMask = source.stencilWriteMask;
-		this.stencilFunc = source.stencilFunc;
-		this.stencilRef = source.stencilRef;
-		this.stencilFuncMask = source.stencilFuncMask;
-		this.stencilFail = source.stencilFail;
-		this.stencilZFail = source.stencilZFail;
-		this.stencilZPass = source.stencilZPass;
-		this.stencilWrite = source.stencilWrite;
+// 		this.stencilWriteMask = source.stencilWriteMask;
+// 		this.stencilFunc = source.stencilFunc;
+// 		this.stencilRef = source.stencilRef;
+// 		this.stencilFuncMask = source.stencilFuncMask;
+// 		this.stencilFail = source.stencilFail;
+// 		this.stencilZFail = source.stencilZFail;
+// 		this.stencilZPass = source.stencilZPass;
+// 		this.stencilWrite = source.stencilWrite;
 
-		const srcPlanes = source.clippingPlanes;
-		let dstPlanes = null;
+// 		const srcPlanes = source.clippingPlanes;
+// 		let dstPlanes = null;
 
-		if ( srcPlanes !== null ) {
+// 		if ( srcPlanes !== null ) {
 
-			const n = srcPlanes.length;
-			dstPlanes = new Array( n );
+// 			const n = srcPlanes.length;
+// 			dstPlanes = new Array( n );
 
-			for ( let i = 0; i !== n; ++ i ) {
+// 			for ( let i = 0; i !== n; ++ i ) {
 
-				dstPlanes[ i ] = srcPlanes[ i ].clone();
+// 				dstPlanes[ i ] = srcPlanes[ i ].clone();
 
-			}
+// 			}
 
-		}
+// 		}
 
-		this.clippingPlanes = dstPlanes;
-		this.clipIntersection = source.clipIntersection;
-		this.clipShadows = source.clipShadows;
+// 		this.clippingPlanes = dstPlanes;
+// 		this.clipIntersection = source.clipIntersection;
+// 		this.clipShadows = source.clipShadows;
 
-		this.shadowSide = source.shadowSide;
+// 		this.shadowSide = source.shadowSide;
 
-		this.colorWrite = source.colorWrite;
+// 		this.colorWrite = source.colorWrite;
 
-		this.precision = source.precision;
+// 		this.precision = source.precision;
 
-		this.polygonOffset = source.polygonOffset;
-		this.polygonOffsetFactor = source.polygonOffsetFactor;
-		this.polygonOffsetUnits = source.polygonOffsetUnits;
+// 		this.polygonOffset = source.polygonOffset;
+// 		this.polygonOffsetFactor = source.polygonOffsetFactor;
+// 		this.polygonOffsetUnits = source.polygonOffsetUnits;
 
-		this.dithering = source.dithering;
+// 		this.dithering = source.dithering;
 
-		this.alphaTest = source.alphaTest;
-		this.alphaToCoverage = source.alphaToCoverage;
-		this.premultipliedAlpha = source.premultipliedAlpha;
+// 		this.alphaTest = source.alphaTest;
+// 		this.alphaToCoverage = source.alphaToCoverage;
+// 		this.premultipliedAlpha = source.premultipliedAlpha;
 
-		this.visible = source.visible;
+// 		this.visible = source.visible;
 
-		this.toneMapped = source.toneMapped;
+// 		this.toneMapped = source.toneMapped;
 
-		this.userData = JSON.parse( JSON.stringify( source.userData ) );
+// 		this.userData = JSON.parse( JSON.stringify( source.userData ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.dispatchEvent( { type: 'dispose' } );
+// 		this.dispatchEvent( { type: 'dispose' } );
 
-	}
+// 	}
 
-	set needsUpdate( value ) {
+// 	set needsUpdate( value ) {
 
-		if ( value === true ) this.version ++;
+// 		if ( value === true ) this.version ++;
 
-	}
+// 	}
 
-}
+// }
 
-class MeshBasicMaterial extends Material {
+// class MeshBasicMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshBasicMaterial = true;
+// 		this.isMeshBasicMaterial = true;
 
-		this.type = 'MeshBasicMaterial';
+// 		this.type = 'MeshBasicMaterial';
 
-		this.color = new Color( 0xffffff ); // emissive
+// 		this.color = new Color( 0xffffff ); // emissive
 
-		this.map = null;
+// 		this.map = null;
 
-		this.lightMap = null;
-		this.lightMapIntensity = 1.0;
+// 		this.lightMap = null;
+// 		this.lightMapIntensity = 1.0;
 
-		this.aoMap = null;
-		this.aoMapIntensity = 1.0;
+// 		this.aoMap = null;
+// 		this.aoMapIntensity = 1.0;
 
-		this.specularMap = null;
+// 		this.specularMap = null;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.envMap = null;
-		this.combine = MultiplyOperation;
-		this.reflectivity = 1;
-		this.refractionRatio = 0.98;
+// 		this.envMap = null;
+// 		this.combine = MultiplyOperation;
+// 		this.reflectivity = 1;
+// 		this.refractionRatio = 0.98;
 
-		this.wireframe = false;
-		this.wireframeLinewidth = 1;
-		this.wireframeLinecap = 'round';
-		this.wireframeLinejoin = 'round';
+// 		this.wireframe = false;
+// 		this.wireframeLinewidth = 1;
+// 		this.wireframeLinecap = 'round';
+// 		this.wireframeLinejoin = 'round';
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.color.copy( source.color );
+// 		this.color.copy( source.color );
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.lightMap = source.lightMap;
-		this.lightMapIntensity = source.lightMapIntensity;
+// 		this.lightMap = source.lightMap;
+// 		this.lightMapIntensity = source.lightMapIntensity;
 
-		this.aoMap = source.aoMap;
-		this.aoMapIntensity = source.aoMapIntensity;
+// 		this.aoMap = source.aoMap;
+// 		this.aoMapIntensity = source.aoMapIntensity;
 
-		this.specularMap = source.specularMap;
+// 		this.specularMap = source.specularMap;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.envMap = source.envMap;
-		this.combine = source.combine;
-		this.reflectivity = source.reflectivity;
-		this.refractionRatio = source.refractionRatio;
+// 		this.envMap = source.envMap;
+// 		this.combine = source.combine;
+// 		this.reflectivity = source.reflectivity;
+// 		this.refractionRatio = source.refractionRatio;
 
-		this.wireframe = source.wireframe;
-		this.wireframeLinewidth = source.wireframeLinewidth;
-		this.wireframeLinecap = source.wireframeLinecap;
-		this.wireframeLinejoin = source.wireframeLinejoin;
+// 		this.wireframe = source.wireframe;
+// 		this.wireframeLinewidth = source.wireframeLinewidth;
+// 		this.wireframeLinecap = source.wireframeLinecap;
+// 		this.wireframeLinejoin = source.wireframeLinejoin;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const _vector$9 = /*@__PURE__*/ new Vector3();
-const _vector2$1 = /*@__PURE__*/ new Vector2();
+// const _vector$9 = /*@__PURE__*/ new Vector3();
+// const _vector2$1 = /*@__PURE__*/ new Vector2();
 
-class BufferAttribute {
+// class BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		if ( Array.isArray( array ) ) {
+// 		if ( Array.isArray( array ) ) {
 
-			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
+// 			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
 
-		}
+// 		}
 
-		this.isBufferAttribute = true;
+// 		this.isBufferAttribute = true;
 
-		this.name = '';
+// 		this.name = '';
 
-		this.array = array;
-		this.itemSize = itemSize;
-		this.count = array !== undefined ? array.length / itemSize : 0;
-		this.normalized = normalized === true;
+// 		this.array = array;
+// 		this.itemSize = itemSize;
+// 		this.count = array !== undefined ? array.length / itemSize : 0;
+// 		this.normalized = normalized === true;
 
-		this.usage = StaticDrawUsage;
-		this.updateRange = { offset: 0, count: - 1 };
+// 		this.usage = StaticDrawUsage;
+// 		this.updateRange = { offset: 0, count: - 1 };
 
-		this.version = 0;
+// 		this.version = 0;
 
-	}
+// 	}
 
-	onUploadCallback() {}
+// 	onUploadCallback() {}
 
-	set needsUpdate( value ) {
+// 	set needsUpdate( value ) {
 
-		if ( value === true ) this.version ++;
+// 		if ( value === true ) this.version ++;
 
-	}
+// 	}
 
-	setUsage( value ) {
+// 	setUsage( value ) {
 
-		this.usage = value;
+// 		this.usage = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.name = source.name;
-		this.array = new source.array.constructor( source.array );
-		this.itemSize = source.itemSize;
-		this.count = source.count;
-		this.normalized = source.normalized;
+// 		this.name = source.name;
+// 		this.array = new source.array.constructor( source.array );
+// 		this.itemSize = source.itemSize;
+// 		this.count = source.count;
+// 		this.normalized = source.normalized;
 
-		this.usage = source.usage;
+// 		this.usage = source.usage;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copyAt( index1, attribute, index2 ) {
+// 	copyAt( index1, attribute, index2 ) {
 
-		index1 *= this.itemSize;
-		index2 *= attribute.itemSize;
+// 		index1 *= this.itemSize;
+// 		index2 *= attribute.itemSize;
 
-		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {
 
-			this.array[ index1 + i ] = attribute.array[ index2 + i ];
+// 			this.array[ index1 + i ] = attribute.array[ index2 + i ];
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copyArray( array ) {
+// 	copyArray( array ) {
 
-		this.array.set( array );
+// 		this.array.set( array );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyMatrix3( m ) {
+// 	applyMatrix3( m ) {
 
-		if ( this.itemSize === 2 ) {
+// 		if ( this.itemSize === 2 ) {
 
-			for ( let i = 0, l = this.count; i < l; i ++ ) {
+// 			for ( let i = 0, l = this.count; i < l; i ++ ) {
 
-				_vector2$1.fromBufferAttribute( this, i );
-				_vector2$1.applyMatrix3( m );
+// 				_vector2$1.fromBufferAttribute( this, i );
+// 				_vector2$1.applyMatrix3( m );
 
-				this.setXY( i, _vector2$1.x, _vector2$1.y );
+// 				this.setXY( i, _vector2$1.x, _vector2$1.y );
 
-			}
+// 			}
 
-		} else if ( this.itemSize === 3 ) {
+// 		} else if ( this.itemSize === 3 ) {
 
-			for ( let i = 0, l = this.count; i < l; i ++ ) {
+// 			for ( let i = 0, l = this.count; i < l; i ++ ) {
 
-				_vector$9.fromBufferAttribute( this, i );
-				_vector$9.applyMatrix3( m );
+// 				_vector$9.fromBufferAttribute( this, i );
+// 				_vector$9.applyMatrix3( m );
 
-				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );
+// 				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyMatrix4( m ) {
+// 	applyMatrix4( m ) {
 
-		for ( let i = 0, l = this.count; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.count; i < l; i ++ ) {
 
-			_vector$9.fromBufferAttribute( this, i );
+// 			_vector$9.fromBufferAttribute( this, i );
 
-			_vector$9.applyMatrix4( m );
+// 			_vector$9.applyMatrix4( m );
 
-			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );
+// 			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyNormalMatrix( m ) {
+// 	applyNormalMatrix( m ) {
 
-		for ( let i = 0, l = this.count; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.count; i < l; i ++ ) {
 
-			_vector$9.fromBufferAttribute( this, i );
+// 			_vector$9.fromBufferAttribute( this, i );
 
-			_vector$9.applyNormalMatrix( m );
+// 			_vector$9.applyNormalMatrix( m );
 
-			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );
+// 			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	transformDirection( m ) {
+// 	transformDirection( m ) {
 
-		for ( let i = 0, l = this.count; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.count; i < l; i ++ ) {
 
-			_vector$9.fromBufferAttribute( this, i );
+// 			_vector$9.fromBufferAttribute( this, i );
 
-			_vector$9.transformDirection( m );
+// 			_vector$9.transformDirection( m );
 
-			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );
+// 			this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	set( value, offset = 0 ) {
+// 	set( value, offset = 0 ) {
 
-		// Matching BufferAttribute constructor, do not normalize the array.
-		this.array.set( value, offset );
+// 		// Matching BufferAttribute constructor, do not normalize the array.
+// 		this.array.set( value, offset );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getX( index ) {
+// 	getX( index ) {
 
-		let x = this.array[ index * this.itemSize ];
+// 		let x = this.array[ index * this.itemSize ];
 
-		if ( this.normalized ) x = denormalize( x, this.array );
+// 		if ( this.normalized ) x = denormalize( x, this.array );
 
-		return x;
+// 		return x;
 
-	}
+// 	}
 
-	setX( index, x ) {
+// 	setX( index, x ) {
 
-		if ( this.normalized ) x = normalize( x, this.array );
+// 		if ( this.normalized ) x = normalize( x, this.array );
 
-		this.array[ index * this.itemSize ] = x;
+// 		this.array[ index * this.itemSize ] = x;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getY( index ) {
+// 	getY( index ) {
 
-		let y = this.array[ index * this.itemSize + 1 ];
+// 		let y = this.array[ index * this.itemSize + 1 ];
 
-		if ( this.normalized ) y = denormalize( y, this.array );
+// 		if ( this.normalized ) y = denormalize( y, this.array );
 
-		return y;
+// 		return y;
 
-	}
+// 	}
 
-	setY( index, y ) {
+// 	setY( index, y ) {
 
-		if ( this.normalized ) y = normalize( y, this.array );
+// 		if ( this.normalized ) y = normalize( y, this.array );
 
-		this.array[ index * this.itemSize + 1 ] = y;
+// 		this.array[ index * this.itemSize + 1 ] = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getZ( index ) {
+// 	getZ( index ) {
 
-		let z = this.array[ index * this.itemSize + 2 ];
+// 		let z = this.array[ index * this.itemSize + 2 ];
 
-		if ( this.normalized ) z = denormalize( z, this.array );
+// 		if ( this.normalized ) z = denormalize( z, this.array );
 
-		return z;
+// 		return z;
 
-	}
+// 	}
 
-	setZ( index, z ) {
+// 	setZ( index, z ) {
 
-		if ( this.normalized ) z = normalize( z, this.array );
+// 		if ( this.normalized ) z = normalize( z, this.array );
 
-		this.array[ index * this.itemSize + 2 ] = z;
+// 		this.array[ index * this.itemSize + 2 ] = z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getW( index ) {
+// 	getW( index ) {
 
-		let w = this.array[ index * this.itemSize + 3 ];
+// 		let w = this.array[ index * this.itemSize + 3 ];
 
-		if ( this.normalized ) w = denormalize( w, this.array );
+// 		if ( this.normalized ) w = denormalize( w, this.array );
 
-		return w;
+// 		return w;
 
-	}
+// 	}
 
-	setW( index, w ) {
+// 	setW( index, w ) {
 
-		if ( this.normalized ) w = normalize( w, this.array );
+// 		if ( this.normalized ) w = normalize( w, this.array );
 
-		this.array[ index * this.itemSize + 3 ] = w;
+// 		this.array[ index * this.itemSize + 3 ] = w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setXY( index, x, y ) {
+// 	setXY( index, x, y ) {
 
-		index *= this.itemSize;
+// 		index *= this.itemSize;
 
-		if ( this.normalized ) {
+// 		if ( this.normalized ) {
 
-			x = normalize( x, this.array );
-			y = normalize( y, this.array );
+// 			x = normalize( x, this.array );
+// 			y = normalize( y, this.array );
 
-		}
+// 		}
 
-		this.array[ index + 0 ] = x;
-		this.array[ index + 1 ] = y;
+// 		this.array[ index + 0 ] = x;
+// 		this.array[ index + 1 ] = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setXYZ( index, x, y, z ) {
+// 	setXYZ( index, x, y, z ) {
 
-		index *= this.itemSize;
+// 		index *= this.itemSize;
 
-		if ( this.normalized ) {
+// 		if ( this.normalized ) {
 
-			x = normalize( x, this.array );
-			y = normalize( y, this.array );
-			z = normalize( z, this.array );
+// 			x = normalize( x, this.array );
+// 			y = normalize( y, this.array );
+// 			z = normalize( z, this.array );
 
-		}
+// 		}
 
-		this.array[ index + 0 ] = x;
-		this.array[ index + 1 ] = y;
-		this.array[ index + 2 ] = z;
+// 		this.array[ index + 0 ] = x;
+// 		this.array[ index + 1 ] = y;
+// 		this.array[ index + 2 ] = z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setXYZW( index, x, y, z, w ) {
+// 	setXYZW( index, x, y, z, w ) {
 
-		index *= this.itemSize;
+// 		index *= this.itemSize;
 
-		if ( this.normalized ) {
+// 		if ( this.normalized ) {
 
-			x = normalize( x, this.array );
-			y = normalize( y, this.array );
-			z = normalize( z, this.array );
-			w = normalize( w, this.array );
+// 			x = normalize( x, this.array );
+// 			y = normalize( y, this.array );
+// 			z = normalize( z, this.array );
+// 			w = normalize( w, this.array );
 
-		}
+// 		}
 
-		this.array[ index + 0 ] = x;
-		this.array[ index + 1 ] = y;
-		this.array[ index + 2 ] = z;
-		this.array[ index + 3 ] = w;
+// 		this.array[ index + 0 ] = x;
+// 		this.array[ index + 1 ] = y;
+// 		this.array[ index + 2 ] = z;
+// 		this.array[ index + 3 ] = w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	onUpload( callback ) {
+// 	onUpload( callback ) {
 
-		this.onUploadCallback = callback;
+// 		this.onUploadCallback = callback;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor( this.array, this.itemSize ).copy( this );
+// 		return new this.constructor( this.array, this.itemSize ).copy( this );
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = {
-			itemSize: this.itemSize,
-			type: this.array.constructor.name,
-			array: Array.from( this.array ),
-			normalized: this.normalized
-		};
+// 		const data = {
+// 			itemSize: this.itemSize,
+// 			type: this.array.constructor.name,
+// 			array: Array.from( this.array ),
+// 			normalized: this.normalized
+// 		};
 
-		if ( this.name !== '' ) data.name = this.name;
-		if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;
-		if ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;
+// 		if ( this.name !== '' ) data.name = this.name;
+// 		if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;
+// 		if ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	// @deprecated
+// 	// @deprecated
 
-	copyColorsArray() {
+// 	copyColorsArray() {
 
-		console.error( 'THREE.BufferAttribute: copyColorsArray() was removed in r144.' );
+// 		console.error( 'THREE.BufferAttribute: copyColorsArray() was removed in r144.' );
 
-	}
+// 	}
 
-	copyVector2sArray() {
+// 	copyVector2sArray() {
 
-		console.error( 'THREE.BufferAttribute: copyVector2sArray() was removed in r144.' );
+// 		console.error( 'THREE.BufferAttribute: copyVector2sArray() was removed in r144.' );
 
-	}
+// 	}
 
-	copyVector3sArray() {
+// 	copyVector3sArray() {
 
-		console.error( 'THREE.BufferAttribute: copyVector3sArray() was removed in r144.' );
+// 		console.error( 'THREE.BufferAttribute: copyVector3sArray() was removed in r144.' );
 
-	}
+// 	}
 
-	copyVector4sArray() {
+// 	copyVector4sArray() {
 
-		console.error( 'THREE.BufferAttribute: copyVector4sArray() was removed in r144.' );
+// 		console.error( 'THREE.BufferAttribute: copyVector4sArray() was removed in r144.' );
 
-	}
+// 	}
 
-}
+// }
 
-//
+// //
 
-class Int8BufferAttribute extends BufferAttribute {
+// class Int8BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Int8Array( array ), itemSize, normalized );
+// 		super( new Int8Array( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-class Uint8BufferAttribute extends BufferAttribute {
+// class Uint8BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Uint8Array( array ), itemSize, normalized );
+// 		super( new Uint8Array( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-class Uint8ClampedBufferAttribute extends BufferAttribute {
+// class Uint8ClampedBufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Uint8ClampedArray( array ), itemSize, normalized );
+// 		super( new Uint8ClampedArray( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-class Int16BufferAttribute extends BufferAttribute {
+// class Int16BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Int16Array( array ), itemSize, normalized );
+// 		super( new Int16Array( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-class Uint16BufferAttribute extends BufferAttribute {
+// class Uint16BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Uint16Array( array ), itemSize, normalized );
+// 		super( new Uint16Array( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-class Int32BufferAttribute extends BufferAttribute {
+// class Int32BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Int32Array( array ), itemSize, normalized );
+// 		super( new Int32Array( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-class Uint32BufferAttribute extends BufferAttribute {
+// class Uint32BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Uint32Array( array ), itemSize, normalized );
+// 		super( new Uint32Array( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-class Float16BufferAttribute extends BufferAttribute {
+// class Float16BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Uint16Array( array ), itemSize, normalized );
+// 		super( new Uint16Array( array ), itemSize, normalized );
 
-		this.isFloat16BufferAttribute = true;
+// 		this.isFloat16BufferAttribute = true;
 
-	}
+// 	}
 
-}
+// }
 
 
-class Float32BufferAttribute extends BufferAttribute {
+// class Float32BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Float32Array( array ), itemSize, normalized );
+// 		super( new Float32Array( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-class Float64BufferAttribute extends BufferAttribute {
+// class Float64BufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized ) {
+// 	constructor( array, itemSize, normalized ) {
 
-		super( new Float64Array( array ), itemSize, normalized );
+// 		super( new Float64Array( array ), itemSize, normalized );
 
-	}
+// 	}
 
-}
+// }
 
-let _id$1 = 0;
+// let _id$1 = 0;
 
-const _m1 = /*@__PURE__*/ new Matrix4();
-const _obj = /*@__PURE__*/ new Object3D();
-const _offset = /*@__PURE__*/ new Vector3();
-const _box$1 = /*@__PURE__*/ new Box3();
-const _boxMorphTargets = /*@__PURE__*/ new Box3();
-const _vector$8 = /*@__PURE__*/ new Vector3();
+// const _m1 = /*@__PURE__*/ new Matrix4();
+// const _obj = /*@__PURE__*/ new Object3D();
+// const _offset = /*@__PURE__*/ new Vector3();
+// const _box$1 = /*@__PURE__*/ new Box3();
+// const _boxMorphTargets = /*@__PURE__*/ new Box3();
+// const _vector$8 = /*@__PURE__*/ new Vector3();
 
-class BufferGeometry extends EventDispatcher {
+// class BufferGeometry extends EventDispatcher {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isBufferGeometry = true;
+// 		this.isBufferGeometry = true;
 
-		Object.defineProperty( this, 'id', { value: _id$1 ++ } );
+// 		Object.defineProperty( this, 'id', { value: _id$1 ++ } );
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		this.name = '';
-		this.type = 'BufferGeometry';
+// 		this.name = '';
+// 		this.type = 'BufferGeometry';
 
-		this.index = null;
-		this.attributes = {};
+// 		this.index = null;
+// 		this.attributes = {};
 
-		this.morphAttributes = {};
-		this.morphTargetsRelative = false;
+// 		this.morphAttributes = {};
+// 		this.morphTargetsRelative = false;
 
-		this.groups = [];
+// 		this.groups = [];
 
-		this.boundingBox = null;
-		this.boundingSphere = null;
+// 		this.boundingBox = null;
+// 		this.boundingSphere = null;
 
-		this.drawRange = { start: 0, count: Infinity };
+// 		this.drawRange = { start: 0, count: Infinity };
 
-		this.userData = {};
+// 		this.userData = {};
 
-	}
+// 	}
 
-	getIndex() {
+// 	getIndex() {
 
-		return this.index;
+// 		return this.index;
 
-	}
+// 	}
 
-	setIndex( index ) {
+// 	setIndex( index ) {
 
-		if ( Array.isArray( index ) ) {
+// 		if ( Array.isArray( index ) ) {
 
-			this.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );
+// 			this.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );
 
-		} else {
+// 		} else {
 
-			this.index = index;
+// 			this.index = index;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getAttribute( name ) {
+// 	getAttribute( name ) {
 
-		return this.attributes[ name ];
+// 		return this.attributes[ name ];
 
-	}
+// 	}
 
-	setAttribute( name, attribute ) {
+// 	setAttribute( name, attribute ) {
 
-		this.attributes[ name ] = attribute;
+// 		this.attributes[ name ] = attribute;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	deleteAttribute( name ) {
+// 	deleteAttribute( name ) {
 
-		delete this.attributes[ name ];
+// 		delete this.attributes[ name ];
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	hasAttribute( name ) {
+// 	hasAttribute( name ) {
 
-		return this.attributes[ name ] !== undefined;
+// 		return this.attributes[ name ] !== undefined;
 
-	}
+// 	}
 
-	addGroup( start, count, materialIndex = 0 ) {
+// 	addGroup( start, count, materialIndex = 0 ) {
 
-		this.groups.push( {
+// 		this.groups.push( {
 
-			start: start,
-			count: count,
-			materialIndex: materialIndex
+// 			start: start,
+// 			count: count,
+// 			materialIndex: materialIndex
 
-		} );
+// 		} );
 
-	}
+// 	}
 
-	clearGroups() {
+// 	clearGroups() {
 
-		this.groups = [];
+// 		this.groups = [];
 
-	}
+// 	}
 
-	setDrawRange( start, count ) {
+// 	setDrawRange( start, count ) {
 
-		this.drawRange.start = start;
-		this.drawRange.count = count;
+// 		this.drawRange.start = start;
+// 		this.drawRange.count = count;
 
-	}
+// 	}
 
-	applyMatrix4( matrix ) {
+// 	applyMatrix4( matrix ) {
 
-		const position = this.attributes.position;
+// 		const position = this.attributes.position;
 
-		if ( position !== undefined ) {
+// 		if ( position !== undefined ) {
 
-			position.applyMatrix4( matrix );
+// 			position.applyMatrix4( matrix );
 
-			position.needsUpdate = true;
+// 			position.needsUpdate = true;
 
-		}
+// 		}
 
-		const normal = this.attributes.normal;
+// 		const normal = this.attributes.normal;
 
-		if ( normal !== undefined ) {
+// 		if ( normal !== undefined ) {
 
-			const normalMatrix = new Matrix3().getNormalMatrix( matrix );
+// 			const normalMatrix = new Matrix3().getNormalMatrix( matrix );
 
-			normal.applyNormalMatrix( normalMatrix );
+// 			normal.applyNormalMatrix( normalMatrix );
 
-			normal.needsUpdate = true;
+// 			normal.needsUpdate = true;
 
-		}
+// 		}
 
-		const tangent = this.attributes.tangent;
+// 		const tangent = this.attributes.tangent;
 
-		if ( tangent !== undefined ) {
+// 		if ( tangent !== undefined ) {
 
-			tangent.transformDirection( matrix );
+// 			tangent.transformDirection( matrix );
 
-			tangent.needsUpdate = true;
+// 			tangent.needsUpdate = true;
 
-		}
+// 		}
 
-		if ( this.boundingBox !== null ) {
+// 		if ( this.boundingBox !== null ) {
 
-			this.computeBoundingBox();
+// 			this.computeBoundingBox();
 
-		}
+// 		}
 
-		if ( this.boundingSphere !== null ) {
+// 		if ( this.boundingSphere !== null ) {
 
-			this.computeBoundingSphere();
+// 			this.computeBoundingSphere();
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyQuaternion( q ) {
+// 	applyQuaternion( q ) {
 
-		_m1.makeRotationFromQuaternion( q );
+// 		_m1.makeRotationFromQuaternion( q );
 
-		this.applyMatrix4( _m1 );
+// 		this.applyMatrix4( _m1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	rotateX( angle ) {
+// 	rotateX( angle ) {
 
-		// rotate geometry around world x-axis
+// 		// rotate geometry around world x-axis
 
-		_m1.makeRotationX( angle );
+// 		_m1.makeRotationX( angle );
 
-		this.applyMatrix4( _m1 );
+// 		this.applyMatrix4( _m1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	rotateY( angle ) {
+// 	rotateY( angle ) {
 
-		// rotate geometry around world y-axis
+// 		// rotate geometry around world y-axis
 
-		_m1.makeRotationY( angle );
+// 		_m1.makeRotationY( angle );
 
-		this.applyMatrix4( _m1 );
+// 		this.applyMatrix4( _m1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	rotateZ( angle ) {
+// 	rotateZ( angle ) {
 
-		// rotate geometry around world z-axis
+// 		// rotate geometry around world z-axis
 
-		_m1.makeRotationZ( angle );
+// 		_m1.makeRotationZ( angle );
 
-		this.applyMatrix4( _m1 );
+// 		this.applyMatrix4( _m1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	translate( x, y, z ) {
+// 	translate( x, y, z ) {
 
-		// translate geometry
+// 		// translate geometry
 
-		_m1.makeTranslation( x, y, z );
+// 		_m1.makeTranslation( x, y, z );
 
-		this.applyMatrix4( _m1 );
+// 		this.applyMatrix4( _m1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	scale( x, y, z ) {
+// 	scale( x, y, z ) {
 
-		// scale geometry
+// 		// scale geometry
 
-		_m1.makeScale( x, y, z );
+// 		_m1.makeScale( x, y, z );
 
-		this.applyMatrix4( _m1 );
+// 		this.applyMatrix4( _m1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lookAt( vector ) {
+// 	lookAt( vector ) {
 
-		_obj.lookAt( vector );
+// 		_obj.lookAt( vector );
 
-		_obj.updateMatrix();
+// 		_obj.updateMatrix();
 
-		this.applyMatrix4( _obj.matrix );
+// 		this.applyMatrix4( _obj.matrix );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	center() {
+// 	center() {
 
-		this.computeBoundingBox();
+// 		this.computeBoundingBox();
 
-		this.boundingBox.getCenter( _offset ).negate();
+// 		this.boundingBox.getCenter( _offset ).negate();
 
-		this.translate( _offset.x, _offset.y, _offset.z );
+// 		this.translate( _offset.x, _offset.y, _offset.z );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromPoints( points ) {
+// 	setFromPoints( points ) {
 
-		const position = [];
+// 		const position = [];
 
-		for ( let i = 0, l = points.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = points.length; i < l; i ++ ) {
 
-			const point = points[ i ];
-			position.push( point.x, point.y, point.z || 0 );
+// 			const point = points[ i ];
+// 			position.push( point.x, point.y, point.z || 0 );
 
-		}
+// 		}
 
-		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	computeBoundingBox() {
+// 	computeBoundingBox() {
 
-		if ( this.boundingBox === null ) {
+// 		if ( this.boundingBox === null ) {
 
-			this.boundingBox = new Box3();
+// 			this.boundingBox = new Box3();
 
-		}
+// 		}
 
-		const position = this.attributes.position;
-		const morphAttributesPosition = this.morphAttributes.position;
+// 		const position = this.attributes.position;
+// 		const morphAttributesPosition = this.morphAttributes.position;
 
-		if ( position && position.isGLBufferAttribute ) {
+// 		if ( position && position.isGLBufferAttribute ) {
 
-			console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this );
+// 			console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this );
 
-			this.boundingBox.set(
-				new Vector3( - Infinity, - Infinity, - Infinity ),
-				new Vector3( + Infinity, + Infinity, + Infinity )
-			);
+// 			this.boundingBox.set(
+// 				new Vector3( - Infinity, - Infinity, - Infinity ),
+// 				new Vector3( + Infinity, + Infinity, + Infinity )
+// 			);
 
-			return;
+// 			return;
 
-		}
+// 		}
 
-		if ( position !== undefined ) {
+// 		if ( position !== undefined ) {
 
-			this.boundingBox.setFromBufferAttribute( position );
+// 			this.boundingBox.setFromBufferAttribute( position );
 
-			// process morph attributes if present
+// 			// process morph attributes if present
 
-			if ( morphAttributesPosition ) {
+// 			if ( morphAttributesPosition ) {
 
-				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
 
-					const morphAttribute = morphAttributesPosition[ i ];
-					_box$1.setFromBufferAttribute( morphAttribute );
+// 					const morphAttribute = morphAttributesPosition[ i ];
+// 					_box$1.setFromBufferAttribute( morphAttribute );
 
-					if ( this.morphTargetsRelative ) {
+// 					if ( this.morphTargetsRelative ) {
 
-						_vector$8.addVectors( this.boundingBox.min, _box$1.min );
-						this.boundingBox.expandByPoint( _vector$8 );
+// 						_vector$8.addVectors( this.boundingBox.min, _box$1.min );
+// 						this.boundingBox.expandByPoint( _vector$8 );
 
-						_vector$8.addVectors( this.boundingBox.max, _box$1.max );
-						this.boundingBox.expandByPoint( _vector$8 );
+// 						_vector$8.addVectors( this.boundingBox.max, _box$1.max );
+// 						this.boundingBox.expandByPoint( _vector$8 );
 
-					} else {
+// 					} else {
 
-						this.boundingBox.expandByPoint( _box$1.min );
-						this.boundingBox.expandByPoint( _box$1.max );
+// 						this.boundingBox.expandByPoint( _box$1.min );
+// 						this.boundingBox.expandByPoint( _box$1.max );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			this.boundingBox.makeEmpty();
+// 			this.boundingBox.makeEmpty();
 
-		}
+// 		}
 
-		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
+// 		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
 
-			console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
+// 			console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	computeBoundingSphere() {
+// 	computeBoundingSphere() {
 
-		if ( this.boundingSphere === null ) {
+// 		if ( this.boundingSphere === null ) {
 
-			this.boundingSphere = new Sphere();
+// 			this.boundingSphere = new Sphere();
 
-		}
+// 		}
 
-		const position = this.attributes.position;
-		const morphAttributesPosition = this.morphAttributes.position;
+// 		const position = this.attributes.position;
+// 		const morphAttributesPosition = this.morphAttributes.position;
 
-		if ( position && position.isGLBufferAttribute ) {
+// 		if ( position && position.isGLBufferAttribute ) {
 
-			console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this );
+// 			console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this );
 
-			this.boundingSphere.set( new Vector3(), Infinity );
+// 			this.boundingSphere.set( new Vector3(), Infinity );
 
-			return;
+// 			return;
 
-		}
+// 		}
 
-		if ( position ) {
+// 		if ( position ) {
 
-			// first, find the center of the bounding sphere
+// 			// first, find the center of the bounding sphere
 
-			const center = this.boundingSphere.center;
+// 			const center = this.boundingSphere.center;
 
-			_box$1.setFromBufferAttribute( position );
+// 			_box$1.setFromBufferAttribute( position );
 
-			// process morph attributes if present
+// 			// process morph attributes if present
 
-			if ( morphAttributesPosition ) {
+// 			if ( morphAttributesPosition ) {
 
-				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
 
-					const morphAttribute = morphAttributesPosition[ i ];
-					_boxMorphTargets.setFromBufferAttribute( morphAttribute );
+// 					const morphAttribute = morphAttributesPosition[ i ];
+// 					_boxMorphTargets.setFromBufferAttribute( morphAttribute );
 
-					if ( this.morphTargetsRelative ) {
+// 					if ( this.morphTargetsRelative ) {
 
-						_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );
-						_box$1.expandByPoint( _vector$8 );
+// 						_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );
+// 						_box$1.expandByPoint( _vector$8 );
 
-						_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );
-						_box$1.expandByPoint( _vector$8 );
+// 						_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );
+// 						_box$1.expandByPoint( _vector$8 );
 
-					} else {
+// 					} else {
 
-						_box$1.expandByPoint( _boxMorphTargets.min );
-						_box$1.expandByPoint( _boxMorphTargets.max );
+// 						_box$1.expandByPoint( _boxMorphTargets.min );
+// 						_box$1.expandByPoint( _boxMorphTargets.max );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			_box$1.getCenter( center );
+// 			_box$1.getCenter( center );
 
-			// second, try to find a boundingSphere with a radius smaller than the
-			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
+// 			// second, try to find a boundingSphere with a radius smaller than the
+// 			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
 
-			let maxRadiusSq = 0;
+// 			let maxRadiusSq = 0;
 
-			for ( let i = 0, il = position.count; i < il; i ++ ) {
+// 			for ( let i = 0, il = position.count; i < il; i ++ ) {
 
-				_vector$8.fromBufferAttribute( position, i );
+// 				_vector$8.fromBufferAttribute( position, i );
 
-				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );
+// 				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );
 
-			}
+// 			}
 
-			// process morph attributes if present
+// 			// process morph attributes if present
 
-			if ( morphAttributesPosition ) {
+// 			if ( morphAttributesPosition ) {
 
-				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
 
-					const morphAttribute = morphAttributesPosition[ i ];
-					const morphTargetsRelative = this.morphTargetsRelative;
+// 					const morphAttribute = morphAttributesPosition[ i ];
+// 					const morphTargetsRelative = this.morphTargetsRelative;
 
-					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {
+// 					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {
 
-						_vector$8.fromBufferAttribute( morphAttribute, j );
+// 						_vector$8.fromBufferAttribute( morphAttribute, j );
 
-						if ( morphTargetsRelative ) {
+// 						if ( morphTargetsRelative ) {
 
-							_offset.fromBufferAttribute( position, j );
-							_vector$8.add( _offset );
+// 							_offset.fromBufferAttribute( position, j );
+// 							_vector$8.add( _offset );
 
-						}
+// 						}
 
-						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );
+// 						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
+// 			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
 
-			if ( isNaN( this.boundingSphere.radius ) ) {
+// 			if ( isNaN( this.boundingSphere.radius ) ) {
 
-				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
+// 				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	computeTangents() {
+// 	computeTangents() {
 
-		const index = this.index;
-		const attributes = this.attributes;
+// 		const index = this.index;
+// 		const attributes = this.attributes;
 
-		// based on http://www.terathon.com/code/tangent.html
-		// (per vertex tangents)
+// 		// based on http://www.terathon.com/code/tangent.html
+// 		// (per vertex tangents)
 
-		if ( index === null ||
-			 attributes.position === undefined ||
-			 attributes.normal === undefined ||
-			 attributes.uv === undefined ) {
+// 		if ( index === null ||
+// 			 attributes.position === undefined ||
+// 			 attributes.normal === undefined ||
+// 			 attributes.uv === undefined ) {
 
-			console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
-			return;
+// 			console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
+// 			return;
 
-		}
+// 		}
 
-		const indices = index.array;
-		const positions = attributes.position.array;
-		const normals = attributes.normal.array;
-		const uvs = attributes.uv.array;
+// 		const indices = index.array;
+// 		const positions = attributes.position.array;
+// 		const normals = attributes.normal.array;
+// 		const uvs = attributes.uv.array;
 
-		const nVertices = positions.length / 3;
+// 		const nVertices = positions.length / 3;
 
-		if ( this.hasAttribute( 'tangent' ) === false ) {
+// 		if ( this.hasAttribute( 'tangent' ) === false ) {
 
-			this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );
+// 			this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );
 
-		}
+// 		}
 
-		const tangents = this.getAttribute( 'tangent' ).array;
+// 		const tangents = this.getAttribute( 'tangent' ).array;
 
-		const tan1 = [], tan2 = [];
+// 		const tan1 = [], tan2 = [];
 
-		for ( let i = 0; i < nVertices; i ++ ) {
+// 		for ( let i = 0; i < nVertices; i ++ ) {
 
-			tan1[ i ] = new Vector3();
-			tan2[ i ] = new Vector3();
+// 			tan1[ i ] = new Vector3();
+// 			tan2[ i ] = new Vector3();
 
-		}
+// 		}
 
-		const vA = new Vector3(),
-			vB = new Vector3(),
-			vC = new Vector3(),
+// 		const vA = new Vector3(),
+// 			vB = new Vector3(),
+// 			vC = new Vector3(),
 
-			uvA = new Vector2(),
-			uvB = new Vector2(),
-			uvC = new Vector2(),
+// 			uvA = new Vector2(),
+// 			uvB = new Vector2(),
+// 			uvC = new Vector2(),
 
-			sdir = new Vector3(),
-			tdir = new Vector3();
+// 			sdir = new Vector3(),
+// 			tdir = new Vector3();
 
-		function handleTriangle( a, b, c ) {
+// 		function handleTriangle( a, b, c ) {
 
-			vA.fromArray( positions, a * 3 );
-			vB.fromArray( positions, b * 3 );
-			vC.fromArray( positions, c * 3 );
+// 			vA.fromArray( positions, a * 3 );
+// 			vB.fromArray( positions, b * 3 );
+// 			vC.fromArray( positions, c * 3 );
 
-			uvA.fromArray( uvs, a * 2 );
-			uvB.fromArray( uvs, b * 2 );
-			uvC.fromArray( uvs, c * 2 );
+// 			uvA.fromArray( uvs, a * 2 );
+// 			uvB.fromArray( uvs, b * 2 );
+// 			uvC.fromArray( uvs, c * 2 );
 
-			vB.sub( vA );
-			vC.sub( vA );
+// 			vB.sub( vA );
+// 			vC.sub( vA );
 
-			uvB.sub( uvA );
-			uvC.sub( uvA );
+// 			uvB.sub( uvA );
+// 			uvC.sub( uvA );
 
-			const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );
+// 			const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );
 
-			// silently ignore degenerate uv triangles having coincident or colinear vertices
+// 			// silently ignore degenerate uv triangles having coincident or colinear vertices
 
-			if ( ! isFinite( r ) ) return;
+// 			if ( ! isFinite( r ) ) return;
 
-			sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
-			tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );
+// 			sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
+// 			tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );
 
-			tan1[ a ].add( sdir );
-			tan1[ b ].add( sdir );
-			tan1[ c ].add( sdir );
+// 			tan1[ a ].add( sdir );
+// 			tan1[ b ].add( sdir );
+// 			tan1[ c ].add( sdir );
 
-			tan2[ a ].add( tdir );
-			tan2[ b ].add( tdir );
-			tan2[ c ].add( tdir );
+// 			tan2[ a ].add( tdir );
+// 			tan2[ b ].add( tdir );
+// 			tan2[ c ].add( tdir );
 
-		}
+// 		}
 
-		let groups = this.groups;
+// 		let groups = this.groups;
 
-		if ( groups.length === 0 ) {
+// 		if ( groups.length === 0 ) {
 
-			groups = [ {
-				start: 0,
-				count: indices.length
-			} ];
+// 			groups = [ {
+// 				start: 0,
+// 				count: indices.length
+// 			} ];
 
-		}
+// 		}
 
-		for ( let i = 0, il = groups.length; i < il; ++ i ) {
+// 		for ( let i = 0, il = groups.length; i < il; ++ i ) {
 
-			const group = groups[ i ];
+// 			const group = groups[ i ];
 
-			const start = group.start;
-			const count = group.count;
+// 			const start = group.start;
+// 			const count = group.count;
 
-			for ( let j = start, jl = start + count; j < jl; j += 3 ) {
+// 			for ( let j = start, jl = start + count; j < jl; j += 3 ) {
 
-				handleTriangle(
-					indices[ j + 0 ],
-					indices[ j + 1 ],
-					indices[ j + 2 ]
-				);
+// 				handleTriangle(
+// 					indices[ j + 0 ],
+// 					indices[ j + 1 ],
+// 					indices[ j + 2 ]
+// 				);
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const tmp = new Vector3(), tmp2 = new Vector3();
-		const n = new Vector3(), n2 = new Vector3();
+// 		const tmp = new Vector3(), tmp2 = new Vector3();
+// 		const n = new Vector3(), n2 = new Vector3();
 
-		function handleVertex( v ) {
+// 		function handleVertex( v ) {
 
-			n.fromArray( normals, v * 3 );
-			n2.copy( n );
+// 			n.fromArray( normals, v * 3 );
+// 			n2.copy( n );
 
-			const t = tan1[ v ];
+// 			const t = tan1[ v ];
 
-			// Gram-Schmidt orthogonalize
+// 			// Gram-Schmidt orthogonalize
 
-			tmp.copy( t );
-			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();
+// 			tmp.copy( t );
+// 			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();
 
-			// Calculate handedness
+// 			// Calculate handedness
 
-			tmp2.crossVectors( n2, t );
-			const test = tmp2.dot( tan2[ v ] );
-			const w = ( test < 0.0 ) ? - 1.0 : 1.0;
+// 			tmp2.crossVectors( n2, t );
+// 			const test = tmp2.dot( tan2[ v ] );
+// 			const w = ( test < 0.0 ) ? - 1.0 : 1.0;
 
-			tangents[ v * 4 ] = tmp.x;
-			tangents[ v * 4 + 1 ] = tmp.y;
-			tangents[ v * 4 + 2 ] = tmp.z;
-			tangents[ v * 4 + 3 ] = w;
+// 			tangents[ v * 4 ] = tmp.x;
+// 			tangents[ v * 4 + 1 ] = tmp.y;
+// 			tangents[ v * 4 + 2 ] = tmp.z;
+// 			tangents[ v * 4 + 3 ] = w;
 
-		}
+// 		}
 
-		for ( let i = 0, il = groups.length; i < il; ++ i ) {
+// 		for ( let i = 0, il = groups.length; i < il; ++ i ) {
 
-			const group = groups[ i ];
+// 			const group = groups[ i ];
 
-			const start = group.start;
-			const count = group.count;
+// 			const start = group.start;
+// 			const count = group.count;
 
-			for ( let j = start, jl = start + count; j < jl; j += 3 ) {
+// 			for ( let j = start, jl = start + count; j < jl; j += 3 ) {
 
-				handleVertex( indices[ j + 0 ] );
-				handleVertex( indices[ j + 1 ] );
-				handleVertex( indices[ j + 2 ] );
+// 				handleVertex( indices[ j + 0 ] );
+// 				handleVertex( indices[ j + 1 ] );
+// 				handleVertex( indices[ j + 2 ] );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	computeVertexNormals() {
+// 	computeVertexNormals() {
 
-		const index = this.index;
-		const positionAttribute = this.getAttribute( 'position' );
+// 		const index = this.index;
+// 		const positionAttribute = this.getAttribute( 'position' );
 
-		if ( positionAttribute !== undefined ) {
+// 		if ( positionAttribute !== undefined ) {
 
-			let normalAttribute = this.getAttribute( 'normal' );
+// 			let normalAttribute = this.getAttribute( 'normal' );
 
-			if ( normalAttribute === undefined ) {
+// 			if ( normalAttribute === undefined ) {
 
-				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
-				this.setAttribute( 'normal', normalAttribute );
+// 				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
+// 				this.setAttribute( 'normal', normalAttribute );
 
-			} else {
+// 			} else {
 
-				// reset existing normals to zero
+// 				// reset existing normals to zero
 
-				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {
+// 				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {
 
-					normalAttribute.setXYZ( i, 0, 0, 0 );
+// 					normalAttribute.setXYZ( i, 0, 0, 0 );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
-			const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
-			const cb = new Vector3(), ab = new Vector3();
+// 			const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
+// 			const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
+// 			const cb = new Vector3(), ab = new Vector3();
 
-			// indexed elements
+// 			// indexed elements
 
-			if ( index ) {
+// 			if ( index ) {
 
-				for ( let i = 0, il = index.count; i < il; i += 3 ) {
+// 				for ( let i = 0, il = index.count; i < il; i += 3 ) {
 
-					const vA = index.getX( i + 0 );
-					const vB = index.getX( i + 1 );
-					const vC = index.getX( i + 2 );
+// 					const vA = index.getX( i + 0 );
+// 					const vB = index.getX( i + 1 );
+// 					const vC = index.getX( i + 2 );
 
-					pA.fromBufferAttribute( positionAttribute, vA );
-					pB.fromBufferAttribute( positionAttribute, vB );
-					pC.fromBufferAttribute( positionAttribute, vC );
+// 					pA.fromBufferAttribute( positionAttribute, vA );
+// 					pB.fromBufferAttribute( positionAttribute, vB );
+// 					pC.fromBufferAttribute( positionAttribute, vC );
 
-					cb.subVectors( pC, pB );
-					ab.subVectors( pA, pB );
-					cb.cross( ab );
+// 					cb.subVectors( pC, pB );
+// 					ab.subVectors( pA, pB );
+// 					cb.cross( ab );
 
-					nA.fromBufferAttribute( normalAttribute, vA );
-					nB.fromBufferAttribute( normalAttribute, vB );
-					nC.fromBufferAttribute( normalAttribute, vC );
+// 					nA.fromBufferAttribute( normalAttribute, vA );
+// 					nB.fromBufferAttribute( normalAttribute, vB );
+// 					nC.fromBufferAttribute( normalAttribute, vC );
 
-					nA.add( cb );
-					nB.add( cb );
-					nC.add( cb );
+// 					nA.add( cb );
+// 					nB.add( cb );
+// 					nC.add( cb );
 
-					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
-					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
-					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );
+// 					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
+// 					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
+// 					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				// non-indexed elements (unconnected triangle soup)
+// 				// non-indexed elements (unconnected triangle soup)
 
-				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {
+// 				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {
 
-					pA.fromBufferAttribute( positionAttribute, i + 0 );
-					pB.fromBufferAttribute( positionAttribute, i + 1 );
-					pC.fromBufferAttribute( positionAttribute, i + 2 );
+// 					pA.fromBufferAttribute( positionAttribute, i + 0 );
+// 					pB.fromBufferAttribute( positionAttribute, i + 1 );
+// 					pC.fromBufferAttribute( positionAttribute, i + 2 );
 
-					cb.subVectors( pC, pB );
-					ab.subVectors( pA, pB );
-					cb.cross( ab );
+// 					cb.subVectors( pC, pB );
+// 					ab.subVectors( pA, pB );
+// 					cb.cross( ab );
 
-					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
-					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
-					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );
+// 					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
+// 					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
+// 					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			this.normalizeNormals();
+// 			this.normalizeNormals();
 
-			normalAttribute.needsUpdate = true;
+// 			normalAttribute.needsUpdate = true;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// @deprecated since r144
+// 	// @deprecated since r144
 
-	merge() {
+// 	merge() {
 
-		console.error( 'THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead.' );
-		return this;
+// 		console.error( 'THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead.' );
+// 		return this;
 
-	}
+// 	}
 
-	normalizeNormals() {
+// 	normalizeNormals() {
 
-		const normals = this.attributes.normal;
+// 		const normals = this.attributes.normal;
 
-		for ( let i = 0, il = normals.count; i < il; i ++ ) {
+// 		for ( let i = 0, il = normals.count; i < il; i ++ ) {
 
-			_vector$8.fromBufferAttribute( normals, i );
+// 			_vector$8.fromBufferAttribute( normals, i );
 
-			_vector$8.normalize();
+// 			_vector$8.normalize();
 
-			normals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );
+// 			normals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	toNonIndexed() {
+// 	toNonIndexed() {
 
-		function convertBufferAttribute( attribute, indices ) {
+// 		function convertBufferAttribute( attribute, indices ) {
 
-			const array = attribute.array;
-			const itemSize = attribute.itemSize;
-			const normalized = attribute.normalized;
+// 			const array = attribute.array;
+// 			const itemSize = attribute.itemSize;
+// 			const normalized = attribute.normalized;
 
-			const array2 = new array.constructor( indices.length * itemSize );
+// 			const array2 = new array.constructor( indices.length * itemSize );
 
-			let index = 0, index2 = 0;
+// 			let index = 0, index2 = 0;
 
-			for ( let i = 0, l = indices.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = indices.length; i < l; i ++ ) {
 
-				if ( attribute.isInterleavedBufferAttribute ) {
+// 				if ( attribute.isInterleavedBufferAttribute ) {
 
-					index = indices[ i ] * attribute.data.stride + attribute.offset;
+// 					index = indices[ i ] * attribute.data.stride + attribute.offset;
 
-				} else {
+// 				} else {
 
-					index = indices[ i ] * itemSize;
+// 					index = indices[ i ] * itemSize;
 
-				}
+// 				}
 
-				for ( let j = 0; j < itemSize; j ++ ) {
+// 				for ( let j = 0; j < itemSize; j ++ ) {
 
-					array2[ index2 ++ ] = array[ index ++ ];
+// 					array2[ index2 ++ ] = array[ index ++ ];
 
-				}
+// 				}
 
-			}
+// 			}
 
-			return new BufferAttribute( array2, itemSize, normalized );
+// 			return new BufferAttribute( array2, itemSize, normalized );
 
-		}
+// 		}
 
-		//
+// 		//
 
-		if ( this.index === null ) {
+// 		if ( this.index === null ) {
 
-			console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
-			return this;
+// 			console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
+// 			return this;
 
-		}
+// 		}
 
-		const geometry2 = new BufferGeometry();
+// 		const geometry2 = new BufferGeometry();
 
-		const indices = this.index.array;
-		const attributes = this.attributes;
+// 		const indices = this.index.array;
+// 		const attributes = this.attributes;
 
-		// attributes
+// 		// attributes
 
-		for ( const name in attributes ) {
+// 		for ( const name in attributes ) {
 
-			const attribute = attributes[ name ];
+// 			const attribute = attributes[ name ];
 
-			const newAttribute = convertBufferAttribute( attribute, indices );
+// 			const newAttribute = convertBufferAttribute( attribute, indices );
 
-			geometry2.setAttribute( name, newAttribute );
+// 			geometry2.setAttribute( name, newAttribute );
 
-		}
+// 		}
 
-		// morph attributes
+// 		// morph attributes
 
-		const morphAttributes = this.morphAttributes;
+// 		const morphAttributes = this.morphAttributes;
 
-		for ( const name in morphAttributes ) {
+// 		for ( const name in morphAttributes ) {
 
-			const morphArray = [];
-			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
+// 			const morphArray = [];
+// 			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
 
-			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {
+// 			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {
 
-				const attribute = morphAttribute[ i ];
+// 				const attribute = morphAttribute[ i ];
 
-				const newAttribute = convertBufferAttribute( attribute, indices );
+// 				const newAttribute = convertBufferAttribute( attribute, indices );
 
-				morphArray.push( newAttribute );
+// 				morphArray.push( newAttribute );
 
-			}
+// 			}
 
-			geometry2.morphAttributes[ name ] = morphArray;
+// 			geometry2.morphAttributes[ name ] = morphArray;
 
-		}
+// 		}
 
-		geometry2.morphTargetsRelative = this.morphTargetsRelative;
+// 		geometry2.morphTargetsRelative = this.morphTargetsRelative;
 
-		// groups
+// 		// groups
 
-		const groups = this.groups;
+// 		const groups = this.groups;
 
-		for ( let i = 0, l = groups.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = groups.length; i < l; i ++ ) {
 
-			const group = groups[ i ];
-			geometry2.addGroup( group.start, group.count, group.materialIndex );
+// 			const group = groups[ i ];
+// 			geometry2.addGroup( group.start, group.count, group.materialIndex );
 
-		}
+// 		}
 
-		return geometry2;
+// 		return geometry2;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = {
-			metadata: {
-				version: 4.5,
-				type: 'BufferGeometry',
-				generator: 'BufferGeometry.toJSON'
-			}
-		};
+// 		const data = {
+// 			metadata: {
+// 				version: 4.5,
+// 				type: 'BufferGeometry',
+// 				generator: 'BufferGeometry.toJSON'
+// 			}
+// 		};
 
-		// standard BufferGeometry serialization
+// 		// standard BufferGeometry serialization
 
-		data.uuid = this.uuid;
-		data.type = this.type;
-		if ( this.name !== '' ) data.name = this.name;
-		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;
+// 		data.uuid = this.uuid;
+// 		data.type = this.type;
+// 		if ( this.name !== '' ) data.name = this.name;
+// 		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;
 
-		if ( this.parameters !== undefined ) {
+// 		if ( this.parameters !== undefined ) {
 
-			const parameters = this.parameters;
+// 			const parameters = this.parameters;
 
-			for ( const key in parameters ) {
+// 			for ( const key in parameters ) {
 
-				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
+// 				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
 
-			}
+// 			}
 
-			return data;
+// 			return data;
 
-		}
+// 		}
 
-		// for simplicity the code assumes attributes are not shared across geometries, see #15811
+// 		// for simplicity the code assumes attributes are not shared across geometries, see #15811
 
-		data.data = { attributes: {} };
+// 		data.data = { attributes: {} };
 
-		const index = this.index;
+// 		const index = this.index;
 
-		if ( index !== null ) {
+// 		if ( index !== null ) {
 
-			data.data.index = {
-				type: index.array.constructor.name,
-				array: Array.prototype.slice.call( index.array )
-			};
+// 			data.data.index = {
+// 				type: index.array.constructor.name,
+// 				array: Array.prototype.slice.call( index.array )
+// 			};
 
-		}
+// 		}
 
-		const attributes = this.attributes;
+// 		const attributes = this.attributes;
 
-		for ( const key in attributes ) {
+// 		for ( const key in attributes ) {
 
-			const attribute = attributes[ key ];
+// 			const attribute = attributes[ key ];
 
-			data.data.attributes[ key ] = attribute.toJSON( data.data );
+// 			data.data.attributes[ key ] = attribute.toJSON( data.data );
 
-		}
+// 		}
 
-		const morphAttributes = {};
-		let hasMorphAttributes = false;
+// 		const morphAttributes = {};
+// 		let hasMorphAttributes = false;
 
-		for ( const key in this.morphAttributes ) {
+// 		for ( const key in this.morphAttributes ) {
 
-			const attributeArray = this.morphAttributes[ key ];
+// 			const attributeArray = this.morphAttributes[ key ];
 
-			const array = [];
+// 			const array = [];
 
-			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {
+// 			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {
 
-				const attribute = attributeArray[ i ];
+// 				const attribute = attributeArray[ i ];
 
-				array.push( attribute.toJSON( data.data ) );
+// 				array.push( attribute.toJSON( data.data ) );
 
-			}
+// 			}
 
-			if ( array.length > 0 ) {
+// 			if ( array.length > 0 ) {
 
-				morphAttributes[ key ] = array;
+// 				morphAttributes[ key ] = array;
 
-				hasMorphAttributes = true;
+// 				hasMorphAttributes = true;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( hasMorphAttributes ) {
+// 		if ( hasMorphAttributes ) {
 
-			data.data.morphAttributes = morphAttributes;
-			data.data.morphTargetsRelative = this.morphTargetsRelative;
+// 			data.data.morphAttributes = morphAttributes;
+// 			data.data.morphTargetsRelative = this.morphTargetsRelative;
 
-		}
+// 		}
 
-		const groups = this.groups;
+// 		const groups = this.groups;
 
-		if ( groups.length > 0 ) {
+// 		if ( groups.length > 0 ) {
 
-			data.data.groups = JSON.parse( JSON.stringify( groups ) );
+// 			data.data.groups = JSON.parse( JSON.stringify( groups ) );
 
-		}
+// 		}
 
-		const boundingSphere = this.boundingSphere;
+// 		const boundingSphere = this.boundingSphere;
 
-		if ( boundingSphere !== null ) {
+// 		if ( boundingSphere !== null ) {
 
-			data.data.boundingSphere = {
-				center: boundingSphere.center.toArray(),
-				radius: boundingSphere.radius
-			};
+// 			data.data.boundingSphere = {
+// 				center: boundingSphere.center.toArray(),
+// 				radius: boundingSphere.radius
+// 			};
 
-		}
+// 		}
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		 return new this.constructor().copy( this );
+// 		 return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		// reset
+// 		// reset
 
-		this.index = null;
-		this.attributes = {};
-		this.morphAttributes = {};
-		this.groups = [];
-		this.boundingBox = null;
-		this.boundingSphere = null;
+// 		this.index = null;
+// 		this.attributes = {};
+// 		this.morphAttributes = {};
+// 		this.groups = [];
+// 		this.boundingBox = null;
+// 		this.boundingSphere = null;
 
-		// used for storing cloned, shared data
+// 		// used for storing cloned, shared data
 
-		const data = {};
+// 		const data = {};
 
-		// name
+// 		// name
 
-		this.name = source.name;
+// 		this.name = source.name;
 
-		// index
+// 		// index
 
-		const index = source.index;
+// 		const index = source.index;
 
-		if ( index !== null ) {
+// 		if ( index !== null ) {
 
-			this.setIndex( index.clone( data ) );
+// 			this.setIndex( index.clone( data ) );
 
-		}
+// 		}
 
-		// attributes
+// 		// attributes
 
-		const attributes = source.attributes;
+// 		const attributes = source.attributes;
 
-		for ( const name in attributes ) {
+// 		for ( const name in attributes ) {
 
-			const attribute = attributes[ name ];
-			this.setAttribute( name, attribute.clone( data ) );
+// 			const attribute = attributes[ name ];
+// 			this.setAttribute( name, attribute.clone( data ) );
 
-		}
+// 		}
 
-		// morph attributes
+// 		// morph attributes
 
-		const morphAttributes = source.morphAttributes;
+// 		const morphAttributes = source.morphAttributes;
 
-		for ( const name in morphAttributes ) {
+// 		for ( const name in morphAttributes ) {
 
-			const array = [];
-			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
+// 			const array = [];
+// 			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
 
-			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {
 
-				array.push( morphAttribute[ i ].clone( data ) );
+// 				array.push( morphAttribute[ i ].clone( data ) );
 
-			}
+// 			}
 
-			this.morphAttributes[ name ] = array;
+// 			this.morphAttributes[ name ] = array;
 
-		}
+// 		}
 
-		this.morphTargetsRelative = source.morphTargetsRelative;
+// 		this.morphTargetsRelative = source.morphTargetsRelative;
 
-		// groups
+// 		// groups
 
-		const groups = source.groups;
+// 		const groups = source.groups;
 
-		for ( let i = 0, l = groups.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = groups.length; i < l; i ++ ) {
 
-			const group = groups[ i ];
-			this.addGroup( group.start, group.count, group.materialIndex );
+// 			const group = groups[ i ];
+// 			this.addGroup( group.start, group.count, group.materialIndex );
 
-		}
+// 		}
 
-		// bounding box
+// 		// bounding box
 
-		const boundingBox = source.boundingBox;
+// 		const boundingBox = source.boundingBox;
 
-		if ( boundingBox !== null ) {
+// 		if ( boundingBox !== null ) {
 
-			this.boundingBox = boundingBox.clone();
+// 			this.boundingBox = boundingBox.clone();
 
-		}
+// 		}
 
-		// bounding sphere
+// 		// bounding sphere
 
-		const boundingSphere = source.boundingSphere;
+// 		const boundingSphere = source.boundingSphere;
 
-		if ( boundingSphere !== null ) {
+// 		if ( boundingSphere !== null ) {
 
-			this.boundingSphere = boundingSphere.clone();
+// 			this.boundingSphere = boundingSphere.clone();
 
-		}
+// 		}
 
-		// draw range
+// 		// draw range
 
-		this.drawRange.start = source.drawRange.start;
-		this.drawRange.count = source.drawRange.count;
+// 		this.drawRange.start = source.drawRange.start;
+// 		this.drawRange.count = source.drawRange.count;
 
-		// user data
+// 		// user data
 
-		this.userData = source.userData;
+// 		this.userData = source.userData;
 
-		// geometry generator parameters
+// 		// geometry generator parameters
 
-		if ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );
+// 		if ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.dispatchEvent( { type: 'dispose' } );
+// 		this.dispatchEvent( { type: 'dispose' } );
 
-	}
+// 	}
 
-}
+// }
 
-const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();
-const _ray$2 = /*@__PURE__*/ new Ray();
-const _sphere$3 = /*@__PURE__*/ new Sphere();
+// const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();
+// const _ray$2 = /*@__PURE__*/ new Ray();
+// const _sphere$3 = /*@__PURE__*/ new Sphere();
 
-const _vA$1 = /*@__PURE__*/ new Vector3();
-const _vB$1 = /*@__PURE__*/ new Vector3();
-const _vC$1 = /*@__PURE__*/ new Vector3();
+// const _vA$1 = /*@__PURE__*/ new Vector3();
+// const _vB$1 = /*@__PURE__*/ new Vector3();
+// const _vC$1 = /*@__PURE__*/ new Vector3();
 
-const _tempA = /*@__PURE__*/ new Vector3();
-const _tempB = /*@__PURE__*/ new Vector3();
-const _tempC = /*@__PURE__*/ new Vector3();
+// const _tempA = /*@__PURE__*/ new Vector3();
+// const _tempB = /*@__PURE__*/ new Vector3();
+// const _tempC = /*@__PURE__*/ new Vector3();
 
-const _morphA = /*@__PURE__*/ new Vector3();
-const _morphB = /*@__PURE__*/ new Vector3();
-const _morphC = /*@__PURE__*/ new Vector3();
+// const _morphA = /*@__PURE__*/ new Vector3();
+// const _morphB = /*@__PURE__*/ new Vector3();
+// const _morphC = /*@__PURE__*/ new Vector3();
 
-const _uvA$1 = /*@__PURE__*/ new Vector2();
-const _uvB$1 = /*@__PURE__*/ new Vector2();
-const _uvC$1 = /*@__PURE__*/ new Vector2();
+// const _uvA$1 = /*@__PURE__*/ new Vector2();
+// const _uvB$1 = /*@__PURE__*/ new Vector2();
+// const _uvC$1 = /*@__PURE__*/ new Vector2();
 
-const _intersectionPoint = /*@__PURE__*/ new Vector3();
-const _intersectionPointWorld = /*@__PURE__*/ new Vector3();
+// const _intersectionPoint = /*@__PURE__*/ new Vector3();
+// const _intersectionPointWorld = /*@__PURE__*/ new Vector3();
 
-class Mesh extends Object3D {
+// class Mesh extends Object3D {
 
-	constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {
+// 	constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {
 
-		super();
+// 		super();
 
-		this.isMesh = true;
+// 		this.isMesh = true;
 
-		this.type = 'Mesh';
+// 		this.type = 'Mesh';
 
-		this.geometry = geometry;
-		this.material = material;
+// 		this.geometry = geometry;
+// 		this.material = material;
 
-		this.updateMorphTargets();
+// 		this.updateMorphTargets();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		if ( source.morphTargetInfluences !== undefined ) {
+// 		if ( source.morphTargetInfluences !== undefined ) {
 
-			this.morphTargetInfluences = source.morphTargetInfluences.slice();
+// 			this.morphTargetInfluences = source.morphTargetInfluences.slice();
 
-		}
+// 		}
 
-		if ( source.morphTargetDictionary !== undefined ) {
+// 		if ( source.morphTargetDictionary !== undefined ) {
 
-			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );
+// 			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );
 
-		}
+// 		}
 
-		this.material = source.material;
-		this.geometry = source.geometry;
+// 		this.material = source.material;
+// 		this.geometry = source.geometry;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	updateMorphTargets() {
+// 	updateMorphTargets() {
 
-		const geometry = this.geometry;
+// 		const geometry = this.geometry;
 
-		const morphAttributes = geometry.morphAttributes;
-		const keys = Object.keys( morphAttributes );
+// 		const morphAttributes = geometry.morphAttributes;
+// 		const keys = Object.keys( morphAttributes );
 
-		if ( keys.length > 0 ) {
+// 		if ( keys.length > 0 ) {
 
-			const morphAttribute = morphAttributes[ keys[ 0 ] ];
+// 			const morphAttribute = morphAttributes[ keys[ 0 ] ];
 
-			if ( morphAttribute !== undefined ) {
+// 			if ( morphAttribute !== undefined ) {
 
-				this.morphTargetInfluences = [];
-				this.morphTargetDictionary = {};
+// 				this.morphTargetInfluences = [];
+// 				this.morphTargetDictionary = {};
 
-				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
+// 				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
 
-					const name = morphAttribute[ m ].name || String( m );
+// 					const name = morphAttribute[ m ].name || String( m );
 
-					this.morphTargetInfluences.push( 0 );
-					this.morphTargetDictionary[ name ] = m;
+// 					this.morphTargetInfluences.push( 0 );
+// 					this.morphTargetDictionary[ name ] = m;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	raycast( raycaster, intersects ) {
+// 	raycast( raycaster, intersects ) {
 
-		const geometry = this.geometry;
-		const material = this.material;
-		const matrixWorld = this.matrixWorld;
+// 		const geometry = this.geometry;
+// 		const material = this.material;
+// 		const matrixWorld = this.matrixWorld;
 
-		if ( material === undefined ) return;
+// 		if ( material === undefined ) return;
 
-		// Checking boundingSphere distance to ray
+// 		// Checking boundingSphere distance to ray
 
-		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
+// 		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
 
-		_sphere$3.copy( geometry.boundingSphere );
-		_sphere$3.applyMatrix4( matrixWorld );
+// 		_sphere$3.copy( geometry.boundingSphere );
+// 		_sphere$3.applyMatrix4( matrixWorld );
 
-		if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;
+// 		if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;
 
-		//
+// 		//
 
-		_inverseMatrix$2.copy( matrixWorld ).invert();
-		_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );
+// 		_inverseMatrix$2.copy( matrixWorld ).invert();
+// 		_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );
 
-		// Check boundingBox before continuing
+// 		// Check boundingBox before continuing
 
-		if ( geometry.boundingBox !== null ) {
+// 		if ( geometry.boundingBox !== null ) {
 
-			if ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;
+// 			if ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;
 
-		}
+// 		}
 
-		let intersection;
+// 		let intersection;
 
-		const index = geometry.index;
-		const position = geometry.attributes.position;
-		const morphPosition = geometry.morphAttributes.position;
-		const morphTargetsRelative = geometry.morphTargetsRelative;
-		const uv = geometry.attributes.uv;
-		const uv2 = geometry.attributes.uv2;
-		const groups = geometry.groups;
-		const drawRange = geometry.drawRange;
+// 		const index = geometry.index;
+// 		const position = geometry.attributes.position;
+// 		const morphPosition = geometry.morphAttributes.position;
+// 		const morphTargetsRelative = geometry.morphTargetsRelative;
+// 		const uv = geometry.attributes.uv;
+// 		const uv2 = geometry.attributes.uv2;
+// 		const groups = geometry.groups;
+// 		const drawRange = geometry.drawRange;
 
-		if ( index !== null ) {
+// 		if ( index !== null ) {
 
-			// indexed buffer geometry
+// 			// indexed buffer geometry
 
-			if ( Array.isArray( material ) ) {
+// 			if ( Array.isArray( material ) ) {
 
-				for ( let i = 0, il = groups.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = groups.length; i < il; i ++ ) {
 
-					const group = groups[ i ];
-					const groupMaterial = material[ group.materialIndex ];
+// 					const group = groups[ i ];
+// 					const groupMaterial = material[ group.materialIndex ];
 
-					const start = Math.max( group.start, drawRange.start );
-					const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );
+// 					const start = Math.max( group.start, drawRange.start );
+// 					const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );
 
-					for ( let j = start, jl = end; j < jl; j += 3 ) {
+// 					for ( let j = start, jl = end; j < jl; j += 3 ) {
 
-						const a = index.getX( j );
-						const b = index.getX( j + 1 );
-						const c = index.getX( j + 2 );
+// 						const a = index.getX( j );
+// 						const b = index.getX( j + 1 );
+// 						const c = index.getX( j + 2 );
 
-						intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
+// 						intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
 
-						if ( intersection ) {
+// 						if ( intersection ) {
 
-							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
-							intersection.face.materialIndex = group.materialIndex;
-							intersects.push( intersection );
+// 							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
+// 							intersection.face.materialIndex = group.materialIndex;
+// 							intersects.push( intersection );
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				const start = Math.max( 0, drawRange.start );
-				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
+// 				const start = Math.max( 0, drawRange.start );
+// 				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
 
-				for ( let i = start, il = end; i < il; i += 3 ) {
+// 				for ( let i = start, il = end; i < il; i += 3 ) {
 
-					const a = index.getX( i );
-					const b = index.getX( i + 1 );
-					const c = index.getX( i + 2 );
+// 					const a = index.getX( i );
+// 					const b = index.getX( i + 1 );
+// 					const c = index.getX( i + 2 );
 
-					intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
+// 					intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
 
-					if ( intersection ) {
+// 					if ( intersection ) {
 
-						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
-						intersects.push( intersection );
+// 						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
+// 						intersects.push( intersection );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} else if ( position !== undefined ) {
+// 		} else if ( position !== undefined ) {
 
-			// non-indexed buffer geometry
+// 			// non-indexed buffer geometry
 
-			if ( Array.isArray( material ) ) {
+// 			if ( Array.isArray( material ) ) {
 
-				for ( let i = 0, il = groups.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = groups.length; i < il; i ++ ) {
 
-					const group = groups[ i ];
-					const groupMaterial = material[ group.materialIndex ];
+// 					const group = groups[ i ];
+// 					const groupMaterial = material[ group.materialIndex ];
 
-					const start = Math.max( group.start, drawRange.start );
-					const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );
+// 					const start = Math.max( group.start, drawRange.start );
+// 					const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );
 
-					for ( let j = start, jl = end; j < jl; j += 3 ) {
+// 					for ( let j = start, jl = end; j < jl; j += 3 ) {
 
-						const a = j;
-						const b = j + 1;
-						const c = j + 2;
+// 						const a = j;
+// 						const b = j + 1;
+// 						const c = j + 2;
 
-						intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
+// 						intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
 
-						if ( intersection ) {
+// 						if ( intersection ) {
 
-							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
-							intersection.face.materialIndex = group.materialIndex;
-							intersects.push( intersection );
+// 							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
+// 							intersection.face.materialIndex = group.materialIndex;
+// 							intersects.push( intersection );
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				const start = Math.max( 0, drawRange.start );
-				const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );
+// 				const start = Math.max( 0, drawRange.start );
+// 				const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );
 
-				for ( let i = start, il = end; i < il; i += 3 ) {
+// 				for ( let i = start, il = end; i < il; i += 3 ) {
 
-					const a = i;
-					const b = i + 1;
-					const c = i + 2;
+// 					const a = i;
+// 					const b = i + 1;
+// 					const c = i + 2;
 
-					intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
+// 					intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
 
-					if ( intersection ) {
+// 					if ( intersection ) {
 
-						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
-						intersects.push( intersection );
+// 						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
+// 						intersects.push( intersection );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {
+// function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {
 
-	let intersect;
+// 	let intersect;
 
-	if ( material.side === BackSide ) {
+// 	if ( material.side === BackSide ) {
 
-		intersect = ray.intersectTriangle( pC, pB, pA, true, point );
+// 		intersect = ray.intersectTriangle( pC, pB, pA, true, point );
 
-	} else {
+// 	} else {
 
-		intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );
+// 		intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );
 
-	}
+// 	}
 
-	if ( intersect === null ) return null;
+// 	if ( intersect === null ) return null;
 
-	_intersectionPointWorld.copy( point );
-	_intersectionPointWorld.applyMatrix4( object.matrixWorld );
+// 	_intersectionPointWorld.copy( point );
+// 	_intersectionPointWorld.applyMatrix4( object.matrixWorld );
 
-	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );
+// 	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );
 
-	if ( distance < raycaster.near || distance > raycaster.far ) return null;
+// 	if ( distance < raycaster.near || distance > raycaster.far ) return null;
 
-	return {
-		distance: distance,
-		point: _intersectionPointWorld.clone(),
-		object: object
-	};
+// 	return {
+// 		distance: distance,
+// 		point: _intersectionPointWorld.clone(),
+// 		object: object
+// 	};
 
-}
+// }
 
-function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {
+// function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {
 
-	_vA$1.fromBufferAttribute( position, a );
-	_vB$1.fromBufferAttribute( position, b );
-	_vC$1.fromBufferAttribute( position, c );
+// 	_vA$1.fromBufferAttribute( position, a );
+// 	_vB$1.fromBufferAttribute( position, b );
+// 	_vC$1.fromBufferAttribute( position, c );
 
-	const morphInfluences = object.morphTargetInfluences;
+// 	const morphInfluences = object.morphTargetInfluences;
 
-	if ( morphPosition && morphInfluences ) {
+// 	if ( morphPosition && morphInfluences ) {
 
-		_morphA.set( 0, 0, 0 );
-		_morphB.set( 0, 0, 0 );
-		_morphC.set( 0, 0, 0 );
+// 		_morphA.set( 0, 0, 0 );
+// 		_morphB.set( 0, 0, 0 );
+// 		_morphC.set( 0, 0, 0 );
 
-		for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {
 
-			const influence = morphInfluences[ i ];
-			const morphAttribute = morphPosition[ i ];
+// 			const influence = morphInfluences[ i ];
+// 			const morphAttribute = morphPosition[ i ];
 
-			if ( influence === 0 ) continue;
+// 			if ( influence === 0 ) continue;
 
-			_tempA.fromBufferAttribute( morphAttribute, a );
-			_tempB.fromBufferAttribute( morphAttribute, b );
-			_tempC.fromBufferAttribute( morphAttribute, c );
+// 			_tempA.fromBufferAttribute( morphAttribute, a );
+// 			_tempB.fromBufferAttribute( morphAttribute, b );
+// 			_tempC.fromBufferAttribute( morphAttribute, c );
 
-			if ( morphTargetsRelative ) {
+// 			if ( morphTargetsRelative ) {
 
-				_morphA.addScaledVector( _tempA, influence );
-				_morphB.addScaledVector( _tempB, influence );
-				_morphC.addScaledVector( _tempC, influence );
+// 				_morphA.addScaledVector( _tempA, influence );
+// 				_morphB.addScaledVector( _tempB, influence );
+// 				_morphC.addScaledVector( _tempC, influence );
 
-			} else {
+// 			} else {
 
-				_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );
-				_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );
-				_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );
+// 				_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );
+// 				_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );
+// 				_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		_vA$1.add( _morphA );
-		_vB$1.add( _morphB );
-		_vC$1.add( _morphC );
+// 		_vA$1.add( _morphA );
+// 		_vB$1.add( _morphB );
+// 		_vC$1.add( _morphC );
 
-	}
+// 	}
 
-	if ( object.isSkinnedMesh ) {
+// 	if ( object.isSkinnedMesh ) {
 
-		object.boneTransform( a, _vA$1 );
-		object.boneTransform( b, _vB$1 );
-		object.boneTransform( c, _vC$1 );
+// 		object.boneTransform( a, _vA$1 );
+// 		object.boneTransform( b, _vB$1 );
+// 		object.boneTransform( c, _vC$1 );
 
-	}
+// 	}
 
-	const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );
+// 	const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );
 
-	if ( intersection ) {
+// 	if ( intersection ) {
 
-		if ( uv ) {
+// 		if ( uv ) {
 
-			_uvA$1.fromBufferAttribute( uv, a );
-			_uvB$1.fromBufferAttribute( uv, b );
-			_uvC$1.fromBufferAttribute( uv, c );
+// 			_uvA$1.fromBufferAttribute( uv, a );
+// 			_uvB$1.fromBufferAttribute( uv, b );
+// 			_uvC$1.fromBufferAttribute( uv, c );
 
-			intersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );
+// 			intersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );
 
-		}
+// 		}
 
-		if ( uv2 ) {
+// 		if ( uv2 ) {
 
-			_uvA$1.fromBufferAttribute( uv2, a );
-			_uvB$1.fromBufferAttribute( uv2, b );
-			_uvC$1.fromBufferAttribute( uv2, c );
+// 			_uvA$1.fromBufferAttribute( uv2, a );
+// 			_uvB$1.fromBufferAttribute( uv2, b );
+// 			_uvC$1.fromBufferAttribute( uv2, c );
 
-			intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );
+// 			intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );
 
-		}
+// 		}
 
-		const face = {
-			a: a,
-			b: b,
-			c: c,
-			normal: new Vector3(),
-			materialIndex: 0
-		};
+// 		const face = {
+// 			a: a,
+// 			b: b,
+// 			c: c,
+// 			normal: new Vector3(),
+// 			materialIndex: 0
+// 		};
 
-		Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );
+// 		Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );
 
-		intersection.face = face;
+// 		intersection.face = face;
 
-	}
+// 	}
 
-	return intersection;
+// 	return intersection;
 
-}
+// }
 
-class BoxGeometry extends BufferGeometry {
+// class BoxGeometry extends BufferGeometry {
 
-	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {
+// 	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {
 
-		super();
+// 		super();
 
-		this.type = 'BoxGeometry';
+// 		this.type = 'BoxGeometry';
 
-		this.parameters = {
-			width: width,
-			height: height,
-			depth: depth,
-			widthSegments: widthSegments,
-			heightSegments: heightSegments,
-			depthSegments: depthSegments
-		};
+// 		this.parameters = {
+// 			width: width,
+// 			height: height,
+// 			depth: depth,
+// 			widthSegments: widthSegments,
+// 			heightSegments: heightSegments,
+// 			depthSegments: depthSegments
+// 		};
 
-		const scope = this;
+// 		const scope = this;
 
-		// segments
+// 		// segments
 
-		widthSegments = Math.floor( widthSegments );
-		heightSegments = Math.floor( heightSegments );
-		depthSegments = Math.floor( depthSegments );
+// 		widthSegments = Math.floor( widthSegments );
+// 		heightSegments = Math.floor( heightSegments );
+// 		depthSegments = Math.floor( depthSegments );
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		// helper variables
+// 		// helper variables
 
-		let numberOfVertices = 0;
-		let groupStart = 0;
+// 		let numberOfVertices = 0;
+// 		let groupStart = 0;
 
-		// build each side of the box geometry
+// 		// build each side of the box geometry
 
-		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
-		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
-		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
-		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
-		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
-		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz
+// 		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
+// 		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
+// 		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
+// 		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
+// 		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
+// 		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {
+// 		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {
 
-			const segmentWidth = width / gridX;
-			const segmentHeight = height / gridY;
+// 			const segmentWidth = width / gridX;
+// 			const segmentHeight = height / gridY;
 
-			const widthHalf = width / 2;
-			const heightHalf = height / 2;
-			const depthHalf = depth / 2;
+// 			const widthHalf = width / 2;
+// 			const heightHalf = height / 2;
+// 			const depthHalf = depth / 2;
 
-			const gridX1 = gridX + 1;
-			const gridY1 = gridY + 1;
+// 			const gridX1 = gridX + 1;
+// 			const gridY1 = gridY + 1;
 
-			let vertexCounter = 0;
-			let groupCount = 0;
+// 			let vertexCounter = 0;
+// 			let groupCount = 0;
 
-			const vector = new Vector3();
+// 			const vector = new Vector3();
 
-			// generate vertices, normals and uvs
+// 			// generate vertices, normals and uvs
 
-			for ( let iy = 0; iy < gridY1; iy ++ ) {
+// 			for ( let iy = 0; iy < gridY1; iy ++ ) {
 
-				const y = iy * segmentHeight - heightHalf;
+// 				const y = iy * segmentHeight - heightHalf;
 
-				for ( let ix = 0; ix < gridX1; ix ++ ) {
+// 				for ( let ix = 0; ix < gridX1; ix ++ ) {
 
-					const x = ix * segmentWidth - widthHalf;
+// 					const x = ix * segmentWidth - widthHalf;
 
-					// set values to correct vector component
+// 					// set values to correct vector component
 
-					vector[ u ] = x * udir;
-					vector[ v ] = y * vdir;
-					vector[ w ] = depthHalf;
+// 					vector[ u ] = x * udir;
+// 					vector[ v ] = y * vdir;
+// 					vector[ w ] = depthHalf;
 
-					// now apply vector to vertex buffer
+// 					// now apply vector to vertex buffer
 
-					vertices.push( vector.x, vector.y, vector.z );
+// 					vertices.push( vector.x, vector.y, vector.z );
 
-					// set values to correct vector component
+// 					// set values to correct vector component
 
-					vector[ u ] = 0;
-					vector[ v ] = 0;
-					vector[ w ] = depth > 0 ? 1 : - 1;
+// 					vector[ u ] = 0;
+// 					vector[ v ] = 0;
+// 					vector[ w ] = depth > 0 ? 1 : - 1;
 
-					// now apply vector to normal buffer
+// 					// now apply vector to normal buffer
 
-					normals.push( vector.x, vector.y, vector.z );
+// 					normals.push( vector.x, vector.y, vector.z );
 
-					// uvs
+// 					// uvs
 
-					uvs.push( ix / gridX );
-					uvs.push( 1 - ( iy / gridY ) );
+// 					uvs.push( ix / gridX );
+// 					uvs.push( 1 - ( iy / gridY ) );
 
-					// counters
+// 					// counters
 
-					vertexCounter += 1;
+// 					vertexCounter += 1;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// indices
+// 			// indices
 
-			// 1. you need three indices to draw a single face
-			// 2. a single segment consists of two faces
-			// 3. so we need to generate six (2*3) indices per segment
+// 			// 1. you need three indices to draw a single face
+// 			// 2. a single segment consists of two faces
+// 			// 3. so we need to generate six (2*3) indices per segment
 
-			for ( let iy = 0; iy < gridY; iy ++ ) {
+// 			for ( let iy = 0; iy < gridY; iy ++ ) {
 
-				for ( let ix = 0; ix < gridX; ix ++ ) {
+// 				for ( let ix = 0; ix < gridX; ix ++ ) {
 
-					const a = numberOfVertices + ix + gridX1 * iy;
-					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
-					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
-					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;
+// 					const a = numberOfVertices + ix + gridX1 * iy;
+// 					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
+// 					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
+// 					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;
 
-					// faces
+// 					// faces
 
-					indices.push( a, b, d );
-					indices.push( b, c, d );
+// 					indices.push( a, b, d );
+// 					indices.push( b, c, d );
 
-					// increase counter
+// 					// increase counter
 
-					groupCount += 6;
+// 					groupCount += 6;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// add a group to the geometry. this will ensure multi material support
+// 			// add a group to the geometry. this will ensure multi material support
 
-			scope.addGroup( groupStart, groupCount, materialIndex );
+// 			scope.addGroup( groupStart, groupCount, materialIndex );
 
-			// calculate new start value for groups
+// 			// calculate new start value for groups
 
-			groupStart += groupCount;
+// 			groupStart += groupCount;
 
-			// update total number of vertices
+// 			// update total number of vertices
 
-			numberOfVertices += vertexCounter;
+// 			numberOfVertices += vertexCounter;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );
+// 		return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Uniform Utilities
- */
+// /**
+//  * Uniform Utilities
+//  */
 
-function cloneUniforms( src ) {
+// function cloneUniforms( src ) {
 
-	const dst = {};
+// 	const dst = {};
 
-	for ( const u in src ) {
+// 	for ( const u in src ) {
 
-		dst[ u ] = {};
+// 		dst[ u ] = {};
 
-		for ( const p in src[ u ] ) {
+// 		for ( const p in src[ u ] ) {
 
-			const property = src[ u ][ p ];
+// 			const property = src[ u ][ p ];
 
-			if ( property && ( property.isColor ||
-				property.isMatrix3 || property.isMatrix4 ||
-				property.isVector2 || property.isVector3 || property.isVector4 ||
-				property.isTexture || property.isQuaternion ) ) {
+// 			if ( property && ( property.isColor ||
+// 				property.isMatrix3 || property.isMatrix4 ||
+// 				property.isVector2 || property.isVector3 || property.isVector4 ||
+// 				property.isTexture || property.isQuaternion ) ) {
 
-				dst[ u ][ p ] = property.clone();
+// 				dst[ u ][ p ] = property.clone();
 
-			} else if ( Array.isArray( property ) ) {
+// 			} else if ( Array.isArray( property ) ) {
 
-				dst[ u ][ p ] = property.slice();
+// 				dst[ u ][ p ] = property.slice();
 
-			} else {
+// 			} else {
 
-				dst[ u ][ p ] = property;
+// 				dst[ u ][ p ] = property;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return dst;
+// 	return dst;
 
-}
+// }
 
-function mergeUniforms( uniforms ) {
+// function mergeUniforms( uniforms ) {
 
-	const merged = {};
+// 	const merged = {};
 
-	for ( let u = 0; u < uniforms.length; u ++ ) {
+// 	for ( let u = 0; u < uniforms.length; u ++ ) {
 
-		const tmp = cloneUniforms( uniforms[ u ] );
+// 		const tmp = cloneUniforms( uniforms[ u ] );
 
-		for ( const p in tmp ) {
+// 		for ( const p in tmp ) {
 
-			merged[ p ] = tmp[ p ];
+// 			merged[ p ] = tmp[ p ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return merged;
+// 	return merged;
 
-}
+// }
 
-function cloneUniformsGroups( src ) {
+// function cloneUniformsGroups( src ) {
 
-	const dst = [];
+// 	const dst = [];
 
-	for ( let u = 0; u < src.length; u ++ ) {
+// 	for ( let u = 0; u < src.length; u ++ ) {
 
-		dst.push( src[ u ].clone() );
+// 		dst.push( src[ u ].clone() );
 
-	}
+// 	}
 
-	return dst;
+// 	return dst;
 
-}
+// }
 
-// Legacy
+// // Legacy
 
-const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
+// const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
 
-var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
+// var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
 
-var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
+// var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
 
-class ShaderMaterial extends Material {
+// class ShaderMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isShaderMaterial = true;
+// 		this.isShaderMaterial = true;
 
-		this.type = 'ShaderMaterial';
+// 		this.type = 'ShaderMaterial';
 
-		this.defines = {};
-		this.uniforms = {};
-		this.uniformsGroups = [];
+// 		this.defines = {};
+// 		this.uniforms = {};
+// 		this.uniformsGroups = [];
 
-		this.vertexShader = default_vertex;
-		this.fragmentShader = default_fragment;
+// 		this.vertexShader = default_vertex;
+// 		this.fragmentShader = default_fragment;
 
-		this.linewidth = 1;
+// 		this.linewidth = 1;
 
-		this.wireframe = false;
-		this.wireframeLinewidth = 1;
+// 		this.wireframe = false;
+// 		this.wireframeLinewidth = 1;
 
-		this.fog = false; // set to use scene fog
-		this.lights = false; // set to use scene lights
-		this.clipping = false; // set to use user-defined clipping planes
+// 		this.fog = false; // set to use scene fog
+// 		this.lights = false; // set to use scene lights
+// 		this.clipping = false; // set to use user-defined clipping planes
 
-		this.extensions = {
-			derivatives: false, // set to use derivatives
-			fragDepth: false, // set to use fragment depth values
-			drawBuffers: false, // set to use draw buffers
-			shaderTextureLOD: false // set to use shader texture LOD
-		};
+// 		this.extensions = {
+// 			derivatives: false, // set to use derivatives
+// 			fragDepth: false, // set to use fragment depth values
+// 			drawBuffers: false, // set to use draw buffers
+// 			shaderTextureLOD: false // set to use shader texture LOD
+// 		};
 
-		// When rendered geometry doesn't include these attributes but the material does,
-		// use these default values in WebGL. This avoids errors when buffer data is missing.
-		this.defaultAttributeValues = {
-			'color': [ 1, 1, 1 ],
-			'uv': [ 0, 0 ],
-			'uv2': [ 0, 0 ]
-		};
+// 		// When rendered geometry doesn't include these attributes but the material does,
+// 		// use these default values in WebGL. This avoids errors when buffer data is missing.
+// 		this.defaultAttributeValues = {
+// 			'color': [ 1, 1, 1 ],
+// 			'uv': [ 0, 0 ],
+// 			'uv2': [ 0, 0 ]
+// 		};
 
-		this.index0AttributeName = undefined;
-		this.uniformsNeedUpdate = false;
+// 		this.index0AttributeName = undefined;
+// 		this.uniformsNeedUpdate = false;
 
-		this.glslVersion = null;
+// 		this.glslVersion = null;
 
-		if ( parameters !== undefined ) {
+// 		if ( parameters !== undefined ) {
 
-			this.setValues( parameters );
+// 			this.setValues( parameters );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.fragmentShader = source.fragmentShader;
-		this.vertexShader = source.vertexShader;
+// 		this.fragmentShader = source.fragmentShader;
+// 		this.vertexShader = source.vertexShader;
 
-		this.uniforms = cloneUniforms( source.uniforms );
-		this.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );
+// 		this.uniforms = cloneUniforms( source.uniforms );
+// 		this.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );
 
-		this.defines = Object.assign( {}, source.defines );
+// 		this.defines = Object.assign( {}, source.defines );
 
-		this.wireframe = source.wireframe;
-		this.wireframeLinewidth = source.wireframeLinewidth;
+// 		this.wireframe = source.wireframe;
+// 		this.wireframeLinewidth = source.wireframeLinewidth;
 
-		this.fog = source.fog;
-		this.lights = source.lights;
-		this.clipping = source.clipping;
+// 		this.fog = source.fog;
+// 		this.lights = source.lights;
+// 		this.clipping = source.clipping;
 
-		this.extensions = Object.assign( {}, source.extensions );
+// 		this.extensions = Object.assign( {}, source.extensions );
 
-		this.glslVersion = source.glslVersion;
+// 		this.glslVersion = source.glslVersion;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const data = super.toJSON( meta );
+// 		const data = super.toJSON( meta );
 
-		data.glslVersion = this.glslVersion;
-		data.uniforms = {};
+// 		data.glslVersion = this.glslVersion;
+// 		data.uniforms = {};
 
-		for ( const name in this.uniforms ) {
+// 		for ( const name in this.uniforms ) {
 
-			const uniform = this.uniforms[ name ];
-			const value = uniform.value;
+// 			const uniform = this.uniforms[ name ];
+// 			const value = uniform.value;
 
-			if ( value && value.isTexture ) {
+// 			if ( value && value.isTexture ) {
 
-				data.uniforms[ name ] = {
-					type: 't',
-					value: value.toJSON( meta ).uuid
-				};
+// 				data.uniforms[ name ] = {
+// 					type: 't',
+// 					value: value.toJSON( meta ).uuid
+// 				};
 
-			} else if ( value && value.isColor ) {
+// 			} else if ( value && value.isColor ) {
 
-				data.uniforms[ name ] = {
-					type: 'c',
-					value: value.getHex()
-				};
+// 				data.uniforms[ name ] = {
+// 					type: 'c',
+// 					value: value.getHex()
+// 				};
 
-			} else if ( value && value.isVector2 ) {
+// 			} else if ( value && value.isVector2 ) {
 
-				data.uniforms[ name ] = {
-					type: 'v2',
-					value: value.toArray()
-				};
+// 				data.uniforms[ name ] = {
+// 					type: 'v2',
+// 					value: value.toArray()
+// 				};
 
-			} else if ( value && value.isVector3 ) {
+// 			} else if ( value && value.isVector3 ) {
 
-				data.uniforms[ name ] = {
-					type: 'v3',
-					value: value.toArray()
-				};
+// 				data.uniforms[ name ] = {
+// 					type: 'v3',
+// 					value: value.toArray()
+// 				};
 
-			} else if ( value && value.isVector4 ) {
+// 			} else if ( value && value.isVector4 ) {
 
-				data.uniforms[ name ] = {
-					type: 'v4',
-					value: value.toArray()
-				};
+// 				data.uniforms[ name ] = {
+// 					type: 'v4',
+// 					value: value.toArray()
+// 				};
 
-			} else if ( value && value.isMatrix3 ) {
+// 			} else if ( value && value.isMatrix3 ) {
 
-				data.uniforms[ name ] = {
-					type: 'm3',
-					value: value.toArray()
-				};
+// 				data.uniforms[ name ] = {
+// 					type: 'm3',
+// 					value: value.toArray()
+// 				};
 
-			} else if ( value && value.isMatrix4 ) {
+// 			} else if ( value && value.isMatrix4 ) {
 
-				data.uniforms[ name ] = {
-					type: 'm4',
-					value: value.toArray()
-				};
+// 				data.uniforms[ name ] = {
+// 					type: 'm4',
+// 					value: value.toArray()
+// 				};
 
-			} else {
+// 			} else {
 
-				data.uniforms[ name ] = {
-					value: value
-				};
+// 				data.uniforms[ name ] = {
+// 					value: value
+// 				};
 
-				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
+// 				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;
+// 		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;
 
-		data.vertexShader = this.vertexShader;
-		data.fragmentShader = this.fragmentShader;
+// 		data.vertexShader = this.vertexShader;
+// 		data.fragmentShader = this.fragmentShader;
 
-		const extensions = {};
+// 		const extensions = {};
 
-		for ( const key in this.extensions ) {
+// 		for ( const key in this.extensions ) {
 
-			if ( this.extensions[ key ] === true ) extensions[ key ] = true;
+// 			if ( this.extensions[ key ] === true ) extensions[ key ] = true;
 
-		}
+// 		}
 
-		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;
+// 		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-class Camera extends Object3D {
+// class Camera extends Object3D {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isCamera = true;
+// 		this.isCamera = true;
 
-		this.type = 'Camera';
+// 		this.type = 'Camera';
 
-		this.matrixWorldInverse = new Matrix4();
+// 		this.matrixWorldInverse = new Matrix4();
 
-		this.projectionMatrix = new Matrix4();
-		this.projectionMatrixInverse = new Matrix4();
+// 		this.projectionMatrix = new Matrix4();
+// 		this.projectionMatrixInverse = new Matrix4();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.matrixWorldInverse.copy( source.matrixWorldInverse );
+// 		this.matrixWorldInverse.copy( source.matrixWorldInverse );
 
-		this.projectionMatrix.copy( source.projectionMatrix );
-		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );
+// 		this.projectionMatrix.copy( source.projectionMatrix );
+// 		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getWorldDirection( target ) {
+// 	getWorldDirection( target ) {
 
-		this.updateWorldMatrix( true, false );
+// 		this.updateWorldMatrix( true, false );
 
-		const e = this.matrixWorld.elements;
+// 		const e = this.matrixWorld.elements;
 
-		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();
+// 		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();
 
-	}
+// 	}
 
-	updateMatrixWorld( force ) {
+// 	updateMatrixWorld( force ) {
 
-		super.updateMatrixWorld( force );
+// 		super.updateMatrixWorld( force );
 
-		this.matrixWorldInverse.copy( this.matrixWorld ).invert();
+// 		this.matrixWorldInverse.copy( this.matrixWorld ).invert();
 
-	}
+// 	}
 
-	updateWorldMatrix( updateParents, updateChildren ) {
+// 	updateWorldMatrix( updateParents, updateChildren ) {
 
-		super.updateWorldMatrix( updateParents, updateChildren );
+// 		super.updateWorldMatrix( updateParents, updateChildren );
 
-		this.matrixWorldInverse.copy( this.matrixWorld ).invert();
+// 		this.matrixWorldInverse.copy( this.matrixWorld ).invert();
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-class PerspectiveCamera extends Camera {
+// class PerspectiveCamera extends Camera {
 
-	constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {
+// 	constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {
 
-		super();
+// 		super();
 
-		this.isPerspectiveCamera = true;
+// 		this.isPerspectiveCamera = true;
 
-		this.type = 'PerspectiveCamera';
+// 		this.type = 'PerspectiveCamera';
 
-		this.fov = fov;
-		this.zoom = 1;
+// 		this.fov = fov;
+// 		this.zoom = 1;
 
-		this.near = near;
-		this.far = far;
-		this.focus = 10;
+// 		this.near = near;
+// 		this.far = far;
+// 		this.focus = 10;
 
-		this.aspect = aspect;
-		this.view = null;
+// 		this.aspect = aspect;
+// 		this.view = null;
 
-		this.filmGauge = 35;	// width of the film (default in millimeters)
-		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)
+// 		this.filmGauge = 35;	// width of the film (default in millimeters)
+// 		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)
 
-		this.updateProjectionMatrix();
+// 		this.updateProjectionMatrix();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.fov = source.fov;
-		this.zoom = source.zoom;
+// 		this.fov = source.fov;
+// 		this.zoom = source.zoom;
 
-		this.near = source.near;
-		this.far = source.far;
-		this.focus = source.focus;
+// 		this.near = source.near;
+// 		this.far = source.far;
+// 		this.focus = source.focus;
 
-		this.aspect = source.aspect;
-		this.view = source.view === null ? null : Object.assign( {}, source.view );
+// 		this.aspect = source.aspect;
+// 		this.view = source.view === null ? null : Object.assign( {}, source.view );
 
-		this.filmGauge = source.filmGauge;
-		this.filmOffset = source.filmOffset;
+// 		this.filmGauge = source.filmGauge;
+// 		this.filmOffset = source.filmOffset;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	/**
-	 * Sets the FOV by focal length in respect to the current .filmGauge.
-	 *
-	 * The default film gauge is 35, so that the focal length can be specified for
-	 * a 35mm (full frame) camera.
-	 *
-	 * Values for focal length and film gauge must have the same unit.
-	 */
-	setFocalLength( focalLength ) {
+// 	/**
+// 	 * Sets the FOV by focal length in respect to the current .filmGauge.
+// 	 *
+// 	 * The default film gauge is 35, so that the focal length can be specified for
+// 	 * a 35mm (full frame) camera.
+// 	 *
+// 	 * Values for focal length and film gauge must have the same unit.
+// 	 */
+// 	setFocalLength( focalLength ) {
 
-		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
-		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
+// 		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
+// 		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
 
-		this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
-		this.updateProjectionMatrix();
+// 		this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
+// 		this.updateProjectionMatrix();
 
-	}
+// 	}
 
-	/**
-	 * Calculates the focal length from the current .fov and .filmGauge.
-	 */
-	getFocalLength() {
+// 	/**
+// 	 * Calculates the focal length from the current .fov and .filmGauge.
+// 	 */
+// 	getFocalLength() {
 
-		const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );
+// 		const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );
 
-		return 0.5 * this.getFilmHeight() / vExtentSlope;
+// 		return 0.5 * this.getFilmHeight() / vExtentSlope;
 
-	}
+// 	}
 
-	getEffectiveFOV() {
+// 	getEffectiveFOV() {
 
-		return RAD2DEG * 2 * Math.atan(
-			Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );
+// 		return RAD2DEG * 2 * Math.atan(
+// 			Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );
 
-	}
+// 	}
 
-	getFilmWidth() {
+// 	getFilmWidth() {
 
-		// film not completely covered in portrait format (aspect < 1)
-		return this.filmGauge * Math.min( this.aspect, 1 );
+// 		// film not completely covered in portrait format (aspect < 1)
+// 		return this.filmGauge * Math.min( this.aspect, 1 );
 
-	}
+// 	}
 
-	getFilmHeight() {
+// 	getFilmHeight() {
 
-		// film not completely covered in landscape format (aspect > 1)
-		return this.filmGauge / Math.max( this.aspect, 1 );
+// 		// film not completely covered in landscape format (aspect > 1)
+// 		return this.filmGauge / Math.max( this.aspect, 1 );
 
-	}
+// 	}
 
-	/**
-	 * Sets an offset in a larger frustum. This is useful for multi-window or
-	 * multi-monitor/multi-machine setups.
-	 *
-	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
-	 * the monitors are in grid like this
-	 *
-	 *   +---+---+---+
-	 *   | A | B | C |
-	 *   +---+---+---+
-	 *   | D | E | F |
-	 *   +---+---+---+
-	 *
-	 * then for each monitor you would call it like this
-	 *
-	 *   const w = 1920;
-	 *   const h = 1080;
-	 *   const fullWidth = w * 3;
-	 *   const fullHeight = h * 2;
-	 *
-	 *   --A--
-	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
-	 *   --B--
-	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
-	 *   --C--
-	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
-	 *   --D--
-	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
-	 *   --E--
-	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
-	 *   --F--
-	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
-	 *
-	 *   Note there is no reason monitors have to be the same size or in a grid.
-	 */
-	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {
+// 	/**
+// 	 * Sets an offset in a larger frustum. This is useful for multi-window or
+// 	 * multi-monitor/multi-machine setups.
+// 	 *
+// 	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
+// 	 * the monitors are in grid like this
+// 	 *
+// 	 *   +---+---+---+
+// 	 *   | A | B | C |
+// 	 *   +---+---+---+
+// 	 *   | D | E | F |
+// 	 *   +---+---+---+
+// 	 *
+// 	 * then for each monitor you would call it like this
+// 	 *
+// 	 *   const w = 1920;
+// 	 *   const h = 1080;
+// 	 *   const fullWidth = w * 3;
+// 	 *   const fullHeight = h * 2;
+// 	 *
+// 	 *   --A--
+// 	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
+// 	 *   --B--
+// 	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
+// 	 *   --C--
+// 	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
+// 	 *   --D--
+// 	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
+// 	 *   --E--
+// 	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
+// 	 *   --F--
+// 	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
+// 	 *
+// 	 *   Note there is no reason monitors have to be the same size or in a grid.
+// 	 */
+// 	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {
 
-		this.aspect = fullWidth / fullHeight;
+// 		this.aspect = fullWidth / fullHeight;
 
-		if ( this.view === null ) {
+// 		if ( this.view === null ) {
 
-			this.view = {
-				enabled: true,
-				fullWidth: 1,
-				fullHeight: 1,
-				offsetX: 0,
-				offsetY: 0,
-				width: 1,
-				height: 1
-			};
+// 			this.view = {
+// 				enabled: true,
+// 				fullWidth: 1,
+// 				fullHeight: 1,
+// 				offsetX: 0,
+// 				offsetY: 0,
+// 				width: 1,
+// 				height: 1
+// 			};
 
-		}
+// 		}
 
-		this.view.enabled = true;
-		this.view.fullWidth = fullWidth;
-		this.view.fullHeight = fullHeight;
-		this.view.offsetX = x;
-		this.view.offsetY = y;
-		this.view.width = width;
-		this.view.height = height;
+// 		this.view.enabled = true;
+// 		this.view.fullWidth = fullWidth;
+// 		this.view.fullHeight = fullHeight;
+// 		this.view.offsetX = x;
+// 		this.view.offsetY = y;
+// 		this.view.width = width;
+// 		this.view.height = height;
 
-		this.updateProjectionMatrix();
+// 		this.updateProjectionMatrix();
 
-	}
+// 	}
 
-	clearViewOffset() {
+// 	clearViewOffset() {
 
-		if ( this.view !== null ) {
+// 		if ( this.view !== null ) {
 
-			this.view.enabled = false;
+// 			this.view.enabled = false;
 
-		}
+// 		}
 
-		this.updateProjectionMatrix();
+// 		this.updateProjectionMatrix();
 
-	}
+// 	}
 
-	updateProjectionMatrix() {
+// 	updateProjectionMatrix() {
 
-		const near = this.near;
-		let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
-		let height = 2 * top;
-		let width = this.aspect * height;
-		let left = - 0.5 * width;
-		const view = this.view;
+// 		const near = this.near;
+// 		let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
+// 		let height = 2 * top;
+// 		let width = this.aspect * height;
+// 		let left = - 0.5 * width;
+// 		const view = this.view;
 
-		if ( this.view !== null && this.view.enabled ) {
+// 		if ( this.view !== null && this.view.enabled ) {
 
-			const fullWidth = view.fullWidth,
-				fullHeight = view.fullHeight;
+// 			const fullWidth = view.fullWidth,
+// 				fullHeight = view.fullHeight;
 
-			left += view.offsetX * width / fullWidth;
-			top -= view.offsetY * height / fullHeight;
-			width *= view.width / fullWidth;
-			height *= view.height / fullHeight;
+// 			left += view.offsetX * width / fullWidth;
+// 			top -= view.offsetY * height / fullHeight;
+// 			width *= view.width / fullWidth;
+// 			height *= view.height / fullHeight;
 
-		}
+// 		}
 
-		const skew = this.filmOffset;
-		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();
+// 		const skew = this.filmOffset;
+// 		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();
 
-		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );
+// 		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );
 
-		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();
+// 		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const data = super.toJSON( meta );
+// 		const data = super.toJSON( meta );
 
-		data.object.fov = this.fov;
-		data.object.zoom = this.zoom;
+// 		data.object.fov = this.fov;
+// 		data.object.zoom = this.zoom;
 
-		data.object.near = this.near;
-		data.object.far = this.far;
-		data.object.focus = this.focus;
+// 		data.object.near = this.near;
+// 		data.object.far = this.far;
+// 		data.object.focus = this.focus;
 
-		data.object.aspect = this.aspect;
+// 		data.object.aspect = this.aspect;
 
-		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
+// 		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
 
-		data.object.filmGauge = this.filmGauge;
-		data.object.filmOffset = this.filmOffset;
+// 		data.object.filmGauge = this.filmGauge;
+// 		data.object.filmOffset = this.filmOffset;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-const fov = 90, aspect = 1;
+// const fov = 90, aspect = 1;
 
-class CubeCamera extends Object3D {
+// class CubeCamera extends Object3D {
 
-	constructor( near, far, renderTarget ) {
+// 	constructor( near, far, renderTarget ) {
 
-		super();
+// 		super();
 
-		this.type = 'CubeCamera';
+// 		this.type = 'CubeCamera';
 
-		this.renderTarget = renderTarget;
+// 		this.renderTarget = renderTarget;
 
-		const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
-		cameraPX.layers = this.layers;
-		cameraPX.up.set( 0, - 1, 0 );
-		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
-		this.add( cameraPX );
+// 		const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
+// 		cameraPX.layers = this.layers;
+// 		cameraPX.up.set( 0, - 1, 0 );
+// 		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
+// 		this.add( cameraPX );
 
-		const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
-		cameraNX.layers = this.layers;
-		cameraNX.up.set( 0, - 1, 0 );
-		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
-		this.add( cameraNX );
+// 		const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
+// 		cameraNX.layers = this.layers;
+// 		cameraNX.up.set( 0, - 1, 0 );
+// 		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
+// 		this.add( cameraNX );
 
-		const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
-		cameraPY.layers = this.layers;
-		cameraPY.up.set( 0, 0, 1 );
-		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
-		this.add( cameraPY );
+// 		const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
+// 		cameraPY.layers = this.layers;
+// 		cameraPY.up.set( 0, 0, 1 );
+// 		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
+// 		this.add( cameraPY );
 
-		const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
-		cameraNY.layers = this.layers;
-		cameraNY.up.set( 0, 0, - 1 );
-		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
-		this.add( cameraNY );
+// 		const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
+// 		cameraNY.layers = this.layers;
+// 		cameraNY.up.set( 0, 0, - 1 );
+// 		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
+// 		this.add( cameraNY );
 
-		const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
-		cameraPZ.layers = this.layers;
-		cameraPZ.up.set( 0, - 1, 0 );
-		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
-		this.add( cameraPZ );
+// 		const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
+// 		cameraPZ.layers = this.layers;
+// 		cameraPZ.up.set( 0, - 1, 0 );
+// 		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
+// 		this.add( cameraPZ );
 
-		const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
-		cameraNZ.layers = this.layers;
-		cameraNZ.up.set( 0, - 1, 0 );
-		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
-		this.add( cameraNZ );
+// 		const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
+// 		cameraNZ.layers = this.layers;
+// 		cameraNZ.up.set( 0, - 1, 0 );
+// 		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
+// 		this.add( cameraNZ );
 
-	}
+// 	}
 
-	update( renderer, scene ) {
+// 	update( renderer, scene ) {
 
-		if ( this.parent === null ) this.updateMatrixWorld();
+// 		if ( this.parent === null ) this.updateMatrixWorld();
 
-		const renderTarget = this.renderTarget;
+// 		const renderTarget = this.renderTarget;
 
-		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;
+// 		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;
 
-		const currentRenderTarget = renderer.getRenderTarget();
+// 		const currentRenderTarget = renderer.getRenderTarget();
 
-		const currentToneMapping = renderer.toneMapping;
-		const currentXrEnabled = renderer.xr.enabled;
+// 		const currentToneMapping = renderer.toneMapping;
+// 		const currentXrEnabled = renderer.xr.enabled;
 
-		renderer.toneMapping = NoToneMapping;
-		renderer.xr.enabled = false;
+// 		renderer.toneMapping = NoToneMapping;
+// 		renderer.xr.enabled = false;
 
-		const generateMipmaps = renderTarget.texture.generateMipmaps;
+// 		const generateMipmaps = renderTarget.texture.generateMipmaps;
 
-		renderTarget.texture.generateMipmaps = false;
+// 		renderTarget.texture.generateMipmaps = false;
 
-		renderer.setRenderTarget( renderTarget, 0 );
-		renderer.render( scene, cameraPX );
+// 		renderer.setRenderTarget( renderTarget, 0 );
+// 		renderer.render( scene, cameraPX );
 
-		renderer.setRenderTarget( renderTarget, 1 );
-		renderer.render( scene, cameraNX );
+// 		renderer.setRenderTarget( renderTarget, 1 );
+// 		renderer.render( scene, cameraNX );
 
-		renderer.setRenderTarget( renderTarget, 2 );
-		renderer.render( scene, cameraPY );
+// 		renderer.setRenderTarget( renderTarget, 2 );
+// 		renderer.render( scene, cameraPY );
 
-		renderer.setRenderTarget( renderTarget, 3 );
-		renderer.render( scene, cameraNY );
+// 		renderer.setRenderTarget( renderTarget, 3 );
+// 		renderer.render( scene, cameraNY );
 
-		renderer.setRenderTarget( renderTarget, 4 );
-		renderer.render( scene, cameraPZ );
+// 		renderer.setRenderTarget( renderTarget, 4 );
+// 		renderer.render( scene, cameraPZ );
 
-		renderTarget.texture.generateMipmaps = generateMipmaps;
+// 		renderTarget.texture.generateMipmaps = generateMipmaps;
 
-		renderer.setRenderTarget( renderTarget, 5 );
-		renderer.render( scene, cameraNZ );
+// 		renderer.setRenderTarget( renderTarget, 5 );
+// 		renderer.render( scene, cameraNZ );
 
-		renderer.setRenderTarget( currentRenderTarget );
+// 		renderer.setRenderTarget( currentRenderTarget );
 
-		renderer.toneMapping = currentToneMapping;
-		renderer.xr.enabled = currentXrEnabled;
+// 		renderer.toneMapping = currentToneMapping;
+// 		renderer.xr.enabled = currentXrEnabled;
 
-		renderTarget.texture.needsPMREMUpdate = true;
+// 		renderTarget.texture.needsPMREMUpdate = true;
 
-	}
+// 	}
 
-}
+// }
 
-class CubeTexture extends Texture {
+// class CubeTexture extends Texture {
 
-	constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
+// 	constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
 
-		images = images !== undefined ? images : [];
-		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
+// 		images = images !== undefined ? images : [];
+// 		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
 
-		super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
+// 		super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
 
-		this.isCubeTexture = true;
+// 		this.isCubeTexture = true;
 
-		this.flipY = false;
+// 		this.flipY = false;
 
-	}
+// 	}
 
-	get images() {
+// 	get images() {
 
-		return this.image;
+// 		return this.image;
 
-	}
+// 	}
 
-	set images( value ) {
+// 	set images( value ) {
 
-		this.image = value;
+// 		this.image = value;
 
-	}
+// 	}
 
-}
+// }
 
-class WebGLCubeRenderTarget extends WebGLRenderTarget {
+// class WebGLCubeRenderTarget extends WebGLRenderTarget {
 
-	constructor( size, options = {} ) {
+// 	constructor( size, options = {} ) {
 
-		super( size, size, options );
+// 		super( size, size, options );
 
-		this.isWebGLCubeRenderTarget = true;
+// 		this.isWebGLCubeRenderTarget = true;
 
-		const image = { width: size, height: size, depth: 1 };
-		const images = [ image, image, image, image, image, image ];
+// 		const image = { width: size, height: size, depth: 1 };
+// 		const images = [ image, image, image, image, image, image ];
 
-		this.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
+// 		this.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
 
-		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
-		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
-		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
+// 		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
+// 		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
+// 		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
 
-		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
-		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
-		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
+// 		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
+// 		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
+// 		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
 
-		this.texture.isRenderTargetTexture = true;
+// 		this.texture.isRenderTargetTexture = true;
 
-		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
-		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
+// 		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
+// 		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
 
-	}
+// 	}
 
-	fromEquirectangularTexture( renderer, texture ) {
+// 	fromEquirectangularTexture( renderer, texture ) {
 
-		this.texture.type = texture.type;
-		this.texture.encoding = texture.encoding;
+// 		this.texture.type = texture.type;
+// 		this.texture.encoding = texture.encoding;
 
-		this.texture.generateMipmaps = texture.generateMipmaps;
-		this.texture.minFilter = texture.minFilter;
-		this.texture.magFilter = texture.magFilter;
+// 		this.texture.generateMipmaps = texture.generateMipmaps;
+// 		this.texture.minFilter = texture.minFilter;
+// 		this.texture.magFilter = texture.magFilter;
 
-		const shader = {
+// 		const shader = {
 
-			uniforms: {
-				tEquirect: { value: null },
-			},
+// 			uniforms: {
+// 				tEquirect: { value: null },
+// 			},
 
-			vertexShader: /* glsl */`
+// 			vertexShader: /* glsl */`
 
-				varying vec3 vWorldDirection;
+// 				varying vec3 vWorldDirection;
 
-				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
+// 				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
 
-					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
+// 					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
 
-				}
+// 				}
 
-				void main() {
+// 				void main() {
 
-					vWorldDirection = transformDirection( position, modelMatrix );
+// 					vWorldDirection = transformDirection( position, modelMatrix );
 
-					#include <begin_vertex>
-					#include <project_vertex>
+// 					#include <begin_vertex>
+// 					#include <project_vertex>
 
-				}
-			`,
+// 				}
+// 			`,
 
-			fragmentShader: /* glsl */`
+// 			fragmentShader: /* glsl */`
 
-				uniform sampler2D tEquirect;
+// 				uniform sampler2D tEquirect;
 
-				varying vec3 vWorldDirection;
+// 				varying vec3 vWorldDirection;
 
-				#include <common>
+// 				#include <common>
 
-				void main() {
+// 				void main() {
 
-					vec3 direction = normalize( vWorldDirection );
+// 					vec3 direction = normalize( vWorldDirection );
 
-					vec2 sampleUV = equirectUv( direction );
+// 					vec2 sampleUV = equirectUv( direction );
 
-					gl_FragColor = texture2D( tEquirect, sampleUV );
+// 					gl_FragColor = texture2D( tEquirect, sampleUV );
 
-				}
-			`
-		};
+// 				}
+// 			`
+// 		};
 
-		const geometry = new BoxGeometry( 5, 5, 5 );
+// 		const geometry = new BoxGeometry( 5, 5, 5 );
 
-		const material = new ShaderMaterial( {
+// 		const material = new ShaderMaterial( {
 
-			name: 'CubemapFromEquirect',
+// 			name: 'CubemapFromEquirect',
 
-			uniforms: cloneUniforms( shader.uniforms ),
-			vertexShader: shader.vertexShader,
-			fragmentShader: shader.fragmentShader,
-			side: BackSide,
-			blending: NoBlending
+// 			uniforms: cloneUniforms( shader.uniforms ),
+// 			vertexShader: shader.vertexShader,
+// 			fragmentShader: shader.fragmentShader,
+// 			side: BackSide,
+// 			blending: NoBlending
 
-		} );
+// 		} );
 
-		material.uniforms.tEquirect.value = texture;
+// 		material.uniforms.tEquirect.value = texture;
 
-		const mesh = new Mesh( geometry, material );
+// 		const mesh = new Mesh( geometry, material );
 
-		const currentMinFilter = texture.minFilter;
+// 		const currentMinFilter = texture.minFilter;
 
-		// Avoid blurred poles
-		if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;
+// 		// Avoid blurred poles
+// 		if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;
 
-		const camera = new CubeCamera( 1, 10, this );
-		camera.update( renderer, mesh );
+// 		const camera = new CubeCamera( 1, 10, this );
+// 		camera.update( renderer, mesh );
 
-		texture.minFilter = currentMinFilter;
+// 		texture.minFilter = currentMinFilter;
 
-		mesh.geometry.dispose();
-		mesh.material.dispose();
+// 		mesh.geometry.dispose();
+// 		mesh.material.dispose();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clear( renderer, color, depth, stencil ) {
+// 	clear( renderer, color, depth, stencil ) {
 
-		const currentRenderTarget = renderer.getRenderTarget();
+// 		const currentRenderTarget = renderer.getRenderTarget();
 
-		for ( let i = 0; i < 6; i ++ ) {
+// 		for ( let i = 0; i < 6; i ++ ) {
 
-			renderer.setRenderTarget( this, i );
+// 			renderer.setRenderTarget( this, i );
 
-			renderer.clear( color, depth, stencil );
+// 			renderer.clear( color, depth, stencil );
 
-		}
+// 		}
 
-		renderer.setRenderTarget( currentRenderTarget );
+// 		renderer.setRenderTarget( currentRenderTarget );
 
-	}
+// 	}
 
-}
+// }
 
-const _vector1 = /*@__PURE__*/ new Vector3();
-const _vector2 = /*@__PURE__*/ new Vector3();
-const _normalMatrix = /*@__PURE__*/ new Matrix3();
+// const _vector1 = /*@__PURE__*/ new Vector3();
+// const _vector2 = /*@__PURE__*/ new Vector3();
+// const _normalMatrix = /*@__PURE__*/ new Matrix3();
 
-class Plane {
+// class Plane {
 
-	constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {
+// 	constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {
 
-		this.isPlane = true;
+// 		this.isPlane = true;
 
-		// normal is assumed to be normalized
+// 		// normal is assumed to be normalized
 
-		this.normal = normal;
-		this.constant = constant;
+// 		this.normal = normal;
+// 		this.constant = constant;
 
-	}
+// 	}
 
-	set( normal, constant ) {
+// 	set( normal, constant ) {
 
-		this.normal.copy( normal );
-		this.constant = constant;
+// 		this.normal.copy( normal );
+// 		this.constant = constant;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setComponents( x, y, z, w ) {
+// 	setComponents( x, y, z, w ) {
 
-		this.normal.set( x, y, z );
-		this.constant = w;
+// 		this.normal.set( x, y, z );
+// 		this.constant = w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromNormalAndCoplanarPoint( normal, point ) {
+// 	setFromNormalAndCoplanarPoint( normal, point ) {
 
-		this.normal.copy( normal );
-		this.constant = - point.dot( this.normal );
+// 		this.normal.copy( normal );
+// 		this.constant = - point.dot( this.normal );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromCoplanarPoints( a, b, c ) {
+// 	setFromCoplanarPoints( a, b, c ) {
 
-		const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();
+// 		const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();
 
-		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
+// 		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
 
-		this.setFromNormalAndCoplanarPoint( normal, a );
+// 		this.setFromNormalAndCoplanarPoint( normal, a );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( plane ) {
+// 	copy( plane ) {
 
-		this.normal.copy( plane.normal );
-		this.constant = plane.constant;
+// 		this.normal.copy( plane.normal );
+// 		this.constant = plane.constant;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	normalize() {
+// 	normalize() {
 
-		// Note: will lead to a divide by zero if the plane is invalid.
+// 		// Note: will lead to a divide by zero if the plane is invalid.
 
-		const inverseNormalLength = 1.0 / this.normal.length();
-		this.normal.multiplyScalar( inverseNormalLength );
-		this.constant *= inverseNormalLength;
+// 		const inverseNormalLength = 1.0 / this.normal.length();
+// 		this.normal.multiplyScalar( inverseNormalLength );
+// 		this.constant *= inverseNormalLength;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	negate() {
+// 	negate() {
 
-		this.constant *= - 1;
-		this.normal.negate();
+// 		this.constant *= - 1;
+// 		this.normal.negate();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	distanceToPoint( point ) {
+// 	distanceToPoint( point ) {
 
-		return this.normal.dot( point ) + this.constant;
+// 		return this.normal.dot( point ) + this.constant;
 
-	}
+// 	}
 
-	distanceToSphere( sphere ) {
+// 	distanceToSphere( sphere ) {
 
-		return this.distanceToPoint( sphere.center ) - sphere.radius;
+// 		return this.distanceToPoint( sphere.center ) - sphere.radius;
 
-	}
+// 	}
 
-	projectPoint( point, target ) {
+// 	projectPoint( point, target ) {
 
-		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );
+// 		return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );
 
-	}
+// 	}
 
-	intersectLine( line, target ) {
+// 	intersectLine( line, target ) {
 
-		const direction = line.delta( _vector1 );
+// 		const direction = line.delta( _vector1 );
 
-		const denominator = this.normal.dot( direction );
+// 		const denominator = this.normal.dot( direction );
 
-		if ( denominator === 0 ) {
+// 		if ( denominator === 0 ) {
 
-			// line is coplanar, return origin
-			if ( this.distanceToPoint( line.start ) === 0 ) {
+// 			// line is coplanar, return origin
+// 			if ( this.distanceToPoint( line.start ) === 0 ) {
 
-				return target.copy( line.start );
+// 				return target.copy( line.start );
 
-			}
+// 			}
 
-			// Unsure if this is the correct method to handle this case.
-			return null;
+// 			// Unsure if this is the correct method to handle this case.
+// 			return null;
 
-		}
+// 		}
 
-		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
+// 		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
 
-		if ( t < 0 || t > 1 ) {
+// 		if ( t < 0 || t > 1 ) {
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		return target.copy( direction ).multiplyScalar( t ).add( line.start );
+// 		return target.copy( direction ).multiplyScalar( t ).add( line.start );
 
-	}
+// 	}
 
-	intersectsLine( line ) {
+// 	intersectsLine( line ) {
 
-		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
+// 		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
 
-		const startSign = this.distanceToPoint( line.start );
-		const endSign = this.distanceToPoint( line.end );
+// 		const startSign = this.distanceToPoint( line.start );
+// 		const endSign = this.distanceToPoint( line.end );
 
-		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
+// 		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
 
-	}
+// 	}
 
-	intersectsBox( box ) {
+// 	intersectsBox( box ) {
 
-		return box.intersectsPlane( this );
+// 		return box.intersectsPlane( this );
 
-	}
+// 	}
 
-	intersectsSphere( sphere ) {
+// 	intersectsSphere( sphere ) {
 
-		return sphere.intersectsPlane( this );
+// 		return sphere.intersectsPlane( this );
 
-	}
+// 	}
 
-	coplanarPoint( target ) {
+// 	coplanarPoint( target ) {
 
-		return target.copy( this.normal ).multiplyScalar( - this.constant );
+// 		return target.copy( this.normal ).multiplyScalar( - this.constant );
 
-	}
+// 	}
 
-	applyMatrix4( matrix, optionalNormalMatrix ) {
+// 	applyMatrix4( matrix, optionalNormalMatrix ) {
 
-		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );
+// 		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );
 
-		const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );
+// 		const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );
 
-		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();
+// 		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();
 
-		this.constant = - referencePoint.dot( normal );
+// 		this.constant = - referencePoint.dot( normal );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	translate( offset ) {
+// 	translate( offset ) {
 
-		this.constant -= offset.dot( this.normal );
+// 		this.constant -= offset.dot( this.normal );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( plane ) {
+// 	equals( plane ) {
 
-		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
+// 		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-const _sphere$2 = /*@__PURE__*/ new Sphere();
-const _vector$7 = /*@__PURE__*/ new Vector3();
+// const _sphere$2 = /*@__PURE__*/ new Sphere();
+// const _vector$7 = /*@__PURE__*/ new Vector3();
 
-class Frustum {
+// class Frustum {
 
-	constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {
+// 	constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {
 
-		this.planes = [ p0, p1, p2, p3, p4, p5 ];
+// 		this.planes = [ p0, p1, p2, p3, p4, p5 ];
 
-	}
+// 	}
 
-	set( p0, p1, p2, p3, p4, p5 ) {
+// 	set( p0, p1, p2, p3, p4, p5 ) {
 
-		const planes = this.planes;
+// 		const planes = this.planes;
 
-		planes[ 0 ].copy( p0 );
-		planes[ 1 ].copy( p1 );
-		planes[ 2 ].copy( p2 );
-		planes[ 3 ].copy( p3 );
-		planes[ 4 ].copy( p4 );
-		planes[ 5 ].copy( p5 );
+// 		planes[ 0 ].copy( p0 );
+// 		planes[ 1 ].copy( p1 );
+// 		planes[ 2 ].copy( p2 );
+// 		planes[ 3 ].copy( p3 );
+// 		planes[ 4 ].copy( p4 );
+// 		planes[ 5 ].copy( p5 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( frustum ) {
+// 	copy( frustum ) {
 
-		const planes = this.planes;
+// 		const planes = this.planes;
 
-		for ( let i = 0; i < 6; i ++ ) {
+// 		for ( let i = 0; i < 6; i ++ ) {
 
-			planes[ i ].copy( frustum.planes[ i ] );
+// 			planes[ i ].copy( frustum.planes[ i ] );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromProjectionMatrix( m ) {
+// 	setFromProjectionMatrix( m ) {
 
-		const planes = this.planes;
-		const me = m.elements;
-		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
-		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
-		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
-		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
+// 		const planes = this.planes;
+// 		const me = m.elements;
+// 		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
+// 		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
+// 		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
+// 		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
 
-		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
-		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
-		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
-		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
-		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
-		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
+// 		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
+// 		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
+// 		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
+// 		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
+// 		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
+// 		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	intersectsObject( object ) {
+// 	intersectsObject( object ) {
 
-		const geometry = object.geometry;
+// 		const geometry = object.geometry;
 
-		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
+// 		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
 
-		_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );
+// 		_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );
 
-		return this.intersectsSphere( _sphere$2 );
+// 		return this.intersectsSphere( _sphere$2 );
 
-	}
+// 	}
 
-	intersectsSprite( sprite ) {
+// 	intersectsSprite( sprite ) {
 
-		_sphere$2.center.set( 0, 0, 0 );
-		_sphere$2.radius = 0.7071067811865476;
-		_sphere$2.applyMatrix4( sprite.matrixWorld );
+// 		_sphere$2.center.set( 0, 0, 0 );
+// 		_sphere$2.radius = 0.7071067811865476;
+// 		_sphere$2.applyMatrix4( sprite.matrixWorld );
 
-		return this.intersectsSphere( _sphere$2 );
+// 		return this.intersectsSphere( _sphere$2 );
 
-	}
+// 	}
 
-	intersectsSphere( sphere ) {
+// 	intersectsSphere( sphere ) {
 
-		const planes = this.planes;
-		const center = sphere.center;
-		const negRadius = - sphere.radius;
+// 		const planes = this.planes;
+// 		const center = sphere.center;
+// 		const negRadius = - sphere.radius;
 
-		for ( let i = 0; i < 6; i ++ ) {
+// 		for ( let i = 0; i < 6; i ++ ) {
 
-			const distance = planes[ i ].distanceToPoint( center );
+// 			const distance = planes[ i ].distanceToPoint( center );
 
-			if ( distance < negRadius ) {
+// 			if ( distance < negRadius ) {
 
-				return false;
+// 				return false;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return true;
+// 		return true;
 
-	}
+// 	}
 
-	intersectsBox( box ) {
+// 	intersectsBox( box ) {
 
-		const planes = this.planes;
+// 		const planes = this.planes;
 
-		for ( let i = 0; i < 6; i ++ ) {
+// 		for ( let i = 0; i < 6; i ++ ) {
 
-			const plane = planes[ i ];
+// 			const plane = planes[ i ];
 
-			// corner at max distance
+// 			// corner at max distance
 
-			_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
-			_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
-			_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
+// 			_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
+// 			_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
+// 			_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
 
-			if ( plane.distanceToPoint( _vector$7 ) < 0 ) {
+// 			if ( plane.distanceToPoint( _vector$7 ) < 0 ) {
 
-				return false;
+// 				return false;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return true;
+// 		return true;
 
-	}
+// 	}
 
-	containsPoint( point ) {
+// 	containsPoint( point ) {
 
-		const planes = this.planes;
+// 		const planes = this.planes;
 
-		for ( let i = 0; i < 6; i ++ ) {
+// 		for ( let i = 0; i < 6; i ++ ) {
 
-			if ( planes[ i ].distanceToPoint( point ) < 0 ) {
+// 			if ( planes[ i ].distanceToPoint( point ) < 0 ) {
 
-				return false;
+// 				return false;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return true;
+// 		return true;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-function WebGLAnimation() {
+// function WebGLAnimation() {
 
-	let context = null;
-	let isAnimating = false;
-	let animationLoop = null;
-	let requestId = null;
+// 	let context = null;
+// 	let isAnimating = false;
+// 	let animationLoop = null;
+// 	let requestId = null;
 
-	function onAnimationFrame( time, frame ) {
+// 	function onAnimationFrame( time, frame ) {
 
-		animationLoop( time, frame );
+// 		animationLoop( time, frame );
 
-		requestId = context.requestAnimationFrame( onAnimationFrame );
+// 		requestId = context.requestAnimationFrame( onAnimationFrame );
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		start: function () {
+// 		start: function () {
 
-			if ( isAnimating === true ) return;
-			if ( animationLoop === null ) return;
+// 			if ( isAnimating === true ) return;
+// 			if ( animationLoop === null ) return;
 
-			requestId = context.requestAnimationFrame( onAnimationFrame );
+// 			requestId = context.requestAnimationFrame( onAnimationFrame );
 
-			isAnimating = true;
+// 			isAnimating = true;
 
-		},
+// 		},
 
-		stop: function () {
+// 		stop: function () {
 
-			context.cancelAnimationFrame( requestId );
+// 			context.cancelAnimationFrame( requestId );
 
-			isAnimating = false;
+// 			isAnimating = false;
 
-		},
+// 		},
 
-		setAnimationLoop: function ( callback ) {
+// 		setAnimationLoop: function ( callback ) {
 
-			animationLoop = callback;
+// 			animationLoop = callback;
 
-		},
+// 		},
 
-		setContext: function ( value ) {
+// 		setContext: function ( value ) {
 
-			context = value;
+// 			context = value;
 
-		}
+// 		}
 
-	};
+// 	};
 
-}
+// }
 
-function WebGLAttributes( gl, capabilities ) {
+// function WebGLAttributes( gl, capabilities ) {
 
-	const isWebGL2 = capabilities.isWebGL2;
+// 	const isWebGL2 = capabilities.isWebGL2;
 
-	const buffers = new WeakMap();
+// 	const buffers = new WeakMap();
 
-	function createBuffer( attribute, bufferType ) {
+// 	function createBuffer( attribute, bufferType ) {
 
-		const array = attribute.array;
-		const usage = attribute.usage;
+// 		const array = attribute.array;
+// 		const usage = attribute.usage;
 
-		const buffer = gl.createBuffer();
+// 		const buffer = gl.createBuffer();
 
-		gl.bindBuffer( bufferType, buffer );
-		gl.bufferData( bufferType, array, usage );
+// 		gl.bindBuffer( bufferType, buffer );
+// 		gl.bufferData( bufferType, array, usage );
 
-		attribute.onUploadCallback();
+// 		attribute.onUploadCallback();
 
-		let type;
+// 		let type;
 
-		if ( array instanceof Float32Array ) {
+// 		if ( array instanceof Float32Array ) {
 
-			type = 5126;
+// 			type = 5126;
 
-		} else if ( array instanceof Uint16Array ) {
+// 		} else if ( array instanceof Uint16Array ) {
 
-			if ( attribute.isFloat16BufferAttribute ) {
+// 			if ( attribute.isFloat16BufferAttribute ) {
 
-				if ( isWebGL2 ) {
+// 				if ( isWebGL2 ) {
 
-					type = 5131;
+// 					type = 5131;
 
-				} else {
+// 				} else {
 
-					throw new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );
+// 					throw new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				type = 5123;
+// 				type = 5123;
 
-			}
+// 			}
 
-		} else if ( array instanceof Int16Array ) {
+// 		} else if ( array instanceof Int16Array ) {
 
-			type = 5122;
+// 			type = 5122;
 
-		} else if ( array instanceof Uint32Array ) {
+// 		} else if ( array instanceof Uint32Array ) {
 
-			type = 5125;
+// 			type = 5125;
 
-		} else if ( array instanceof Int32Array ) {
+// 		} else if ( array instanceof Int32Array ) {
 
-			type = 5124;
+// 			type = 5124;
 
-		} else if ( array instanceof Int8Array ) {
+// 		} else if ( array instanceof Int8Array ) {
 
-			type = 5120;
+// 			type = 5120;
 
-		} else if ( array instanceof Uint8Array ) {
+// 		} else if ( array instanceof Uint8Array ) {
 
-			type = 5121;
+// 			type = 5121;
 
-		} else if ( array instanceof Uint8ClampedArray ) {
+// 		} else if ( array instanceof Uint8ClampedArray ) {
 
-			type = 5121;
+// 			type = 5121;
 
-		} else {
+// 		} else {
 
-			throw new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );
+// 			throw new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );
 
-		}
+// 		}
 
-		return {
-			buffer: buffer,
-			type: type,
-			bytesPerElement: array.BYTES_PER_ELEMENT,
-			version: attribute.version
-		};
+// 		return {
+// 			buffer: buffer,
+// 			type: type,
+// 			bytesPerElement: array.BYTES_PER_ELEMENT,
+// 			version: attribute.version
+// 		};
 
-	}
+// 	}
 
-	function updateBuffer( buffer, attribute, bufferType ) {
+// 	function updateBuffer( buffer, attribute, bufferType ) {
 
-		const array = attribute.array;
-		const updateRange = attribute.updateRange;
+// 		const array = attribute.array;
+// 		const updateRange = attribute.updateRange;
 
-		gl.bindBuffer( bufferType, buffer );
+// 		gl.bindBuffer( bufferType, buffer );
 
-		if ( updateRange.count === - 1 ) {
+// 		if ( updateRange.count === - 1 ) {
 
-			// Not using update ranges
+// 			// Not using update ranges
 
-			gl.bufferSubData( bufferType, 0, array );
+// 			gl.bufferSubData( bufferType, 0, array );
 
-		} else {
+// 		} else {
 
-			if ( isWebGL2 ) {
+// 			if ( isWebGL2 ) {
 
-				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
-					array, updateRange.offset, updateRange.count );
+// 				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
+// 					array, updateRange.offset, updateRange.count );
 
-			} else {
+// 			} else {
 
-				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
-					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );
+// 				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
+// 					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );
 
-			}
+// 			}
 
-			updateRange.count = - 1; // reset range
+// 			updateRange.count = - 1; // reset range
 
-		}
+// 		}
 
-	}
+// 	}
 
-	//
+// 	//
 
-	function get( attribute ) {
+// 	function get( attribute ) {
 
-		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
+// 		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
 
-		return buffers.get( attribute );
+// 		return buffers.get( attribute );
 
-	}
+// 	}
 
-	function remove( attribute ) {
+// 	function remove( attribute ) {
 
-		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
+// 		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
 
-		const data = buffers.get( attribute );
+// 		const data = buffers.get( attribute );
 
-		if ( data ) {
+// 		if ( data ) {
 
-			gl.deleteBuffer( data.buffer );
+// 			gl.deleteBuffer( data.buffer );
 
-			buffers.delete( attribute );
+// 			buffers.delete( attribute );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function update( attribute, bufferType ) {
+// 	function update( attribute, bufferType ) {
 
-		if ( attribute.isGLBufferAttribute ) {
+// 		if ( attribute.isGLBufferAttribute ) {
 
-			const cached = buffers.get( attribute );
+// 			const cached = buffers.get( attribute );
 
-			if ( ! cached || cached.version < attribute.version ) {
+// 			if ( ! cached || cached.version < attribute.version ) {
 
-				buffers.set( attribute, {
-					buffer: attribute.buffer,
-					type: attribute.type,
-					bytesPerElement: attribute.elementSize,
-					version: attribute.version
-				} );
+// 				buffers.set( attribute, {
+// 					buffer: attribute.buffer,
+// 					type: attribute.type,
+// 					bytesPerElement: attribute.elementSize,
+// 					version: attribute.version
+// 				} );
 
-			}
+// 			}
 
-			return;
+// 			return;
 
-		}
+// 		}
 
-		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
+// 		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
 
-		const data = buffers.get( attribute );
+// 		const data = buffers.get( attribute );
 
-		if ( data === undefined ) {
+// 		if ( data === undefined ) {
 
-			buffers.set( attribute, createBuffer( attribute, bufferType ) );
+// 			buffers.set( attribute, createBuffer( attribute, bufferType ) );
 
-		} else if ( data.version < attribute.version ) {
+// 		} else if ( data.version < attribute.version ) {
 
-			updateBuffer( data.buffer, attribute, bufferType );
+// 			updateBuffer( data.buffer, attribute, bufferType );
 
-			data.version = attribute.version;
+// 			data.version = attribute.version;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		get: get,
-		remove: remove,
-		update: update
+// 		get: get,
+// 		remove: remove,
+// 		update: update
 
-	};
+// 	};
 
-}
+// }
 
-class PlaneGeometry extends BufferGeometry {
+// class PlaneGeometry extends BufferGeometry {
 
-	constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {
+// 	constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {
 
-		super();
+// 		super();
 
-		this.type = 'PlaneGeometry';
+// 		this.type = 'PlaneGeometry';
 
-		this.parameters = {
-			width: width,
-			height: height,
-			widthSegments: widthSegments,
-			heightSegments: heightSegments
-		};
+// 		this.parameters = {
+// 			width: width,
+// 			height: height,
+// 			widthSegments: widthSegments,
+// 			heightSegments: heightSegments
+// 		};
 
-		const width_half = width / 2;
-		const height_half = height / 2;
+// 		const width_half = width / 2;
+// 		const height_half = height / 2;
 
-		const gridX = Math.floor( widthSegments );
-		const gridY = Math.floor( heightSegments );
+// 		const gridX = Math.floor( widthSegments );
+// 		const gridY = Math.floor( heightSegments );
 
-		const gridX1 = gridX + 1;
-		const gridY1 = gridY + 1;
+// 		const gridX1 = gridX + 1;
+// 		const gridY1 = gridY + 1;
 
-		const segment_width = width / gridX;
-		const segment_height = height / gridY;
+// 		const segment_width = width / gridX;
+// 		const segment_height = height / gridY;
 
-		//
+// 		//
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		for ( let iy = 0; iy < gridY1; iy ++ ) {
+// 		for ( let iy = 0; iy < gridY1; iy ++ ) {
 
-			const y = iy * segment_height - height_half;
+// 			const y = iy * segment_height - height_half;
 
-			for ( let ix = 0; ix < gridX1; ix ++ ) {
+// 			for ( let ix = 0; ix < gridX1; ix ++ ) {
 
-				const x = ix * segment_width - width_half;
+// 				const x = ix * segment_width - width_half;
 
-				vertices.push( x, - y, 0 );
+// 				vertices.push( x, - y, 0 );
 
-				normals.push( 0, 0, 1 );
+// 				normals.push( 0, 0, 1 );
 
-				uvs.push( ix / gridX );
-				uvs.push( 1 - ( iy / gridY ) );
+// 				uvs.push( ix / gridX );
+// 				uvs.push( 1 - ( iy / gridY ) );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		for ( let iy = 0; iy < gridY; iy ++ ) {
+// 		for ( let iy = 0; iy < gridY; iy ++ ) {
 
-			for ( let ix = 0; ix < gridX; ix ++ ) {
+// 			for ( let ix = 0; ix < gridX; ix ++ ) {
 
-				const a = ix + gridX1 * iy;
-				const b = ix + gridX1 * ( iy + 1 );
-				const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
-				const d = ( ix + 1 ) + gridX1 * iy;
+// 				const a = ix + gridX1 * iy;
+// 				const b = ix + gridX1 * ( iy + 1 );
+// 				const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
+// 				const d = ( ix + 1 ) + gridX1 * iy;
 
-				indices.push( a, b, d );
-				indices.push( b, c, d );
+// 				indices.push( a, b, d );
+// 				indices.push( b, c, d );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );
+// 		return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );
 
-	}
+// 	}
 
-}
+// }
 
-var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
+// var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
 
-var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
+// var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
 
-var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";
+// var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";
 
-var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";
+// var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";
 
-var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";
+// var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";
 
-var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
+// var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
 
-var begin_vertex = "vec3 transformed = vec3( position );";
+// var begin_vertex = "vec3 transformed = vec3( position );";
 
-var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
+// var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
 
-var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\n\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";
+// var bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\n\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";
 
-var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\t return vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";
+// var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\t return vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";
 
-var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
+// var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
 
-var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
+// var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
 
-var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
+// var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
 
-var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";
+// var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";
 
-var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";
+// var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";
 
-var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";
+// var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";
 
-var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";
+// var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";
 
-var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";
+// var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";
 
-var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";
+// var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";
 
-var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";
+// var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";
 
-var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";
+// var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";
 
-var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
+// var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
 
-var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
+// var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
 
-var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
+// var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
 
-var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
+// var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
 
-var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
+// var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
 
-var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
+// var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
 
-var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
+// var encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
 
-var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
+// var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
 
-var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";
+// var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";
 
-var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
+// var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
 
-var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
+// var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
 
-var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
+// var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
 
-var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";
+// var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";
 
-var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";
+// var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";
 
-var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
+// var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
 
-var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
+// var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
 
-var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";
+// var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";
 
-var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
+// var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
 
-var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
+// var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
 
-var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
+// var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
 
-var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert\n#define Material_LightProbeLOD( material )\t(0)";
+// var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert\n#define Material_LightProbeLOD( material )\t(0)";
 
-var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";
+// var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";
 
-var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";
+// var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";
 
-var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
+// var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
 
-var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";
+// var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";
 
-var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
+// var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
 
-var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
+// var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
 
-var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";
+// var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";
 
-var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
+// var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
 
-var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
+// var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
 
-var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";
+// var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";
 
-var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
+// var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
 
-var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
+// var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
 
-var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";
+// var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";
 
-var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
+// var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
 
-var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";
+// var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";
 
-var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";
+// var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";
 
-var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
+// var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
 
-var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
+// var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
 
-var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
+// var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
 
-var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
+// var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
 
-var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
+// var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
 
-var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";
+// var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";
 
-var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";
+// var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";
 
-var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";
+// var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";
 
-var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";
+// var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";
 
-var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";
+// var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";
 
-var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
+// var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
 
-var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
+// var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
 
-var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
+// var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
 
-var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";
+// var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";
 
-var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";
+// var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";
 
-var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";
+// var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";
 
-var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";
+// var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";
 
-var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";
+// var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";
 
-var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";
+// var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";
 
-var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
+// var output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
 
-var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
+// var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
 
-var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
+// var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
 
-var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
+// var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
 
-var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
+// var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
 
-var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
+// var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
 
-var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
+// var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
 
-var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
+// var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
 
-var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
+// var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n  uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
 
-var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";
+// var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n  uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n  varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";
 
-var shadowmap_vertex = "#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";
+// var shadowmap_vertex = "#if defined( USE_SHADOWMAP ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_COORDS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";
 
-var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";
+// var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";
 
-var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
+// var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
 
-var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif";
+// var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif";
 
-var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
+// var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
 
-var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
+// var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
 
-var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
+// var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
 
-var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
+// var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
 
-var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
+// var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
 
-var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
+// var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
 
-var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n#endif";
+// var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n#endif";
 
-var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";
+// var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";
 
-var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";
+// var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";
 
-var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";
+// var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";
 
-var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
+// var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
 
-var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
+// var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
 
-var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";
+// var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";
 
-var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
+// var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
 
-var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";
+// var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";
 
-const vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
+// const vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
 
-const fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\t#endif\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
+// const fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\t#endif\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
 
-const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
+// const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
 
-const fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
+// const fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
 
-const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";
+// const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";
 
-const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";
+// const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";
 
-const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
+// const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
 
-const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
+// const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
 
-const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
+// const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
 
-const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
+// const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
 
-const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
+// const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
 
-const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
+// const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
 
-const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
+// const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
 
-const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
+// const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
 
-const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
+// const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
 
-const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
+// const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
 
-const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
+// const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
 
-const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
+// const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
 
-const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
+// const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
 
-const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";
+// const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";
 
-const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
+// const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
 
-const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
+// const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
 
-const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";
+// const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";
 
-const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
+// const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
 
-const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
+// const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
 
-const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
+// const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
 
-const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
+// const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
 
-const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
+// const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
 
-const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
+// const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
 
-const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
+// const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
 
-const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
+// const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
 
-const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
+// const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
 
-const ShaderChunk = {
-	alphamap_fragment: alphamap_fragment,
-	alphamap_pars_fragment: alphamap_pars_fragment,
-	alphatest_fragment: alphatest_fragment,
-	alphatest_pars_fragment: alphatest_pars_fragment,
-	aomap_fragment: aomap_fragment,
-	aomap_pars_fragment: aomap_pars_fragment,
-	begin_vertex: begin_vertex,
-	beginnormal_vertex: beginnormal_vertex,
-	bsdfs: bsdfs,
-	iridescence_fragment: iridescence_fragment,
-	bumpmap_pars_fragment: bumpmap_pars_fragment,
-	clipping_planes_fragment: clipping_planes_fragment,
-	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
-	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
-	clipping_planes_vertex: clipping_planes_vertex,
-	color_fragment: color_fragment,
-	color_pars_fragment: color_pars_fragment,
-	color_pars_vertex: color_pars_vertex,
-	color_vertex: color_vertex,
-	common: common,
-	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
-	defaultnormal_vertex: defaultnormal_vertex,
-	displacementmap_pars_vertex: displacementmap_pars_vertex,
-	displacementmap_vertex: displacementmap_vertex,
-	emissivemap_fragment: emissivemap_fragment,
-	emissivemap_pars_fragment: emissivemap_pars_fragment,
-	encodings_fragment: encodings_fragment,
-	encodings_pars_fragment: encodings_pars_fragment,
-	envmap_fragment: envmap_fragment,
-	envmap_common_pars_fragment: envmap_common_pars_fragment,
-	envmap_pars_fragment: envmap_pars_fragment,
-	envmap_pars_vertex: envmap_pars_vertex,
-	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
-	envmap_vertex: envmap_vertex,
-	fog_vertex: fog_vertex,
-	fog_pars_vertex: fog_pars_vertex,
-	fog_fragment: fog_fragment,
-	fog_pars_fragment: fog_pars_fragment,
-	gradientmap_pars_fragment: gradientmap_pars_fragment,
-	lightmap_fragment: lightmap_fragment,
-	lightmap_pars_fragment: lightmap_pars_fragment,
-	lights_lambert_fragment: lights_lambert_fragment,
-	lights_lambert_pars_fragment: lights_lambert_pars_fragment,
-	lights_pars_begin: lights_pars_begin,
-	lights_toon_fragment: lights_toon_fragment,
-	lights_toon_pars_fragment: lights_toon_pars_fragment,
-	lights_phong_fragment: lights_phong_fragment,
-	lights_phong_pars_fragment: lights_phong_pars_fragment,
-	lights_physical_fragment: lights_physical_fragment,
-	lights_physical_pars_fragment: lights_physical_pars_fragment,
-	lights_fragment_begin: lights_fragment_begin,
-	lights_fragment_maps: lights_fragment_maps,
-	lights_fragment_end: lights_fragment_end,
-	logdepthbuf_fragment: logdepthbuf_fragment,
-	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
-	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
-	logdepthbuf_vertex: logdepthbuf_vertex,
-	map_fragment: map_fragment,
-	map_pars_fragment: map_pars_fragment,
-	map_particle_fragment: map_particle_fragment,
-	map_particle_pars_fragment: map_particle_pars_fragment,
-	metalnessmap_fragment: metalnessmap_fragment,
-	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
-	morphcolor_vertex: morphcolor_vertex,
-	morphnormal_vertex: morphnormal_vertex,
-	morphtarget_pars_vertex: morphtarget_pars_vertex,
-	morphtarget_vertex: morphtarget_vertex,
-	normal_fragment_begin: normal_fragment_begin,
-	normal_fragment_maps: normal_fragment_maps,
-	normal_pars_fragment: normal_pars_fragment,
-	normal_pars_vertex: normal_pars_vertex,
-	normal_vertex: normal_vertex,
-	normalmap_pars_fragment: normalmap_pars_fragment,
-	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
-	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
-	clearcoat_pars_fragment: clearcoat_pars_fragment,
-	iridescence_pars_fragment: iridescence_pars_fragment,
-	output_fragment: output_fragment,
-	packing: packing,
-	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
-	project_vertex: project_vertex,
-	dithering_fragment: dithering_fragment,
-	dithering_pars_fragment: dithering_pars_fragment,
-	roughnessmap_fragment: roughnessmap_fragment,
-	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
-	shadowmap_pars_fragment: shadowmap_pars_fragment,
-	shadowmap_pars_vertex: shadowmap_pars_vertex,
-	shadowmap_vertex: shadowmap_vertex,
-	shadowmask_pars_fragment: shadowmask_pars_fragment,
-	skinbase_vertex: skinbase_vertex,
-	skinning_pars_vertex: skinning_pars_vertex,
-	skinning_vertex: skinning_vertex,
-	skinnormal_vertex: skinnormal_vertex,
-	specularmap_fragment: specularmap_fragment,
-	specularmap_pars_fragment: specularmap_pars_fragment,
-	tonemapping_fragment: tonemapping_fragment,
-	tonemapping_pars_fragment: tonemapping_pars_fragment,
-	transmission_fragment: transmission_fragment,
-	transmission_pars_fragment: transmission_pars_fragment,
-	uv_pars_fragment: uv_pars_fragment,
-	uv_pars_vertex: uv_pars_vertex,
-	uv_vertex: uv_vertex,
-	uv2_pars_fragment: uv2_pars_fragment,
-	uv2_pars_vertex: uv2_pars_vertex,
-	uv2_vertex: uv2_vertex,
-	worldpos_vertex: worldpos_vertex,
-
-	background_vert: vertex$g,
-	background_frag: fragment$g,
-	cube_vert: vertex$f,
-	cube_frag: fragment$f,
-	depth_vert: vertex$e,
-	depth_frag: fragment$e,
-	distanceRGBA_vert: vertex$d,
-	distanceRGBA_frag: fragment$d,
-	equirect_vert: vertex$c,
-	equirect_frag: fragment$c,
-	linedashed_vert: vertex$b,
-	linedashed_frag: fragment$b,
-	meshbasic_vert: vertex$a,
-	meshbasic_frag: fragment$a,
-	meshlambert_vert: vertex$9,
-	meshlambert_frag: fragment$9,
-	meshmatcap_vert: vertex$8,
-	meshmatcap_frag: fragment$8,
-	meshnormal_vert: vertex$7,
-	meshnormal_frag: fragment$7,
-	meshphong_vert: vertex$6,
-	meshphong_frag: fragment$6,
-	meshphysical_vert: vertex$5,
-	meshphysical_frag: fragment$5,
-	meshtoon_vert: vertex$4,
-	meshtoon_frag: fragment$4,
-	points_vert: vertex$3,
-	points_frag: fragment$3,
-	shadow_vert: vertex$2,
-	shadow_frag: fragment$2,
-	sprite_vert: vertex$1,
-	sprite_frag: fragment$1
-};
-
-/**
- * Uniforms library for shared webgl shaders
- */
-
-const UniformsLib = {
-
-	common: {
-
-		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
-		opacity: { value: 1.0 },
-
-		map: { value: null },
-		uvTransform: { value: /*@__PURE__*/ new Matrix3() },
-		uv2Transform: { value: /*@__PURE__*/ new Matrix3() },
-
-		alphaMap: { value: null },
-		alphaTest: { value: 0 }
-
-	},
-
-	specularmap: {
-
-		specularMap: { value: null },
+// const ShaderChunk = {
+// 	alphamap_fragment: alphamap_fragment,
+// 	alphamap_pars_fragment: alphamap_pars_fragment,
+// 	alphatest_fragment: alphatest_fragment,
+// 	alphatest_pars_fragment: alphatest_pars_fragment,
+// 	aomap_fragment: aomap_fragment,
+// 	aomap_pars_fragment: aomap_pars_fragment,
+// 	begin_vertex: begin_vertex,
+// 	beginnormal_vertex: beginnormal_vertex,
+// 	bsdfs: bsdfs,
+// 	iridescence_fragment: iridescence_fragment,
+// 	bumpmap_pars_fragment: bumpmap_pars_fragment,
+// 	clipping_planes_fragment: clipping_planes_fragment,
+// 	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
+// 	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
+// 	clipping_planes_vertex: clipping_planes_vertex,
+// 	color_fragment: color_fragment,
+// 	color_pars_fragment: color_pars_fragment,
+// 	color_pars_vertex: color_pars_vertex,
+// 	color_vertex: color_vertex,
+// 	common: common,
+// 	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
+// 	defaultnormal_vertex: defaultnormal_vertex,
+// 	displacementmap_pars_vertex: displacementmap_pars_vertex,
+// 	displacementmap_vertex: displacementmap_vertex,
+// 	emissivemap_fragment: emissivemap_fragment,
+// 	emissivemap_pars_fragment: emissivemap_pars_fragment,
+// 	encodings_fragment: encodings_fragment,
+// 	encodings_pars_fragment: encodings_pars_fragment,
+// 	envmap_fragment: envmap_fragment,
+// 	envmap_common_pars_fragment: envmap_common_pars_fragment,
+// 	envmap_pars_fragment: envmap_pars_fragment,
+// 	envmap_pars_vertex: envmap_pars_vertex,
+// 	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
+// 	envmap_vertex: envmap_vertex,
+// 	fog_vertex: fog_vertex,
+// 	fog_pars_vertex: fog_pars_vertex,
+// 	fog_fragment: fog_fragment,
+// 	fog_pars_fragment: fog_pars_fragment,
+// 	gradientmap_pars_fragment: gradientmap_pars_fragment,
+// 	lightmap_fragment: lightmap_fragment,
+// 	lightmap_pars_fragment: lightmap_pars_fragment,
+// 	lights_lambert_fragment: lights_lambert_fragment,
+// 	lights_lambert_pars_fragment: lights_lambert_pars_fragment,
+// 	lights_pars_begin: lights_pars_begin,
+// 	lights_toon_fragment: lights_toon_fragment,
+// 	lights_toon_pars_fragment: lights_toon_pars_fragment,
+// 	lights_phong_fragment: lights_phong_fragment,
+// 	lights_phong_pars_fragment: lights_phong_pars_fragment,
+// 	lights_physical_fragment: lights_physical_fragment,
+// 	lights_physical_pars_fragment: lights_physical_pars_fragment,
+// 	lights_fragment_begin: lights_fragment_begin,
+// 	lights_fragment_maps: lights_fragment_maps,
+// 	lights_fragment_end: lights_fragment_end,
+// 	logdepthbuf_fragment: logdepthbuf_fragment,
+// 	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
+// 	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
+// 	logdepthbuf_vertex: logdepthbuf_vertex,
+// 	map_fragment: map_fragment,
+// 	map_pars_fragment: map_pars_fragment,
+// 	map_particle_fragment: map_particle_fragment,
+// 	map_particle_pars_fragment: map_particle_pars_fragment,
+// 	metalnessmap_fragment: metalnessmap_fragment,
+// 	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
+// 	morphcolor_vertex: morphcolor_vertex,
+// 	morphnormal_vertex: morphnormal_vertex,
+// 	morphtarget_pars_vertex: morphtarget_pars_vertex,
+// 	morphtarget_vertex: morphtarget_vertex,
+// 	normal_fragment_begin: normal_fragment_begin,
+// 	normal_fragment_maps: normal_fragment_maps,
+// 	normal_pars_fragment: normal_pars_fragment,
+// 	normal_pars_vertex: normal_pars_vertex,
+// 	normal_vertex: normal_vertex,
+// 	normalmap_pars_fragment: normalmap_pars_fragment,
+// 	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
+// 	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
+// 	clearcoat_pars_fragment: clearcoat_pars_fragment,
+// 	iridescence_pars_fragment: iridescence_pars_fragment,
+// 	output_fragment: output_fragment,
+// 	packing: packing,
+// 	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
+// 	project_vertex: project_vertex,
+// 	dithering_fragment: dithering_fragment,
+// 	dithering_pars_fragment: dithering_pars_fragment,
+// 	roughnessmap_fragment: roughnessmap_fragment,
+// 	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
+// 	shadowmap_pars_fragment: shadowmap_pars_fragment,
+// 	shadowmap_pars_vertex: shadowmap_pars_vertex,
+// 	shadowmap_vertex: shadowmap_vertex,
+// 	shadowmask_pars_fragment: shadowmask_pars_fragment,
+// 	skinbase_vertex: skinbase_vertex,
+// 	skinning_pars_vertex: skinning_pars_vertex,
+// 	skinning_vertex: skinning_vertex,
+// 	skinnormal_vertex: skinnormal_vertex,
+// 	specularmap_fragment: specularmap_fragment,
+// 	specularmap_pars_fragment: specularmap_pars_fragment,
+// 	tonemapping_fragment: tonemapping_fragment,
+// 	tonemapping_pars_fragment: tonemapping_pars_fragment,
+// 	transmission_fragment: transmission_fragment,
+// 	transmission_pars_fragment: transmission_pars_fragment,
+// 	uv_pars_fragment: uv_pars_fragment,
+// 	uv_pars_vertex: uv_pars_vertex,
+// 	uv_vertex: uv_vertex,
+// 	uv2_pars_fragment: uv2_pars_fragment,
+// 	uv2_pars_vertex: uv2_pars_vertex,
+// 	uv2_vertex: uv2_vertex,
+// 	worldpos_vertex: worldpos_vertex,
+
+// 	background_vert: vertex$g,
+// 	background_frag: fragment$g,
+// 	cube_vert: vertex$f,
+// 	cube_frag: fragment$f,
+// 	depth_vert: vertex$e,
+// 	depth_frag: fragment$e,
+// 	distanceRGBA_vert: vertex$d,
+// 	distanceRGBA_frag: fragment$d,
+// 	equirect_vert: vertex$c,
+// 	equirect_frag: fragment$c,
+// 	linedashed_vert: vertex$b,
+// 	linedashed_frag: fragment$b,
+// 	meshbasic_vert: vertex$a,
+// 	meshbasic_frag: fragment$a,
+// 	meshlambert_vert: vertex$9,
+// 	meshlambert_frag: fragment$9,
+// 	meshmatcap_vert: vertex$8,
+// 	meshmatcap_frag: fragment$8,
+// 	meshnormal_vert: vertex$7,
+// 	meshnormal_frag: fragment$7,
+// 	meshphong_vert: vertex$6,
+// 	meshphong_frag: fragment$6,
+// 	meshphysical_vert: vertex$5,
+// 	meshphysical_frag: fragment$5,
+// 	meshtoon_vert: vertex$4,
+// 	meshtoon_frag: fragment$4,
+// 	points_vert: vertex$3,
+// 	points_frag: fragment$3,
+// 	shadow_vert: vertex$2,
+// 	shadow_frag: fragment$2,
+// 	sprite_vert: vertex$1,
+// 	sprite_frag: fragment$1
+// };
+
+// /**
+//  * Uniforms library for shared webgl shaders
+//  */
+
+// const UniformsLib = {
+
+// 	common: {
+
+// 		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
+// 		opacity: { value: 1.0 },
+
+// 		map: { value: null },
+// 		uvTransform: { value: /*@__PURE__*/ new Matrix3() },
+// 		uv2Transform: { value: /*@__PURE__*/ new Matrix3() },
+
+// 		alphaMap: { value: null },
+// 		alphaTest: { value: 0 }
+
+// 	},
+
+// 	specularmap: {
+
+// 		specularMap: { value: null },
 
-	},
+// 	},
 
-	envmap: {
+// 	envmap: {
 
-		envMap: { value: null },
-		flipEnvMap: { value: - 1 },
-		reflectivity: { value: 1.0 }, // basic, lambert, phong
-		ior: { value: 1.5 }, // physical
-		refractionRatio: { value: 0.98 } // basic, lambert, phong
+// 		envMap: { value: null },
+// 		flipEnvMap: { value: - 1 },
+// 		reflectivity: { value: 1.0 }, // basic, lambert, phong
+// 		ior: { value: 1.5 }, // physical
+// 		refractionRatio: { value: 0.98 } // basic, lambert, phong
 
-	},
+// 	},
 
-	aomap: {
+// 	aomap: {
 
-		aoMap: { value: null },
-		aoMapIntensity: { value: 1 }
+// 		aoMap: { value: null },
+// 		aoMapIntensity: { value: 1 }
 
-	},
+// 	},
 
-	lightmap: {
+// 	lightmap: {
 
-		lightMap: { value: null },
-		lightMapIntensity: { value: 1 }
+// 		lightMap: { value: null },
+// 		lightMapIntensity: { value: 1 }
 
-	},
+// 	},
 
-	emissivemap: {
+// 	emissivemap: {
 
-		emissiveMap: { value: null }
+// 		emissiveMap: { value: null }
 
-	},
+// 	},
 
-	bumpmap: {
+// 	bumpmap: {
 
-		bumpMap: { value: null },
-		bumpScale: { value: 1 }
+// 		bumpMap: { value: null },
+// 		bumpScale: { value: 1 }
 
-	},
+// 	},
 
-	normalmap: {
+// 	normalmap: {
 
-		normalMap: { value: null },
-		normalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }
+// 		normalMap: { value: null },
+// 		normalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }
 
-	},
+// 	},
 
-	displacementmap: {
+// 	displacementmap: {
 
-		displacementMap: { value: null },
-		displacementScale: { value: 1 },
-		displacementBias: { value: 0 }
+// 		displacementMap: { value: null },
+// 		displacementScale: { value: 1 },
+// 		displacementBias: { value: 0 }
 
-	},
+// 	},
 
-	roughnessmap: {
+// 	roughnessmap: {
 
-		roughnessMap: { value: null }
+// 		roughnessMap: { value: null }
 
-	},
+// 	},
 
-	metalnessmap: {
+// 	metalnessmap: {
 
-		metalnessMap: { value: null }
+// 		metalnessMap: { value: null }
 
-	},
+// 	},
 
-	gradientmap: {
+// 	gradientmap: {
 
-		gradientMap: { value: null }
+// 		gradientMap: { value: null }
 
-	},
+// 	},
 
-	fog: {
+// 	fog: {
 
-		fogDensity: { value: 0.00025 },
-		fogNear: { value: 1 },
-		fogFar: { value: 2000 },
-		fogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }
+// 		fogDensity: { value: 0.00025 },
+// 		fogNear: { value: 1 },
+// 		fogFar: { value: 2000 },
+// 		fogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }
 
-	},
+// 	},
 
-	lights: {
+// 	lights: {
 
-		ambientLightColor: { value: [] },
+// 		ambientLightColor: { value: [] },
 
-		lightProbe: { value: [] },
+// 		lightProbe: { value: [] },
 
-		directionalLights: { value: [], properties: {
-			direction: {},
-			color: {}
-		} },
+// 		directionalLights: { value: [], properties: {
+// 			direction: {},
+// 			color: {}
+// 		} },
 
-		directionalLightShadows: { value: [], properties: {
-			shadowBias: {},
-			shadowNormalBias: {},
-			shadowRadius: {},
-			shadowMapSize: {}
-		} },
+// 		directionalLightShadows: { value: [], properties: {
+// 			shadowBias: {},
+// 			shadowNormalBias: {},
+// 			shadowRadius: {},
+// 			shadowMapSize: {}
+// 		} },
 
-		directionalShadowMap: { value: [] },
-		directionalShadowMatrix: { value: [] },
+// 		directionalShadowMap: { value: [] },
+// 		directionalShadowMatrix: { value: [] },
 
-		spotLights: { value: [], properties: {
-			color: {},
-			position: {},
-			direction: {},
-			distance: {},
-			coneCos: {},
-			penumbraCos: {},
-			decay: {}
-		} },
+// 		spotLights: { value: [], properties: {
+// 			color: {},
+// 			position: {},
+// 			direction: {},
+// 			distance: {},
+// 			coneCos: {},
+// 			penumbraCos: {},
+// 			decay: {}
+// 		} },
 
-		spotLightShadows: { value: [], properties: {
-			shadowBias: {},
-			shadowNormalBias: {},
-			shadowRadius: {},
-			shadowMapSize: {}
-		} },
+// 		spotLightShadows: { value: [], properties: {
+// 			shadowBias: {},
+// 			shadowNormalBias: {},
+// 			shadowRadius: {},
+// 			shadowMapSize: {}
+// 		} },
 
-		spotLightMap: { value: [] },
-		spotShadowMap: { value: [] },
-		spotLightMatrix: { value: [] },
+// 		spotLightMap: { value: [] },
+// 		spotShadowMap: { value: [] },
+// 		spotLightMatrix: { value: [] },
 
-		pointLights: { value: [], properties: {
-			color: {},
-			position: {},
-			decay: {},
-			distance: {}
-		} },
+// 		pointLights: { value: [], properties: {
+// 			color: {},
+// 			position: {},
+// 			decay: {},
+// 			distance: {}
+// 		} },
 
-		pointLightShadows: { value: [], properties: {
-			shadowBias: {},
-			shadowNormalBias: {},
-			shadowRadius: {},
-			shadowMapSize: {},
-			shadowCameraNear: {},
-			shadowCameraFar: {}
-		} },
+// 		pointLightShadows: { value: [], properties: {
+// 			shadowBias: {},
+// 			shadowNormalBias: {},
+// 			shadowRadius: {},
+// 			shadowMapSize: {},
+// 			shadowCameraNear: {},
+// 			shadowCameraFar: {}
+// 		} },
 
-		pointShadowMap: { value: [] },
-		pointShadowMatrix: { value: [] },
+// 		pointShadowMap: { value: [] },
+// 		pointShadowMatrix: { value: [] },
 
-		hemisphereLights: { value: [], properties: {
-			direction: {},
-			skyColor: {},
-			groundColor: {}
-		} },
-
-		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
-		rectAreaLights: { value: [], properties: {
-			color: {},
-			position: {},
-			width: {},
-			height: {}
-		} },
-
-		ltc_1: { value: null },
-		ltc_2: { value: null }
-
-	},
-
-	points: {
-
-		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
-		opacity: { value: 1.0 },
-		size: { value: 1.0 },
-		scale: { value: 1.0 },
-		map: { value: null },
-		alphaMap: { value: null },
-		alphaTest: { value: 0 },
-		uvTransform: { value: /*@__PURE__*/ new Matrix3() }
-
-	},
-
-	sprite: {
-
-		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
-		opacity: { value: 1.0 },
-		center: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },
-		rotation: { value: 0.0 },
-		map: { value: null },
-		alphaMap: { value: null },
-		alphaTest: { value: 0 },
-		uvTransform: { value: /*@__PURE__*/ new Matrix3() }
-
-	}
-
-};
-
-const ShaderLib = {
-
-	basic: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.specularmap,
-			UniformsLib.envmap,
-			UniformsLib.aomap,
-			UniformsLib.lightmap,
-			UniformsLib.fog
-		] ),
-
-		vertexShader: ShaderChunk.meshbasic_vert,
-		fragmentShader: ShaderChunk.meshbasic_frag
-
-	},
-
-	lambert: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.specularmap,
-			UniformsLib.envmap,
-			UniformsLib.aomap,
-			UniformsLib.lightmap,
-			UniformsLib.emissivemap,
-			UniformsLib.bumpmap,
-			UniformsLib.normalmap,
-			UniformsLib.displacementmap,
-			UniformsLib.fog,
-			UniformsLib.lights,
-			{
-				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
-			}
-		] ),
-
-		vertexShader: ShaderChunk.meshlambert_vert,
-		fragmentShader: ShaderChunk.meshlambert_frag
-
-	},
-
-	phong: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.specularmap,
-			UniformsLib.envmap,
-			UniformsLib.aomap,
-			UniformsLib.lightmap,
-			UniformsLib.emissivemap,
-			UniformsLib.bumpmap,
-			UniformsLib.normalmap,
-			UniformsLib.displacementmap,
-			UniformsLib.fog,
-			UniformsLib.lights,
-			{
-				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
-				specular: { value: /*@__PURE__*/ new Color( 0x111111 ) },
-				shininess: { value: 30 }
-			}
-		] ),
-
-		vertexShader: ShaderChunk.meshphong_vert,
-		fragmentShader: ShaderChunk.meshphong_frag
-
-	},
-
-	standard: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.envmap,
-			UniformsLib.aomap,
-			UniformsLib.lightmap,
-			UniformsLib.emissivemap,
-			UniformsLib.bumpmap,
-			UniformsLib.normalmap,
-			UniformsLib.displacementmap,
-			UniformsLib.roughnessmap,
-			UniformsLib.metalnessmap,
-			UniformsLib.fog,
-			UniformsLib.lights,
-			{
-				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
-				roughness: { value: 1.0 },
-				metalness: { value: 0.0 },
-				envMapIntensity: { value: 1 } // temporary
-			}
-		] ),
-
-		vertexShader: ShaderChunk.meshphysical_vert,
-		fragmentShader: ShaderChunk.meshphysical_frag
-
-	},
-
-	toon: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.aomap,
-			UniformsLib.lightmap,
-			UniformsLib.emissivemap,
-			UniformsLib.bumpmap,
-			UniformsLib.normalmap,
-			UniformsLib.displacementmap,
-			UniformsLib.gradientmap,
-			UniformsLib.fog,
-			UniformsLib.lights,
-			{
-				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
-			}
-		] ),
-
-		vertexShader: ShaderChunk.meshtoon_vert,
-		fragmentShader: ShaderChunk.meshtoon_frag
-
-	},
-
-	matcap: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.bumpmap,
-			UniformsLib.normalmap,
-			UniformsLib.displacementmap,
-			UniformsLib.fog,
-			{
-				matcap: { value: null }
-			}
-		] ),
-
-		vertexShader: ShaderChunk.meshmatcap_vert,
-		fragmentShader: ShaderChunk.meshmatcap_frag
-
-	},
-
-	points: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.points,
-			UniformsLib.fog
-		] ),
-
-		vertexShader: ShaderChunk.points_vert,
-		fragmentShader: ShaderChunk.points_frag
-
-	},
-
-	dashed: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.fog,
-			{
-				scale: { value: 1 },
-				dashSize: { value: 1 },
-				totalSize: { value: 2 }
-			}
-		] ),
+// 		hemisphereLights: { value: [], properties: {
+// 			direction: {},
+// 			skyColor: {},
+// 			groundColor: {}
+// 		} },
+
+// 		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
+// 		rectAreaLights: { value: [], properties: {
+// 			color: {},
+// 			position: {},
+// 			width: {},
+// 			height: {}
+// 		} },
+
+// 		ltc_1: { value: null },
+// 		ltc_2: { value: null }
+
+// 	},
+
+// 	points: {
+
+// 		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
+// 		opacity: { value: 1.0 },
+// 		size: { value: 1.0 },
+// 		scale: { value: 1.0 },
+// 		map: { value: null },
+// 		alphaMap: { value: null },
+// 		alphaTest: { value: 0 },
+// 		uvTransform: { value: /*@__PURE__*/ new Matrix3() }
+
+// 	},
+
+// 	sprite: {
+
+// 		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
+// 		opacity: { value: 1.0 },
+// 		center: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },
+// 		rotation: { value: 0.0 },
+// 		map: { value: null },
+// 		alphaMap: { value: null },
+// 		alphaTest: { value: 0 },
+// 		uvTransform: { value: /*@__PURE__*/ new Matrix3() }
+
+// 	}
+
+// };
+
+// const ShaderLib = {
+
+// 	basic: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.specularmap,
+// 			UniformsLib.envmap,
+// 			UniformsLib.aomap,
+// 			UniformsLib.lightmap,
+// 			UniformsLib.fog
+// 		] ),
+
+// 		vertexShader: ShaderChunk.meshbasic_vert,
+// 		fragmentShader: ShaderChunk.meshbasic_frag
+
+// 	},
+
+// 	lambert: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.specularmap,
+// 			UniformsLib.envmap,
+// 			UniformsLib.aomap,
+// 			UniformsLib.lightmap,
+// 			UniformsLib.emissivemap,
+// 			UniformsLib.bumpmap,
+// 			UniformsLib.normalmap,
+// 			UniformsLib.displacementmap,
+// 			UniformsLib.fog,
+// 			UniformsLib.lights,
+// 			{
+// 				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
+// 			}
+// 		] ),
+
+// 		vertexShader: ShaderChunk.meshlambert_vert,
+// 		fragmentShader: ShaderChunk.meshlambert_frag
+
+// 	},
+
+// 	phong: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.specularmap,
+// 			UniformsLib.envmap,
+// 			UniformsLib.aomap,
+// 			UniformsLib.lightmap,
+// 			UniformsLib.emissivemap,
+// 			UniformsLib.bumpmap,
+// 			UniformsLib.normalmap,
+// 			UniformsLib.displacementmap,
+// 			UniformsLib.fog,
+// 			UniformsLib.lights,
+// 			{
+// 				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
+// 				specular: { value: /*@__PURE__*/ new Color( 0x111111 ) },
+// 				shininess: { value: 30 }
+// 			}
+// 		] ),
+
+// 		vertexShader: ShaderChunk.meshphong_vert,
+// 		fragmentShader: ShaderChunk.meshphong_frag
+
+// 	},
+
+// 	standard: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.envmap,
+// 			UniformsLib.aomap,
+// 			UniformsLib.lightmap,
+// 			UniformsLib.emissivemap,
+// 			UniformsLib.bumpmap,
+// 			UniformsLib.normalmap,
+// 			UniformsLib.displacementmap,
+// 			UniformsLib.roughnessmap,
+// 			UniformsLib.metalnessmap,
+// 			UniformsLib.fog,
+// 			UniformsLib.lights,
+// 			{
+// 				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
+// 				roughness: { value: 1.0 },
+// 				metalness: { value: 0.0 },
+// 				envMapIntensity: { value: 1 } // temporary
+// 			}
+// 		] ),
+
+// 		vertexShader: ShaderChunk.meshphysical_vert,
+// 		fragmentShader: ShaderChunk.meshphysical_frag
+
+// 	},
+
+// 	toon: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.aomap,
+// 			UniformsLib.lightmap,
+// 			UniformsLib.emissivemap,
+// 			UniformsLib.bumpmap,
+// 			UniformsLib.normalmap,
+// 			UniformsLib.displacementmap,
+// 			UniformsLib.gradientmap,
+// 			UniformsLib.fog,
+// 			UniformsLib.lights,
+// 			{
+// 				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
+// 			}
+// 		] ),
+
+// 		vertexShader: ShaderChunk.meshtoon_vert,
+// 		fragmentShader: ShaderChunk.meshtoon_frag
+
+// 	},
+
+// 	matcap: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.bumpmap,
+// 			UniformsLib.normalmap,
+// 			UniformsLib.displacementmap,
+// 			UniformsLib.fog,
+// 			{
+// 				matcap: { value: null }
+// 			}
+// 		] ),
+
+// 		vertexShader: ShaderChunk.meshmatcap_vert,
+// 		fragmentShader: ShaderChunk.meshmatcap_frag
+
+// 	},
+
+// 	points: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.points,
+// 			UniformsLib.fog
+// 		] ),
+
+// 		vertexShader: ShaderChunk.points_vert,
+// 		fragmentShader: ShaderChunk.points_frag
+
+// 	},
+
+// 	dashed: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.fog,
+// 			{
+// 				scale: { value: 1 },
+// 				dashSize: { value: 1 },
+// 				totalSize: { value: 2 }
+// 			}
+// 		] ),
 
-		vertexShader: ShaderChunk.linedashed_vert,
-		fragmentShader: ShaderChunk.linedashed_frag
+// 		vertexShader: ShaderChunk.linedashed_vert,
+// 		fragmentShader: ShaderChunk.linedashed_frag
 
-	},
+// 	},
 
-	depth: {
+// 	depth: {
 
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.displacementmap
-		] ),
-
-		vertexShader: ShaderChunk.depth_vert,
-		fragmentShader: ShaderChunk.depth_frag
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.displacementmap
+// 		] ),
+
+// 		vertexShader: ShaderChunk.depth_vert,
+// 		fragmentShader: ShaderChunk.depth_frag
 
-	},
+// 	},
 
-	normal: {
+// 	normal: {
 
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.bumpmap,
-			UniformsLib.normalmap,
-			UniformsLib.displacementmap,
-			{
-				opacity: { value: 1.0 }
-			}
-		] ),
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.bumpmap,
+// 			UniformsLib.normalmap,
+// 			UniformsLib.displacementmap,
+// 			{
+// 				opacity: { value: 1.0 }
+// 			}
+// 		] ),
 
-		vertexShader: ShaderChunk.meshnormal_vert,
-		fragmentShader: ShaderChunk.meshnormal_frag
+// 		vertexShader: ShaderChunk.meshnormal_vert,
+// 		fragmentShader: ShaderChunk.meshnormal_frag
 
-	},
+// 	},
 
-	sprite: {
+// 	sprite: {
 
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.sprite,
-			UniformsLib.fog
-		] ),
-
-		vertexShader: ShaderChunk.sprite_vert,
-		fragmentShader: ShaderChunk.sprite_frag
-
-	},
-
-	background: {
-
-		uniforms: {
-			uvTransform: { value: /*@__PURE__*/ new Matrix3() },
-			t2D: { value: null },
-		},
-
-		vertexShader: ShaderChunk.background_vert,
-		fragmentShader: ShaderChunk.background_frag
-
-	},
-
-	cube: {
-
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.envmap,
-			{
-				opacity: { value: 1.0 }
-			}
-		] ),
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.sprite,
+// 			UniformsLib.fog
+// 		] ),
+
+// 		vertexShader: ShaderChunk.sprite_vert,
+// 		fragmentShader: ShaderChunk.sprite_frag
+
+// 	},
+
+// 	background: {
+
+// 		uniforms: {
+// 			uvTransform: { value: /*@__PURE__*/ new Matrix3() },
+// 			t2D: { value: null },
+// 		},
+
+// 		vertexShader: ShaderChunk.background_vert,
+// 		fragmentShader: ShaderChunk.background_frag
+
+// 	},
+
+// 	cube: {
+
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.envmap,
+// 			{
+// 				opacity: { value: 1.0 }
+// 			}
+// 		] ),
 
-		vertexShader: ShaderChunk.cube_vert,
-		fragmentShader: ShaderChunk.cube_frag
+// 		vertexShader: ShaderChunk.cube_vert,
+// 		fragmentShader: ShaderChunk.cube_frag
 
-	},
+// 	},
 
-	equirect: {
+// 	equirect: {
 
-		uniforms: {
-			tEquirect: { value: null },
-		},
+// 		uniforms: {
+// 			tEquirect: { value: null },
+// 		},
 
-		vertexShader: ShaderChunk.equirect_vert,
-		fragmentShader: ShaderChunk.equirect_frag
+// 		vertexShader: ShaderChunk.equirect_vert,
+// 		fragmentShader: ShaderChunk.equirect_frag
 
-	},
+// 	},
 
-	distanceRGBA: {
+// 	distanceRGBA: {
 
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.common,
-			UniformsLib.displacementmap,
-			{
-				referencePosition: { value: /*@__PURE__*/ new Vector3() },
-				nearDistance: { value: 1 },
-				farDistance: { value: 1000 }
-			}
-		] ),
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.common,
+// 			UniformsLib.displacementmap,
+// 			{
+// 				referencePosition: { value: /*@__PURE__*/ new Vector3() },
+// 				nearDistance: { value: 1 },
+// 				farDistance: { value: 1000 }
+// 			}
+// 		] ),
 
-		vertexShader: ShaderChunk.distanceRGBA_vert,
-		fragmentShader: ShaderChunk.distanceRGBA_frag
+// 		vertexShader: ShaderChunk.distanceRGBA_vert,
+// 		fragmentShader: ShaderChunk.distanceRGBA_frag
 
-	},
+// 	},
 
-	shadow: {
+// 	shadow: {
 
-		uniforms: /*@__PURE__*/ mergeUniforms( [
-			UniformsLib.lights,
-			UniformsLib.fog,
-			{
-				color: { value: /*@__PURE__*/ new Color( 0x00000 ) },
-				opacity: { value: 1.0 }
-			},
-		] ),
+// 		uniforms: /*@__PURE__*/ mergeUniforms( [
+// 			UniformsLib.lights,
+// 			UniformsLib.fog,
+// 			{
+// 				color: { value: /*@__PURE__*/ new Color( 0x00000 ) },
+// 				opacity: { value: 1.0 }
+// 			},
+// 		] ),
 
-		vertexShader: ShaderChunk.shadow_vert,
-		fragmentShader: ShaderChunk.shadow_frag
+// 		vertexShader: ShaderChunk.shadow_vert,
+// 		fragmentShader: ShaderChunk.shadow_frag
 
-	}
+// 	}
 
-};
+// };
 
-ShaderLib.physical = {
+// ShaderLib.physical = {
 
-	uniforms: /*@__PURE__*/ mergeUniforms( [
-		ShaderLib.standard.uniforms,
-		{
-			clearcoat: { value: 0 },
-			clearcoatMap: { value: null },
-			clearcoatRoughness: { value: 0 },
-			clearcoatRoughnessMap: { value: null },
-			clearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },
-			clearcoatNormalMap: { value: null },
-			iridescence: { value: 0 },
-			iridescenceMap: { value: null },
-			iridescenceIOR: { value: 1.3 },
-			iridescenceThicknessMinimum: { value: 100 },
-			iridescenceThicknessMaximum: { value: 400 },
-			iridescenceThicknessMap: { value: null },
-			sheen: { value: 0 },
-			sheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
-			sheenColorMap: { value: null },
-			sheenRoughness: { value: 1 },
-			sheenRoughnessMap: { value: null },
-			transmission: { value: 0 },
-			transmissionMap: { value: null },
-			transmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },
-			transmissionSamplerMap: { value: null },
-			thickness: { value: 0 },
-			thicknessMap: { value: null },
-			attenuationDistance: { value: 0 },
-			attenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
-			specularIntensity: { value: 1 },
-			specularIntensityMap: { value: null },
-			specularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },
-			specularColorMap: { value: null },
-		}
-	] ),
+// 	uniforms: /*@__PURE__*/ mergeUniforms( [
+// 		ShaderLib.standard.uniforms,
+// 		{
+// 			clearcoat: { value: 0 },
+// 			clearcoatMap: { value: null },
+// 			clearcoatRoughness: { value: 0 },
+// 			clearcoatRoughnessMap: { value: null },
+// 			clearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },
+// 			clearcoatNormalMap: { value: null },
+// 			iridescence: { value: 0 },
+// 			iridescenceMap: { value: null },
+// 			iridescenceIOR: { value: 1.3 },
+// 			iridescenceThicknessMinimum: { value: 100 },
+// 			iridescenceThicknessMaximum: { value: 400 },
+// 			iridescenceThicknessMap: { value: null },
+// 			sheen: { value: 0 },
+// 			sheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
+// 			sheenColorMap: { value: null },
+// 			sheenRoughness: { value: 1 },
+// 			sheenRoughnessMap: { value: null },
+// 			transmission: { value: 0 },
+// 			transmissionMap: { value: null },
+// 			transmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },
+// 			transmissionSamplerMap: { value: null },
+// 			thickness: { value: 0 },
+// 			thicknessMap: { value: null },
+// 			attenuationDistance: { value: 0 },
+// 			attenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
+// 			specularIntensity: { value: 1 },
+// 			specularIntensityMap: { value: null },
+// 			specularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },
+// 			specularColorMap: { value: null },
+// 		}
+// 	] ),
 
-	vertexShader: ShaderChunk.meshphysical_vert,
-	fragmentShader: ShaderChunk.meshphysical_frag
+// 	vertexShader: ShaderChunk.meshphysical_vert,
+// 	fragmentShader: ShaderChunk.meshphysical_frag
 
-};
+// };
 
-function WebGLBackground( renderer, cubemaps, state, objects, alpha, premultipliedAlpha ) {
+// function WebGLBackground( renderer, cubemaps, state, objects, alpha, premultipliedAlpha ) {
 
-	const clearColor = new Color( 0x000000 );
-	let clearAlpha = alpha === true ? 0 : 1;
+// 	const clearColor = new Color( 0x000000 );
+// 	let clearAlpha = alpha === true ? 0 : 1;
 
-	let planeMesh;
-	let boxMesh;
+// 	let planeMesh;
+// 	let boxMesh;
 
-	let currentBackground = null;
-	let currentBackgroundVersion = 0;
-	let currentTonemapping = null;
+// 	let currentBackground = null;
+// 	let currentBackgroundVersion = 0;
+// 	let currentTonemapping = null;
 
-	function render( renderList, scene ) {
+// 	function render( renderList, scene ) {
 
-		let forceClear = false;
-		let background = scene.isScene === true ? scene.background : null;
+// 		let forceClear = false;
+// 		let background = scene.isScene === true ? scene.background : null;
 
-		if ( background && background.isTexture ) {
+// 		if ( background && background.isTexture ) {
 
-			background = cubemaps.get( background );
+// 			background = cubemaps.get( background );
 
-		}
+// 		}
 
-		// Ignore background in AR
-		// TODO: Reconsider this.
+// 		// Ignore background in AR
+// 		// TODO: Reconsider this.
 
-		const xr = renderer.xr;
-		const session = xr.getSession && xr.getSession();
+// 		const xr = renderer.xr;
+// 		const session = xr.getSession && xr.getSession();
 
-		if ( session && session.environmentBlendMode === 'additive' ) {
+// 		if ( session && session.environmentBlendMode === 'additive' ) {
 
-			background = null;
+// 			background = null;
 
-		}
+// 		}
 
-		if ( background === null ) {
+// 		if ( background === null ) {
 
-			setClear( clearColor, clearAlpha );
+// 			setClear( clearColor, clearAlpha );
 
-		} else if ( background && background.isColor ) {
+// 		} else if ( background && background.isColor ) {
 
-			setClear( background, 1 );
-			forceClear = true;
+// 			setClear( background, 1 );
+// 			forceClear = true;
 
-		}
+// 		}
 
-		if ( renderer.autoClear || forceClear ) {
+// 		if ( renderer.autoClear || forceClear ) {
 
-			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
+// 			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
 
-		}
+// 		}
 
-		if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {
+// 		if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {
 
-			if ( boxMesh === undefined ) {
+// 			if ( boxMesh === undefined ) {
 
-				boxMesh = new Mesh(
-					new BoxGeometry( 1, 1, 1 ),
-					new ShaderMaterial( {
-						name: 'BackgroundCubeMaterial',
-						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
-						vertexShader: ShaderLib.cube.vertexShader,
-						fragmentShader: ShaderLib.cube.fragmentShader,
-						side: BackSide,
-						depthTest: false,
-						depthWrite: false,
-						fog: false
-					} )
-				);
+// 				boxMesh = new Mesh(
+// 					new BoxGeometry( 1, 1, 1 ),
+// 					new ShaderMaterial( {
+// 						name: 'BackgroundCubeMaterial',
+// 						uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
+// 						vertexShader: ShaderLib.cube.vertexShader,
+// 						fragmentShader: ShaderLib.cube.fragmentShader,
+// 						side: BackSide,
+// 						depthTest: false,
+// 						depthWrite: false,
+// 						fog: false
+// 					} )
+// 				);
 
-				boxMesh.geometry.deleteAttribute( 'normal' );
-				boxMesh.geometry.deleteAttribute( 'uv' );
+// 				boxMesh.geometry.deleteAttribute( 'normal' );
+// 				boxMesh.geometry.deleteAttribute( 'uv' );
 
-				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {
+// 				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {
 
-					this.matrixWorld.copyPosition( camera.matrixWorld );
+// 					this.matrixWorld.copyPosition( camera.matrixWorld );
 
-				};
+// 				};
 
-				// add "envMap" material property so the renderer can evaluate it like for built-in materials
-				Object.defineProperty( boxMesh.material, 'envMap', {
+// 				// add "envMap" material property so the renderer can evaluate it like for built-in materials
+// 				Object.defineProperty( boxMesh.material, 'envMap', {
 
-					get: function () {
+// 					get: function () {
 
-						return this.uniforms.envMap.value;
+// 						return this.uniforms.envMap.value;
 
-					}
+// 					}
 
-				} );
+// 				} );
 
-				objects.update( boxMesh );
+// 				objects.update( boxMesh );
 
-			}
+// 			}
 
-			boxMesh.material.uniforms.envMap.value = background;
-			boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;
+// 			boxMesh.material.uniforms.envMap.value = background;
+// 			boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;
 
-			if ( currentBackground !== background ||
-				currentBackgroundVersion !== background.version ||
-				currentTonemapping !== renderer.toneMapping ) {
+// 			if ( currentBackground !== background ||
+// 				currentBackgroundVersion !== background.version ||
+// 				currentTonemapping !== renderer.toneMapping ) {
 
-				boxMesh.material.needsUpdate = true;
+// 				boxMesh.material.needsUpdate = true;
 
-				currentBackground = background;
-				currentBackgroundVersion = background.version;
-				currentTonemapping = renderer.toneMapping;
+// 				currentBackground = background;
+// 				currentBackgroundVersion = background.version;
+// 				currentTonemapping = renderer.toneMapping;
 
-			}
+// 			}
 
-			boxMesh.layers.enableAll();
+// 			boxMesh.layers.enableAll();
 
-			// push to the pre-sorted opaque render list
-			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );
+// 			// push to the pre-sorted opaque render list
+// 			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );
 
-		} else if ( background && background.isTexture ) {
+// 		} else if ( background && background.isTexture ) {
 
-			if ( planeMesh === undefined ) {
+// 			if ( planeMesh === undefined ) {
 
-				planeMesh = new Mesh(
-					new PlaneGeometry( 2, 2 ),
-					new ShaderMaterial( {
-						name: 'BackgroundMaterial',
-						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
-						vertexShader: ShaderLib.background.vertexShader,
-						fragmentShader: ShaderLib.background.fragmentShader,
-						side: FrontSide,
-						depthTest: false,
-						depthWrite: false,
-						fog: false
-					} )
-				);
+// 				planeMesh = new Mesh(
+// 					new PlaneGeometry( 2, 2 ),
+// 					new ShaderMaterial( {
+// 						name: 'BackgroundMaterial',
+// 						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
+// 						vertexShader: ShaderLib.background.vertexShader,
+// 						fragmentShader: ShaderLib.background.fragmentShader,
+// 						side: FrontSide,
+// 						depthTest: false,
+// 						depthWrite: false,
+// 						fog: false
+// 					} )
+// 				);
 
-				planeMesh.geometry.deleteAttribute( 'normal' );
+// 				planeMesh.geometry.deleteAttribute( 'normal' );
 
-				// add "map" material property so the renderer can evaluate it like for built-in materials
-				Object.defineProperty( planeMesh.material, 'map', {
+// 				// add "map" material property so the renderer can evaluate it like for built-in materials
+// 				Object.defineProperty( planeMesh.material, 'map', {
 
-					get: function () {
+// 					get: function () {
 
-						return this.uniforms.t2D.value;
+// 						return this.uniforms.t2D.value;
 
-					}
+// 					}
 
-				} );
+// 				} );
 
-				objects.update( planeMesh );
+// 				objects.update( planeMesh );
 
-			}
+// 			}
 
-			planeMesh.material.uniforms.t2D.value = background;
+// 			planeMesh.material.uniforms.t2D.value = background;
 
-			if ( background.matrixAutoUpdate === true ) {
+// 			if ( background.matrixAutoUpdate === true ) {
 
-				background.updateMatrix();
+// 				background.updateMatrix();
 
-			}
+// 			}
 
-			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );
+// 			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );
 
-			if ( currentBackground !== background ||
-				currentBackgroundVersion !== background.version ||
-				currentTonemapping !== renderer.toneMapping ) {
+// 			if ( currentBackground !== background ||
+// 				currentBackgroundVersion !== background.version ||
+// 				currentTonemapping !== renderer.toneMapping ) {
 
-				planeMesh.material.needsUpdate = true;
+// 				planeMesh.material.needsUpdate = true;
 
-				currentBackground = background;
-				currentBackgroundVersion = background.version;
-				currentTonemapping = renderer.toneMapping;
+// 				currentBackground = background;
+// 				currentBackgroundVersion = background.version;
+// 				currentTonemapping = renderer.toneMapping;
 
-			}
+// 			}
 
-			planeMesh.layers.enableAll();
+// 			planeMesh.layers.enableAll();
 
-			// push to the pre-sorted opaque render list
-			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );
+// 			// push to the pre-sorted opaque render list
+// 			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function setClear( color, alpha ) {
+// 	function setClear( color, alpha ) {
 
-		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );
+// 		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		getClearColor: function () {
+// 		getClearColor: function () {
 
-			return clearColor;
+// 			return clearColor;
 
-		},
-		setClearColor: function ( color, alpha = 1 ) {
+// 		},
+// 		setClearColor: function ( color, alpha = 1 ) {
 
-			clearColor.set( color );
-			clearAlpha = alpha;
-			setClear( clearColor, clearAlpha );
+// 			clearColor.set( color );
+// 			clearAlpha = alpha;
+// 			setClear( clearColor, clearAlpha );
 
-		},
-		getClearAlpha: function () {
+// 		},
+// 		getClearAlpha: function () {
 
-			return clearAlpha;
+// 			return clearAlpha;
 
-		},
-		setClearAlpha: function ( alpha ) {
+// 		},
+// 		setClearAlpha: function ( alpha ) {
 
-			clearAlpha = alpha;
-			setClear( clearColor, clearAlpha );
+// 			clearAlpha = alpha;
+// 			setClear( clearColor, clearAlpha );
 
-		},
-		render: render
+// 		},
+// 		render: render
 
-	};
+// 	};
 
-}
+// }
 
-function WebGLBindingStates( gl, extensions, attributes, capabilities ) {
+// function WebGLBindingStates( gl, extensions, attributes, capabilities ) {
 
-	const maxVertexAttributes = gl.getParameter( 34921 );
+// 	const maxVertexAttributes = gl.getParameter( 34921 );
 
-	const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
-	const vaoAvailable = capabilities.isWebGL2 || extension !== null;
+// 	const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
+// 	const vaoAvailable = capabilities.isWebGL2 || extension !== null;
 
-	const bindingStates = {};
+// 	const bindingStates = {};
 
-	const defaultState = createBindingState( null );
-	let currentState = defaultState;
-	let forceUpdate = false;
+// 	const defaultState = createBindingState( null );
+// 	let currentState = defaultState;
+// 	let forceUpdate = false;
 
-	function setup( object, material, program, geometry, index ) {
+// 	function setup( object, material, program, geometry, index ) {
 
-		let updateBuffers = false;
+// 		let updateBuffers = false;
 
-		if ( vaoAvailable ) {
+// 		if ( vaoAvailable ) {
 
-			const state = getBindingState( geometry, program, material );
+// 			const state = getBindingState( geometry, program, material );
 
-			if ( currentState !== state ) {
+// 			if ( currentState !== state ) {
 
-				currentState = state;
-				bindVertexArrayObject( currentState.object );
+// 				currentState = state;
+// 				bindVertexArrayObject( currentState.object );
 
-			}
+// 			}
 
-			updateBuffers = needsUpdate( object, geometry, program, index );
+// 			updateBuffers = needsUpdate( object, geometry, program, index );
 
-			if ( updateBuffers ) saveCache( object, geometry, program, index );
+// 			if ( updateBuffers ) saveCache( object, geometry, program, index );
 
-		} else {
+// 		} else {
 
-			const wireframe = ( material.wireframe === true );
+// 			const wireframe = ( material.wireframe === true );
 
-			if ( currentState.geometry !== geometry.id ||
-				currentState.program !== program.id ||
-				currentState.wireframe !== wireframe ) {
+// 			if ( currentState.geometry !== geometry.id ||
+// 				currentState.program !== program.id ||
+// 				currentState.wireframe !== wireframe ) {
 
-				currentState.geometry = geometry.id;
-				currentState.program = program.id;
-				currentState.wireframe = wireframe;
+// 				currentState.geometry = geometry.id;
+// 				currentState.program = program.id;
+// 				currentState.wireframe = wireframe;
 
-				updateBuffers = true;
+// 				updateBuffers = true;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( index !== null ) {
+// 		if ( index !== null ) {
 
-			attributes.update( index, 34963 );
+// 			attributes.update( index, 34963 );
 
-		}
+// 		}
 
-		if ( updateBuffers || forceUpdate ) {
+// 		if ( updateBuffers || forceUpdate ) {
 
-			forceUpdate = false;
+// 			forceUpdate = false;
 
-			setupVertexAttributes( object, material, program, geometry );
+// 			setupVertexAttributes( object, material, program, geometry );
 
-			if ( index !== null ) {
+// 			if ( index !== null ) {
 
-				gl.bindBuffer( 34963, attributes.get( index ).buffer );
+// 				gl.bindBuffer( 34963, attributes.get( index ).buffer );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function createVertexArrayObject() {
+// 	function createVertexArrayObject() {
 
-		if ( capabilities.isWebGL2 ) return gl.createVertexArray();
+// 		if ( capabilities.isWebGL2 ) return gl.createVertexArray();
 
-		return extension.createVertexArrayOES();
+// 		return extension.createVertexArrayOES();
 
-	}
+// 	}
 
-	function bindVertexArrayObject( vao ) {
+// 	function bindVertexArrayObject( vao ) {
 
-		if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );
+// 		if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );
 
-		return extension.bindVertexArrayOES( vao );
+// 		return extension.bindVertexArrayOES( vao );
 
-	}
+// 	}
 
-	function deleteVertexArrayObject( vao ) {
+// 	function deleteVertexArrayObject( vao ) {
 
-		if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );
+// 		if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );
 
-		return extension.deleteVertexArrayOES( vao );
+// 		return extension.deleteVertexArrayOES( vao );
 
-	}
+// 	}
 
-	function getBindingState( geometry, program, material ) {
+// 	function getBindingState( geometry, program, material ) {
 
-		const wireframe = ( material.wireframe === true );
+// 		const wireframe = ( material.wireframe === true );
 
-		let programMap = bindingStates[ geometry.id ];
+// 		let programMap = bindingStates[ geometry.id ];
 
-		if ( programMap === undefined ) {
+// 		if ( programMap === undefined ) {
 
-			programMap = {};
-			bindingStates[ geometry.id ] = programMap;
+// 			programMap = {};
+// 			bindingStates[ geometry.id ] = programMap;
 
-		}
+// 		}
 
-		let stateMap = programMap[ program.id ];
+// 		let stateMap = programMap[ program.id ];
 
-		if ( stateMap === undefined ) {
+// 		if ( stateMap === undefined ) {
 
-			stateMap = {};
-			programMap[ program.id ] = stateMap;
+// 			stateMap = {};
+// 			programMap[ program.id ] = stateMap;
 
-		}
+// 		}
 
-		let state = stateMap[ wireframe ];
+// 		let state = stateMap[ wireframe ];
 
-		if ( state === undefined ) {
+// 		if ( state === undefined ) {
 
-			state = createBindingState( createVertexArrayObject() );
-			stateMap[ wireframe ] = state;
+// 			state = createBindingState( createVertexArrayObject() );
+// 			stateMap[ wireframe ] = state;
 
-		}
+// 		}
 
-		return state;
+// 		return state;
 
-	}
+// 	}
 
-	function createBindingState( vao ) {
+// 	function createBindingState( vao ) {
 
-		const newAttributes = [];
-		const enabledAttributes = [];
-		const attributeDivisors = [];
+// 		const newAttributes = [];
+// 		const enabledAttributes = [];
+// 		const attributeDivisors = [];
 
-		for ( let i = 0; i < maxVertexAttributes; i ++ ) {
+// 		for ( let i = 0; i < maxVertexAttributes; i ++ ) {
 
-			newAttributes[ i ] = 0;
-			enabledAttributes[ i ] = 0;
-			attributeDivisors[ i ] = 0;
+// 			newAttributes[ i ] = 0;
+// 			enabledAttributes[ i ] = 0;
+// 			attributeDivisors[ i ] = 0;
 
-		}
+// 		}
 
-		return {
+// 		return {
 
-			// for backward compatibility on non-VAO support browser
-			geometry: null,
-			program: null,
-			wireframe: false,
+// 			// for backward compatibility on non-VAO support browser
+// 			geometry: null,
+// 			program: null,
+// 			wireframe: false,
 
-			newAttributes: newAttributes,
-			enabledAttributes: enabledAttributes,
-			attributeDivisors: attributeDivisors,
-			object: vao,
-			attributes: {},
-			index: null
+// 			newAttributes: newAttributes,
+// 			enabledAttributes: enabledAttributes,
+// 			attributeDivisors: attributeDivisors,
+// 			object: vao,
+// 			attributes: {},
+// 			index: null
 
-		};
+// 		};
 
-	}
+// 	}
 
-	function needsUpdate( object, geometry, program, index ) {
+// 	function needsUpdate( object, geometry, program, index ) {
 
-		const cachedAttributes = currentState.attributes;
-		const geometryAttributes = geometry.attributes;
+// 		const cachedAttributes = currentState.attributes;
+// 		const geometryAttributes = geometry.attributes;
 
-		let attributesNum = 0;
+// 		let attributesNum = 0;
 
-		const programAttributes = program.getAttributes();
+// 		const programAttributes = program.getAttributes();
 
-		for ( const name in programAttributes ) {
+// 		for ( const name in programAttributes ) {
 
-			const programAttribute = programAttributes[ name ];
+// 			const programAttribute = programAttributes[ name ];
 
-			if ( programAttribute.location >= 0 ) {
+// 			if ( programAttribute.location >= 0 ) {
 
-				const cachedAttribute = cachedAttributes[ name ];
-				let geometryAttribute = geometryAttributes[ name ];
+// 				const cachedAttribute = cachedAttributes[ name ];
+// 				let geometryAttribute = geometryAttributes[ name ];
 
-				if ( geometryAttribute === undefined ) {
+// 				if ( geometryAttribute === undefined ) {
 
-					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
-					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;
+// 					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
+// 					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;
 
-				}
+// 				}
 
-				if ( cachedAttribute === undefined ) return true;
+// 				if ( cachedAttribute === undefined ) return true;
 
-				if ( cachedAttribute.attribute !== geometryAttribute ) return true;
+// 				if ( cachedAttribute.attribute !== geometryAttribute ) return true;
 
-				if ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;
+// 				if ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;
 
-				attributesNum ++;
+// 				attributesNum ++;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( currentState.attributesNum !== attributesNum ) return true;
+// 		if ( currentState.attributesNum !== attributesNum ) return true;
 
-		if ( currentState.index !== index ) return true;
+// 		if ( currentState.index !== index ) return true;
 
-		return false;
+// 		return false;
 
-	}
+// 	}
 
-	function saveCache( object, geometry, program, index ) {
+// 	function saveCache( object, geometry, program, index ) {
 
-		const cache = {};
-		const attributes = geometry.attributes;
-		let attributesNum = 0;
+// 		const cache = {};
+// 		const attributes = geometry.attributes;
+// 		let attributesNum = 0;
 
-		const programAttributes = program.getAttributes();
+// 		const programAttributes = program.getAttributes();
 
-		for ( const name in programAttributes ) {
+// 		for ( const name in programAttributes ) {
 
-			const programAttribute = programAttributes[ name ];
+// 			const programAttribute = programAttributes[ name ];
 
-			if ( programAttribute.location >= 0 ) {
+// 			if ( programAttribute.location >= 0 ) {
 
-				let attribute = attributes[ name ];
+// 				let attribute = attributes[ name ];
 
-				if ( attribute === undefined ) {
+// 				if ( attribute === undefined ) {
 
-					if ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;
-					if ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;
+// 					if ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;
+// 					if ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;
 
-				}
+// 				}
 
-				const data = {};
-				data.attribute = attribute;
+// 				const data = {};
+// 				data.attribute = attribute;
 
-				if ( attribute && attribute.data ) {
+// 				if ( attribute && attribute.data ) {
 
-					data.data = attribute.data;
+// 					data.data = attribute.data;
 
-				}
+// 				}
 
-				cache[ name ] = data;
+// 				cache[ name ] = data;
 
-				attributesNum ++;
+// 				attributesNum ++;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		currentState.attributes = cache;
-		currentState.attributesNum = attributesNum;
+// 		currentState.attributes = cache;
+// 		currentState.attributesNum = attributesNum;
 
-		currentState.index = index;
+// 		currentState.index = index;
 
-	}
+// 	}
 
-	function initAttributes() {
+// 	function initAttributes() {
 
-		const newAttributes = currentState.newAttributes;
+// 		const newAttributes = currentState.newAttributes;
 
-		for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {
 
-			newAttributes[ i ] = 0;
+// 			newAttributes[ i ] = 0;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function enableAttribute( attribute ) {
+// 	function enableAttribute( attribute ) {
 
-		enableAttributeAndDivisor( attribute, 0 );
+// 		enableAttributeAndDivisor( attribute, 0 );
 
-	}
+// 	}
 
-	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {
+// 	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {
 
-		const newAttributes = currentState.newAttributes;
-		const enabledAttributes = currentState.enabledAttributes;
-		const attributeDivisors = currentState.attributeDivisors;
+// 		const newAttributes = currentState.newAttributes;
+// 		const enabledAttributes = currentState.enabledAttributes;
+// 		const attributeDivisors = currentState.attributeDivisors;
 
-		newAttributes[ attribute ] = 1;
+// 		newAttributes[ attribute ] = 1;
 
-		if ( enabledAttributes[ attribute ] === 0 ) {
+// 		if ( enabledAttributes[ attribute ] === 0 ) {
 
-			gl.enableVertexAttribArray( attribute );
-			enabledAttributes[ attribute ] = 1;
+// 			gl.enableVertexAttribArray( attribute );
+// 			enabledAttributes[ attribute ] = 1;
 
-		}
+// 		}
 
-		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
+// 		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
 
-			const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );
+// 			const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );
 
-			extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
-			attributeDivisors[ attribute ] = meshPerAttribute;
+// 			extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
+// 			attributeDivisors[ attribute ] = meshPerAttribute;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function disableUnusedAttributes() {
+// 	function disableUnusedAttributes() {
 
-		const newAttributes = currentState.newAttributes;
-		const enabledAttributes = currentState.enabledAttributes;
+// 		const newAttributes = currentState.newAttributes;
+// 		const enabledAttributes = currentState.enabledAttributes;
 
-		for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {
 
-			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
+// 			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
 
-				gl.disableVertexAttribArray( i );
-				enabledAttributes[ i ] = 0;
+// 				gl.disableVertexAttribArray( i );
+// 				enabledAttributes[ i ] = 0;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function vertexAttribPointer( index, size, type, normalized, stride, offset ) {
+// 	function vertexAttribPointer( index, size, type, normalized, stride, offset ) {
 
-		if ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {
+// 		if ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {
 
-			gl.vertexAttribIPointer( index, size, type, stride, offset );
+// 			gl.vertexAttribIPointer( index, size, type, stride, offset );
 
-		} else {
+// 		} else {
 
-			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );
+// 			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function setupVertexAttributes( object, material, program, geometry ) {
+// 	function setupVertexAttributes( object, material, program, geometry ) {
 
-		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {
+// 		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {
 
-			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;
+// 			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;
 
-		}
+// 		}
 
-		initAttributes();
+// 		initAttributes();
 
-		const geometryAttributes = geometry.attributes;
+// 		const geometryAttributes = geometry.attributes;
 
-		const programAttributes = program.getAttributes();
+// 		const programAttributes = program.getAttributes();
 
-		const materialDefaultAttributeValues = material.defaultAttributeValues;
+// 		const materialDefaultAttributeValues = material.defaultAttributeValues;
 
-		for ( const name in programAttributes ) {
+// 		for ( const name in programAttributes ) {
 
-			const programAttribute = programAttributes[ name ];
+// 			const programAttribute = programAttributes[ name ];
 
-			if ( programAttribute.location >= 0 ) {
+// 			if ( programAttribute.location >= 0 ) {
 
-				let geometryAttribute = geometryAttributes[ name ];
+// 				let geometryAttribute = geometryAttributes[ name ];
 
-				if ( geometryAttribute === undefined ) {
+// 				if ( geometryAttribute === undefined ) {
 
-					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
-					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;
+// 					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
+// 					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;
 
-				}
+// 				}
 
-				if ( geometryAttribute !== undefined ) {
+// 				if ( geometryAttribute !== undefined ) {
 
-					const normalized = geometryAttribute.normalized;
-					const size = geometryAttribute.itemSize;
+// 					const normalized = geometryAttribute.normalized;
+// 					const size = geometryAttribute.itemSize;
 
-					const attribute = attributes.get( geometryAttribute );
+// 					const attribute = attributes.get( geometryAttribute );
 
-					// TODO Attribute may not be available on context restore
+// 					// TODO Attribute may not be available on context restore
 
-					if ( attribute === undefined ) continue;
+// 					if ( attribute === undefined ) continue;
 
-					const buffer = attribute.buffer;
-					const type = attribute.type;
-					const bytesPerElement = attribute.bytesPerElement;
+// 					const buffer = attribute.buffer;
+// 					const type = attribute.type;
+// 					const bytesPerElement = attribute.bytesPerElement;
 
-					if ( geometryAttribute.isInterleavedBufferAttribute ) {
+// 					if ( geometryAttribute.isInterleavedBufferAttribute ) {
 
-						const data = geometryAttribute.data;
-						const stride = data.stride;
-						const offset = geometryAttribute.offset;
+// 						const data = geometryAttribute.data;
+// 						const stride = data.stride;
+// 						const offset = geometryAttribute.offset;
 
-						if ( data.isInstancedInterleavedBuffer ) {
+// 						if ( data.isInstancedInterleavedBuffer ) {
 
-							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
+// 							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
 
-								enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );
+// 								enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );
 
-							}
+// 							}
 
-							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {
+// 							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {
 
-								geometry._maxInstanceCount = data.meshPerAttribute * data.count;
+// 								geometry._maxInstanceCount = data.meshPerAttribute * data.count;
 
-							}
+// 							}
 
-						} else {
+// 						} else {
 
-							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
+// 							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
 
-								enableAttribute( programAttribute.location + i );
+// 								enableAttribute( programAttribute.location + i );
 
-							}
+// 							}
 
-						}
+// 						}
 
-						gl.bindBuffer( 34962, buffer );
+// 						gl.bindBuffer( 34962, buffer );
 
-						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
+// 						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
 
-							vertexAttribPointer(
-								programAttribute.location + i,
-								size / programAttribute.locationSize,
-								type,
-								normalized,
-								stride * bytesPerElement,
-								( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement
-							);
+// 							vertexAttribPointer(
+// 								programAttribute.location + i,
+// 								size / programAttribute.locationSize,
+// 								type,
+// 								normalized,
+// 								stride * bytesPerElement,
+// 								( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement
+// 							);
 
-						}
+// 						}
 
-					} else {
+// 					} else {
 
-						if ( geometryAttribute.isInstancedBufferAttribute ) {
+// 						if ( geometryAttribute.isInstancedBufferAttribute ) {
 
-							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
+// 							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
 
-								enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );
+// 								enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );
 
-							}
+// 							}
 
-							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {
+// 							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {
 
-								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
+// 								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
 
-							}
+// 							}
 
-						} else {
+// 						} else {
 
-							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
+// 							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
 
-								enableAttribute( programAttribute.location + i );
+// 								enableAttribute( programAttribute.location + i );
 
-							}
+// 							}
 
-						}
+// 						}
 
-						gl.bindBuffer( 34962, buffer );
+// 						gl.bindBuffer( 34962, buffer );
 
-						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
+// 						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {
 
-							vertexAttribPointer(
-								programAttribute.location + i,
-								size / programAttribute.locationSize,
-								type,
-								normalized,
-								size * bytesPerElement,
-								( size / programAttribute.locationSize ) * i * bytesPerElement
-							);
+// 							vertexAttribPointer(
+// 								programAttribute.location + i,
+// 								size / programAttribute.locationSize,
+// 								type,
+// 								normalized,
+// 								size * bytesPerElement,
+// 								( size / programAttribute.locationSize ) * i * bytesPerElement
+// 							);
 
-						}
+// 						}
 
-					}
+// 					}
 
-				} else if ( materialDefaultAttributeValues !== undefined ) {
+// 				} else if ( materialDefaultAttributeValues !== undefined ) {
 
-					const value = materialDefaultAttributeValues[ name ];
+// 					const value = materialDefaultAttributeValues[ name ];
 
-					if ( value !== undefined ) {
+// 					if ( value !== undefined ) {
 
-						switch ( value.length ) {
+// 						switch ( value.length ) {
 
-							case 2:
-								gl.vertexAttrib2fv( programAttribute.location, value );
-								break;
+// 							case 2:
+// 								gl.vertexAttrib2fv( programAttribute.location, value );
+// 								break;
 
-							case 3:
-								gl.vertexAttrib3fv( programAttribute.location, value );
-								break;
+// 							case 3:
+// 								gl.vertexAttrib3fv( programAttribute.location, value );
+// 								break;
 
-							case 4:
-								gl.vertexAttrib4fv( programAttribute.location, value );
-								break;
+// 							case 4:
+// 								gl.vertexAttrib4fv( programAttribute.location, value );
+// 								break;
 
-							default:
-								gl.vertexAttrib1fv( programAttribute.location, value );
+// 							default:
+// 								gl.vertexAttrib1fv( programAttribute.location, value );
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		disableUnusedAttributes();
+// 		disableUnusedAttributes();
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		reset();
+// 		reset();
 
-		for ( const geometryId in bindingStates ) {
+// 		for ( const geometryId in bindingStates ) {
 
-			const programMap = bindingStates[ geometryId ];
+// 			const programMap = bindingStates[ geometryId ];
 
-			for ( const programId in programMap ) {
+// 			for ( const programId in programMap ) {
 
-				const stateMap = programMap[ programId ];
+// 				const stateMap = programMap[ programId ];
 
-				for ( const wireframe in stateMap ) {
+// 				for ( const wireframe in stateMap ) {
 
-					deleteVertexArrayObject( stateMap[ wireframe ].object );
+// 					deleteVertexArrayObject( stateMap[ wireframe ].object );
 
-					delete stateMap[ wireframe ];
+// 					delete stateMap[ wireframe ];
 
-				}
+// 				}
 
-				delete programMap[ programId ];
+// 				delete programMap[ programId ];
 
-			}
+// 			}
 
-			delete bindingStates[ geometryId ];
+// 			delete bindingStates[ geometryId ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function releaseStatesOfGeometry( geometry ) {
+// 	function releaseStatesOfGeometry( geometry ) {
 
-		if ( bindingStates[ geometry.id ] === undefined ) return;
+// 		if ( bindingStates[ geometry.id ] === undefined ) return;
 
-		const programMap = bindingStates[ geometry.id ];
+// 		const programMap = bindingStates[ geometry.id ];
 
-		for ( const programId in programMap ) {
+// 		for ( const programId in programMap ) {
 
-			const stateMap = programMap[ programId ];
+// 			const stateMap = programMap[ programId ];
 
-			for ( const wireframe in stateMap ) {
+// 			for ( const wireframe in stateMap ) {
 
-				deleteVertexArrayObject( stateMap[ wireframe ].object );
+// 				deleteVertexArrayObject( stateMap[ wireframe ].object );
 
-				delete stateMap[ wireframe ];
+// 				delete stateMap[ wireframe ];
 
-			}
+// 			}
 
-			delete programMap[ programId ];
+// 			delete programMap[ programId ];
 
-		}
+// 		}
 
-		delete bindingStates[ geometry.id ];
+// 		delete bindingStates[ geometry.id ];
 
-	}
+// 	}
 
-	function releaseStatesOfProgram( program ) {
+// 	function releaseStatesOfProgram( program ) {
 
-		for ( const geometryId in bindingStates ) {
+// 		for ( const geometryId in bindingStates ) {
 
-			const programMap = bindingStates[ geometryId ];
+// 			const programMap = bindingStates[ geometryId ];
 
-			if ( programMap[ program.id ] === undefined ) continue;
+// 			if ( programMap[ program.id ] === undefined ) continue;
 
-			const stateMap = programMap[ program.id ];
+// 			const stateMap = programMap[ program.id ];
 
-			for ( const wireframe in stateMap ) {
+// 			for ( const wireframe in stateMap ) {
 
-				deleteVertexArrayObject( stateMap[ wireframe ].object );
+// 				deleteVertexArrayObject( stateMap[ wireframe ].object );
 
-				delete stateMap[ wireframe ];
+// 				delete stateMap[ wireframe ];
 
-			}
+// 			}
 
-			delete programMap[ program.id ];
+// 			delete programMap[ program.id ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function reset() {
+// 	function reset() {
 
-		resetDefaultState();
-		forceUpdate = true;
+// 		resetDefaultState();
+// 		forceUpdate = true;
 
-		if ( currentState === defaultState ) return;
+// 		if ( currentState === defaultState ) return;
 
-		currentState = defaultState;
-		bindVertexArrayObject( currentState.object );
+// 		currentState = defaultState;
+// 		bindVertexArrayObject( currentState.object );
 
-	}
+// 	}
 
-	// for backward-compatibility
+// 	// for backward-compatibility
 
-	function resetDefaultState() {
+// 	function resetDefaultState() {
 
-		defaultState.geometry = null;
-		defaultState.program = null;
-		defaultState.wireframe = false;
+// 		defaultState.geometry = null;
+// 		defaultState.program = null;
+// 		defaultState.wireframe = false;
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		setup: setup,
-		reset: reset,
-		resetDefaultState: resetDefaultState,
-		dispose: dispose,
-		releaseStatesOfGeometry: releaseStatesOfGeometry,
-		releaseStatesOfProgram: releaseStatesOfProgram,
+// 		setup: setup,
+// 		reset: reset,
+// 		resetDefaultState: resetDefaultState,
+// 		dispose: dispose,
+// 		releaseStatesOfGeometry: releaseStatesOfGeometry,
+// 		releaseStatesOfProgram: releaseStatesOfProgram,
 
-		initAttributes: initAttributes,
-		enableAttribute: enableAttribute,
-		disableUnusedAttributes: disableUnusedAttributes
+// 		initAttributes: initAttributes,
+// 		enableAttribute: enableAttribute,
+// 		disableUnusedAttributes: disableUnusedAttributes
 
-	};
+// 	};
 
-}
+// }
 
-function WebGLBufferRenderer( gl, extensions, info, capabilities ) {
+// function WebGLBufferRenderer( gl, extensions, info, capabilities ) {
 
-	const isWebGL2 = capabilities.isWebGL2;
+// 	const isWebGL2 = capabilities.isWebGL2;
 
-	let mode;
+// 	let mode;
 
-	function setMode( value ) {
+// 	function setMode( value ) {
 
-		mode = value;
+// 		mode = value;
 
-	}
+// 	}
 
-	function render( start, count ) {
+// 	function render( start, count ) {
 
-		gl.drawArrays( mode, start, count );
+// 		gl.drawArrays( mode, start, count );
 
-		info.update( count, mode, 1 );
+// 		info.update( count, mode, 1 );
 
-	}
+// 	}
 
-	function renderInstances( start, count, primcount ) {
+// 	function renderInstances( start, count, primcount ) {
 
-		if ( primcount === 0 ) return;
+// 		if ( primcount === 0 ) return;
 
-		let extension, methodName;
+// 		let extension, methodName;
 
-		if ( isWebGL2 ) {
+// 		if ( isWebGL2 ) {
 
-			extension = gl;
-			methodName = 'drawArraysInstanced';
+// 			extension = gl;
+// 			methodName = 'drawArraysInstanced';
 
-		} else {
+// 		} else {
 
-			extension = extensions.get( 'ANGLE_instanced_arrays' );
-			methodName = 'drawArraysInstancedANGLE';
+// 			extension = extensions.get( 'ANGLE_instanced_arrays' );
+// 			methodName = 'drawArraysInstancedANGLE';
 
-			if ( extension === null ) {
+// 			if ( extension === null ) {
 
-				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
-				return;
+// 				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
+// 				return;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		extension[ methodName ]( mode, start, count, primcount );
+// 		extension[ methodName ]( mode, start, count, primcount );
 
-		info.update( count, mode, primcount );
+// 		info.update( count, mode, primcount );
 
-	}
+// 	}
 
-	//
+// 	//
 
-	this.setMode = setMode;
-	this.render = render;
-	this.renderInstances = renderInstances;
+// 	this.setMode = setMode;
+// 	this.render = render;
+// 	this.renderInstances = renderInstances;
 
-}
+// }
 
-function WebGLCapabilities( gl, extensions, parameters ) {
+// function WebGLCapabilities( gl, extensions, parameters ) {
 
-	let maxAnisotropy;
+// 	let maxAnisotropy;
 
-	function getMaxAnisotropy() {
+// 	function getMaxAnisotropy() {
 
-		if ( maxAnisotropy !== undefined ) return maxAnisotropy;
+// 		if ( maxAnisotropy !== undefined ) return maxAnisotropy;
 
-		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {
+// 		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {
 
-			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );
+// 			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );
 
-			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
+// 			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
 
-		} else {
+// 		} else {
 
-			maxAnisotropy = 0;
+// 			maxAnisotropy = 0;
 
-		}
+// 		}
 
-		return maxAnisotropy;
+// 		return maxAnisotropy;
 
-	}
+// 	}
 
-	function getMaxPrecision( precision ) {
+// 	function getMaxPrecision( precision ) {
 
-		if ( precision === 'highp' ) {
+// 		if ( precision === 'highp' ) {
 
-			if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
-				gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {
+// 			if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
+// 				gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {
 
-				return 'highp';
+// 				return 'highp';
 
-			}
+// 			}
 
-			precision = 'mediump';
+// 			precision = 'mediump';
 
-		}
+// 		}
 
-		if ( precision === 'mediump' ) {
+// 		if ( precision === 'mediump' ) {
 
-			if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
-				gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {
+// 			if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
+// 				gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {
 
-				return 'mediump';
+// 				return 'mediump';
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return 'lowp';
+// 		return 'lowp';
 
-	}
+// 	}
 
-	const isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
-		( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
+// 	const isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
+// 		( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
 
-	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
-	const maxPrecision = getMaxPrecision( precision );
+// 	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
+// 	const maxPrecision = getMaxPrecision( precision );
 
-	if ( maxPrecision !== precision ) {
+// 	if ( maxPrecision !== precision ) {
 
-		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
-		precision = maxPrecision;
+// 		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
+// 		precision = maxPrecision;
 
-	}
+// 	}
 
-	const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );
+// 	const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );
 
-	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
+// 	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
 
-	const maxTextures = gl.getParameter( 34930 );
-	const maxVertexTextures = gl.getParameter( 35660 );
-	const maxTextureSize = gl.getParameter( 3379 );
-	const maxCubemapSize = gl.getParameter( 34076 );
+// 	const maxTextures = gl.getParameter( 34930 );
+// 	const maxVertexTextures = gl.getParameter( 35660 );
+// 	const maxTextureSize = gl.getParameter( 3379 );
+// 	const maxCubemapSize = gl.getParameter( 34076 );
 
-	const maxAttributes = gl.getParameter( 34921 );
-	const maxVertexUniforms = gl.getParameter( 36347 );
-	const maxVaryings = gl.getParameter( 36348 );
-	const maxFragmentUniforms = gl.getParameter( 36349 );
+// 	const maxAttributes = gl.getParameter( 34921 );
+// 	const maxVertexUniforms = gl.getParameter( 36347 );
+// 	const maxVaryings = gl.getParameter( 36348 );
+// 	const maxFragmentUniforms = gl.getParameter( 36349 );
 
-	const vertexTextures = maxVertexTextures > 0;
-	const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );
-	const floatVertexTextures = vertexTextures && floatFragmentTextures;
+// 	const vertexTextures = maxVertexTextures > 0;
+// 	const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );
+// 	const floatVertexTextures = vertexTextures && floatFragmentTextures;
 
-	const maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;
+// 	const maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;
 
-	return {
+// 	return {
 
-		isWebGL2: isWebGL2,
+// 		isWebGL2: isWebGL2,
 
-		drawBuffers: drawBuffers,
+// 		drawBuffers: drawBuffers,
 
-		getMaxAnisotropy: getMaxAnisotropy,
-		getMaxPrecision: getMaxPrecision,
+// 		getMaxAnisotropy: getMaxAnisotropy,
+// 		getMaxPrecision: getMaxPrecision,
 
-		precision: precision,
-		logarithmicDepthBuffer: logarithmicDepthBuffer,
+// 		precision: precision,
+// 		logarithmicDepthBuffer: logarithmicDepthBuffer,
 
-		maxTextures: maxTextures,
-		maxVertexTextures: maxVertexTextures,
-		maxTextureSize: maxTextureSize,
-		maxCubemapSize: maxCubemapSize,
+// 		maxTextures: maxTextures,
+// 		maxVertexTextures: maxVertexTextures,
+// 		maxTextureSize: maxTextureSize,
+// 		maxCubemapSize: maxCubemapSize,
 
-		maxAttributes: maxAttributes,
-		maxVertexUniforms: maxVertexUniforms,
-		maxVaryings: maxVaryings,
-		maxFragmentUniforms: maxFragmentUniforms,
+// 		maxAttributes: maxAttributes,
+// 		maxVertexUniforms: maxVertexUniforms,
+// 		maxVaryings: maxVaryings,
+// 		maxFragmentUniforms: maxFragmentUniforms,
 
-		vertexTextures: vertexTextures,
-		floatFragmentTextures: floatFragmentTextures,
-		floatVertexTextures: floatVertexTextures,
+// 		vertexTextures: vertexTextures,
+// 		floatFragmentTextures: floatFragmentTextures,
+// 		floatVertexTextures: floatVertexTextures,
 
-		maxSamples: maxSamples
+// 		maxSamples: maxSamples
 
-	};
+// 	};
 
-}
+// }
 
-function WebGLClipping( properties ) {
+// function WebGLClipping( properties ) {
 
-	const scope = this;
+// 	const scope = this;
 
-	let globalState = null,
-		numGlobalPlanes = 0,
-		localClippingEnabled = false,
-		renderingShadows = false;
+// 	let globalState = null,
+// 		numGlobalPlanes = 0,
+// 		localClippingEnabled = false,
+// 		renderingShadows = false;
 
-	const plane = new Plane(),
-		viewNormalMatrix = new Matrix3(),
+// 	const plane = new Plane(),
+// 		viewNormalMatrix = new Matrix3(),
 
-		uniform = { value: null, needsUpdate: false };
+// 		uniform = { value: null, needsUpdate: false };
 
-	this.uniform = uniform;
-	this.numPlanes = 0;
-	this.numIntersection = 0;
+// 	this.uniform = uniform;
+// 	this.numPlanes = 0;
+// 	this.numIntersection = 0;
 
-	this.init = function ( planes, enableLocalClipping, camera ) {
+// 	this.init = function ( planes, enableLocalClipping, camera ) {
 
-		const enabled =
-			planes.length !== 0 ||
-			enableLocalClipping ||
-			// enable state of previous frame - the clipping code has to
-			// run another frame in order to reset the state:
-			numGlobalPlanes !== 0 ||
-			localClippingEnabled;
+// 		const enabled =
+// 			planes.length !== 0 ||
+// 			enableLocalClipping ||
+// 			// enable state of previous frame - the clipping code has to
+// 			// run another frame in order to reset the state:
+// 			numGlobalPlanes !== 0 ||
+// 			localClippingEnabled;
 
-		localClippingEnabled = enableLocalClipping;
+// 		localClippingEnabled = enableLocalClipping;
 
-		globalState = projectPlanes( planes, camera, 0 );
-		numGlobalPlanes = planes.length;
+// 		globalState = projectPlanes( planes, camera, 0 );
+// 		numGlobalPlanes = planes.length;
 
-		return enabled;
+// 		return enabled;
 
-	};
+// 	};
 
-	this.beginShadows = function () {
+// 	this.beginShadows = function () {
 
-		renderingShadows = true;
-		projectPlanes( null );
+// 		renderingShadows = true;
+// 		projectPlanes( null );
 
-	};
+// 	};
 
-	this.endShadows = function () {
+// 	this.endShadows = function () {
 
-		renderingShadows = false;
-		resetGlobalState();
+// 		renderingShadows = false;
+// 		resetGlobalState();
 
-	};
+// 	};
 
-	this.setState = function ( material, camera, useCache ) {
+// 	this.setState = function ( material, camera, useCache ) {
 
-		const planes = material.clippingPlanes,
-			clipIntersection = material.clipIntersection,
-			clipShadows = material.clipShadows;
+// 		const planes = material.clippingPlanes,
+// 			clipIntersection = material.clipIntersection,
+// 			clipShadows = material.clipShadows;
 
-		const materialProperties = properties.get( material );
+// 		const materialProperties = properties.get( material );
 
-		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {
+// 		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {
 
-			// there's no local clipping
+// 			// there's no local clipping
 
-			if ( renderingShadows ) {
+// 			if ( renderingShadows ) {
 
-				// there's no global clipping
+// 				// there's no global clipping
 
-				projectPlanes( null );
+// 				projectPlanes( null );
 
-			} else {
+// 			} else {
 
-				resetGlobalState();
+// 				resetGlobalState();
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
-				lGlobal = nGlobal * 4;
+// 			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
+// 				lGlobal = nGlobal * 4;
 
-			let dstArray = materialProperties.clippingState || null;
+// 			let dstArray = materialProperties.clippingState || null;
 
-			uniform.value = dstArray; // ensure unique state
+// 			uniform.value = dstArray; // ensure unique state
 
-			dstArray = projectPlanes( planes, camera, lGlobal, useCache );
+// 			dstArray = projectPlanes( planes, camera, lGlobal, useCache );
 
-			for ( let i = 0; i !== lGlobal; ++ i ) {
+// 			for ( let i = 0; i !== lGlobal; ++ i ) {
 
-				dstArray[ i ] = globalState[ i ];
+// 				dstArray[ i ] = globalState[ i ];
 
-			}
+// 			}
 
-			materialProperties.clippingState = dstArray;
-			this.numIntersection = clipIntersection ? this.numPlanes : 0;
-			this.numPlanes += nGlobal;
+// 			materialProperties.clippingState = dstArray;
+// 			this.numIntersection = clipIntersection ? this.numPlanes : 0;
+// 			this.numPlanes += nGlobal;
 
-		}
+// 		}
 
 
-	};
+// 	};
 
-	function resetGlobalState() {
+// 	function resetGlobalState() {
 
-		if ( uniform.value !== globalState ) {
+// 		if ( uniform.value !== globalState ) {
 
-			uniform.value = globalState;
-			uniform.needsUpdate = numGlobalPlanes > 0;
+// 			uniform.value = globalState;
+// 			uniform.needsUpdate = numGlobalPlanes > 0;
 
-		}
+// 		}
 
-		scope.numPlanes = numGlobalPlanes;
-		scope.numIntersection = 0;
+// 		scope.numPlanes = numGlobalPlanes;
+// 		scope.numIntersection = 0;
 
-	}
+// 	}
 
-	function projectPlanes( planes, camera, dstOffset, skipTransform ) {
+// 	function projectPlanes( planes, camera, dstOffset, skipTransform ) {
 
-		const nPlanes = planes !== null ? planes.length : 0;
-		let dstArray = null;
+// 		const nPlanes = planes !== null ? planes.length : 0;
+// 		let dstArray = null;
 
-		if ( nPlanes !== 0 ) {
+// 		if ( nPlanes !== 0 ) {
 
-			dstArray = uniform.value;
+// 			dstArray = uniform.value;
 
-			if ( skipTransform !== true || dstArray === null ) {
+// 			if ( skipTransform !== true || dstArray === null ) {
 
-				const flatSize = dstOffset + nPlanes * 4,
-					viewMatrix = camera.matrixWorldInverse;
+// 				const flatSize = dstOffset + nPlanes * 4,
+// 					viewMatrix = camera.matrixWorldInverse;
 
-				viewNormalMatrix.getNormalMatrix( viewMatrix );
+// 				viewNormalMatrix.getNormalMatrix( viewMatrix );
 
-				if ( dstArray === null || dstArray.length < flatSize ) {
+// 				if ( dstArray === null || dstArray.length < flatSize ) {
 
-					dstArray = new Float32Array( flatSize );
+// 					dstArray = new Float32Array( flatSize );
 
-				}
+// 				}
 
-				for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {
+// 				for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {
 
-					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );
+// 					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );
 
-					plane.normal.toArray( dstArray, i4 );
-					dstArray[ i4 + 3 ] = plane.constant;
+// 					plane.normal.toArray( dstArray, i4 );
+// 					dstArray[ i4 + 3 ] = plane.constant;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			uniform.value = dstArray;
-			uniform.needsUpdate = true;
+// 			uniform.value = dstArray;
+// 			uniform.needsUpdate = true;
 
-		}
+// 		}
 
-		scope.numPlanes = nPlanes;
-		scope.numIntersection = 0;
+// 		scope.numPlanes = nPlanes;
+// 		scope.numIntersection = 0;
 
-		return dstArray;
+// 		return dstArray;
 
-	}
+// 	}
 
-}
+// }
 
-function WebGLCubeMaps( renderer ) {
+// function WebGLCubeMaps( renderer ) {
 
-	let cubemaps = new WeakMap();
+// 	let cubemaps = new WeakMap();
 
-	function mapTextureMapping( texture, mapping ) {
+// 	function mapTextureMapping( texture, mapping ) {
 
-		if ( mapping === EquirectangularReflectionMapping ) {
+// 		if ( mapping === EquirectangularReflectionMapping ) {
 
-			texture.mapping = CubeReflectionMapping;
+// 			texture.mapping = CubeReflectionMapping;
 
-		} else if ( mapping === EquirectangularRefractionMapping ) {
+// 		} else if ( mapping === EquirectangularRefractionMapping ) {
 
-			texture.mapping = CubeRefractionMapping;
+// 			texture.mapping = CubeRefractionMapping;
 
-		}
+// 		}
 
-		return texture;
+// 		return texture;
 
-	}
+// 	}
 
-	function get( texture ) {
+// 	function get( texture ) {
 
-		if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {
+// 		if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {
 
-			const mapping = texture.mapping;
+// 			const mapping = texture.mapping;
 
-			if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {
+// 			if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {
 
-				if ( cubemaps.has( texture ) ) {
+// 				if ( cubemaps.has( texture ) ) {
 
-					const cubemap = cubemaps.get( texture ).texture;
-					return mapTextureMapping( cubemap, texture.mapping );
+// 					const cubemap = cubemaps.get( texture ).texture;
+// 					return mapTextureMapping( cubemap, texture.mapping );
 
-				} else {
+// 				} else {
 
-					const image = texture.image;
+// 					const image = texture.image;
 
-					if ( image && image.height > 0 ) {
+// 					if ( image && image.height > 0 ) {
 
-						const renderTarget = new WebGLCubeRenderTarget( image.height / 2 );
-						renderTarget.fromEquirectangularTexture( renderer, texture );
-						cubemaps.set( texture, renderTarget );
+// 						const renderTarget = new WebGLCubeRenderTarget( image.height / 2 );
+// 						renderTarget.fromEquirectangularTexture( renderer, texture );
+// 						cubemaps.set( texture, renderTarget );
 
-						texture.addEventListener( 'dispose', onTextureDispose );
+// 						texture.addEventListener( 'dispose', onTextureDispose );
 
-						return mapTextureMapping( renderTarget.texture, texture.mapping );
+// 						return mapTextureMapping( renderTarget.texture, texture.mapping );
 
-					} else {
+// 					} else {
 
-						// image not yet ready. try the conversion next frame
+// 						// image not yet ready. try the conversion next frame
 
-						return null;
+// 						return null;
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return texture;
+// 		return texture;
 
-	}
+// 	}
 
-	function onTextureDispose( event ) {
+// 	function onTextureDispose( event ) {
 
-		const texture = event.target;
+// 		const texture = event.target;
 
-		texture.removeEventListener( 'dispose', onTextureDispose );
+// 		texture.removeEventListener( 'dispose', onTextureDispose );
 
-		const cubemap = cubemaps.get( texture );
+// 		const cubemap = cubemaps.get( texture );
 
-		if ( cubemap !== undefined ) {
+// 		if ( cubemap !== undefined ) {
 
-			cubemaps.delete( texture );
-			cubemap.dispose();
+// 			cubemaps.delete( texture );
+// 			cubemap.dispose();
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		cubemaps = new WeakMap();
+// 		cubemaps = new WeakMap();
 
-	}
+// 	}
 
-	return {
-		get: get,
-		dispose: dispose
-	};
+// 	return {
+// 		get: get,
+// 		dispose: dispose
+// 	};
 
-}
+// }
 
-class OrthographicCamera extends Camera {
+// class OrthographicCamera extends Camera {
 
-	constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {
+// 	constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {
 
-		super();
+// 		super();
 
-		this.isOrthographicCamera = true;
+// 		this.isOrthographicCamera = true;
 
-		this.type = 'OrthographicCamera';
+// 		this.type = 'OrthographicCamera';
 
-		this.zoom = 1;
-		this.view = null;
+// 		this.zoom = 1;
+// 		this.view = null;
 
-		this.left = left;
-		this.right = right;
-		this.top = top;
-		this.bottom = bottom;
+// 		this.left = left;
+// 		this.right = right;
+// 		this.top = top;
+// 		this.bottom = bottom;
 
-		this.near = near;
-		this.far = far;
+// 		this.near = near;
+// 		this.far = far;
 
-		this.updateProjectionMatrix();
+// 		this.updateProjectionMatrix();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.left = source.left;
-		this.right = source.right;
-		this.top = source.top;
-		this.bottom = source.bottom;
-		this.near = source.near;
-		this.far = source.far;
+// 		this.left = source.left;
+// 		this.right = source.right;
+// 		this.top = source.top;
+// 		this.bottom = source.bottom;
+// 		this.near = source.near;
+// 		this.far = source.far;
 
-		this.zoom = source.zoom;
-		this.view = source.view === null ? null : Object.assign( {}, source.view );
+// 		this.zoom = source.zoom;
+// 		this.view = source.view === null ? null : Object.assign( {}, source.view );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {
+// 	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {
 
-		if ( this.view === null ) {
+// 		if ( this.view === null ) {
 
-			this.view = {
-				enabled: true,
-				fullWidth: 1,
-				fullHeight: 1,
-				offsetX: 0,
-				offsetY: 0,
-				width: 1,
-				height: 1
-			};
+// 			this.view = {
+// 				enabled: true,
+// 				fullWidth: 1,
+// 				fullHeight: 1,
+// 				offsetX: 0,
+// 				offsetY: 0,
+// 				width: 1,
+// 				height: 1
+// 			};
 
-		}
+// 		}
 
-		this.view.enabled = true;
-		this.view.fullWidth = fullWidth;
-		this.view.fullHeight = fullHeight;
-		this.view.offsetX = x;
-		this.view.offsetY = y;
-		this.view.width = width;
-		this.view.height = height;
+// 		this.view.enabled = true;
+// 		this.view.fullWidth = fullWidth;
+// 		this.view.fullHeight = fullHeight;
+// 		this.view.offsetX = x;
+// 		this.view.offsetY = y;
+// 		this.view.width = width;
+// 		this.view.height = height;
 
-		this.updateProjectionMatrix();
+// 		this.updateProjectionMatrix();
 
-	}
+// 	}
 
-	clearViewOffset() {
+// 	clearViewOffset() {
 
-		if ( this.view !== null ) {
+// 		if ( this.view !== null ) {
 
-			this.view.enabled = false;
+// 			this.view.enabled = false;
 
-		}
+// 		}
 
-		this.updateProjectionMatrix();
+// 		this.updateProjectionMatrix();
 
-	}
+// 	}
 
-	updateProjectionMatrix() {
+// 	updateProjectionMatrix() {
 
-		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
-		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
-		const cx = ( this.right + this.left ) / 2;
-		const cy = ( this.top + this.bottom ) / 2;
+// 		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
+// 		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
+// 		const cx = ( this.right + this.left ) / 2;
+// 		const cy = ( this.top + this.bottom ) / 2;
 
-		let left = cx - dx;
-		let right = cx + dx;
-		let top = cy + dy;
-		let bottom = cy - dy;
+// 		let left = cx - dx;
+// 		let right = cx + dx;
+// 		let top = cy + dy;
+// 		let bottom = cy - dy;
 
-		if ( this.view !== null && this.view.enabled ) {
+// 		if ( this.view !== null && this.view.enabled ) {
 
-			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
-			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;
+// 			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
+// 			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;
 
-			left += scaleW * this.view.offsetX;
-			right = left + scaleW * this.view.width;
-			top -= scaleH * this.view.offsetY;
-			bottom = top - scaleH * this.view.height;
+// 			left += scaleW * this.view.offsetX;
+// 			right = left + scaleW * this.view.width;
+// 			top -= scaleH * this.view.offsetY;
+// 			bottom = top - scaleH * this.view.height;
 
-		}
+// 		}
 
-		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );
+// 		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );
 
-		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();
+// 		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const data = super.toJSON( meta );
+// 		const data = super.toJSON( meta );
 
-		data.object.zoom = this.zoom;
-		data.object.left = this.left;
-		data.object.right = this.right;
-		data.object.top = this.top;
-		data.object.bottom = this.bottom;
-		data.object.near = this.near;
-		data.object.far = this.far;
+// 		data.object.zoom = this.zoom;
+// 		data.object.left = this.left;
+// 		data.object.right = this.right;
+// 		data.object.top = this.top;
+// 		data.object.bottom = this.bottom;
+// 		data.object.near = this.near;
+// 		data.object.far = this.far;
 
-		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
+// 		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-const LOD_MIN = 4;
+// const LOD_MIN = 4;
 
-// The standard deviations (radians) associated with the extra mips. These are
-// chosen to approximate a Trowbridge-Reitz distribution function times the
-// geometric shadowing function. These sigma values squared must match the
-// variance #defines in cube_uv_reflection_fragment.glsl.js.
-const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];
+// // The standard deviations (radians) associated with the extra mips. These are
+// // chosen to approximate a Trowbridge-Reitz distribution function times the
+// // geometric shadowing function. These sigma values squared must match the
+// // variance #defines in cube_uv_reflection_fragment.glsl.js.
+// const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];
 
-// The maximum length of the blur for loop. Smaller sigmas will use fewer
-// samples and exit early, but not recompile the shader.
-const MAX_SAMPLES = 20;
+// // The maximum length of the blur for loop. Smaller sigmas will use fewer
+// // samples and exit early, but not recompile the shader.
+// const MAX_SAMPLES = 20;
 
-const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
-const _clearColor = /*@__PURE__*/ new Color();
-let _oldTarget = null;
+// const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
+// const _clearColor = /*@__PURE__*/ new Color();
+// let _oldTarget = null;
 
-// Golden Ratio
-const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
-const INV_PHI = 1 / PHI;
+// // Golden Ratio
+// const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
+// const INV_PHI = 1 / PHI;
 
-// Vertices of a dodecahedron (except the opposites, which represent the
-// same axis), used as axis directions evenly spread on a sphere.
-const _axisDirections = [
-	/*@__PURE__*/ new Vector3( 1, 1, 1 ),
-	/*@__PURE__*/ new Vector3( - 1, 1, 1 ),
-	/*@__PURE__*/ new Vector3( 1, 1, - 1 ),
-	/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),
-	/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
-	/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
-	/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
-	/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
-	/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
-	/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];
+// // Vertices of a dodecahedron (except the opposites, which represent the
+// // same axis), used as axis directions evenly spread on a sphere.
+// const _axisDirections = [
+// 	/*@__PURE__*/ new Vector3( 1, 1, 1 ),
+// 	/*@__PURE__*/ new Vector3( - 1, 1, 1 ),
+// 	/*@__PURE__*/ new Vector3( 1, 1, - 1 ),
+// 	/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),
+// 	/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
+// 	/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
+// 	/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
+// 	/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
+// 	/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
+// 	/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];
 
-/**
- * This class generates a Prefiltered, Mipmapped Radiance Environment Map
- * (PMREM) from a cubeMap environment texture. This allows different levels of
- * blur to be quickly accessed based on material roughness. It is packed into a
- * special CubeUV format that allows us to perform custom interpolation so that
- * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
- * chain, it only goes down to the LOD_MIN level (above), and then creates extra
- * even more filtered 'mips' at the same LOD_MIN resolution, associated with
- * higher roughness levels. In this way we maintain resolution to smoothly
- * interpolate diffuse lighting while limiting sampling computation.
- *
- * Paper: Fast, Accurate Image-Based Lighting
- * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
-*/
+// /**
+//  * This class generates a Prefiltered, Mipmapped Radiance Environment Map
+//  * (PMREM) from a cubeMap environment texture. This allows different levels of
+//  * blur to be quickly accessed based on material roughness. It is packed into a
+//  * special CubeUV format that allows us to perform custom interpolation so that
+//  * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
+//  * chain, it only goes down to the LOD_MIN level (above), and then creates extra
+//  * even more filtered 'mips' at the same LOD_MIN resolution, associated with
+//  * higher roughness levels. In this way we maintain resolution to smoothly
+//  * interpolate diffuse lighting while limiting sampling computation.
+//  *
+//  * Paper: Fast, Accurate Image-Based Lighting
+//  * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
+// */
 
-class PMREMGenerator {
+// class PMREMGenerator {
 
-	constructor( renderer ) {
+// 	constructor( renderer ) {
 
-		this._renderer = renderer;
-		this._pingPongRenderTarget = null;
+// 		this._renderer = renderer;
+// 		this._pingPongRenderTarget = null;
 
-		this._lodMax = 0;
-		this._cubeSize = 0;
-		this._lodPlanes = [];
-		this._sizeLods = [];
-		this._sigmas = [];
+// 		this._lodMax = 0;
+// 		this._cubeSize = 0;
+// 		this._lodPlanes = [];
+// 		this._sizeLods = [];
+// 		this._sigmas = [];
 
-		this._blurMaterial = null;
-		this._cubemapMaterial = null;
-		this._equirectMaterial = null;
+// 		this._blurMaterial = null;
+// 		this._cubemapMaterial = null;
+// 		this._equirectMaterial = null;
 
-		this._compileMaterial( this._blurMaterial );
+// 		this._compileMaterial( this._blurMaterial );
 
-	}
+// 	}
 
-	/**
-	 * Generates a PMREM from a supplied Scene, which can be faster than using an
-	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
-	 * in radians to be applied to the scene before PMREM generation. Optional near
-	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
-	 * is placed at the origin).
-	 */
-	fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {
+// 	/**
+// 	 * Generates a PMREM from a supplied Scene, which can be faster than using an
+// 	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
+// 	 * in radians to be applied to the scene before PMREM generation. Optional near
+// 	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
+// 	 * is placed at the origin).
+// 	 */
+// 	fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {
 
-		_oldTarget = this._renderer.getRenderTarget();
+// 		_oldTarget = this._renderer.getRenderTarget();
 
-		this._setSize( 256 );
+// 		this._setSize( 256 );
 
-		const cubeUVRenderTarget = this._allocateTargets();
-		cubeUVRenderTarget.depthBuffer = true;
+// 		const cubeUVRenderTarget = this._allocateTargets();
+// 		cubeUVRenderTarget.depthBuffer = true;
 
-		this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );
+// 		this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );
 
-		if ( sigma > 0 ) {
+// 		if ( sigma > 0 ) {
 
-			this._blur( cubeUVRenderTarget, 0, 0, sigma );
+// 			this._blur( cubeUVRenderTarget, 0, 0, sigma );
 
-		}
+// 		}
 
-		this._applyPMREM( cubeUVRenderTarget );
-		this._cleanup( cubeUVRenderTarget );
+// 		this._applyPMREM( cubeUVRenderTarget );
+// 		this._cleanup( cubeUVRenderTarget );
 
-		return cubeUVRenderTarget;
+// 		return cubeUVRenderTarget;
 
-	}
+// 	}
 
-	/**
-	 * Generates a PMREM from an equirectangular texture, which can be either LDR
-	 * or HDR. The ideal input image size is 1k (1024 x 512),
-	 * as this matches best with the 256 x 256 cubemap output.
-	 */
-	fromEquirectangular( equirectangular, renderTarget = null ) {
+// 	/**
+// 	 * Generates a PMREM from an equirectangular texture, which can be either LDR
+// 	 * or HDR. The ideal input image size is 1k (1024 x 512),
+// 	 * as this matches best with the 256 x 256 cubemap output.
+// 	 */
+// 	fromEquirectangular( equirectangular, renderTarget = null ) {
 
-		return this._fromTexture( equirectangular, renderTarget );
+// 		return this._fromTexture( equirectangular, renderTarget );
 
-	}
+// 	}
 
-	/**
-	 * Generates a PMREM from an cubemap texture, which can be either LDR
-	 * or HDR. The ideal input cube size is 256 x 256,
-	 * as this matches best with the 256 x 256 cubemap output.
-	 */
-	fromCubemap( cubemap, renderTarget = null ) {
+// 	/**
+// 	 * Generates a PMREM from an cubemap texture, which can be either LDR
+// 	 * or HDR. The ideal input cube size is 256 x 256,
+// 	 * as this matches best with the 256 x 256 cubemap output.
+// 	 */
+// 	fromCubemap( cubemap, renderTarget = null ) {
 
-		return this._fromTexture( cubemap, renderTarget );
+// 		return this._fromTexture( cubemap, renderTarget );
 
-	}
+// 	}
 
-	/**
-	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
-	 * your texture's network fetch for increased concurrency.
-	 */
-	compileCubemapShader() {
+// 	/**
+// 	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
+// 	 * your texture's network fetch for increased concurrency.
+// 	 */
+// 	compileCubemapShader() {
 
-		if ( this._cubemapMaterial === null ) {
+// 		if ( this._cubemapMaterial === null ) {
 
-			this._cubemapMaterial = _getCubemapMaterial();
-			this._compileMaterial( this._cubemapMaterial );
+// 			this._cubemapMaterial = _getCubemapMaterial();
+// 			this._compileMaterial( this._cubemapMaterial );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	/**
-	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
-	 * your texture's network fetch for increased concurrency.
-	 */
-	compileEquirectangularShader() {
+// 	/**
+// 	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
+// 	 * your texture's network fetch for increased concurrency.
+// 	 */
+// 	compileEquirectangularShader() {
 
-		if ( this._equirectMaterial === null ) {
+// 		if ( this._equirectMaterial === null ) {
 
-			this._equirectMaterial = _getEquirectMaterial();
-			this._compileMaterial( this._equirectMaterial );
+// 			this._equirectMaterial = _getEquirectMaterial();
+// 			this._compileMaterial( this._equirectMaterial );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	/**
-	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
-	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
-	 * one of them will cause any others to also become unusable.
-	 */
-	dispose() {
+// 	/**
+// 	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
+// 	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
+// 	 * one of them will cause any others to also become unusable.
+// 	 */
+// 	dispose() {
 
-		this._dispose();
+// 		this._dispose();
 
-		if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
-		if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();
+// 		if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
+// 		if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();
 
-	}
+// 	}
 
-	// private interface
+// 	// private interface
 
-	_setSize( cubeSize ) {
+// 	_setSize( cubeSize ) {
 
-		this._lodMax = Math.floor( Math.log2( cubeSize ) );
-		this._cubeSize = Math.pow( 2, this._lodMax );
+// 		this._lodMax = Math.floor( Math.log2( cubeSize ) );
+// 		this._cubeSize = Math.pow( 2, this._lodMax );
 
-	}
+// 	}
 
-	_dispose() {
+// 	_dispose() {
 
-		if ( this._blurMaterial !== null ) this._blurMaterial.dispose();
+// 		if ( this._blurMaterial !== null ) this._blurMaterial.dispose();
 
-		if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();
+// 		if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();
 
-		for ( let i = 0; i < this._lodPlanes.length; i ++ ) {
+// 		for ( let i = 0; i < this._lodPlanes.length; i ++ ) {
 
-			this._lodPlanes[ i ].dispose();
+// 			this._lodPlanes[ i ].dispose();
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_cleanup( outputTarget ) {
+// 	_cleanup( outputTarget ) {
 
-		this._renderer.setRenderTarget( _oldTarget );
-		outputTarget.scissorTest = false;
-		_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );
+// 		this._renderer.setRenderTarget( _oldTarget );
+// 		outputTarget.scissorTest = false;
+// 		_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );
 
-	}
+// 	}
 
-	_fromTexture( texture, renderTarget ) {
+// 	_fromTexture( texture, renderTarget ) {
 
-		if ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {
+// 		if ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {
 
-			this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );
+// 			this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );
 
-		} else { // Equirectangular
+// 		} else { // Equirectangular
 
-			this._setSize( texture.image.width / 4 );
+// 			this._setSize( texture.image.width / 4 );
 
-		}
+// 		}
 
-		_oldTarget = this._renderer.getRenderTarget();
+// 		_oldTarget = this._renderer.getRenderTarget();
 
-		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
-		this._textureToCubeUV( texture, cubeUVRenderTarget );
-		this._applyPMREM( cubeUVRenderTarget );
-		this._cleanup( cubeUVRenderTarget );
+// 		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
+// 		this._textureToCubeUV( texture, cubeUVRenderTarget );
+// 		this._applyPMREM( cubeUVRenderTarget );
+// 		this._cleanup( cubeUVRenderTarget );
 
-		return cubeUVRenderTarget;
+// 		return cubeUVRenderTarget;
 
-	}
+// 	}
 
-	_allocateTargets() {
+// 	_allocateTargets() {
 
-		const width = 3 * Math.max( this._cubeSize, 16 * 7 );
-		const height = 4 * this._cubeSize;
+// 		const width = 3 * Math.max( this._cubeSize, 16 * 7 );
+// 		const height = 4 * this._cubeSize;
 
-		const params = {
-			magFilter: LinearFilter,
-			minFilter: LinearFilter,
-			generateMipmaps: false,
-			type: HalfFloatType,
-			format: RGBAFormat,
-			encoding: LinearEncoding,
-			depthBuffer: false
-		};
+// 		const params = {
+// 			magFilter: LinearFilter,
+// 			minFilter: LinearFilter,
+// 			generateMipmaps: false,
+// 			type: HalfFloatType,
+// 			format: RGBAFormat,
+// 			encoding: LinearEncoding,
+// 			depthBuffer: false
+// 		};
 
-		const cubeUVRenderTarget = _createRenderTarget( width, height, params );
+// 		const cubeUVRenderTarget = _createRenderTarget( width, height, params );
 
-		if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width ) {
+// 		if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width ) {
 
-			if ( this._pingPongRenderTarget !== null ) {
+// 			if ( this._pingPongRenderTarget !== null ) {
 
-				this._dispose();
+// 				this._dispose();
 
-			}
+// 			}
 
-			this._pingPongRenderTarget = _createRenderTarget( width, height, params );
+// 			this._pingPongRenderTarget = _createRenderTarget( width, height, params );
 
-			const { _lodMax } = this;
-			( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );
+// 			const { _lodMax } = this;
+// 			( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );
 
-			this._blurMaterial = _getBlurShader( _lodMax, width, height );
+// 			this._blurMaterial = _getBlurShader( _lodMax, width, height );
 
-		}
+// 		}
 
-		return cubeUVRenderTarget;
+// 		return cubeUVRenderTarget;
 
-	}
+// 	}
 
-	_compileMaterial( material ) {
+// 	_compileMaterial( material ) {
 
-		const tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );
-		this._renderer.compile( tmpMesh, _flatCamera );
+// 		const tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );
+// 		this._renderer.compile( tmpMesh, _flatCamera );
 
-	}
+// 	}
 
-	_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {
+// 	_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {
 
-		const fov = 90;
-		const aspect = 1;
-		const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
-		const upSign = [ 1, - 1, 1, 1, 1, 1 ];
-		const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];
-		const renderer = this._renderer;
+// 		const fov = 90;
+// 		const aspect = 1;
+// 		const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
+// 		const upSign = [ 1, - 1, 1, 1, 1, 1 ];
+// 		const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];
+// 		const renderer = this._renderer;
 
-		const originalAutoClear = renderer.autoClear;
-		const toneMapping = renderer.toneMapping;
-		renderer.getClearColor( _clearColor );
+// 		const originalAutoClear = renderer.autoClear;
+// 		const toneMapping = renderer.toneMapping;
+// 		renderer.getClearColor( _clearColor );
 
-		renderer.toneMapping = NoToneMapping;
-		renderer.autoClear = false;
+// 		renderer.toneMapping = NoToneMapping;
+// 		renderer.autoClear = false;
 
-		const backgroundMaterial = new MeshBasicMaterial( {
-			name: 'PMREM.Background',
-			side: BackSide,
-			depthWrite: false,
-			depthTest: false,
-		} );
+// 		const backgroundMaterial = new MeshBasicMaterial( {
+// 			name: 'PMREM.Background',
+// 			side: BackSide,
+// 			depthWrite: false,
+// 			depthTest: false,
+// 		} );
 
-		const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );
+// 		const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );
 
-		let useSolidColor = false;
-		const background = scene.background;
+// 		let useSolidColor = false;
+// 		const background = scene.background;
 
-		if ( background ) {
+// 		if ( background ) {
 
-			if ( background.isColor ) {
+// 			if ( background.isColor ) {
 
-				backgroundMaterial.color.copy( background );
-				scene.background = null;
-				useSolidColor = true;
+// 				backgroundMaterial.color.copy( background );
+// 				scene.background = null;
+// 				useSolidColor = true;
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			backgroundMaterial.color.copy( _clearColor );
-			useSolidColor = true;
+// 			backgroundMaterial.color.copy( _clearColor );
+// 			useSolidColor = true;
 
-		}
+// 		}
 
-		for ( let i = 0; i < 6; i ++ ) {
+// 		for ( let i = 0; i < 6; i ++ ) {
 
-			const col = i % 3;
+// 			const col = i % 3;
 
-			if ( col === 0 ) {
+// 			if ( col === 0 ) {
 
-				cubeCamera.up.set( 0, upSign[ i ], 0 );
-				cubeCamera.lookAt( forwardSign[ i ], 0, 0 );
+// 				cubeCamera.up.set( 0, upSign[ i ], 0 );
+// 				cubeCamera.lookAt( forwardSign[ i ], 0, 0 );
 
-			} else if ( col === 1 ) {
+// 			} else if ( col === 1 ) {
 
-				cubeCamera.up.set( 0, 0, upSign[ i ] );
-				cubeCamera.lookAt( 0, forwardSign[ i ], 0 );
+// 				cubeCamera.up.set( 0, 0, upSign[ i ] );
+// 				cubeCamera.lookAt( 0, forwardSign[ i ], 0 );
 
-			} else {
+// 			} else {
 
-				cubeCamera.up.set( 0, upSign[ i ], 0 );
-				cubeCamera.lookAt( 0, 0, forwardSign[ i ] );
+// 				cubeCamera.up.set( 0, upSign[ i ], 0 );
+// 				cubeCamera.lookAt( 0, 0, forwardSign[ i ] );
 
-			}
+// 			}
 
-			const size = this._cubeSize;
+// 			const size = this._cubeSize;
 
-			_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );
+// 			_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );
 
-			renderer.setRenderTarget( cubeUVRenderTarget );
+// 			renderer.setRenderTarget( cubeUVRenderTarget );
 
-			if ( useSolidColor ) {
+// 			if ( useSolidColor ) {
 
-				renderer.render( backgroundBox, cubeCamera );
+// 				renderer.render( backgroundBox, cubeCamera );
 
-			}
+// 			}
 
-			renderer.render( scene, cubeCamera );
+// 			renderer.render( scene, cubeCamera );
 
-		}
+// 		}
 
-		backgroundBox.geometry.dispose();
-		backgroundBox.material.dispose();
+// 		backgroundBox.geometry.dispose();
+// 		backgroundBox.material.dispose();
 
-		renderer.toneMapping = toneMapping;
-		renderer.autoClear = originalAutoClear;
-		scene.background = background;
+// 		renderer.toneMapping = toneMapping;
+// 		renderer.autoClear = originalAutoClear;
+// 		scene.background = background;
 
-	}
+// 	}
 
-	_textureToCubeUV( texture, cubeUVRenderTarget ) {
+// 	_textureToCubeUV( texture, cubeUVRenderTarget ) {
 
-		const renderer = this._renderer;
+// 		const renderer = this._renderer;
 
-		const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );
+// 		const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );
 
-		if ( isCubeTexture ) {
+// 		if ( isCubeTexture ) {
 
-			if ( this._cubemapMaterial === null ) {
+// 			if ( this._cubemapMaterial === null ) {
 
-				this._cubemapMaterial = _getCubemapMaterial();
+// 				this._cubemapMaterial = _getCubemapMaterial();
 
-			}
+// 			}
 
-			this._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;
+// 			this._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;
 
-		} else {
+// 		} else {
 
-			if ( this._equirectMaterial === null ) {
+// 			if ( this._equirectMaterial === null ) {
 
-				this._equirectMaterial = _getEquirectMaterial();
+// 				this._equirectMaterial = _getEquirectMaterial();
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
-		const mesh = new Mesh( this._lodPlanes[ 0 ], material );
+// 		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
+// 		const mesh = new Mesh( this._lodPlanes[ 0 ], material );
 
-		const uniforms = material.uniforms;
+// 		const uniforms = material.uniforms;
 
-		uniforms[ 'envMap' ].value = texture;
+// 		uniforms[ 'envMap' ].value = texture;
 
-		const size = this._cubeSize;
+// 		const size = this._cubeSize;
 
-		_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );
+// 		_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );
 
-		renderer.setRenderTarget( cubeUVRenderTarget );
-		renderer.render( mesh, _flatCamera );
+// 		renderer.setRenderTarget( cubeUVRenderTarget );
+// 		renderer.render( mesh, _flatCamera );
 
-	}
+// 	}
 
-	_applyPMREM( cubeUVRenderTarget ) {
+// 	_applyPMREM( cubeUVRenderTarget ) {
 
-		const renderer = this._renderer;
-		const autoClear = renderer.autoClear;
-		renderer.autoClear = false;
+// 		const renderer = this._renderer;
+// 		const autoClear = renderer.autoClear;
+// 		renderer.autoClear = false;
 
-		for ( let i = 1; i < this._lodPlanes.length; i ++ ) {
+// 		for ( let i = 1; i < this._lodPlanes.length; i ++ ) {
 
-			const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );
+// 			const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );
 
-			const poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];
+// 			const poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];
 
-			this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );
+// 			this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );
 
-		}
+// 		}
 
-		renderer.autoClear = autoClear;
+// 		renderer.autoClear = autoClear;
 
-	}
+// 	}
 
-	/**
-	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
-	 * vertically and horizontally, but this breaks down on a cube. Here we apply
-	 * the blur latitudinally (around the poles), and then longitudinally (towards
-	 * the poles) to approximate the orthogonally-separable blur. It is least
-	 * accurate at the poles, but still does a decent job.
-	 */
-	_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {
+// 	/**
+// 	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
+// 	 * vertically and horizontally, but this breaks down on a cube. Here we apply
+// 	 * the blur latitudinally (around the poles), and then longitudinally (towards
+// 	 * the poles) to approximate the orthogonally-separable blur. It is least
+// 	 * accurate at the poles, but still does a decent job.
+// 	 */
+// 	_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {
 
-		const pingPongRenderTarget = this._pingPongRenderTarget;
+// 		const pingPongRenderTarget = this._pingPongRenderTarget;
 
-		this._halfBlur(
-			cubeUVRenderTarget,
-			pingPongRenderTarget,
-			lodIn,
-			lodOut,
-			sigma,
-			'latitudinal',
-			poleAxis );
+// 		this._halfBlur(
+// 			cubeUVRenderTarget,
+// 			pingPongRenderTarget,
+// 			lodIn,
+// 			lodOut,
+// 			sigma,
+// 			'latitudinal',
+// 			poleAxis );
 
-		this._halfBlur(
-			pingPongRenderTarget,
-			cubeUVRenderTarget,
-			lodOut,
-			lodOut,
-			sigma,
-			'longitudinal',
-			poleAxis );
+// 		this._halfBlur(
+// 			pingPongRenderTarget,
+// 			cubeUVRenderTarget,
+// 			lodOut,
+// 			lodOut,
+// 			sigma,
+// 			'longitudinal',
+// 			poleAxis );
 
-	}
+// 	}
 
-	_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {
+// 	_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {
 
-		const renderer = this._renderer;
-		const blurMaterial = this._blurMaterial;
+// 		const renderer = this._renderer;
+// 		const blurMaterial = this._blurMaterial;
 
-		if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {
+// 		if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {
 
-			console.error(
-				'blur direction must be either latitudinal or longitudinal!' );
+// 			console.error(
+// 				'blur direction must be either latitudinal or longitudinal!' );
 
-		}
+// 		}
 
-		// Number of standard deviations at which to cut off the discrete approximation.
-		const STANDARD_DEVIATIONS = 3;
+// 		// Number of standard deviations at which to cut off the discrete approximation.
+// 		const STANDARD_DEVIATIONS = 3;
 
-		const blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );
-		const blurUniforms = blurMaterial.uniforms;
+// 		const blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );
+// 		const blurUniforms = blurMaterial.uniforms;
 
-		const pixels = this._sizeLods[ lodIn ] - 1;
-		const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
-		const sigmaPixels = sigmaRadians / radiansPerPixel;
-		const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;
+// 		const pixels = this._sizeLods[ lodIn ] - 1;
+// 		const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
+// 		const sigmaPixels = sigmaRadians / radiansPerPixel;
+// 		const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;
 
-		if ( samples > MAX_SAMPLES ) {
+// 		if ( samples > MAX_SAMPLES ) {
 
-			console.warn( `sigmaRadians, ${
-				sigmaRadians}, is too large and will clip, as it requested ${
-				samples} samples when the maximum is set to ${MAX_SAMPLES}` );
+// 			console.warn( `sigmaRadians, ${
+// 				sigmaRadians}, is too large and will clip, as it requested ${
+// 				samples} samples when the maximum is set to ${MAX_SAMPLES}` );
 
-		}
+// 		}
 
-		const weights = [];
-		let sum = 0;
+// 		const weights = [];
+// 		let sum = 0;
 
-		for ( let i = 0; i < MAX_SAMPLES; ++ i ) {
+// 		for ( let i = 0; i < MAX_SAMPLES; ++ i ) {
 
-			const x = i / sigmaPixels;
-			const weight = Math.exp( - x * x / 2 );
-			weights.push( weight );
+// 			const x = i / sigmaPixels;
+// 			const weight = Math.exp( - x * x / 2 );
+// 			weights.push( weight );
 
-			if ( i === 0 ) {
+// 			if ( i === 0 ) {
 
-				sum += weight;
+// 				sum += weight;
 
-			} else if ( i < samples ) {
+// 			} else if ( i < samples ) {
 
-				sum += 2 * weight;
+// 				sum += 2 * weight;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		for ( let i = 0; i < weights.length; i ++ ) {
+// 		for ( let i = 0; i < weights.length; i ++ ) {
 
-			weights[ i ] = weights[ i ] / sum;
+// 			weights[ i ] = weights[ i ] / sum;
 
-		}
+// 		}
 
-		blurUniforms[ 'envMap' ].value = targetIn.texture;
-		blurUniforms[ 'samples' ].value = samples;
-		blurUniforms[ 'weights' ].value = weights;
-		blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';
+// 		blurUniforms[ 'envMap' ].value = targetIn.texture;
+// 		blurUniforms[ 'samples' ].value = samples;
+// 		blurUniforms[ 'weights' ].value = weights;
+// 		blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';
 
-		if ( poleAxis ) {
+// 		if ( poleAxis ) {
 
-			blurUniforms[ 'poleAxis' ].value = poleAxis;
+// 			blurUniforms[ 'poleAxis' ].value = poleAxis;
 
-		}
+// 		}
 
-		const { _lodMax } = this;
-		blurUniforms[ 'dTheta' ].value = radiansPerPixel;
-		blurUniforms[ 'mipInt' ].value = _lodMax - lodIn;
+// 		const { _lodMax } = this;
+// 		blurUniforms[ 'dTheta' ].value = radiansPerPixel;
+// 		blurUniforms[ 'mipInt' ].value = _lodMax - lodIn;
 
-		const outputSize = this._sizeLods[ lodOut ];
-		const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );
-		const y = 4 * ( this._cubeSize - outputSize );
+// 		const outputSize = this._sizeLods[ lodOut ];
+// 		const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );
+// 		const y = 4 * ( this._cubeSize - outputSize );
 
-		_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
-		renderer.setRenderTarget( targetOut );
-		renderer.render( blurMesh, _flatCamera );
+// 		_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
+// 		renderer.setRenderTarget( targetOut );
+// 		renderer.render( blurMesh, _flatCamera );
 
-	}
+// 	}
 
-}
+// }
 
 
 
-function _createPlanes( lodMax ) {
+// function _createPlanes( lodMax ) {
 
-	const lodPlanes = [];
-	const sizeLods = [];
-	const sigmas = [];
+// 	const lodPlanes = [];
+// 	const sizeLods = [];
+// 	const sigmas = [];
 
-	let lod = lodMax;
+// 	let lod = lodMax;
 
-	const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
+// 	const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
 
-	for ( let i = 0; i < totalLods; i ++ ) {
+// 	for ( let i = 0; i < totalLods; i ++ ) {
 
-		const sizeLod = Math.pow( 2, lod );
-		sizeLods.push( sizeLod );
-		let sigma = 1.0 / sizeLod;
+// 		const sizeLod = Math.pow( 2, lod );
+// 		sizeLods.push( sizeLod );
+// 		let sigma = 1.0 / sizeLod;
 
-		if ( i > lodMax - LOD_MIN ) {
+// 		if ( i > lodMax - LOD_MIN ) {
 
-			sigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];
+// 			sigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];
 
-		} else if ( i === 0 ) {
+// 		} else if ( i === 0 ) {
 
-			sigma = 0;
+// 			sigma = 0;
 
-		}
+// 		}
 
-		sigmas.push( sigma );
+// 		sigmas.push( sigma );
 
-		const texelSize = 1.0 / ( sizeLod - 2 );
-		const min = - texelSize;
-		const max = 1 + texelSize;
-		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];
+// 		const texelSize = 1.0 / ( sizeLod - 2 );
+// 		const min = - texelSize;
+// 		const max = 1 + texelSize;
+// 		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];
 
-		const cubeFaces = 6;
-		const vertices = 6;
-		const positionSize = 3;
-		const uvSize = 2;
-		const faceIndexSize = 1;
+// 		const cubeFaces = 6;
+// 		const vertices = 6;
+// 		const positionSize = 3;
+// 		const uvSize = 2;
+// 		const faceIndexSize = 1;
 
-		const position = new Float32Array( positionSize * vertices * cubeFaces );
-		const uv = new Float32Array( uvSize * vertices * cubeFaces );
-		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );
+// 		const position = new Float32Array( positionSize * vertices * cubeFaces );
+// 		const uv = new Float32Array( uvSize * vertices * cubeFaces );
+// 		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );
 
-		for ( let face = 0; face < cubeFaces; face ++ ) {
+// 		for ( let face = 0; face < cubeFaces; face ++ ) {
 
-			const x = ( face % 3 ) * 2 / 3 - 1;
-			const y = face > 2 ? 0 : - 1;
-			const coordinates = [
-				x, y, 0,
-				x + 2 / 3, y, 0,
-				x + 2 / 3, y + 1, 0,
-				x, y, 0,
-				x + 2 / 3, y + 1, 0,
-				x, y + 1, 0
-			];
-			position.set( coordinates, positionSize * vertices * face );
-			uv.set( uv1, uvSize * vertices * face );
-			const fill = [ face, face, face, face, face, face ];
-			faceIndex.set( fill, faceIndexSize * vertices * face );
+// 			const x = ( face % 3 ) * 2 / 3 - 1;
+// 			const y = face > 2 ? 0 : - 1;
+// 			const coordinates = [
+// 				x, y, 0,
+// 				x + 2 / 3, y, 0,
+// 				x + 2 / 3, y + 1, 0,
+// 				x, y, 0,
+// 				x + 2 / 3, y + 1, 0,
+// 				x, y + 1, 0
+// 			];
+// 			position.set( coordinates, positionSize * vertices * face );
+// 			uv.set( uv1, uvSize * vertices * face );
+// 			const fill = [ face, face, face, face, face, face ];
+// 			faceIndex.set( fill, faceIndexSize * vertices * face );
 
-		}
+// 		}
 
-		const planes = new BufferGeometry();
-		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
-		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
-		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
-		lodPlanes.push( planes );
+// 		const planes = new BufferGeometry();
+// 		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
+// 		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
+// 		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
+// 		lodPlanes.push( planes );
 
-		if ( lod > LOD_MIN ) {
+// 		if ( lod > LOD_MIN ) {
 
-			lod --;
+// 			lod --;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return { lodPlanes, sizeLods, sigmas };
+// 	return { lodPlanes, sizeLods, sigmas };
 
-}
+// }
 
-function _createRenderTarget( width, height, params ) {
+// function _createRenderTarget( width, height, params ) {
 
-	const cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );
-	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
-	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
-	cubeUVRenderTarget.scissorTest = true;
-	return cubeUVRenderTarget;
+// 	const cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );
+// 	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
+// 	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
+// 	cubeUVRenderTarget.scissorTest = true;
+// 	return cubeUVRenderTarget;
 
-}
+// }
 
-function _setViewport( target, x, y, width, height ) {
+// function _setViewport( target, x, y, width, height ) {
 
-	target.viewport.set( x, y, width, height );
-	target.scissor.set( x, y, width, height );
+// 	target.viewport.set( x, y, width, height );
+// 	target.scissor.set( x, y, width, height );
 
-}
+// }
 
-function _getBlurShader( lodMax, width, height ) {
+// function _getBlurShader( lodMax, width, height ) {
 
-	const weights = new Float32Array( MAX_SAMPLES );
-	const poleAxis = new Vector3( 0, 1, 0 );
-	const shaderMaterial = new ShaderMaterial( {
+// 	const weights = new Float32Array( MAX_SAMPLES );
+// 	const poleAxis = new Vector3( 0, 1, 0 );
+// 	const shaderMaterial = new ShaderMaterial( {
 
-		name: 'SphericalGaussianBlur',
+// 		name: 'SphericalGaussianBlur',
 
-		defines: {
-			'n': MAX_SAMPLES,
-			'CUBEUV_TEXEL_WIDTH': 1.0 / width,
-			'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
-			'CUBEUV_MAX_MIP': `${lodMax}.0`,
-		},
+// 		defines: {
+// 			'n': MAX_SAMPLES,
+// 			'CUBEUV_TEXEL_WIDTH': 1.0 / width,
+// 			'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
+// 			'CUBEUV_MAX_MIP': `${lodMax}.0`,
+// 		},
 
-		uniforms: {
-			'envMap': { value: null },
-			'samples': { value: 1 },
-			'weights': { value: weights },
-			'latitudinal': { value: false },
-			'dTheta': { value: 0 },
-			'mipInt': { value: 0 },
-			'poleAxis': { value: poleAxis }
-		},
+// 		uniforms: {
+// 			'envMap': { value: null },
+// 			'samples': { value: 1 },
+// 			'weights': { value: weights },
+// 			'latitudinal': { value: false },
+// 			'dTheta': { value: 0 },
+// 			'mipInt': { value: 0 },
+// 			'poleAxis': { value: poleAxis }
+// 		},
 
-		vertexShader: _getCommonVertexShader(),
+// 		vertexShader: _getCommonVertexShader(),
 
-		fragmentShader: /* glsl */`
+// 		fragmentShader: /* glsl */`
 
-			precision mediump float;
-			precision mediump int;
+// 			precision mediump float;
+// 			precision mediump int;
 
-			varying vec3 vOutputDirection;
+// 			varying vec3 vOutputDirection;
 
-			uniform sampler2D envMap;
-			uniform int samples;
-			uniform float weights[ n ];
-			uniform bool latitudinal;
-			uniform float dTheta;
-			uniform float mipInt;
-			uniform vec3 poleAxis;
+// 			uniform sampler2D envMap;
+// 			uniform int samples;
+// 			uniform float weights[ n ];
+// 			uniform bool latitudinal;
+// 			uniform float dTheta;
+// 			uniform float mipInt;
+// 			uniform vec3 poleAxis;
 
-			#define ENVMAP_TYPE_CUBE_UV
-			#include <cube_uv_reflection_fragment>
+// 			#define ENVMAP_TYPE_CUBE_UV
+// 			#include <cube_uv_reflection_fragment>
 
-			vec3 getSample( float theta, vec3 axis ) {
+// 			vec3 getSample( float theta, vec3 axis ) {
 
-				float cosTheta = cos( theta );
-				// Rodrigues' axis-angle rotation
-				vec3 sampleDirection = vOutputDirection * cosTheta
-					+ cross( axis, vOutputDirection ) * sin( theta )
-					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );
+// 				float cosTheta = cos( theta );
+// 				// Rodrigues' axis-angle rotation
+// 				vec3 sampleDirection = vOutputDirection * cosTheta
+// 					+ cross( axis, vOutputDirection ) * sin( theta )
+// 					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );
 
-				return bilinearCubeUV( envMap, sampleDirection, mipInt );
+// 				return bilinearCubeUV( envMap, sampleDirection, mipInt );
 
-			}
+// 			}
 
-			void main() {
+// 			void main() {
 
-				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );
+// 				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );
 
-				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {
+// 				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {
 
-					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );
+// 					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );
 
-				}
+// 				}
 
-				axis = normalize( axis );
+// 				axis = normalize( axis );
 
-				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
-				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );
+// 				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
+// 				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );
 
-				for ( int i = 1; i < n; i++ ) {
+// 				for ( int i = 1; i < n; i++ ) {
 
-					if ( i >= samples ) {
+// 					if ( i >= samples ) {
 
-						break;
+// 						break;
 
-					}
+// 					}
 
-					float theta = dTheta * float( i );
-					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
-					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );
+// 					float theta = dTheta * float( i );
+// 					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
+// 					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );
 
-				}
+// 				}
 
-			}
-		`,
+// 			}
+// 		`,
 
-		blending: NoBlending,
-		depthTest: false,
-		depthWrite: false
+// 		blending: NoBlending,
+// 		depthTest: false,
+// 		depthWrite: false
 
-	} );
+// 	} );
 
-	return shaderMaterial;
+// 	return shaderMaterial;
 
-}
+// }
 
-function _getEquirectMaterial() {
+// function _getEquirectMaterial() {
 
-	return new ShaderMaterial( {
+// 	return new ShaderMaterial( {
 
-		name: 'EquirectangularToCubeUV',
+// 		name: 'EquirectangularToCubeUV',
 
-		uniforms: {
-			'envMap': { value: null }
-		},
+// 		uniforms: {
+// 			'envMap': { value: null }
+// 		},
 
-		vertexShader: _getCommonVertexShader(),
+// 		vertexShader: _getCommonVertexShader(),
 
-		fragmentShader: /* glsl */`
+// 		fragmentShader: /* glsl */`
 
-			precision mediump float;
-			precision mediump int;
+// 			precision mediump float;
+// 			precision mediump int;
 
-			varying vec3 vOutputDirection;
+// 			varying vec3 vOutputDirection;
 
-			uniform sampler2D envMap;
+// 			uniform sampler2D envMap;
 
-			#include <common>
+// 			#include <common>
 
-			void main() {
+// 			void main() {
 
-				vec3 outputDirection = normalize( vOutputDirection );
-				vec2 uv = equirectUv( outputDirection );
+// 				vec3 outputDirection = normalize( vOutputDirection );
+// 				vec2 uv = equirectUv( outputDirection );
 
-				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );
+// 				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );
 
-			}
-		`,
+// 			}
+// 		`,
 
-		blending: NoBlending,
-		depthTest: false,
-		depthWrite: false
+// 		blending: NoBlending,
+// 		depthTest: false,
+// 		depthWrite: false
 
-	} );
+// 	} );
 
-}
+// }
 
-function _getCubemapMaterial() {
+// function _getCubemapMaterial() {
 
-	return new ShaderMaterial( {
+// 	return new ShaderMaterial( {
 
-		name: 'CubemapToCubeUV',
+// 		name: 'CubemapToCubeUV',
 
-		uniforms: {
-			'envMap': { value: null },
-			'flipEnvMap': { value: - 1 }
-		},
+// 		uniforms: {
+// 			'envMap': { value: null },
+// 			'flipEnvMap': { value: - 1 }
+// 		},
 
-		vertexShader: _getCommonVertexShader(),
+// 		vertexShader: _getCommonVertexShader(),
 
-		fragmentShader: /* glsl */`
+// 		fragmentShader: /* glsl */`
 
-			precision mediump float;
-			precision mediump int;
+// 			precision mediump float;
+// 			precision mediump int;
 
-			uniform float flipEnvMap;
+// 			uniform float flipEnvMap;
 
-			varying vec3 vOutputDirection;
+// 			varying vec3 vOutputDirection;
 
-			uniform samplerCube envMap;
+// 			uniform samplerCube envMap;
 
-			void main() {
+// 			void main() {
 
-				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );
+// 				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );
 
-			}
-		`,
+// 			}
+// 		`,
 
-		blending: NoBlending,
-		depthTest: false,
-		depthWrite: false
+// 		blending: NoBlending,
+// 		depthTest: false,
+// 		depthWrite: false
 
-	} );
+// 	} );
 
-}
+// }
 
-function _getCommonVertexShader() {
+// function _getCommonVertexShader() {
 
-	return /* glsl */`
+// 	return /* glsl */`
 
-		precision mediump float;
-		precision mediump int;
+// 		precision mediump float;
+// 		precision mediump int;
 
-		attribute float faceIndex;
+// 		attribute float faceIndex;
 
-		varying vec3 vOutputDirection;
+// 		varying vec3 vOutputDirection;
 
-		// RH coordinate system; PMREM face-indexing convention
-		vec3 getDirection( vec2 uv, float face ) {
+// 		// RH coordinate system; PMREM face-indexing convention
+// 		vec3 getDirection( vec2 uv, float face ) {
 
-			uv = 2.0 * uv - 1.0;
+// 			uv = 2.0 * uv - 1.0;
 
-			vec3 direction = vec3( uv, 1.0 );
+// 			vec3 direction = vec3( uv, 1.0 );
 
-			if ( face == 0.0 ) {
+// 			if ( face == 0.0 ) {
 
-				direction = direction.zyx; // ( 1, v, u ) pos x
+// 				direction = direction.zyx; // ( 1, v, u ) pos x
 
-			} else if ( face == 1.0 ) {
+// 			} else if ( face == 1.0 ) {
 
-				direction = direction.xzy;
-				direction.xz *= -1.0; // ( -u, 1, -v ) pos y
+// 				direction = direction.xzy;
+// 				direction.xz *= -1.0; // ( -u, 1, -v ) pos y
 
-			} else if ( face == 2.0 ) {
+// 			} else if ( face == 2.0 ) {
 
-				direction.x *= -1.0; // ( -u, v, 1 ) pos z
+// 				direction.x *= -1.0; // ( -u, v, 1 ) pos z
 
-			} else if ( face == 3.0 ) {
+// 			} else if ( face == 3.0 ) {
 
-				direction = direction.zyx;
-				direction.xz *= -1.0; // ( -1, v, -u ) neg x
+// 				direction = direction.zyx;
+// 				direction.xz *= -1.0; // ( -1, v, -u ) neg x
 
-			} else if ( face == 4.0 ) {
+// 			} else if ( face == 4.0 ) {
 
-				direction = direction.xzy;
-				direction.xy *= -1.0; // ( -u, -1, v ) neg y
+// 				direction = direction.xzy;
+// 				direction.xy *= -1.0; // ( -u, -1, v ) neg y
 
-			} else if ( face == 5.0 ) {
+// 			} else if ( face == 5.0 ) {
 
-				direction.z *= -1.0; // ( u, v, -1 ) neg z
+// 				direction.z *= -1.0; // ( u, v, -1 ) neg z
 
-			}
+// 			}
 
-			return direction;
+// 			return direction;
 
-		}
+// 		}
 
-		void main() {
+// 		void main() {
 
-			vOutputDirection = getDirection( uv, faceIndex );
-			gl_Position = vec4( position, 1.0 );
+// 			vOutputDirection = getDirection( uv, faceIndex );
+// 			gl_Position = vec4( position, 1.0 );
 
-		}
-	`;
+// 		}
+// 	`;
 
-}
+// }
 
-function WebGLCubeUVMaps( renderer ) {
+// function WebGLCubeUVMaps( renderer ) {
 
-	let cubeUVmaps = new WeakMap();
+// 	let cubeUVmaps = new WeakMap();
 
-	let pmremGenerator = null;
+// 	let pmremGenerator = null;
 
-	function get( texture ) {
+// 	function get( texture ) {
 
-		if ( texture && texture.isTexture ) {
+// 		if ( texture && texture.isTexture ) {
 
-			const mapping = texture.mapping;
+// 			const mapping = texture.mapping;
 
-			const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );
-			const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );
+// 			const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );
+// 			const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );
 
-			// equirect/cube map to cubeUV conversion
+// 			// equirect/cube map to cubeUV conversion
 
-			if ( isEquirectMap || isCubeMap ) {
+// 			if ( isEquirectMap || isCubeMap ) {
 
-				if ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {
+// 				if ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {
 
-					texture.needsPMREMUpdate = false;
+// 					texture.needsPMREMUpdate = false;
 
-					let renderTarget = cubeUVmaps.get( texture );
+// 					let renderTarget = cubeUVmaps.get( texture );
 
-					if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );
+// 					if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );
 
-					renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );
-					cubeUVmaps.set( texture, renderTarget );
+// 					renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );
+// 					cubeUVmaps.set( texture, renderTarget );
 
-					return renderTarget.texture;
+// 					return renderTarget.texture;
 
-				} else {
+// 				} else {
 
-					if ( cubeUVmaps.has( texture ) ) {
+// 					if ( cubeUVmaps.has( texture ) ) {
 
-						return cubeUVmaps.get( texture ).texture;
+// 						return cubeUVmaps.get( texture ).texture;
 
-					} else {
+// 					} else {
 
-						const image = texture.image;
+// 						const image = texture.image;
 
-						if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {
+// 						if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {
 
-							if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );
+// 							if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );
 
-							const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
-							cubeUVmaps.set( texture, renderTarget );
+// 							const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
+// 							cubeUVmaps.set( texture, renderTarget );
 
-							texture.addEventListener( 'dispose', onTextureDispose );
+// 							texture.addEventListener( 'dispose', onTextureDispose );
 
-							return renderTarget.texture;
+// 							return renderTarget.texture;
 
-						} else {
+// 						} else {
 
-							// image not yet ready. try the conversion next frame
+// 							// image not yet ready. try the conversion next frame
 
-							return null;
+// 							return null;
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return texture;
+// 		return texture;
 
-	}
+// 	}
 
-	function isCubeTextureComplete( image ) {
+// 	function isCubeTextureComplete( image ) {
 
-		let count = 0;
-		const length = 6;
+// 		let count = 0;
+// 		const length = 6;
 
-		for ( let i = 0; i < length; i ++ ) {
+// 		for ( let i = 0; i < length; i ++ ) {
 
-			if ( image[ i ] !== undefined ) count ++;
+// 			if ( image[ i ] !== undefined ) count ++;
 
-		}
+// 		}
 
-		return count === length;
+// 		return count === length;
 
 
-	}
+// 	}
 
-	function onTextureDispose( event ) {
+// 	function onTextureDispose( event ) {
 
-		const texture = event.target;
+// 		const texture = event.target;
 
-		texture.removeEventListener( 'dispose', onTextureDispose );
+// 		texture.removeEventListener( 'dispose', onTextureDispose );
 
-		const cubemapUV = cubeUVmaps.get( texture );
+// 		const cubemapUV = cubeUVmaps.get( texture );
 
-		if ( cubemapUV !== undefined ) {
+// 		if ( cubemapUV !== undefined ) {
 
-			cubeUVmaps.delete( texture );
-			cubemapUV.dispose();
+// 			cubeUVmaps.delete( texture );
+// 			cubemapUV.dispose();
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		cubeUVmaps = new WeakMap();
+// 		cubeUVmaps = new WeakMap();
 
-		if ( pmremGenerator !== null ) {
+// 		if ( pmremGenerator !== null ) {
 
-			pmremGenerator.dispose();
-			pmremGenerator = null;
+// 			pmremGenerator.dispose();
+// 			pmremGenerator = null;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return {
-		get: get,
-		dispose: dispose
-	};
+// 	return {
+// 		get: get,
+// 		dispose: dispose
+// 	};
 
-}
+// }
 
-function WebGLExtensions( gl ) {
+// function WebGLExtensions( gl ) {
 
-	const extensions = {};
+// 	const extensions = {};
 
-	function getExtension( name ) {
+// 	function getExtension( name ) {
 
-		if ( extensions[ name ] !== undefined ) {
+// 		if ( extensions[ name ] !== undefined ) {
 
-			return extensions[ name ];
+// 			return extensions[ name ];
 
-		}
+// 		}
 
-		let extension;
+// 		let extension;
 
-		switch ( name ) {
+// 		switch ( name ) {
 
-			case 'WEBGL_depth_texture':
-				extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
-				break;
+// 			case 'WEBGL_depth_texture':
+// 				extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
+// 				break;
 
-			case 'EXT_texture_filter_anisotropic':
-				extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
-				break;
+// 			case 'EXT_texture_filter_anisotropic':
+// 				extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
+// 				break;
 
-			case 'WEBGL_compressed_texture_s3tc':
-				extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
-				break;
+// 			case 'WEBGL_compressed_texture_s3tc':
+// 				extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
+// 				break;
 
-			case 'WEBGL_compressed_texture_pvrtc':
-				extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
-				break;
+// 			case 'WEBGL_compressed_texture_pvrtc':
+// 				extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
+// 				break;
 
-			default:
-				extension = gl.getExtension( name );
+// 			default:
+// 				extension = gl.getExtension( name );
 
-		}
+// 		}
 
-		extensions[ name ] = extension;
+// 		extensions[ name ] = extension;
 
-		return extension;
+// 		return extension;
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		has: function ( name ) {
+// 		has: function ( name ) {
 
-			return getExtension( name ) !== null;
+// 			return getExtension( name ) !== null;
 
-		},
+// 		},
 
-		init: function ( capabilities ) {
+// 		init: function ( capabilities ) {
 
-			if ( capabilities.isWebGL2 ) {
+// 			if ( capabilities.isWebGL2 ) {
 
-				getExtension( 'EXT_color_buffer_float' );
+// 				getExtension( 'EXT_color_buffer_float' );
 
-			} else {
+// 			} else {
 
-				getExtension( 'WEBGL_depth_texture' );
-				getExtension( 'OES_texture_float' );
-				getExtension( 'OES_texture_half_float' );
-				getExtension( 'OES_texture_half_float_linear' );
-				getExtension( 'OES_standard_derivatives' );
-				getExtension( 'OES_element_index_uint' );
-				getExtension( 'OES_vertex_array_object' );
-				getExtension( 'ANGLE_instanced_arrays' );
+// 				getExtension( 'WEBGL_depth_texture' );
+// 				getExtension( 'OES_texture_float' );
+// 				getExtension( 'OES_texture_half_float' );
+// 				getExtension( 'OES_texture_half_float_linear' );
+// 				getExtension( 'OES_standard_derivatives' );
+// 				getExtension( 'OES_element_index_uint' );
+// 				getExtension( 'OES_vertex_array_object' );
+// 				getExtension( 'ANGLE_instanced_arrays' );
 
-			}
+// 			}
 
-			getExtension( 'OES_texture_float_linear' );
-			getExtension( 'EXT_color_buffer_half_float' );
-			getExtension( 'WEBGL_multisampled_render_to_texture' );
+// 			getExtension( 'OES_texture_float_linear' );
+// 			getExtension( 'EXT_color_buffer_half_float' );
+// 			getExtension( 'WEBGL_multisampled_render_to_texture' );
 
-		},
+// 		},
 
-		get: function ( name ) {
+// 		get: function ( name ) {
 
-			const extension = getExtension( name );
+// 			const extension = getExtension( name );
 
-			if ( extension === null ) {
+// 			if ( extension === null ) {
 
-				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
+// 				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
 
-			}
+// 			}
 
-			return extension;
+// 			return extension;
 
-		}
+// 		}
 
-	};
+// 	};
 
-}
+// }
 
-function WebGLGeometries( gl, attributes, info, bindingStates ) {
+// function WebGLGeometries( gl, attributes, info, bindingStates ) {
 
-	const geometries = {};
-	const wireframeAttributes = new WeakMap();
+// 	const geometries = {};
+// 	const wireframeAttributes = new WeakMap();
 
-	function onGeometryDispose( event ) {
+// 	function onGeometryDispose( event ) {
 
-		const geometry = event.target;
+// 		const geometry = event.target;
 
-		if ( geometry.index !== null ) {
+// 		if ( geometry.index !== null ) {
 
-			attributes.remove( geometry.index );
+// 			attributes.remove( geometry.index );
 
-		}
+// 		}
 
-		for ( const name in geometry.attributes ) {
+// 		for ( const name in geometry.attributes ) {
 
-			attributes.remove( geometry.attributes[ name ] );
+// 			attributes.remove( geometry.attributes[ name ] );
 
-		}
+// 		}
 
-		geometry.removeEventListener( 'dispose', onGeometryDispose );
+// 		geometry.removeEventListener( 'dispose', onGeometryDispose );
 
-		delete geometries[ geometry.id ];
+// 		delete geometries[ geometry.id ];
 
-		const attribute = wireframeAttributes.get( geometry );
+// 		const attribute = wireframeAttributes.get( geometry );
 
-		if ( attribute ) {
+// 		if ( attribute ) {
 
-			attributes.remove( attribute );
-			wireframeAttributes.delete( geometry );
+// 			attributes.remove( attribute );
+// 			wireframeAttributes.delete( geometry );
 
-		}
+// 		}
 
-		bindingStates.releaseStatesOfGeometry( geometry );
+// 		bindingStates.releaseStatesOfGeometry( geometry );
 
-		if ( geometry.isInstancedBufferGeometry === true ) {
+// 		if ( geometry.isInstancedBufferGeometry === true ) {
 
-			delete geometry._maxInstanceCount;
+// 			delete geometry._maxInstanceCount;
 
-		}
+// 		}
 
-		//
+// 		//
 
-		info.memory.geometries --;
+// 		info.memory.geometries --;
 
-	}
+// 	}
 
-	function get( object, geometry ) {
+// 	function get( object, geometry ) {
 
-		if ( geometries[ geometry.id ] === true ) return geometry;
+// 		if ( geometries[ geometry.id ] === true ) return geometry;
 
-		geometry.addEventListener( 'dispose', onGeometryDispose );
+// 		geometry.addEventListener( 'dispose', onGeometryDispose );
 
-		geometries[ geometry.id ] = true;
+// 		geometries[ geometry.id ] = true;
 
-		info.memory.geometries ++;
+// 		info.memory.geometries ++;
 
-		return geometry;
+// 		return geometry;
 
-	}
+// 	}
 
-	function update( geometry ) {
+// 	function update( geometry ) {
 
-		const geometryAttributes = geometry.attributes;
+// 		const geometryAttributes = geometry.attributes;
 
-		// Updating index buffer in VAO now. See WebGLBindingStates.
+// 		// Updating index buffer in VAO now. See WebGLBindingStates.
 
-		for ( const name in geometryAttributes ) {
+// 		for ( const name in geometryAttributes ) {
 
-			attributes.update( geometryAttributes[ name ], 34962 );
+// 			attributes.update( geometryAttributes[ name ], 34962 );
 
-		}
+// 		}
 
-		// morph targets
+// 		// morph targets
 
-		const morphAttributes = geometry.morphAttributes;
+// 		const morphAttributes = geometry.morphAttributes;
 
-		for ( const name in morphAttributes ) {
+// 		for ( const name in morphAttributes ) {
 
-			const array = morphAttributes[ name ];
+// 			const array = morphAttributes[ name ];
 
-			for ( let i = 0, l = array.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = array.length; i < l; i ++ ) {
 
-				attributes.update( array[ i ], 34962 );
+// 				attributes.update( array[ i ], 34962 );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function updateWireframeAttribute( geometry ) {
+// 	function updateWireframeAttribute( geometry ) {
 
-		const indices = [];
+// 		const indices = [];
 
-		const geometryIndex = geometry.index;
-		const geometryPosition = geometry.attributes.position;
-		let version = 0;
+// 		const geometryIndex = geometry.index;
+// 		const geometryPosition = geometry.attributes.position;
+// 		let version = 0;
 
-		if ( geometryIndex !== null ) {
+// 		if ( geometryIndex !== null ) {
 
-			const array = geometryIndex.array;
-			version = geometryIndex.version;
+// 			const array = geometryIndex.array;
+// 			version = geometryIndex.version;
 
-			for ( let i = 0, l = array.length; i < l; i += 3 ) {
+// 			for ( let i = 0, l = array.length; i < l; i += 3 ) {
 
-				const a = array[ i + 0 ];
-				const b = array[ i + 1 ];
-				const c = array[ i + 2 ];
+// 				const a = array[ i + 0 ];
+// 				const b = array[ i + 1 ];
+// 				const c = array[ i + 2 ];
 
-				indices.push( a, b, b, c, c, a );
+// 				indices.push( a, b, b, c, c, a );
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			const array = geometryPosition.array;
-			version = geometryPosition.version;
+// 			const array = geometryPosition.array;
+// 			version = geometryPosition.version;
 
-			for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
+// 			for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
 
-				const a = i + 0;
-				const b = i + 1;
-				const c = i + 2;
+// 				const a = i + 0;
+// 				const b = i + 1;
+// 				const c = i + 2;
 
-				indices.push( a, b, b, c, c, a );
+// 				indices.push( a, b, b, c, c, a );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
-		attribute.version = version;
+// 		const attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
+// 		attribute.version = version;
 
-		// Updating index buffer in VAO now. See WebGLBindingStates
+// 		// Updating index buffer in VAO now. See WebGLBindingStates
 
-		//
+// 		//
 
-		const previousAttribute = wireframeAttributes.get( geometry );
+// 		const previousAttribute = wireframeAttributes.get( geometry );
 
-		if ( previousAttribute ) attributes.remove( previousAttribute );
+// 		if ( previousAttribute ) attributes.remove( previousAttribute );
 
-		//
+// 		//
 
-		wireframeAttributes.set( geometry, attribute );
+// 		wireframeAttributes.set( geometry, attribute );
 
-	}
+// 	}
 
-	function getWireframeAttribute( geometry ) {
+// 	function getWireframeAttribute( geometry ) {
 
-		const currentAttribute = wireframeAttributes.get( geometry );
+// 		const currentAttribute = wireframeAttributes.get( geometry );
 
-		if ( currentAttribute ) {
+// 		if ( currentAttribute ) {
 
-			const geometryIndex = geometry.index;
+// 			const geometryIndex = geometry.index;
 
-			if ( geometryIndex !== null ) {
+// 			if ( geometryIndex !== null ) {
 
-				// if the attribute is obsolete, create a new one
+// 				// if the attribute is obsolete, create a new one
 
-				if ( currentAttribute.version < geometryIndex.version ) {
+// 				if ( currentAttribute.version < geometryIndex.version ) {
 
-					updateWireframeAttribute( geometry );
+// 					updateWireframeAttribute( geometry );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			updateWireframeAttribute( geometry );
+// 			updateWireframeAttribute( geometry );
 
-		}
+// 		}
 
-		return wireframeAttributes.get( geometry );
+// 		return wireframeAttributes.get( geometry );
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		get: get,
-		update: update,
+// 		get: get,
+// 		update: update,
 
-		getWireframeAttribute: getWireframeAttribute
+// 		getWireframeAttribute: getWireframeAttribute
 
-	};
+// 	};
 
-}
+// }
 
-function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {
+// function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {
 
-	const isWebGL2 = capabilities.isWebGL2;
+// 	const isWebGL2 = capabilities.isWebGL2;
 
-	let mode;
+// 	let mode;
 
-	function setMode( value ) {
+// 	function setMode( value ) {
 
-		mode = value;
+// 		mode = value;
 
-	}
+// 	}
 
-	let type, bytesPerElement;
+// 	let type, bytesPerElement;
 
-	function setIndex( value ) {
+// 	function setIndex( value ) {
 
-		type = value.type;
-		bytesPerElement = value.bytesPerElement;
+// 		type = value.type;
+// 		bytesPerElement = value.bytesPerElement;
 
-	}
+// 	}
 
-	function render( start, count ) {
+// 	function render( start, count ) {
 
-		gl.drawElements( mode, count, type, start * bytesPerElement );
+// 		gl.drawElements( mode, count, type, start * bytesPerElement );
 
-		info.update( count, mode, 1 );
+// 		info.update( count, mode, 1 );
 
-	}
+// 	}
 
-	function renderInstances( start, count, primcount ) {
+// 	function renderInstances( start, count, primcount ) {
 
-		if ( primcount === 0 ) return;
+// 		if ( primcount === 0 ) return;
 
-		let extension, methodName;
+// 		let extension, methodName;
 
-		if ( isWebGL2 ) {
+// 		if ( isWebGL2 ) {
 
-			extension = gl;
-			methodName = 'drawElementsInstanced';
+// 			extension = gl;
+// 			methodName = 'drawElementsInstanced';
 
-		} else {
+// 		} else {
 
-			extension = extensions.get( 'ANGLE_instanced_arrays' );
-			methodName = 'drawElementsInstancedANGLE';
+// 			extension = extensions.get( 'ANGLE_instanced_arrays' );
+// 			methodName = 'drawElementsInstancedANGLE';
 
-			if ( extension === null ) {
+// 			if ( extension === null ) {
 
-				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
-				return;
+// 				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
+// 				return;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );
+// 		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );
 
-		info.update( count, mode, primcount );
+// 		info.update( count, mode, primcount );
 
-	}
+// 	}
 
-	//
+// 	//
 
-	this.setMode = setMode;
-	this.setIndex = setIndex;
-	this.render = render;
-	this.renderInstances = renderInstances;
+// 	this.setMode = setMode;
+// 	this.setIndex = setIndex;
+// 	this.render = render;
+// 	this.renderInstances = renderInstances;
 
-}
+// }
 
-function WebGLInfo( gl ) {
+// function WebGLInfo( gl ) {
 
-	const memory = {
-		geometries: 0,
-		textures: 0
-	};
+// 	const memory = {
+// 		geometries: 0,
+// 		textures: 0
+// 	};
 
-	const render = {
-		frame: 0,
-		calls: 0,
-		triangles: 0,
-		points: 0,
-		lines: 0
-	};
+// 	const render = {
+// 		frame: 0,
+// 		calls: 0,
+// 		triangles: 0,
+// 		points: 0,
+// 		lines: 0
+// 	};
 
-	function update( count, mode, instanceCount ) {
+// 	function update( count, mode, instanceCount ) {
 
-		render.calls ++;
+// 		render.calls ++;
 
-		switch ( mode ) {
+// 		switch ( mode ) {
 
-			case 4:
-				render.triangles += instanceCount * ( count / 3 );
-				break;
+// 			case 4:
+// 				render.triangles += instanceCount * ( count / 3 );
+// 				break;
 
-			case 1:
-				render.lines += instanceCount * ( count / 2 );
-				break;
+// 			case 1:
+// 				render.lines += instanceCount * ( count / 2 );
+// 				break;
 
-			case 3:
-				render.lines += instanceCount * ( count - 1 );
-				break;
+// 			case 3:
+// 				render.lines += instanceCount * ( count - 1 );
+// 				break;
 
-			case 2:
-				render.lines += instanceCount * count;
-				break;
+// 			case 2:
+// 				render.lines += instanceCount * count;
+// 				break;
 
-			case 0:
-				render.points += instanceCount * count;
-				break;
+// 			case 0:
+// 				render.points += instanceCount * count;
+// 				break;
 
-			default:
-				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
-				break;
+// 			default:
+// 				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
+// 				break;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function reset() {
+// 	function reset() {
 
-		render.frame ++;
-		render.calls = 0;
-		render.triangles = 0;
-		render.points = 0;
-		render.lines = 0;
+// 		render.frame ++;
+// 		render.calls = 0;
+// 		render.triangles = 0;
+// 		render.points = 0;
+// 		render.lines = 0;
 
-	}
+// 	}
 
-	return {
-		memory: memory,
-		render: render,
-		programs: null,
-		autoReset: true,
-		reset: reset,
-		update: update
-	};
+// 	return {
+// 		memory: memory,
+// 		render: render,
+// 		programs: null,
+// 		autoReset: true,
+// 		reset: reset,
+// 		update: update
+// 	};
 
-}
+// }
 
-function numericalSort( a, b ) {
+// function numericalSort( a, b ) {
 
-	return a[ 0 ] - b[ 0 ];
+// 	return a[ 0 ] - b[ 0 ];
 
-}
+// }
 
-function absNumericalSort( a, b ) {
+// function absNumericalSort( a, b ) {
 
-	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );
+// 	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );
 
-}
+// }
 
-function WebGLMorphtargets( gl, capabilities, textures ) {
+// function WebGLMorphtargets( gl, capabilities, textures ) {
 
-	const influencesList = {};
-	const morphInfluences = new Float32Array( 8 );
-	const morphTextures = new WeakMap();
-	const morph = new Vector4();
+// 	const influencesList = {};
+// 	const morphInfluences = new Float32Array( 8 );
+// 	const morphTextures = new WeakMap();
+// 	const morph = new Vector4();
 
-	const workInfluences = [];
+// 	const workInfluences = [];
 
-	for ( let i = 0; i < 8; i ++ ) {
+// 	for ( let i = 0; i < 8; i ++ ) {
 
-		workInfluences[ i ] = [ i, 0 ];
+// 		workInfluences[ i ] = [ i, 0 ];
 
-	}
+// 	}
 
-	function update( object, geometry, material, program ) {
+// 	function update( object, geometry, material, program ) {
 
-		const objectInfluences = object.morphTargetInfluences;
+// 		const objectInfluences = object.morphTargetInfluences;
 
-		if ( capabilities.isWebGL2 === true ) {
+// 		if ( capabilities.isWebGL2 === true ) {
 
-			// instead of using attributes, the WebGL 2 code path encodes morph targets
-			// into an array of data textures. Each layer represents a single morph target.
+// 			// instead of using attributes, the WebGL 2 code path encodes morph targets
+// 			// into an array of data textures. Each layer represents a single morph target.
 
-			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
-			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;
+// 			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
+// 			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;
 
-			let entry = morphTextures.get( geometry );
+// 			let entry = morphTextures.get( geometry );
 
-			if ( entry === undefined || entry.count !== morphTargetsCount ) {
+// 			if ( entry === undefined || entry.count !== morphTargetsCount ) {
 
-				if ( entry !== undefined ) entry.texture.dispose();
+// 				if ( entry !== undefined ) entry.texture.dispose();
 
-				const hasMorphPosition = geometry.morphAttributes.position !== undefined;
-				const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
-				const hasMorphColors = geometry.morphAttributes.color !== undefined;
+// 				const hasMorphPosition = geometry.morphAttributes.position !== undefined;
+// 				const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
+// 				const hasMorphColors = geometry.morphAttributes.color !== undefined;
 
-				const morphTargets = geometry.morphAttributes.position || [];
-				const morphNormals = geometry.morphAttributes.normal || [];
-				const morphColors = geometry.morphAttributes.color || [];
+// 				const morphTargets = geometry.morphAttributes.position || [];
+// 				const morphNormals = geometry.morphAttributes.normal || [];
+// 				const morphColors = geometry.morphAttributes.color || [];
 
-				let vertexDataCount = 0;
+// 				let vertexDataCount = 0;
 
-				if ( hasMorphPosition === true ) vertexDataCount = 1;
-				if ( hasMorphNormals === true ) vertexDataCount = 2;
-				if ( hasMorphColors === true ) vertexDataCount = 3;
+// 				if ( hasMorphPosition === true ) vertexDataCount = 1;
+// 				if ( hasMorphNormals === true ) vertexDataCount = 2;
+// 				if ( hasMorphColors === true ) vertexDataCount = 3;
 
-				let width = geometry.attributes.position.count * vertexDataCount;
-				let height = 1;
+// 				let width = geometry.attributes.position.count * vertexDataCount;
+// 				let height = 1;
 
-				if ( width > capabilities.maxTextureSize ) {
+// 				if ( width > capabilities.maxTextureSize ) {
 
-					height = Math.ceil( width / capabilities.maxTextureSize );
-					width = capabilities.maxTextureSize;
+// 					height = Math.ceil( width / capabilities.maxTextureSize );
+// 					width = capabilities.maxTextureSize;
 
-				}
+// 				}
 
-				const buffer = new Float32Array( width * height * 4 * morphTargetsCount );
+// 				const buffer = new Float32Array( width * height * 4 * morphTargetsCount );
 
-				const texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );
-				texture.type = FloatType;
-				texture.needsUpdate = true;
+// 				const texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );
+// 				texture.type = FloatType;
+// 				texture.needsUpdate = true;
 
-				// fill buffer
+// 				// fill buffer
 
-				const vertexDataStride = vertexDataCount * 4;
+// 				const vertexDataStride = vertexDataCount * 4;
 
-				for ( let i = 0; i < morphTargetsCount; i ++ ) {
+// 				for ( let i = 0; i < morphTargetsCount; i ++ ) {
 
-					const morphTarget = morphTargets[ i ];
-					const morphNormal = morphNormals[ i ];
-					const morphColor = morphColors[ i ];
+// 					const morphTarget = morphTargets[ i ];
+// 					const morphNormal = morphNormals[ i ];
+// 					const morphColor = morphColors[ i ];
 
-					const offset = width * height * 4 * i;
+// 					const offset = width * height * 4 * i;
 
-					for ( let j = 0; j < morphTarget.count; j ++ ) {
+// 					for ( let j = 0; j < morphTarget.count; j ++ ) {
 
-						const stride = j * vertexDataStride;
+// 						const stride = j * vertexDataStride;
 
-						if ( hasMorphPosition === true ) {
+// 						if ( hasMorphPosition === true ) {
 
-							morph.fromBufferAttribute( morphTarget, j );
+// 							morph.fromBufferAttribute( morphTarget, j );
 
-							buffer[ offset + stride + 0 ] = morph.x;
-							buffer[ offset + stride + 1 ] = morph.y;
-							buffer[ offset + stride + 2 ] = morph.z;
-							buffer[ offset + stride + 3 ] = 0;
+// 							buffer[ offset + stride + 0 ] = morph.x;
+// 							buffer[ offset + stride + 1 ] = morph.y;
+// 							buffer[ offset + stride + 2 ] = morph.z;
+// 							buffer[ offset + stride + 3 ] = 0;
 
-						}
+// 						}
 
-						if ( hasMorphNormals === true ) {
+// 						if ( hasMorphNormals === true ) {
 
-							morph.fromBufferAttribute( morphNormal, j );
+// 							morph.fromBufferAttribute( morphNormal, j );
 
-							buffer[ offset + stride + 4 ] = morph.x;
-							buffer[ offset + stride + 5 ] = morph.y;
-							buffer[ offset + stride + 6 ] = morph.z;
-							buffer[ offset + stride + 7 ] = 0;
+// 							buffer[ offset + stride + 4 ] = morph.x;
+// 							buffer[ offset + stride + 5 ] = morph.y;
+// 							buffer[ offset + stride + 6 ] = morph.z;
+// 							buffer[ offset + stride + 7 ] = 0;
 
-						}
+// 						}
 
-						if ( hasMorphColors === true ) {
+// 						if ( hasMorphColors === true ) {
 
-							morph.fromBufferAttribute( morphColor, j );
+// 							morph.fromBufferAttribute( morphColor, j );
 
-							buffer[ offset + stride + 8 ] = morph.x;
-							buffer[ offset + stride + 9 ] = morph.y;
-							buffer[ offset + stride + 10 ] = morph.z;
-							buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;
+// 							buffer[ offset + stride + 8 ] = morph.x;
+// 							buffer[ offset + stride + 9 ] = morph.y;
+// 							buffer[ offset + stride + 10 ] = morph.z;
+// 							buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-				entry = {
-					count: morphTargetsCount,
-					texture: texture,
-					size: new Vector2( width, height )
-				};
+// 				entry = {
+// 					count: morphTargetsCount,
+// 					texture: texture,
+// 					size: new Vector2( width, height )
+// 				};
 
-				morphTextures.set( geometry, entry );
+// 				morphTextures.set( geometry, entry );
 
-				function disposeTexture() {
+// 				function disposeTexture() {
 
-					texture.dispose();
+// 					texture.dispose();
 
-					morphTextures.delete( geometry );
+// 					morphTextures.delete( geometry );
 
-					geometry.removeEventListener( 'dispose', disposeTexture );
+// 					geometry.removeEventListener( 'dispose', disposeTexture );
 
-				}
+// 				}
 
-				geometry.addEventListener( 'dispose', disposeTexture );
+// 				geometry.addEventListener( 'dispose', disposeTexture );
 
-			}
+// 			}
 
-			//
+// 			//
 
-			let morphInfluencesSum = 0;
+// 			let morphInfluencesSum = 0;
 
-			for ( let i = 0; i < objectInfluences.length; i ++ ) {
+// 			for ( let i = 0; i < objectInfluences.length; i ++ ) {
 
-				morphInfluencesSum += objectInfluences[ i ];
+// 				morphInfluencesSum += objectInfluences[ i ];
 
-			}
+// 			}
 
-			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
+// 			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
 
-			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
-			program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );
+// 			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
+// 			program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );
 
-			program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
-			program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );
+// 			program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
+// 			program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );
 
 
-		} else {
+// 		} else {
 
-			// When object doesn't have morph target influences defined, we treat it as a 0-length array
-			// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
+// 			// When object doesn't have morph target influences defined, we treat it as a 0-length array
+// 			// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
 
-			const length = objectInfluences === undefined ? 0 : objectInfluences.length;
+// 			const length = objectInfluences === undefined ? 0 : objectInfluences.length;
 
-			let influences = influencesList[ geometry.id ];
+// 			let influences = influencesList[ geometry.id ];
 
-			if ( influences === undefined || influences.length !== length ) {
+// 			if ( influences === undefined || influences.length !== length ) {
 
-				// initialise list
+// 				// initialise list
 
-				influences = [];
+// 				influences = [];
 
-				for ( let i = 0; i < length; i ++ ) {
+// 				for ( let i = 0; i < length; i ++ ) {
 
-					influences[ i ] = [ i, 0 ];
+// 					influences[ i ] = [ i, 0 ];
 
-				}
+// 				}
 
-				influencesList[ geometry.id ] = influences;
+// 				influencesList[ geometry.id ] = influences;
 
-			}
+// 			}
 
-			// Collect influences
+// 			// Collect influences
 
-			for ( let i = 0; i < length; i ++ ) {
+// 			for ( let i = 0; i < length; i ++ ) {
 
-				const influence = influences[ i ];
+// 				const influence = influences[ i ];
 
-				influence[ 0 ] = i;
-				influence[ 1 ] = objectInfluences[ i ];
+// 				influence[ 0 ] = i;
+// 				influence[ 1 ] = objectInfluences[ i ];
 
-			}
+// 			}
 
-			influences.sort( absNumericalSort );
+// 			influences.sort( absNumericalSort );
 
-			for ( let i = 0; i < 8; i ++ ) {
+// 			for ( let i = 0; i < 8; i ++ ) {
 
-				if ( i < length && influences[ i ][ 1 ] ) {
+// 				if ( i < length && influences[ i ][ 1 ] ) {
 
-					workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];
-					workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];
+// 					workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];
+// 					workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];
 
-				} else {
+// 				} else {
 
-					workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;
-					workInfluences[ i ][ 1 ] = 0;
+// 					workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;
+// 					workInfluences[ i ][ 1 ] = 0;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			workInfluences.sort( numericalSort );
+// 			workInfluences.sort( numericalSort );
 
-			const morphTargets = geometry.morphAttributes.position;
-			const morphNormals = geometry.morphAttributes.normal;
+// 			const morphTargets = geometry.morphAttributes.position;
+// 			const morphNormals = geometry.morphAttributes.normal;
 
-			let morphInfluencesSum = 0;
+// 			let morphInfluencesSum = 0;
 
-			for ( let i = 0; i < 8; i ++ ) {
+// 			for ( let i = 0; i < 8; i ++ ) {
 
-				const influence = workInfluences[ i ];
-				const index = influence[ 0 ];
-				const value = influence[ 1 ];
+// 				const influence = workInfluences[ i ];
+// 				const index = influence[ 0 ];
+// 				const value = influence[ 1 ];
 
-				if ( index !== Number.MAX_SAFE_INTEGER && value ) {
+// 				if ( index !== Number.MAX_SAFE_INTEGER && value ) {
 
-					if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {
+// 					if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {
 
-						geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );
+// 						geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );
 
-					}
+// 					}
 
-					if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {
+// 					if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {
 
-						geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );
+// 						geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );
 
-					}
+// 					}
 
-					morphInfluences[ i ] = value;
-					morphInfluencesSum += value;
+// 					morphInfluences[ i ] = value;
+// 					morphInfluencesSum += value;
 
-				} else {
+// 				} else {
 
-					if ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {
+// 					if ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {
 
-						geometry.deleteAttribute( 'morphTarget' + i );
+// 						geometry.deleteAttribute( 'morphTarget' + i );
 
-					}
+// 					}
 
-					if ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {
+// 					if ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {
 
-						geometry.deleteAttribute( 'morphNormal' + i );
+// 						geometry.deleteAttribute( 'morphNormal' + i );
 
-					}
+// 					}
 
-					morphInfluences[ i ] = 0;
+// 					morphInfluences[ i ] = 0;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
-			// This allows us to switch between absolute morphs and relative morphs without changing shader code
-			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
-			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
+// 			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
+// 			// This allows us to switch between absolute morphs and relative morphs without changing shader code
+// 			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
+// 			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
 
-			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
-			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );
+// 			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
+// 			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		update: update
+// 		update: update
 
-	};
+// 	};
 
-}
+// }
 
-function WebGLObjects( gl, geometries, attributes, info ) {
+// function WebGLObjects( gl, geometries, attributes, info ) {
 
-	let updateMap = new WeakMap();
+// 	let updateMap = new WeakMap();
 
-	function update( object ) {
+// 	function update( object ) {
 
-		const frame = info.render.frame;
+// 		const frame = info.render.frame;
 
-		const geometry = object.geometry;
-		const buffergeometry = geometries.get( object, geometry );
+// 		const geometry = object.geometry;
+// 		const buffergeometry = geometries.get( object, geometry );
 
-		// Update once per frame
+// 		// Update once per frame
 
-		if ( updateMap.get( buffergeometry ) !== frame ) {
+// 		if ( updateMap.get( buffergeometry ) !== frame ) {
 
-			geometries.update( buffergeometry );
+// 			geometries.update( buffergeometry );
 
-			updateMap.set( buffergeometry, frame );
+// 			updateMap.set( buffergeometry, frame );
 
-		}
+// 		}
 
-		if ( object.isInstancedMesh ) {
+// 		if ( object.isInstancedMesh ) {
 
-			if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {
+// 			if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {
 
-				object.addEventListener( 'dispose', onInstancedMeshDispose );
+// 				object.addEventListener( 'dispose', onInstancedMeshDispose );
 
-			}
+// 			}
 
-			attributes.update( object.instanceMatrix, 34962 );
+// 			attributes.update( object.instanceMatrix, 34962 );
 
-			if ( object.instanceColor !== null ) {
+// 			if ( object.instanceColor !== null ) {
 
-				attributes.update( object.instanceColor, 34962 );
+// 				attributes.update( object.instanceColor, 34962 );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return buffergeometry;
+// 		return buffergeometry;
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		updateMap = new WeakMap();
+// 		updateMap = new WeakMap();
 
-	}
+// 	}
 
-	function onInstancedMeshDispose( event ) {
+// 	function onInstancedMeshDispose( event ) {
 
-		const instancedMesh = event.target;
+// 		const instancedMesh = event.target;
 
-		instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );
+// 		instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );
 
-		attributes.remove( instancedMesh.instanceMatrix );
+// 		attributes.remove( instancedMesh.instanceMatrix );
 
-		if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );
+// 		if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		update: update,
-		dispose: dispose
+// 		update: update,
+// 		dispose: dispose
 
-	};
+// 	};
 
-}
+// }
 
-/**
- * Uniforms of a program.
- * Those form a tree structure with a special top-level container for the root,
- * which you get by calling 'new WebGLUniforms( gl, program )'.
- *
- *
- * Properties of inner nodes including the top-level container:
- *
- * .seq - array of nested uniforms
- * .map - nested uniforms by name
- *
- *
- * Methods of all nodes except the top-level container:
- *
- * .setValue( gl, value, [textures] )
- *
- * 		uploads a uniform value(s)
- *  	the 'textures' parameter is needed for sampler uniforms
- *
- *
- * Static methods of the top-level container (textures factorizations):
- *
- * .upload( gl, seq, values, textures )
- *
- * 		sets uniforms in 'seq' to 'values[id].value'
- *
- * .seqWithValue( seq, values ) : filteredSeq
- *
- * 		filters 'seq' entries with corresponding entry in values
- *
- *
- * Methods of the top-level container (textures factorizations):
- *
- * .setValue( gl, name, value, textures )
- *
- * 		sets uniform with  name 'name' to 'value'
- *
- * .setOptional( gl, obj, prop )
- *
- * 		like .set for an optional property of the object
- *
- */
+// /**
+//  * Uniforms of a program.
+//  * Those form a tree structure with a special top-level container for the root,
+//  * which you get by calling 'new WebGLUniforms( gl, program )'.
+//  *
+//  *
+//  * Properties of inner nodes including the top-level container:
+//  *
+//  * .seq - array of nested uniforms
+//  * .map - nested uniforms by name
+//  *
+//  *
+//  * Methods of all nodes except the top-level container:
+//  *
+//  * .setValue( gl, value, [textures] )
+//  *
+//  * 		uploads a uniform value(s)
+//  *  	the 'textures' parameter is needed for sampler uniforms
+//  *
+//  *
+//  * Static methods of the top-level container (textures factorizations):
+//  *
+//  * .upload( gl, seq, values, textures )
+//  *
+//  * 		sets uniforms in 'seq' to 'values[id].value'
+//  *
+//  * .seqWithValue( seq, values ) : filteredSeq
+//  *
+//  * 		filters 'seq' entries with corresponding entry in values
+//  *
+//  *
+//  * Methods of the top-level container (textures factorizations):
+//  *
+//  * .setValue( gl, name, value, textures )
+//  *
+//  * 		sets uniform with  name 'name' to 'value'
+//  *
+//  * .setOptional( gl, obj, prop )
+//  *
+//  * 		like .set for an optional property of the object
+//  *
+//  */
 
-const emptyTexture = /*@__PURE__*/ new Texture();
-const emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();
-const empty3dTexture = /*@__PURE__*/ new Data3DTexture();
-const emptyCubeTexture = /*@__PURE__*/ new CubeTexture();
+// const emptyTexture = /*@__PURE__*/ new Texture();
+// const emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();
+// const empty3dTexture = /*@__PURE__*/ new Data3DTexture();
+// const emptyCubeTexture = /*@__PURE__*/ new CubeTexture();
 
-// --- Utilities ---
+// // --- Utilities ---
 
-// Array Caches (provide typed arrays for temporary by size)
+// // Array Caches (provide typed arrays for temporary by size)
 
-const arrayCacheF32 = [];
-const arrayCacheI32 = [];
+// const arrayCacheF32 = [];
+// const arrayCacheI32 = [];
 
-// Float32Array caches used for uploading Matrix uniforms
+// // Float32Array caches used for uploading Matrix uniforms
 
-const mat4array = new Float32Array( 16 );
-const mat3array = new Float32Array( 9 );
-const mat2array = new Float32Array( 4 );
+// const mat4array = new Float32Array( 16 );
+// const mat3array = new Float32Array( 9 );
+// const mat2array = new Float32Array( 4 );
 
-// Flattening for arrays of vectors and matrices
+// // Flattening for arrays of vectors and matrices
 
-function flatten( array, nBlocks, blockSize ) {
+// function flatten( array, nBlocks, blockSize ) {
 
-	const firstElem = array[ 0 ];
+// 	const firstElem = array[ 0 ];
 
-	if ( firstElem <= 0 || firstElem > 0 ) return array;
-	// unoptimized: ! isNaN( firstElem )
-	// see http://jacksondunstan.com/articles/983
+// 	if ( firstElem <= 0 || firstElem > 0 ) return array;
+// 	// unoptimized: ! isNaN( firstElem )
+// 	// see http://jacksondunstan.com/articles/983
 
-	const n = nBlocks * blockSize;
-	let r = arrayCacheF32[ n ];
+// 	const n = nBlocks * blockSize;
+// 	let r = arrayCacheF32[ n ];
 
-	if ( r === undefined ) {
+// 	if ( r === undefined ) {
 
-		r = new Float32Array( n );
-		arrayCacheF32[ n ] = r;
+// 		r = new Float32Array( n );
+// 		arrayCacheF32[ n ] = r;
 
-	}
+// 	}
 
-	if ( nBlocks !== 0 ) {
+// 	if ( nBlocks !== 0 ) {
 
-		firstElem.toArray( r, 0 );
+// 		firstElem.toArray( r, 0 );
 
-		for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {
+// 		for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {
 
-			offset += blockSize;
-			array[ i ].toArray( r, offset );
+// 			offset += blockSize;
+// 			array[ i ].toArray( r, offset );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return r;
+// 	return r;
 
-}
+// }
 
-function arraysEqual( a, b ) {
+// function arraysEqual( a, b ) {
 
-	if ( a.length !== b.length ) return false;
+// 	if ( a.length !== b.length ) return false;
 
-	for ( let i = 0, l = a.length; i < l; i ++ ) {
+// 	for ( let i = 0, l = a.length; i < l; i ++ ) {
 
-		if ( a[ i ] !== b[ i ] ) return false;
+// 		if ( a[ i ] !== b[ i ] ) return false;
 
-	}
+// 	}
 
-	return true;
+// 	return true;
 
-}
+// }
 
-function copyArray( a, b ) {
+// function copyArray( a, b ) {
 
-	for ( let i = 0, l = b.length; i < l; i ++ ) {
+// 	for ( let i = 0, l = b.length; i < l; i ++ ) {
 
-		a[ i ] = b[ i ];
+// 		a[ i ] = b[ i ];
 
-	}
+// 	}
 
-}
+// }
 
-// Texture unit allocation
+// // Texture unit allocation
 
-function allocTexUnits( textures, n ) {
+// function allocTexUnits( textures, n ) {
 
-	let r = arrayCacheI32[ n ];
+// 	let r = arrayCacheI32[ n ];
 
-	if ( r === undefined ) {
+// 	if ( r === undefined ) {
 
-		r = new Int32Array( n );
-		arrayCacheI32[ n ] = r;
+// 		r = new Int32Array( n );
+// 		arrayCacheI32[ n ] = r;
 
-	}
+// 	}
 
-	for ( let i = 0; i !== n; ++ i ) {
+// 	for ( let i = 0; i !== n; ++ i ) {
 
-		r[ i ] = textures.allocateTextureUnit();
+// 		r[ i ] = textures.allocateTextureUnit();
 
-	}
+// 	}
 
-	return r;
+// 	return r;
 
-}
+// }
 
-// --- Setters ---
+// // --- Setters ---
 
-// Note: Defining these methods externally, because they come in a bunch
-// and this way their names minify.
+// // Note: Defining these methods externally, because they come in a bunch
+// // and this way their names minify.
 
-// Single scalar
+// // Single scalar
 
-function setValueV1f( gl, v ) {
+// function setValueV1f( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( cache[ 0 ] === v ) return;
+// 	if ( cache[ 0 ] === v ) return;
 
-	gl.uniform1f( this.addr, v );
+// 	gl.uniform1f( this.addr, v );
 
-	cache[ 0 ] = v;
+// 	cache[ 0 ] = v;
 
-}
+// }
 
-// Single float vector (from flat array or THREE.VectorN)
+// // Single float vector (from flat array or THREE.VectorN)
 
-function setValueV2f( gl, v ) {
+// function setValueV2f( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( v.x !== undefined ) {
+// 	if ( v.x !== undefined ) {
 
-		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {
+// 		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {
 
-			gl.uniform2f( this.addr, v.x, v.y );
+// 			gl.uniform2f( this.addr, v.x, v.y );
 
-			cache[ 0 ] = v.x;
-			cache[ 1 ] = v.y;
+// 			cache[ 0 ] = v.x;
+// 			cache[ 1 ] = v.y;
 
-		}
+// 		}
 
-	} else {
+// 	} else {
 
-		if ( arraysEqual( cache, v ) ) return;
+// 		if ( arraysEqual( cache, v ) ) return;
 
-		gl.uniform2fv( this.addr, v );
+// 		gl.uniform2fv( this.addr, v );
 
-		copyArray( cache, v );
+// 		copyArray( cache, v );
 
-	}
+// 	}
 
-}
+// }
 
-function setValueV3f( gl, v ) {
+// function setValueV3f( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( v.x !== undefined ) {
+// 	if ( v.x !== undefined ) {
 
-		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {
+// 		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {
 
-			gl.uniform3f( this.addr, v.x, v.y, v.z );
+// 			gl.uniform3f( this.addr, v.x, v.y, v.z );
 
-			cache[ 0 ] = v.x;
-			cache[ 1 ] = v.y;
-			cache[ 2 ] = v.z;
+// 			cache[ 0 ] = v.x;
+// 			cache[ 1 ] = v.y;
+// 			cache[ 2 ] = v.z;
 
-		}
+// 		}
 
-	} else if ( v.r !== undefined ) {
+// 	} else if ( v.r !== undefined ) {
 
-		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {
+// 		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {
 
-			gl.uniform3f( this.addr, v.r, v.g, v.b );
+// 			gl.uniform3f( this.addr, v.r, v.g, v.b );
 
-			cache[ 0 ] = v.r;
-			cache[ 1 ] = v.g;
-			cache[ 2 ] = v.b;
+// 			cache[ 0 ] = v.r;
+// 			cache[ 1 ] = v.g;
+// 			cache[ 2 ] = v.b;
 
-		}
+// 		}
 
-	} else {
+// 	} else {
 
-		if ( arraysEqual( cache, v ) ) return;
+// 		if ( arraysEqual( cache, v ) ) return;
 
-		gl.uniform3fv( this.addr, v );
+// 		gl.uniform3fv( this.addr, v );
 
-		copyArray( cache, v );
+// 		copyArray( cache, v );
 
-	}
+// 	}
 
-}
+// }
 
-function setValueV4f( gl, v ) {
+// function setValueV4f( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( v.x !== undefined ) {
+// 	if ( v.x !== undefined ) {
 
-		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {
+// 		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {
 
-			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );
+// 			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );
 
-			cache[ 0 ] = v.x;
-			cache[ 1 ] = v.y;
-			cache[ 2 ] = v.z;
-			cache[ 3 ] = v.w;
+// 			cache[ 0 ] = v.x;
+// 			cache[ 1 ] = v.y;
+// 			cache[ 2 ] = v.z;
+// 			cache[ 3 ] = v.w;
 
-		}
+// 		}
 
-	} else {
+// 	} else {
 
-		if ( arraysEqual( cache, v ) ) return;
+// 		if ( arraysEqual( cache, v ) ) return;
 
-		gl.uniform4fv( this.addr, v );
+// 		gl.uniform4fv( this.addr, v );
 
-		copyArray( cache, v );
+// 		copyArray( cache, v );
 
-	}
+// 	}
 
-}
+// }
 
-// Single matrix (from flat array or THREE.MatrixN)
+// // Single matrix (from flat array or THREE.MatrixN)
 
-function setValueM2( gl, v ) {
+// function setValueM2( gl, v ) {
 
-	const cache = this.cache;
-	const elements = v.elements;
+// 	const cache = this.cache;
+// 	const elements = v.elements;
 
-	if ( elements === undefined ) {
+// 	if ( elements === undefined ) {
 
-		if ( arraysEqual( cache, v ) ) return;
+// 		if ( arraysEqual( cache, v ) ) return;
 
-		gl.uniformMatrix2fv( this.addr, false, v );
+// 		gl.uniformMatrix2fv( this.addr, false, v );
 
-		copyArray( cache, v );
+// 		copyArray( cache, v );
 
-	} else {
+// 	} else {
 
-		if ( arraysEqual( cache, elements ) ) return;
+// 		if ( arraysEqual( cache, elements ) ) return;
 
-		mat2array.set( elements );
+// 		mat2array.set( elements );
 
-		gl.uniformMatrix2fv( this.addr, false, mat2array );
+// 		gl.uniformMatrix2fv( this.addr, false, mat2array );
 
-		copyArray( cache, elements );
+// 		copyArray( cache, elements );
 
-	}
+// 	}
 
-}
+// }
 
-function setValueM3( gl, v ) {
+// function setValueM3( gl, v ) {
 
-	const cache = this.cache;
-	const elements = v.elements;
+// 	const cache = this.cache;
+// 	const elements = v.elements;
 
-	if ( elements === undefined ) {
+// 	if ( elements === undefined ) {
 
-		if ( arraysEqual( cache, v ) ) return;
+// 		if ( arraysEqual( cache, v ) ) return;
 
-		gl.uniformMatrix3fv( this.addr, false, v );
+// 		gl.uniformMatrix3fv( this.addr, false, v );
 
-		copyArray( cache, v );
+// 		copyArray( cache, v );
 
-	} else {
+// 	} else {
 
-		if ( arraysEqual( cache, elements ) ) return;
+// 		if ( arraysEqual( cache, elements ) ) return;
 
-		mat3array.set( elements );
+// 		mat3array.set( elements );
 
-		gl.uniformMatrix3fv( this.addr, false, mat3array );
+// 		gl.uniformMatrix3fv( this.addr, false, mat3array );
 
-		copyArray( cache, elements );
+// 		copyArray( cache, elements );
 
-	}
+// 	}
 
-}
+// }
 
-function setValueM4( gl, v ) {
+// function setValueM4( gl, v ) {
 
-	const cache = this.cache;
-	const elements = v.elements;
+// 	const cache = this.cache;
+// 	const elements = v.elements;
 
-	if ( elements === undefined ) {
+// 	if ( elements === undefined ) {
 
-		if ( arraysEqual( cache, v ) ) return;
+// 		if ( arraysEqual( cache, v ) ) return;
 
-		gl.uniformMatrix4fv( this.addr, false, v );
+// 		gl.uniformMatrix4fv( this.addr, false, v );
 
-		copyArray( cache, v );
+// 		copyArray( cache, v );
 
-	} else {
+// 	} else {
 
-		if ( arraysEqual( cache, elements ) ) return;
+// 		if ( arraysEqual( cache, elements ) ) return;
 
-		mat4array.set( elements );
+// 		mat4array.set( elements );
 
-		gl.uniformMatrix4fv( this.addr, false, mat4array );
+// 		gl.uniformMatrix4fv( this.addr, false, mat4array );
 
-		copyArray( cache, elements );
+// 		copyArray( cache, elements );
 
-	}
+// 	}
 
-}
+// }
 
-// Single integer / boolean
+// // Single integer / boolean
 
-function setValueV1i( gl, v ) {
+// function setValueV1i( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( cache[ 0 ] === v ) return;
+// 	if ( cache[ 0 ] === v ) return;
 
-	gl.uniform1i( this.addr, v );
+// 	gl.uniform1i( this.addr, v );
 
-	cache[ 0 ] = v;
+// 	cache[ 0 ] = v;
 
-}
+// }
 
-// Single integer / boolean vector (from flat array)
+// // Single integer / boolean vector (from flat array)
 
-function setValueV2i( gl, v ) {
+// function setValueV2i( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( arraysEqual( cache, v ) ) return;
+// 	if ( arraysEqual( cache, v ) ) return;
 
-	gl.uniform2iv( this.addr, v );
+// 	gl.uniform2iv( this.addr, v );
 
-	copyArray( cache, v );
+// 	copyArray( cache, v );
 
-}
+// }
 
-function setValueV3i( gl, v ) {
+// function setValueV3i( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( arraysEqual( cache, v ) ) return;
+// 	if ( arraysEqual( cache, v ) ) return;
 
-	gl.uniform3iv( this.addr, v );
+// 	gl.uniform3iv( this.addr, v );
 
-	copyArray( cache, v );
+// 	copyArray( cache, v );
 
-}
+// }
 
-function setValueV4i( gl, v ) {
+// function setValueV4i( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( arraysEqual( cache, v ) ) return;
+// 	if ( arraysEqual( cache, v ) ) return;
 
-	gl.uniform4iv( this.addr, v );
+// 	gl.uniform4iv( this.addr, v );
 
-	copyArray( cache, v );
+// 	copyArray( cache, v );
 
-}
+// }
 
-// Single unsigned integer
+// // Single unsigned integer
 
-function setValueV1ui( gl, v ) {
+// function setValueV1ui( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( cache[ 0 ] === v ) return;
+// 	if ( cache[ 0 ] === v ) return;
 
-	gl.uniform1ui( this.addr, v );
+// 	gl.uniform1ui( this.addr, v );
 
-	cache[ 0 ] = v;
+// 	cache[ 0 ] = v;
 
-}
+// }
 
-// Single unsigned integer vector (from flat array)
+// // Single unsigned integer vector (from flat array)
 
-function setValueV2ui( gl, v ) {
+// function setValueV2ui( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( arraysEqual( cache, v ) ) return;
+// 	if ( arraysEqual( cache, v ) ) return;
 
-	gl.uniform2uiv( this.addr, v );
+// 	gl.uniform2uiv( this.addr, v );
 
-	copyArray( cache, v );
+// 	copyArray( cache, v );
 
-}
+// }
 
-function setValueV3ui( gl, v ) {
+// function setValueV3ui( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( arraysEqual( cache, v ) ) return;
+// 	if ( arraysEqual( cache, v ) ) return;
 
-	gl.uniform3uiv( this.addr, v );
+// 	gl.uniform3uiv( this.addr, v );
 
-	copyArray( cache, v );
+// 	copyArray( cache, v );
 
-}
+// }
 
-function setValueV4ui( gl, v ) {
+// function setValueV4ui( gl, v ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	if ( arraysEqual( cache, v ) ) return;
+// 	if ( arraysEqual( cache, v ) ) return;
 
-	gl.uniform4uiv( this.addr, v );
+// 	gl.uniform4uiv( this.addr, v );
 
-	copyArray( cache, v );
+// 	copyArray( cache, v );
 
-}
+// }
 
 
-// Single texture (2D / Cube)
+// // Single texture (2D / Cube)
 
-function setValueT1( gl, v, textures ) {
+// function setValueT1( gl, v, textures ) {
 
-	const cache = this.cache;
-	const unit = textures.allocateTextureUnit();
+// 	const cache = this.cache;
+// 	const unit = textures.allocateTextureUnit();
 
-	if ( cache[ 0 ] !== unit ) {
+// 	if ( cache[ 0 ] !== unit ) {
 
-		gl.uniform1i( this.addr, unit );
-		cache[ 0 ] = unit;
+// 		gl.uniform1i( this.addr, unit );
+// 		cache[ 0 ] = unit;
 
-	}
+// 	}
 
-	textures.setTexture2D( v || emptyTexture, unit );
+// 	textures.setTexture2D( v || emptyTexture, unit );
 
-}
+// }
 
-function setValueT3D1( gl, v, textures ) {
+// function setValueT3D1( gl, v, textures ) {
 
-	const cache = this.cache;
-	const unit = textures.allocateTextureUnit();
+// 	const cache = this.cache;
+// 	const unit = textures.allocateTextureUnit();
 
-	if ( cache[ 0 ] !== unit ) {
+// 	if ( cache[ 0 ] !== unit ) {
 
-		gl.uniform1i( this.addr, unit );
-		cache[ 0 ] = unit;
+// 		gl.uniform1i( this.addr, unit );
+// 		cache[ 0 ] = unit;
 
-	}
+// 	}
 
-	textures.setTexture3D( v || empty3dTexture, unit );
+// 	textures.setTexture3D( v || empty3dTexture, unit );
 
-}
+// }
 
-function setValueT6( gl, v, textures ) {
+// function setValueT6( gl, v, textures ) {
 
-	const cache = this.cache;
-	const unit = textures.allocateTextureUnit();
+// 	const cache = this.cache;
+// 	const unit = textures.allocateTextureUnit();
 
-	if ( cache[ 0 ] !== unit ) {
+// 	if ( cache[ 0 ] !== unit ) {
 
-		gl.uniform1i( this.addr, unit );
-		cache[ 0 ] = unit;
+// 		gl.uniform1i( this.addr, unit );
+// 		cache[ 0 ] = unit;
 
-	}
+// 	}
 
-	textures.setTextureCube( v || emptyCubeTexture, unit );
+// 	textures.setTextureCube( v || emptyCubeTexture, unit );
 
-}
+// }
 
-function setValueT2DArray1( gl, v, textures ) {
+// function setValueT2DArray1( gl, v, textures ) {
 
-	const cache = this.cache;
-	const unit = textures.allocateTextureUnit();
+// 	const cache = this.cache;
+// 	const unit = textures.allocateTextureUnit();
 
-	if ( cache[ 0 ] !== unit ) {
+// 	if ( cache[ 0 ] !== unit ) {
 
-		gl.uniform1i( this.addr, unit );
-		cache[ 0 ] = unit;
+// 		gl.uniform1i( this.addr, unit );
+// 		cache[ 0 ] = unit;
 
-	}
+// 	}
 
-	textures.setTexture2DArray( v || emptyArrayTexture, unit );
+// 	textures.setTexture2DArray( v || emptyArrayTexture, unit );
 
-}
+// }
 
-// Helper to pick the right setter for the singular case
+// // Helper to pick the right setter for the singular case
 
-function getSingularSetter( type ) {
+// function getSingularSetter( type ) {
 
-	switch ( type ) {
+// 	switch ( type ) {
 
-		case 0x1406: return setValueV1f; // FLOAT
-		case 0x8b50: return setValueV2f; // _VEC2
-		case 0x8b51: return setValueV3f; // _VEC3
-		case 0x8b52: return setValueV4f; // _VEC4
+// 		case 0x1406: return setValueV1f; // FLOAT
+// 		case 0x8b50: return setValueV2f; // _VEC2
+// 		case 0x8b51: return setValueV3f; // _VEC3
+// 		case 0x8b52: return setValueV4f; // _VEC4
 
-		case 0x8b5a: return setValueM2; // _MAT2
-		case 0x8b5b: return setValueM3; // _MAT3
-		case 0x8b5c: return setValueM4; // _MAT4
+// 		case 0x8b5a: return setValueM2; // _MAT2
+// 		case 0x8b5b: return setValueM3; // _MAT3
+// 		case 0x8b5c: return setValueM4; // _MAT4
 
-		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
-		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
-		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
-		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4
+// 		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
+// 		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
+// 		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
+// 		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4
 
-		case 0x1405: return setValueV1ui; // UINT
-		case 0x8dc6: return setValueV2ui; // _VEC2
-		case 0x8dc7: return setValueV3ui; // _VEC3
-		case 0x8dc8: return setValueV4ui; // _VEC4
+// 		case 0x1405: return setValueV1ui; // UINT
+// 		case 0x8dc6: return setValueV2ui; // _VEC2
+// 		case 0x8dc7: return setValueV3ui; // _VEC3
+// 		case 0x8dc8: return setValueV4ui; // _VEC4
 
-		case 0x8b5e: // SAMPLER_2D
-		case 0x8d66: // SAMPLER_EXTERNAL_OES
-		case 0x8dca: // INT_SAMPLER_2D
-		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
-		case 0x8b62: // SAMPLER_2D_SHADOW
-			return setValueT1;
+// 		case 0x8b5e: // SAMPLER_2D
+// 		case 0x8d66: // SAMPLER_EXTERNAL_OES
+// 		case 0x8dca: // INT_SAMPLER_2D
+// 		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
+// 		case 0x8b62: // SAMPLER_2D_SHADOW
+// 			return setValueT1;
 
-		case 0x8b5f: // SAMPLER_3D
-		case 0x8dcb: // INT_SAMPLER_3D
-		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
-			return setValueT3D1;
+// 		case 0x8b5f: // SAMPLER_3D
+// 		case 0x8dcb: // INT_SAMPLER_3D
+// 		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
+// 			return setValueT3D1;
 
-		case 0x8b60: // SAMPLER_CUBE
-		case 0x8dcc: // INT_SAMPLER_CUBE
-		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
-		case 0x8dc5: // SAMPLER_CUBE_SHADOW
-			return setValueT6;
+// 		case 0x8b60: // SAMPLER_CUBE
+// 		case 0x8dcc: // INT_SAMPLER_CUBE
+// 		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
+// 		case 0x8dc5: // SAMPLER_CUBE_SHADOW
+// 			return setValueT6;
 
-		case 0x8dc1: // SAMPLER_2D_ARRAY
-		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
-		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
-		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
-			return setValueT2DArray1;
+// 		case 0x8dc1: // SAMPLER_2D_ARRAY
+// 		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
+// 		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
+// 		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
+// 			return setValueT2DArray1;
 
-	}
+// 	}
 
-}
+// }
 
 
-// Array of scalars
+// // Array of scalars
 
-function setValueV1fArray( gl, v ) {
+// function setValueV1fArray( gl, v ) {
 
-	gl.uniform1fv( this.addr, v );
+// 	gl.uniform1fv( this.addr, v );
 
-}
+// }
 
-// Array of vectors (from flat array or array of THREE.VectorN)
+// // Array of vectors (from flat array or array of THREE.VectorN)
 
-function setValueV2fArray( gl, v ) {
+// function setValueV2fArray( gl, v ) {
 
-	const data = flatten( v, this.size, 2 );
+// 	const data = flatten( v, this.size, 2 );
 
-	gl.uniform2fv( this.addr, data );
+// 	gl.uniform2fv( this.addr, data );
 
-}
+// }
 
-function setValueV3fArray( gl, v ) {
+// function setValueV3fArray( gl, v ) {
 
-	const data = flatten( v, this.size, 3 );
+// 	const data = flatten( v, this.size, 3 );
 
-	gl.uniform3fv( this.addr, data );
+// 	gl.uniform3fv( this.addr, data );
 
-}
+// }
 
-function setValueV4fArray( gl, v ) {
+// function setValueV4fArray( gl, v ) {
 
-	const data = flatten( v, this.size, 4 );
+// 	const data = flatten( v, this.size, 4 );
 
-	gl.uniform4fv( this.addr, data );
+// 	gl.uniform4fv( this.addr, data );
 
-}
+// }
 
-// Array of matrices (from flat array or array of THREE.MatrixN)
+// // Array of matrices (from flat array or array of THREE.MatrixN)
 
-function setValueM2Array( gl, v ) {
+// function setValueM2Array( gl, v ) {
 
-	const data = flatten( v, this.size, 4 );
+// 	const data = flatten( v, this.size, 4 );
 
-	gl.uniformMatrix2fv( this.addr, false, data );
+// 	gl.uniformMatrix2fv( this.addr, false, data );
 
-}
+// }
 
-function setValueM3Array( gl, v ) {
+// function setValueM3Array( gl, v ) {
 
-	const data = flatten( v, this.size, 9 );
+// 	const data = flatten( v, this.size, 9 );
 
-	gl.uniformMatrix3fv( this.addr, false, data );
+// 	gl.uniformMatrix3fv( this.addr, false, data );
 
-}
+// }
 
-function setValueM4Array( gl, v ) {
+// function setValueM4Array( gl, v ) {
 
-	const data = flatten( v, this.size, 16 );
+// 	const data = flatten( v, this.size, 16 );
 
-	gl.uniformMatrix4fv( this.addr, false, data );
+// 	gl.uniformMatrix4fv( this.addr, false, data );
 
-}
+// }
 
-// Array of integer / boolean
+// // Array of integer / boolean
 
-function setValueV1iArray( gl, v ) {
+// function setValueV1iArray( gl, v ) {
 
-	gl.uniform1iv( this.addr, v );
+// 	gl.uniform1iv( this.addr, v );
 
-}
+// }
 
-// Array of integer / boolean vectors (from flat array)
+// // Array of integer / boolean vectors (from flat array)
 
-function setValueV2iArray( gl, v ) {
+// function setValueV2iArray( gl, v ) {
 
-	gl.uniform2iv( this.addr, v );
+// 	gl.uniform2iv( this.addr, v );
 
-}
+// }
 
-function setValueV3iArray( gl, v ) {
+// function setValueV3iArray( gl, v ) {
 
-	gl.uniform3iv( this.addr, v );
+// 	gl.uniform3iv( this.addr, v );
 
-}
+// }
 
-function setValueV4iArray( gl, v ) {
+// function setValueV4iArray( gl, v ) {
 
-	gl.uniform4iv( this.addr, v );
+// 	gl.uniform4iv( this.addr, v );
 
-}
+// }
 
-// Array of unsigned integer
+// // Array of unsigned integer
 
-function setValueV1uiArray( gl, v ) {
+// function setValueV1uiArray( gl, v ) {
 
-	gl.uniform1uiv( this.addr, v );
+// 	gl.uniform1uiv( this.addr, v );
 
-}
+// }
 
-// Array of unsigned integer vectors (from flat array)
+// // Array of unsigned integer vectors (from flat array)
 
-function setValueV2uiArray( gl, v ) {
+// function setValueV2uiArray( gl, v ) {
 
-	gl.uniform2uiv( this.addr, v );
+// 	gl.uniform2uiv( this.addr, v );
 
-}
+// }
 
-function setValueV3uiArray( gl, v ) {
+// function setValueV3uiArray( gl, v ) {
 
-	gl.uniform3uiv( this.addr, v );
+// 	gl.uniform3uiv( this.addr, v );
 
-}
+// }
 
-function setValueV4uiArray( gl, v ) {
+// function setValueV4uiArray( gl, v ) {
 
-	gl.uniform4uiv( this.addr, v );
+// 	gl.uniform4uiv( this.addr, v );
 
-}
+// }
 
 
-// Array of textures (2D / 3D / Cube / 2DArray)
+// // Array of textures (2D / 3D / Cube / 2DArray)
 
-function setValueT1Array( gl, v, textures ) {
+// function setValueT1Array( gl, v, textures ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	const n = v.length;
+// 	const n = v.length;
 
-	const units = allocTexUnits( textures, n );
+// 	const units = allocTexUnits( textures, n );
 
-	if ( ! arraysEqual( cache, units ) ) {
+// 	if ( ! arraysEqual( cache, units ) ) {
 
-		gl.uniform1iv( this.addr, units );
+// 		gl.uniform1iv( this.addr, units );
 
-		copyArray( cache, units );
+// 		copyArray( cache, units );
 
-	}
+// 	}
 
-	for ( let i = 0; i !== n; ++ i ) {
+// 	for ( let i = 0; i !== n; ++ i ) {
 
-		textures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );
+// 		textures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );
 
-	}
+// 	}
 
-}
+// }
 
-function setValueT3DArray( gl, v, textures ) {
+// function setValueT3DArray( gl, v, textures ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	const n = v.length;
+// 	const n = v.length;
 
-	const units = allocTexUnits( textures, n );
+// 	const units = allocTexUnits( textures, n );
 
-	if ( ! arraysEqual( cache, units ) ) {
+// 	if ( ! arraysEqual( cache, units ) ) {
 
-		gl.uniform1iv( this.addr, units );
+// 		gl.uniform1iv( this.addr, units );
 
-		copyArray( cache, units );
+// 		copyArray( cache, units );
 
-	}
+// 	}
 
-	for ( let i = 0; i !== n; ++ i ) {
+// 	for ( let i = 0; i !== n; ++ i ) {
 
-		textures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );
+// 		textures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );
 
-	}
+// 	}
 
-}
+// }
 
-function setValueT6Array( gl, v, textures ) {
+// function setValueT6Array( gl, v, textures ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	const n = v.length;
+// 	const n = v.length;
 
-	const units = allocTexUnits( textures, n );
+// 	const units = allocTexUnits( textures, n );
 
-	if ( ! arraysEqual( cache, units ) ) {
+// 	if ( ! arraysEqual( cache, units ) ) {
 
-		gl.uniform1iv( this.addr, units );
+// 		gl.uniform1iv( this.addr, units );
 
-		copyArray( cache, units );
+// 		copyArray( cache, units );
 
-	}
+// 	}
 
-	for ( let i = 0; i !== n; ++ i ) {
+// 	for ( let i = 0; i !== n; ++ i ) {
 
-		textures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );
+// 		textures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );
 
-	}
+// 	}
 
-}
+// }
 
-function setValueT2DArrayArray( gl, v, textures ) {
+// function setValueT2DArrayArray( gl, v, textures ) {
 
-	const cache = this.cache;
+// 	const cache = this.cache;
 
-	const n = v.length;
+// 	const n = v.length;
 
-	const units = allocTexUnits( textures, n );
+// 	const units = allocTexUnits( textures, n );
 
-	if ( ! arraysEqual( cache, units ) ) {
+// 	if ( ! arraysEqual( cache, units ) ) {
 
-		gl.uniform1iv( this.addr, units );
+// 		gl.uniform1iv( this.addr, units );
 
-		copyArray( cache, units );
+// 		copyArray( cache, units );
 
-	}
+// 	}
 
-	for ( let i = 0; i !== n; ++ i ) {
+// 	for ( let i = 0; i !== n; ++ i ) {
 
-		textures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );
+// 		textures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );
 
-	}
+// 	}
 
-}
+// }
 
 
-// Helper to pick the right setter for a pure (bottom-level) array
+// // Helper to pick the right setter for a pure (bottom-level) array
 
-function getPureArraySetter( type ) {
+// function getPureArraySetter( type ) {
 
-	switch ( type ) {
+// 	switch ( type ) {
 
-		case 0x1406: return setValueV1fArray; // FLOAT
-		case 0x8b50: return setValueV2fArray; // _VEC2
-		case 0x8b51: return setValueV3fArray; // _VEC3
-		case 0x8b52: return setValueV4fArray; // _VEC4
+// 		case 0x1406: return setValueV1fArray; // FLOAT
+// 		case 0x8b50: return setValueV2fArray; // _VEC2
+// 		case 0x8b51: return setValueV3fArray; // _VEC3
+// 		case 0x8b52: return setValueV4fArray; // _VEC4
 
-		case 0x8b5a: return setValueM2Array; // _MAT2
-		case 0x8b5b: return setValueM3Array; // _MAT3
-		case 0x8b5c: return setValueM4Array; // _MAT4
+// 		case 0x8b5a: return setValueM2Array; // _MAT2
+// 		case 0x8b5b: return setValueM3Array; // _MAT3
+// 		case 0x8b5c: return setValueM4Array; // _MAT4
 
-		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
-		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
-		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
-		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4
+// 		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
+// 		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
+// 		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
+// 		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4
 
-		case 0x1405: return setValueV1uiArray; // UINT
-		case 0x8dc6: return setValueV2uiArray; // _VEC2
-		case 0x8dc7: return setValueV3uiArray; // _VEC3
-		case 0x8dc8: return setValueV4uiArray; // _VEC4
+// 		case 0x1405: return setValueV1uiArray; // UINT
+// 		case 0x8dc6: return setValueV2uiArray; // _VEC2
+// 		case 0x8dc7: return setValueV3uiArray; // _VEC3
+// 		case 0x8dc8: return setValueV4uiArray; // _VEC4
 
-		case 0x8b5e: // SAMPLER_2D
-		case 0x8d66: // SAMPLER_EXTERNAL_OES
-		case 0x8dca: // INT_SAMPLER_2D
-		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
-		case 0x8b62: // SAMPLER_2D_SHADOW
-			return setValueT1Array;
+// 		case 0x8b5e: // SAMPLER_2D
+// 		case 0x8d66: // SAMPLER_EXTERNAL_OES
+// 		case 0x8dca: // INT_SAMPLER_2D
+// 		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
+// 		case 0x8b62: // SAMPLER_2D_SHADOW
+// 			return setValueT1Array;
 
-		case 0x8b5f: // SAMPLER_3D
-		case 0x8dcb: // INT_SAMPLER_3D
-		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
-			return setValueT3DArray;
+// 		case 0x8b5f: // SAMPLER_3D
+// 		case 0x8dcb: // INT_SAMPLER_3D
+// 		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
+// 			return setValueT3DArray;
 
-		case 0x8b60: // SAMPLER_CUBE
-		case 0x8dcc: // INT_SAMPLER_CUBE
-		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
-		case 0x8dc5: // SAMPLER_CUBE_SHADOW
-			return setValueT6Array;
+// 		case 0x8b60: // SAMPLER_CUBE
+// 		case 0x8dcc: // INT_SAMPLER_CUBE
+// 		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
+// 		case 0x8dc5: // SAMPLER_CUBE_SHADOW
+// 			return setValueT6Array;
 
-		case 0x8dc1: // SAMPLER_2D_ARRAY
-		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
-		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
-		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
-			return setValueT2DArrayArray;
+// 		case 0x8dc1: // SAMPLER_2D_ARRAY
+// 		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
+// 		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
+// 		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
+// 			return setValueT2DArrayArray;
 
-	}
+// 	}
 
-}
+// }
 
-// --- Uniform Classes ---
+// // --- Uniform Classes ---
 
-class SingleUniform {
+// class SingleUniform {
 
-	constructor( id, activeInfo, addr ) {
+// 	constructor( id, activeInfo, addr ) {
 
-		this.id = id;
-		this.addr = addr;
-		this.cache = [];
-		this.setValue = getSingularSetter( activeInfo.type );
+// 		this.id = id;
+// 		this.addr = addr;
+// 		this.cache = [];
+// 		this.setValue = getSingularSetter( activeInfo.type );
 
-		// this.path = activeInfo.name; // DEBUG
+// 		// this.path = activeInfo.name; // DEBUG
 
-	}
+// 	}
 
-}
+// }
 
-class PureArrayUniform {
+// class PureArrayUniform {
 
-	constructor( id, activeInfo, addr ) {
+// 	constructor( id, activeInfo, addr ) {
 
-		this.id = id;
-		this.addr = addr;
-		this.cache = [];
-		this.size = activeInfo.size;
-		this.setValue = getPureArraySetter( activeInfo.type );
+// 		this.id = id;
+// 		this.addr = addr;
+// 		this.cache = [];
+// 		this.size = activeInfo.size;
+// 		this.setValue = getPureArraySetter( activeInfo.type );
 
-		// this.path = activeInfo.name; // DEBUG
+// 		// this.path = activeInfo.name; // DEBUG
 
-	}
+// 	}
 
-}
+// }
 
-class StructuredUniform {
+// class StructuredUniform {
 
-	constructor( id ) {
+// 	constructor( id ) {
 
-		this.id = id;
+// 		this.id = id;
 
-		this.seq = [];
-		this.map = {};
+// 		this.seq = [];
+// 		this.map = {};
 
-	}
+// 	}
 
-	setValue( gl, value, textures ) {
+// 	setValue( gl, value, textures ) {
 
-		const seq = this.seq;
+// 		const seq = this.seq;
 
-		for ( let i = 0, n = seq.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = seq.length; i !== n; ++ i ) {
 
-			const u = seq[ i ];
-			u.setValue( gl, value[ u.id ], textures );
+// 			const u = seq[ i ];
+// 			u.setValue( gl, value[ u.id ], textures );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-// --- Top-level ---
+// // --- Top-level ---
 
-// Parser - builds up the property tree from the path strings
+// // Parser - builds up the property tree from the path strings
 
-const RePathPart = /(\w+)(\])?(\[|\.)?/g;
+// const RePathPart = /(\w+)(\])?(\[|\.)?/g;
 
-// extracts
-// 	- the identifier (member name or array index)
-//  - followed by an optional right bracket (found when array index)
-//  - followed by an optional left bracket or dot (type of subscript)
-//
-// Note: These portions can be read in a non-overlapping fashion and
-// allow straightforward parsing of the hierarchy that WebGL encodes
-// in the uniform names.
+// // extracts
+// // 	- the identifier (member name or array index)
+// //  - followed by an optional right bracket (found when array index)
+// //  - followed by an optional left bracket or dot (type of subscript)
+// //
+// // Note: These portions can be read in a non-overlapping fashion and
+// // allow straightforward parsing of the hierarchy that WebGL encodes
+// // in the uniform names.
 
-function addUniform( container, uniformObject ) {
+// function addUniform( container, uniformObject ) {
 
-	container.seq.push( uniformObject );
-	container.map[ uniformObject.id ] = uniformObject;
+// 	container.seq.push( uniformObject );
+// 	container.map[ uniformObject.id ] = uniformObject;
 
-}
+// }
 
-function parseUniform( activeInfo, addr, container ) {
+// function parseUniform( activeInfo, addr, container ) {
 
-	const path = activeInfo.name,
-		pathLength = path.length;
+// 	const path = activeInfo.name,
+// 		pathLength = path.length;
 
-	// reset RegExp object, because of the early exit of a previous run
-	RePathPart.lastIndex = 0;
+// 	// reset RegExp object, because of the early exit of a previous run
+// 	RePathPart.lastIndex = 0;
 
-	while ( true ) {
+// 	while ( true ) {
 
-		const match = RePathPart.exec( path ),
-			matchEnd = RePathPart.lastIndex;
+// 		const match = RePathPart.exec( path ),
+// 			matchEnd = RePathPart.lastIndex;
 
-		let id = match[ 1 ];
-		const idIsIndex = match[ 2 ] === ']',
-			subscript = match[ 3 ];
+// 		let id = match[ 1 ];
+// 		const idIsIndex = match[ 2 ] === ']',
+// 			subscript = match[ 3 ];
 
-		if ( idIsIndex ) id = id | 0; // convert to integer
+// 		if ( idIsIndex ) id = id | 0; // convert to integer
 
-		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {
+// 		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {
 
-			// bare name or "pure" bottom-level array "[0]" suffix
+// 			// bare name or "pure" bottom-level array "[0]" suffix
 
-			addUniform( container, subscript === undefined ?
-				new SingleUniform( id, activeInfo, addr ) :
-				new PureArrayUniform( id, activeInfo, addr ) );
+// 			addUniform( container, subscript === undefined ?
+// 				new SingleUniform( id, activeInfo, addr ) :
+// 				new PureArrayUniform( id, activeInfo, addr ) );
 
-			break;
+// 			break;
 
-		} else {
+// 		} else {
 
-			// step into inner node / create it in case it doesn't exist
+// 			// step into inner node / create it in case it doesn't exist
 
-			const map = container.map;
-			let next = map[ id ];
+// 			const map = container.map;
+// 			let next = map[ id ];
 
-			if ( next === undefined ) {
+// 			if ( next === undefined ) {
 
-				next = new StructuredUniform( id );
-				addUniform( container, next );
+// 				next = new StructuredUniform( id );
+// 				addUniform( container, next );
 
-			}
+// 			}
 
-			container = next;
+// 			container = next;
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-// Root Container
+// // Root Container
 
-class WebGLUniforms {
+// class WebGLUniforms {
 
-	constructor( gl, program ) {
+// 	constructor( gl, program ) {
 
-		this.seq = [];
-		this.map = {};
+// 		this.seq = [];
+// 		this.map = {};
 
-		const n = gl.getProgramParameter( program, 35718 );
+// 		const n = gl.getProgramParameter( program, 35718 );
 
-		for ( let i = 0; i < n; ++ i ) {
+// 		for ( let i = 0; i < n; ++ i ) {
 
-			const info = gl.getActiveUniform( program, i ),
-				addr = gl.getUniformLocation( program, info.name );
+// 			const info = gl.getActiveUniform( program, i ),
+// 				addr = gl.getUniformLocation( program, info.name );
 
-			parseUniform( info, addr, this );
+// 			parseUniform( info, addr, this );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	setValue( gl, name, value, textures ) {
+// 	setValue( gl, name, value, textures ) {
 
-		const u = this.map[ name ];
+// 		const u = this.map[ name ];
 
-		if ( u !== undefined ) u.setValue( gl, value, textures );
+// 		if ( u !== undefined ) u.setValue( gl, value, textures );
 
-	}
+// 	}
 
-	setOptional( gl, object, name ) {
+// 	setOptional( gl, object, name ) {
 
-		const v = object[ name ];
+// 		const v = object[ name ];
 
-		if ( v !== undefined ) this.setValue( gl, name, v );
+// 		if ( v !== undefined ) this.setValue( gl, name, v );
 
-	}
+// 	}
 
-	static upload( gl, seq, values, textures ) {
+// 	static upload( gl, seq, values, textures ) {
 
-		for ( let i = 0, n = seq.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = seq.length; i !== n; ++ i ) {
 
-			const u = seq[ i ],
-				v = values[ u.id ];
+// 			const u = seq[ i ],
+// 				v = values[ u.id ];
 
-			if ( v.needsUpdate !== false ) {
+// 			if ( v.needsUpdate !== false ) {
 
-				// note: always updating when .needsUpdate is undefined
-				u.setValue( gl, v.value, textures );
+// 				// note: always updating when .needsUpdate is undefined
+// 				u.setValue( gl, v.value, textures );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	static seqWithValue( seq, values ) {
+// 	static seqWithValue( seq, values ) {
 
-		const r = [];
+// 		const r = [];
 
-		for ( let i = 0, n = seq.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = seq.length; i !== n; ++ i ) {
 
-			const u = seq[ i ];
-			if ( u.id in values ) r.push( u );
+// 			const u = seq[ i ];
+// 			if ( u.id in values ) r.push( u );
 
-		}
+// 		}
 
-		return r;
+// 		return r;
 
-	}
+// 	}
 
-}
+// }
 
-function WebGLShader( gl, type, string ) {
+// function WebGLShader( gl, type, string ) {
 
-	const shader = gl.createShader( type );
+// 	const shader = gl.createShader( type );
 
-	gl.shaderSource( shader, string );
-	gl.compileShader( shader );
+// 	gl.shaderSource( shader, string );
+// 	gl.compileShader( shader );
 
-	return shader;
+// 	return shader;
 
-}
+// }
 
-let programIdCount = 0;
+// let programIdCount = 0;
 
-function handleSource( string, errorLine ) {
+// function handleSource( string, errorLine ) {
 
-	const lines = string.split( '\n' );
-	const lines2 = [];
+// 	const lines = string.split( '\n' );
+// 	const lines2 = [];
 
-	const from = Math.max( errorLine - 6, 0 );
-	const to = Math.min( errorLine + 6, lines.length );
+// 	const from = Math.max( errorLine - 6, 0 );
+// 	const to = Math.min( errorLine + 6, lines.length );
 
-	for ( let i = from; i < to; i ++ ) {
+// 	for ( let i = from; i < to; i ++ ) {
 
-		const line = i + 1;
-		lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );
+// 		const line = i + 1;
+// 		lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );
 
-	}
+// 	}
 
-	return lines2.join( '\n' );
+// 	return lines2.join( '\n' );
 
-}
+// }
 
-function getEncodingComponents( encoding ) {
+// function getEncodingComponents( encoding ) {
 
-	switch ( encoding ) {
+// 	switch ( encoding ) {
 
-		case LinearEncoding:
-			return [ 'Linear', '( value )' ];
-		case sRGBEncoding:
-			return [ 'sRGB', '( value )' ];
-		default:
-			console.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );
-			return [ 'Linear', '( value )' ];
+// 		case LinearEncoding:
+// 			return [ 'Linear', '( value )' ];
+// 		case sRGBEncoding:
+// 			return [ 'sRGB', '( value )' ];
+// 		default:
+// 			console.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );
+// 			return [ 'Linear', '( value )' ];
 
-	}
+// 	}
 
-}
+// }
 
-function getShaderErrors( gl, shader, type ) {
+// function getShaderErrors( gl, shader, type ) {
 
-	const status = gl.getShaderParameter( shader, 35713 );
-	const errors = gl.getShaderInfoLog( shader ).trim();
+// 	const status = gl.getShaderParameter( shader, 35713 );
+// 	const errors = gl.getShaderInfoLog( shader ).trim();
 
-	if ( status && errors === '' ) return '';
+// 	if ( status && errors === '' ) return '';
 
-	const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
-	if ( errorMatches ) {
+// 	const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
+// 	if ( errorMatches ) {
 
-		// --enable-privileged-webgl-extension
-		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
+// 		// --enable-privileged-webgl-extension
+// 		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
 
-		const errorLine = parseInt( errorMatches[ 1 ] );
-		return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource( gl.getShaderSource( shader ), errorLine );
+// 		const errorLine = parseInt( errorMatches[ 1 ] );
+// 		return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource( gl.getShaderSource( shader ), errorLine );
 
-	} else {
+// 	} else {
 
-		return errors;
+// 		return errors;
 
-	}
+// 	}
 
-}
+// }
 
-function getTexelEncodingFunction( functionName, encoding ) {
+// function getTexelEncodingFunction( functionName, encoding ) {
 
-	const components = getEncodingComponents( encoding );
-	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';
+// 	const components = getEncodingComponents( encoding );
+// 	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';
 
-}
+// }
 
-function getToneMappingFunction( functionName, toneMapping ) {
+// function getToneMappingFunction( functionName, toneMapping ) {
 
-	let toneMappingName;
+// 	let toneMappingName;
 
-	switch ( toneMapping ) {
+// 	switch ( toneMapping ) {
 
-		case LinearToneMapping:
-			toneMappingName = 'Linear';
-			break;
+// 		case LinearToneMapping:
+// 			toneMappingName = 'Linear';
+// 			break;
 
-		case ReinhardToneMapping:
-			toneMappingName = 'Reinhard';
-			break;
+// 		case ReinhardToneMapping:
+// 			toneMappingName = 'Reinhard';
+// 			break;
 
-		case CineonToneMapping:
-			toneMappingName = 'OptimizedCineon';
-			break;
+// 		case CineonToneMapping:
+// 			toneMappingName = 'OptimizedCineon';
+// 			break;
 
-		case ACESFilmicToneMapping:
-			toneMappingName = 'ACESFilmic';
-			break;
+// 		case ACESFilmicToneMapping:
+// 			toneMappingName = 'ACESFilmic';
+// 			break;
 
-		case CustomToneMapping:
-			toneMappingName = 'Custom';
-			break;
+// 		case CustomToneMapping:
+// 			toneMappingName = 'Custom';
+// 			break;
 
-		default:
-			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
-			toneMappingName = 'Linear';
+// 		default:
+// 			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
+// 			toneMappingName = 'Linear';
 
-	}
+// 	}
 
-	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
+// 	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
 
-}
+// }
 
-function generateExtensions( parameters ) {
+// function generateExtensions( parameters ) {
 
-	const chunks = [
-		( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
-		( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
-		( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
-		( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
-	];
+// 	const chunks = [
+// 		( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
+// 		( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
+// 		( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
+// 		( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
+// 	];
 
-	return chunks.filter( filterEmptyLine ).join( '\n' );
+// 	return chunks.filter( filterEmptyLine ).join( '\n' );
 
-}
+// }
 
-function generateDefines( defines ) {
+// function generateDefines( defines ) {
 
-	const chunks = [];
+// 	const chunks = [];
 
-	for ( const name in defines ) {
+// 	for ( const name in defines ) {
 
-		const value = defines[ name ];
+// 		const value = defines[ name ];
 
-		if ( value === false ) continue;
+// 		if ( value === false ) continue;
 
-		chunks.push( '#define ' + name + ' ' + value );
+// 		chunks.push( '#define ' + name + ' ' + value );
 
-	}
+// 	}
 
-	return chunks.join( '\n' );
+// 	return chunks.join( '\n' );
 
-}
+// }
 
-function fetchAttributeLocations( gl, program ) {
+// function fetchAttributeLocations( gl, program ) {
 
-	const attributes = {};
+// 	const attributes = {};
 
-	const n = gl.getProgramParameter( program, 35721 );
+// 	const n = gl.getProgramParameter( program, 35721 );
 
-	for ( let i = 0; i < n; i ++ ) {
+// 	for ( let i = 0; i < n; i ++ ) {
 
-		const info = gl.getActiveAttrib( program, i );
-		const name = info.name;
+// 		const info = gl.getActiveAttrib( program, i );
+// 		const name = info.name;
 
-		let locationSize = 1;
-		if ( info.type === 35674 ) locationSize = 2;
-		if ( info.type === 35675 ) locationSize = 3;
-		if ( info.type === 35676 ) locationSize = 4;
+// 		let locationSize = 1;
+// 		if ( info.type === 35674 ) locationSize = 2;
+// 		if ( info.type === 35675 ) locationSize = 3;
+// 		if ( info.type === 35676 ) locationSize = 4;
 
-		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
+// 		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
 
-		attributes[ name ] = {
-			type: info.type,
-			location: gl.getAttribLocation( program, name ),
-			locationSize: locationSize
-		};
+// 		attributes[ name ] = {
+// 			type: info.type,
+// 			location: gl.getAttribLocation( program, name ),
+// 			locationSize: locationSize
+// 		};
 
-	}
+// 	}
 
-	return attributes;
+// 	return attributes;
 
-}
+// }
 
-function filterEmptyLine( string ) {
+// function filterEmptyLine( string ) {
 
-	return string !== '';
+// 	return string !== '';
 
-}
+// }
 
-function replaceLightNums( string, parameters ) {
+// function replaceLightNums( string, parameters ) {
 
-	const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
+// 	const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
 
-	return string
-		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
-		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
-		.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )
-		.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )
-		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
-		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
-		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
-		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
-		.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )
-		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
-		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );
+// 	return string
+// 		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
+// 		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
+// 		.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )
+// 		.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )
+// 		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
+// 		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
+// 		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
+// 		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
+// 		.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )
+// 		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
+// 		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );
 
-}
+// }
 
-function replaceClippingPlaneNums( string, parameters ) {
+// function replaceClippingPlaneNums( string, parameters ) {
 
-	return string
-		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
-		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );
+// 	return string
+// 		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
+// 		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );
 
-}
+// }
 
-// Resolve Includes
+// // Resolve Includes
 
-const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
+// const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
 
-function resolveIncludes( string ) {
+// function resolveIncludes( string ) {
 
-	return string.replace( includePattern, includeReplacer );
+// 	return string.replace( includePattern, includeReplacer );
 
-}
+// }
 
-function includeReplacer( match, include ) {
+// function includeReplacer( match, include ) {
 
-	const string = ShaderChunk[ include ];
+// 	const string = ShaderChunk[ include ];
 
-	if ( string === undefined ) {
+// 	if ( string === undefined ) {
 
-		throw new Error( 'Can not resolve #include <' + include + '>' );
+// 		throw new Error( 'Can not resolve #include <' + include + '>' );
 
-	}
+// 	}
 
-	return resolveIncludes( string );
+// 	return resolveIncludes( string );
 
-}
+// }
 
-// Unroll Loops
+// // Unroll Loops
 
-const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
+// const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
 
-function unrollLoops( string ) {
+// function unrollLoops( string ) {
 
-	return string.replace( unrollLoopPattern, loopReplacer );
+// 	return string.replace( unrollLoopPattern, loopReplacer );
 
-}
+// }
 
-function loopReplacer( match, start, end, snippet ) {
+// function loopReplacer( match, start, end, snippet ) {
 
-	let string = '';
+// 	let string = '';
 
-	for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {
+// 	for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {
 
-		string += snippet
-			.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
-			.replace( /UNROLLED_LOOP_INDEX/g, i );
+// 		string += snippet
+// 			.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
+// 			.replace( /UNROLLED_LOOP_INDEX/g, i );
 
-	}
+// 	}
 
-	return string;
+// 	return string;
 
-}
+// }
 
-//
+// //
 
-function generatePrecision( parameters ) {
+// function generatePrecision( parameters ) {
 
-	let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';
+// 	let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';
 
-	if ( parameters.precision === 'highp' ) {
+// 	if ( parameters.precision === 'highp' ) {
 
-		precisionstring += '\n#define HIGH_PRECISION';
+// 		precisionstring += '\n#define HIGH_PRECISION';
 
-	} else if ( parameters.precision === 'mediump' ) {
+// 	} else if ( parameters.precision === 'mediump' ) {
 
-		precisionstring += '\n#define MEDIUM_PRECISION';
+// 		precisionstring += '\n#define MEDIUM_PRECISION';
 
-	} else if ( parameters.precision === 'lowp' ) {
+// 	} else if ( parameters.precision === 'lowp' ) {
 
-		precisionstring += '\n#define LOW_PRECISION';
+// 		precisionstring += '\n#define LOW_PRECISION';
 
-	}
+// 	}
 
-	return precisionstring;
+// 	return precisionstring;
 
-}
+// }
 
-function generateShadowMapTypeDefine( parameters ) {
+// function generateShadowMapTypeDefine( parameters ) {
 
-	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
+// 	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
 
-	if ( parameters.shadowMapType === PCFShadowMap ) {
+// 	if ( parameters.shadowMapType === PCFShadowMap ) {
 
-		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
+// 		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
 
-	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {
+// 	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {
 
-		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
+// 		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
 
-	} else if ( parameters.shadowMapType === VSMShadowMap ) {
+// 	} else if ( parameters.shadowMapType === VSMShadowMap ) {
 
-		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
+// 		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
 
-	}
+// 	}
 
-	return shadowMapTypeDefine;
+// 	return shadowMapTypeDefine;
 
-}
+// }
 
-function generateEnvMapTypeDefine( parameters ) {
+// function generateEnvMapTypeDefine( parameters ) {
 
-	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
+// 	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
 
-	if ( parameters.envMap ) {
+// 	if ( parameters.envMap ) {
 
-		switch ( parameters.envMapMode ) {
+// 		switch ( parameters.envMapMode ) {
 
-			case CubeReflectionMapping:
-			case CubeRefractionMapping:
-				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
-				break;
+// 			case CubeReflectionMapping:
+// 			case CubeRefractionMapping:
+// 				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
+// 				break;
 
-			case CubeUVReflectionMapping:
-				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
-				break;
+// 			case CubeUVReflectionMapping:
+// 				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
+// 				break;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return envMapTypeDefine;
+// 	return envMapTypeDefine;
 
-}
+// }
 
-function generateEnvMapModeDefine( parameters ) {
+// function generateEnvMapModeDefine( parameters ) {
 
-	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
+// 	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
 
-	if ( parameters.envMap ) {
+// 	if ( parameters.envMap ) {
 
-		switch ( parameters.envMapMode ) {
+// 		switch ( parameters.envMapMode ) {
 
-			case CubeRefractionMapping:
+// 			case CubeRefractionMapping:
 
-				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
-				break;
+// 				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
+// 				break;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return envMapModeDefine;
+// 	return envMapModeDefine;
 
-}
+// }
 
-function generateEnvMapBlendingDefine( parameters ) {
+// function generateEnvMapBlendingDefine( parameters ) {
 
-	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';
+// 	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';
 
-	if ( parameters.envMap ) {
+// 	if ( parameters.envMap ) {
 
-		switch ( parameters.combine ) {
+// 		switch ( parameters.combine ) {
 
-			case MultiplyOperation:
-				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
-				break;
+// 			case MultiplyOperation:
+// 				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
+// 				break;
 
-			case MixOperation:
-				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
-				break;
+// 			case MixOperation:
+// 				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
+// 				break;
 
-			case AddOperation:
-				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
-				break;
+// 			case AddOperation:
+// 				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
+// 				break;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return envMapBlendingDefine;
+// 	return envMapBlendingDefine;
 
-}
+// }
 
-function generateCubeUVSize( parameters ) {
+// function generateCubeUVSize( parameters ) {
 
-	const imageHeight = parameters.envMapCubeUVHeight;
+// 	const imageHeight = parameters.envMapCubeUVHeight;
 
-	if ( imageHeight === null ) return null;
+// 	if ( imageHeight === null ) return null;
 
-	const maxMip = Math.log2( imageHeight ) - 2;
+// 	const maxMip = Math.log2( imageHeight ) - 2;
 
-	const texelHeight = 1.0 / imageHeight;
+// 	const texelHeight = 1.0 / imageHeight;
 
-	const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );
+// 	const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );
 
-	return { texelWidth, texelHeight, maxMip };
+// 	return { texelWidth, texelHeight, maxMip };
 
-}
+// }
 
-function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {
+// function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {
 
-	// TODO Send this event to Three.js DevTools
-	// console.log( 'WebGLProgram', cacheKey );
+// 	// TODO Send this event to Three.js DevTools
+// 	// console.log( 'WebGLProgram', cacheKey );
 
-	const gl = renderer.getContext();
+// 	const gl = renderer.getContext();
 
-	const defines = parameters.defines;
+// 	const defines = parameters.defines;
 
-	let vertexShader = parameters.vertexShader;
-	let fragmentShader = parameters.fragmentShader;
+// 	let vertexShader = parameters.vertexShader;
+// 	let fragmentShader = parameters.fragmentShader;
 
-	const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
-	const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
-	const envMapModeDefine = generateEnvMapModeDefine( parameters );
-	const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
-	const envMapCubeUVSize = generateCubeUVSize( parameters );
+// 	const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
+// 	const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
+// 	const envMapModeDefine = generateEnvMapModeDefine( parameters );
+// 	const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
+// 	const envMapCubeUVSize = generateCubeUVSize( parameters );
 
-	const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );
+// 	const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );
 
-	const customDefines = generateDefines( defines );
+// 	const customDefines = generateDefines( defines );
 
-	const program = gl.createProgram();
+// 	const program = gl.createProgram();
 
-	let prefixVertex, prefixFragment;
-	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';
+// 	let prefixVertex, prefixFragment;
+// 	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';
 
-	if ( parameters.isRawShaderMaterial ) {
+// 	if ( parameters.isRawShaderMaterial ) {
 
-		prefixVertex = [
+// 		prefixVertex = [
 
-			customDefines
+// 			customDefines
 
-		].filter( filterEmptyLine ).join( '\n' );
+// 		].filter( filterEmptyLine ).join( '\n' );
 
-		if ( prefixVertex.length > 0 ) {
+// 		if ( prefixVertex.length > 0 ) {
 
-			prefixVertex += '\n';
+// 			prefixVertex += '\n';
 
-		}
+// 		}
 
-		prefixFragment = [
+// 		prefixFragment = [
 
-			customExtensions,
-			customDefines
+// 			customExtensions,
+// 			customDefines
 
-		].filter( filterEmptyLine ).join( '\n' );
+// 		].filter( filterEmptyLine ).join( '\n' );
 
-		if ( prefixFragment.length > 0 ) {
+// 		if ( prefixFragment.length > 0 ) {
 
-			prefixFragment += '\n';
+// 			prefixFragment += '\n';
 
-		}
+// 		}
 
-	} else {
+// 	} else {
 
-		prefixVertex = [
+// 		prefixVertex = [
 
-			generatePrecision( parameters ),
+// 			generatePrecision( parameters ),
 
-			'#define SHADER_NAME ' + parameters.shaderName,
+// 			'#define SHADER_NAME ' + parameters.shaderName,
 
-			customDefines,
+// 			customDefines,
 
-			parameters.instancing ? '#define USE_INSTANCING' : '',
-			parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
+// 			parameters.instancing ? '#define USE_INSTANCING' : '',
+// 			parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
 
-			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
+// 			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
 
-			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
-			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',
+// 			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
+// 			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',
 
-			parameters.map ? '#define USE_MAP' : '',
-			parameters.envMap ? '#define USE_ENVMAP' : '',
-			parameters.envMap ? '#define ' + envMapModeDefine : '',
-			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
-			parameters.aoMap ? '#define USE_AOMAP' : '',
-			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
-			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
-			parameters.normalMap ? '#define USE_NORMALMAP' : '',
-			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
-			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
+// 			parameters.map ? '#define USE_MAP' : '',
+// 			parameters.envMap ? '#define USE_ENVMAP' : '',
+// 			parameters.envMap ? '#define ' + envMapModeDefine : '',
+// 			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
+// 			parameters.aoMap ? '#define USE_AOMAP' : '',
+// 			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
+// 			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
+// 			parameters.normalMap ? '#define USE_NORMALMAP' : '',
+// 			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
+// 			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
 
-			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
-			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
-			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
+// 			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
+// 			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
+// 			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
 
-			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
-			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',
+// 			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
+// 			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',
 
-			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
+// 			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
 
-			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
-			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
-			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
+// 			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
+// 			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
+// 			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
 
-			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
-			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
-			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
+// 			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
+// 			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
+// 			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
 
-			parameters.transmission ? '#define USE_TRANSMISSION' : '',
-			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
-			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',
+// 			parameters.transmission ? '#define USE_TRANSMISSION' : '',
+// 			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
+// 			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',
 
-			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
-			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
+// 			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
+// 			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
 
-			parameters.vertexTangents ? '#define USE_TANGENT' : '',
-			parameters.vertexColors ? '#define USE_COLOR' : '',
-			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
-			parameters.vertexUvs ? '#define USE_UV' : '',
-			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
+// 			parameters.vertexTangents ? '#define USE_TANGENT' : '',
+// 			parameters.vertexColors ? '#define USE_COLOR' : '',
+// 			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
+// 			parameters.vertexUvs ? '#define USE_UV' : '',
+// 			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
 
-			parameters.flatShading ? '#define FLAT_SHADED' : '',
+// 			parameters.flatShading ? '#define FLAT_SHADED' : '',
 
-			parameters.skinning ? '#define USE_SKINNING' : '',
+// 			parameters.skinning ? '#define USE_SKINNING' : '',
 
-			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
-			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
-			( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',
-			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',
-			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
-			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
-			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
-			parameters.flipSided ? '#define FLIP_SIDED' : '',
+// 			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
+// 			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
+// 			( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',
+// 			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',
+// 			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
+// 			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
+// 			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
+// 			parameters.flipSided ? '#define FLIP_SIDED' : '',
 
-			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
-			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
+// 			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
+// 			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
 
-			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
+// 			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
 
-			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
-			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
+// 			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
+// 			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
 
-			'uniform mat4 modelMatrix;',
-			'uniform mat4 modelViewMatrix;',
-			'uniform mat4 projectionMatrix;',
-			'uniform mat4 viewMatrix;',
-			'uniform mat3 normalMatrix;',
-			'uniform vec3 cameraPosition;',
-			'uniform bool isOrthographic;',
+// 			'uniform mat4 modelMatrix;',
+// 			'uniform mat4 modelViewMatrix;',
+// 			'uniform mat4 projectionMatrix;',
+// 			'uniform mat4 viewMatrix;',
+// 			'uniform mat3 normalMatrix;',
+// 			'uniform vec3 cameraPosition;',
+// 			'uniform bool isOrthographic;',
 
-			'#ifdef USE_INSTANCING',
+// 			'#ifdef USE_INSTANCING',
 
-			'	attribute mat4 instanceMatrix;',
+// 			'	attribute mat4 instanceMatrix;',
 
-			'#endif',
+// 			'#endif',
 
-			'#ifdef USE_INSTANCING_COLOR',
+// 			'#ifdef USE_INSTANCING_COLOR',
 
-			'	attribute vec3 instanceColor;',
+// 			'	attribute vec3 instanceColor;',
 
-			'#endif',
+// 			'#endif',
 
-			'attribute vec3 position;',
-			'attribute vec3 normal;',
-			'attribute vec2 uv;',
+// 			'attribute vec3 position;',
+// 			'attribute vec3 normal;',
+// 			'attribute vec2 uv;',
 
-			'#ifdef USE_TANGENT',
+// 			'#ifdef USE_TANGENT',
 
-			'	attribute vec4 tangent;',
+// 			'	attribute vec4 tangent;',
 
-			'#endif',
+// 			'#endif',
 
-			'#if defined( USE_COLOR_ALPHA )',
+// 			'#if defined( USE_COLOR_ALPHA )',
 
-			'	attribute vec4 color;',
+// 			'	attribute vec4 color;',
 
-			'#elif defined( USE_COLOR )',
+// 			'#elif defined( USE_COLOR )',
 
-			'	attribute vec3 color;',
+// 			'	attribute vec3 color;',
 
-			'#endif',
+// 			'#endif',
 
-			'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',
+// 			'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',
 
-			'	attribute vec3 morphTarget0;',
-			'	attribute vec3 morphTarget1;',
-			'	attribute vec3 morphTarget2;',
-			'	attribute vec3 morphTarget3;',
+// 			'	attribute vec3 morphTarget0;',
+// 			'	attribute vec3 morphTarget1;',
+// 			'	attribute vec3 morphTarget2;',
+// 			'	attribute vec3 morphTarget3;',
 
-			'	#ifdef USE_MORPHNORMALS',
+// 			'	#ifdef USE_MORPHNORMALS',
 
-			'		attribute vec3 morphNormal0;',
-			'		attribute vec3 morphNormal1;',
-			'		attribute vec3 morphNormal2;',
-			'		attribute vec3 morphNormal3;',
+// 			'		attribute vec3 morphNormal0;',
+// 			'		attribute vec3 morphNormal1;',
+// 			'		attribute vec3 morphNormal2;',
+// 			'		attribute vec3 morphNormal3;',
 
-			'	#else',
+// 			'	#else',
 
-			'		attribute vec3 morphTarget4;',
-			'		attribute vec3 morphTarget5;',
-			'		attribute vec3 morphTarget6;',
-			'		attribute vec3 morphTarget7;',
+// 			'		attribute vec3 morphTarget4;',
+// 			'		attribute vec3 morphTarget5;',
+// 			'		attribute vec3 morphTarget6;',
+// 			'		attribute vec3 morphTarget7;',
 
-			'	#endif',
+// 			'	#endif',
 
-			'#endif',
+// 			'#endif',
 
-			'#ifdef USE_SKINNING',
+// 			'#ifdef USE_SKINNING',
 
-			'	attribute vec4 skinIndex;',
-			'	attribute vec4 skinWeight;',
+// 			'	attribute vec4 skinIndex;',
+// 			'	attribute vec4 skinWeight;',
 
-			'#endif',
+// 			'#endif',
 
-			'\n'
+// 			'\n'
 
-		].filter( filterEmptyLine ).join( '\n' );
+// 		].filter( filterEmptyLine ).join( '\n' );
 
-		prefixFragment = [
+// 		prefixFragment = [
 
-			customExtensions,
+// 			customExtensions,
 
-			generatePrecision( parameters ),
+// 			generatePrecision( parameters ),
 
-			'#define SHADER_NAME ' + parameters.shaderName,
+// 			'#define SHADER_NAME ' + parameters.shaderName,
 
-			customDefines,
+// 			customDefines,
 
-			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
-			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',
+// 			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
+// 			( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',
 
-			parameters.map ? '#define USE_MAP' : '',
-			parameters.matcap ? '#define USE_MATCAP' : '',
-			parameters.envMap ? '#define USE_ENVMAP' : '',
-			parameters.envMap ? '#define ' + envMapTypeDefine : '',
-			parameters.envMap ? '#define ' + envMapModeDefine : '',
-			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
-			envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
-			envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
-			envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
-			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
-			parameters.aoMap ? '#define USE_AOMAP' : '',
-			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
-			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
-			parameters.normalMap ? '#define USE_NORMALMAP' : '',
-			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
-			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
+// 			parameters.map ? '#define USE_MAP' : '',
+// 			parameters.matcap ? '#define USE_MATCAP' : '',
+// 			parameters.envMap ? '#define USE_ENVMAP' : '',
+// 			parameters.envMap ? '#define ' + envMapTypeDefine : '',
+// 			parameters.envMap ? '#define ' + envMapModeDefine : '',
+// 			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
+// 			envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
+// 			envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
+// 			envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
+// 			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
+// 			parameters.aoMap ? '#define USE_AOMAP' : '',
+// 			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
+// 			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
+// 			parameters.normalMap ? '#define USE_NORMALMAP' : '',
+// 			( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
+// 			( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
 
-			parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
-			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
-			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
-			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
+// 			parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
+// 			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
+// 			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
+// 			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
 
-			parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
-			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
-			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',
+// 			parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
+// 			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
+// 			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',
 
-			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
-			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
-			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
-			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
-			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
+// 			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
+// 			parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
+// 			parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
+// 			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
+// 			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
 
-			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
-			parameters.alphaTest ? '#define USE_ALPHATEST' : '',
+// 			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
+// 			parameters.alphaTest ? '#define USE_ALPHATEST' : '',
 
-			parameters.sheen ? '#define USE_SHEEN' : '',
-			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
-			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
+// 			parameters.sheen ? '#define USE_SHEEN' : '',
+// 			parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
+// 			parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
 
-			parameters.transmission ? '#define USE_TRANSMISSION' : '',
-			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
-			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',
+// 			parameters.transmission ? '#define USE_TRANSMISSION' : '',
+// 			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
+// 			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',
 
-			parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',
+// 			parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',
 
-			parameters.vertexTangents ? '#define USE_TANGENT' : '',
-			parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
-			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
-			parameters.vertexUvs ? '#define USE_UV' : '',
-			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
+// 			parameters.vertexTangents ? '#define USE_TANGENT' : '',
+// 			parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
+// 			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
+// 			parameters.vertexUvs ? '#define USE_UV' : '',
+// 			parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
 
-			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
+// 			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
 
-			parameters.flatShading ? '#define FLAT_SHADED' : '',
+// 			parameters.flatShading ? '#define FLAT_SHADED' : '',
 
-			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
-			parameters.flipSided ? '#define FLIP_SIDED' : '',
+// 			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
+// 			parameters.flipSided ? '#define FLIP_SIDED' : '',
 
-			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
-			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
+// 			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
+// 			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
 
-			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
+// 			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
 
-			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
+// 			parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
 
-			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
-			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
+// 			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
+// 			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
 
-			'uniform mat4 viewMatrix;',
-			'uniform vec3 cameraPosition;',
-			'uniform bool isOrthographic;',
+// 			'uniform mat4 viewMatrix;',
+// 			'uniform vec3 cameraPosition;',
+// 			'uniform bool isOrthographic;',
 
-			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
-			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
-			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',
+// 			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
+// 			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
+// 			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',
 
-			parameters.dithering ? '#define DITHERING' : '',
-			parameters.opaque ? '#define OPAQUE' : '',
+// 			parameters.dithering ? '#define DITHERING' : '',
+// 			parameters.opaque ? '#define OPAQUE' : '',
 
-			ShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
-			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),
+// 			ShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
+// 			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),
 
-			parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',
+// 			parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',
 
-			'\n'
+// 			'\n'
 
-		].filter( filterEmptyLine ).join( '\n' );
+// 		].filter( filterEmptyLine ).join( '\n' );
 
-	}
+// 	}
 
-	vertexShader = resolveIncludes( vertexShader );
-	vertexShader = replaceLightNums( vertexShader, parameters );
-	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );
+// 	vertexShader = resolveIncludes( vertexShader );
+// 	vertexShader = replaceLightNums( vertexShader, parameters );
+// 	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );
 
-	fragmentShader = resolveIncludes( fragmentShader );
-	fragmentShader = replaceLightNums( fragmentShader, parameters );
-	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );
+// 	fragmentShader = resolveIncludes( fragmentShader );
+// 	fragmentShader = replaceLightNums( fragmentShader, parameters );
+// 	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );
 
-	vertexShader = unrollLoops( vertexShader );
-	fragmentShader = unrollLoops( fragmentShader );
+// 	vertexShader = unrollLoops( vertexShader );
+// 	fragmentShader = unrollLoops( fragmentShader );
 
-	if ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {
+// 	if ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {
 
-		// GLSL 3.0 conversion for built-in materials and ShaderMaterial
+// 		// GLSL 3.0 conversion for built-in materials and ShaderMaterial
 
-		versionString = '#version 300 es\n';
+// 		versionString = '#version 300 es\n';
 
-		prefixVertex = [
-			'precision mediump sampler2DArray;',
-			'#define attribute in',
-			'#define varying out',
-			'#define texture2D texture'
-		].join( '\n' ) + '\n' + prefixVertex;
+// 		prefixVertex = [
+// 			'precision mediump sampler2DArray;',
+// 			'#define attribute in',
+// 			'#define varying out',
+// 			'#define texture2D texture'
+// 		].join( '\n' ) + '\n' + prefixVertex;
 
-		prefixFragment = [
-			'#define varying in',
-			( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
-			( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
-			'#define gl_FragDepthEXT gl_FragDepth',
-			'#define texture2D texture',
-			'#define textureCube texture',
-			'#define texture2DProj textureProj',
-			'#define texture2DLodEXT textureLod',
-			'#define texture2DProjLodEXT textureProjLod',
-			'#define textureCubeLodEXT textureLod',
-			'#define texture2DGradEXT textureGrad',
-			'#define texture2DProjGradEXT textureProjGrad',
-			'#define textureCubeGradEXT textureGrad'
-		].join( '\n' ) + '\n' + prefixFragment;
+// 		prefixFragment = [
+// 			'#define varying in',
+// 			( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
+// 			( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
+// 			'#define gl_FragDepthEXT gl_FragDepth',
+// 			'#define texture2D texture',
+// 			'#define textureCube texture',
+// 			'#define texture2DProj textureProj',
+// 			'#define texture2DLodEXT textureLod',
+// 			'#define texture2DProjLodEXT textureProjLod',
+// 			'#define textureCubeLodEXT textureLod',
+// 			'#define texture2DGradEXT textureGrad',
+// 			'#define texture2DProjGradEXT textureProjGrad',
+// 			'#define textureCubeGradEXT textureGrad'
+// 		].join( '\n' ) + '\n' + prefixFragment;
 
-	}
+// 	}
 
-	const vertexGlsl = versionString + prefixVertex + vertexShader;
-	const fragmentGlsl = versionString + prefixFragment + fragmentShader;
+// 	const vertexGlsl = versionString + prefixVertex + vertexShader;
+// 	const fragmentGlsl = versionString + prefixFragment + fragmentShader;
 
-	// console.log( '*VERTEX*', vertexGlsl );
-	// console.log( '*FRAGMENT*', fragmentGlsl );
+// 	// console.log( '*VERTEX*', vertexGlsl );
+// 	// console.log( '*FRAGMENT*', fragmentGlsl );
 
-	const glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
-	const glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );
+// 	const glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
+// 	const glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );
 
-	gl.attachShader( program, glVertexShader );
-	gl.attachShader( program, glFragmentShader );
+// 	gl.attachShader( program, glVertexShader );
+// 	gl.attachShader( program, glFragmentShader );
 
-	// Force a particular attribute to index 0.
+// 	// Force a particular attribute to index 0.
 
-	if ( parameters.index0AttributeName !== undefined ) {
+// 	if ( parameters.index0AttributeName !== undefined ) {
 
-		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );
+// 		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );
 
-	} else if ( parameters.morphTargets === true ) {
+// 	} else if ( parameters.morphTargets === true ) {
 
-		// programs with morphTargets displace position out of attribute 0
-		gl.bindAttribLocation( program, 0, 'position' );
+// 		// programs with morphTargets displace position out of attribute 0
+// 		gl.bindAttribLocation( program, 0, 'position' );
 
-	}
+// 	}
 
-	gl.linkProgram( program );
+// 	gl.linkProgram( program );
 
-	// check for link errors
-	if ( renderer.debug.checkShaderErrors ) {
+// 	// check for link errors
+// 	if ( renderer.debug.checkShaderErrors ) {
 
-		const programLog = gl.getProgramInfoLog( program ).trim();
-		const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
-		const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();
+// 		const programLog = gl.getProgramInfoLog( program ).trim();
+// 		const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
+// 		const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();
 
-		let runnable = true;
-		let haveDiagnostics = true;
+// 		let runnable = true;
+// 		let haveDiagnostics = true;
 
-		if ( gl.getProgramParameter( program, 35714 ) === false ) {
+// 		if ( gl.getProgramParameter( program, 35714 ) === false ) {
 
-			runnable = false;
+// 			runnable = false;
 
-			const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
-			const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );
+// 			const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
+// 			const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );
 
-			console.error(
-				'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
-				'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\n\n' +
-				'Program Info Log: ' + programLog + '\n' +
-				vertexErrors + '\n' +
-				fragmentErrors
-			);
+// 			console.error(
+// 				'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
+// 				'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\n\n' +
+// 				'Program Info Log: ' + programLog + '\n' +
+// 				vertexErrors + '\n' +
+// 				fragmentErrors
+// 			);
 
-		} else if ( programLog !== '' ) {
+// 		} else if ( programLog !== '' ) {
 
-			console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );
+// 			console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );
 
-		} else if ( vertexLog === '' || fragmentLog === '' ) {
+// 		} else if ( vertexLog === '' || fragmentLog === '' ) {
 
-			haveDiagnostics = false;
+// 			haveDiagnostics = false;
 
-		}
+// 		}
 
-		if ( haveDiagnostics ) {
+// 		if ( haveDiagnostics ) {
 
-			this.diagnostics = {
+// 			this.diagnostics = {
 
-				runnable: runnable,
+// 				runnable: runnable,
 
-				programLog: programLog,
+// 				programLog: programLog,
 
-				vertexShader: {
+// 				vertexShader: {
 
-					log: vertexLog,
-					prefix: prefixVertex
+// 					log: vertexLog,
+// 					prefix: prefixVertex
 
-				},
+// 				},
 
-				fragmentShader: {
+// 				fragmentShader: {
 
-					log: fragmentLog,
-					prefix: prefixFragment
+// 					log: fragmentLog,
+// 					prefix: prefixFragment
 
-				}
+// 				}
 
-			};
+// 			};
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// Clean up
+// 	// Clean up
 
-	// Crashes in iOS9 and iOS10. #18402
-	// gl.detachShader( program, glVertexShader );
-	// gl.detachShader( program, glFragmentShader );
+// 	// Crashes in iOS9 and iOS10. #18402
+// 	// gl.detachShader( program, glVertexShader );
+// 	// gl.detachShader( program, glFragmentShader );
 
-	gl.deleteShader( glVertexShader );
-	gl.deleteShader( glFragmentShader );
+// 	gl.deleteShader( glVertexShader );
+// 	gl.deleteShader( glFragmentShader );
 
-	// set up caching for uniform locations
+// 	// set up caching for uniform locations
 
-	let cachedUniforms;
+// 	let cachedUniforms;
 
-	this.getUniforms = function () {
+// 	this.getUniforms = function () {
 
-		if ( cachedUniforms === undefined ) {
+// 		if ( cachedUniforms === undefined ) {
 
-			cachedUniforms = new WebGLUniforms( gl, program );
+// 			cachedUniforms = new WebGLUniforms( gl, program );
 
-		}
+// 		}
 
-		return cachedUniforms;
+// 		return cachedUniforms;
 
-	};
+// 	};
 
-	// set up caching for attribute locations
+// 	// set up caching for attribute locations
 
-	let cachedAttributes;
+// 	let cachedAttributes;
 
-	this.getAttributes = function () {
+// 	this.getAttributes = function () {
 
-		if ( cachedAttributes === undefined ) {
+// 		if ( cachedAttributes === undefined ) {
 
-			cachedAttributes = fetchAttributeLocations( gl, program );
+// 			cachedAttributes = fetchAttributeLocations( gl, program );
 
-		}
+// 		}
 
-		return cachedAttributes;
+// 		return cachedAttributes;
 
-	};
+// 	};
 
-	// free resource
+// 	// free resource
 
-	this.destroy = function () {
+// 	this.destroy = function () {
 
-		bindingStates.releaseStatesOfProgram( this );
+// 		bindingStates.releaseStatesOfProgram( this );
 
-		gl.deleteProgram( program );
-		this.program = undefined;
+// 		gl.deleteProgram( program );
+// 		this.program = undefined;
 
-	};
+// 	};
 
-	//
+// 	//
 
-	this.name = parameters.shaderName;
-	this.id = programIdCount ++;
-	this.cacheKey = cacheKey;
-	this.usedTimes = 1;
-	this.program = program;
-	this.vertexShader = glVertexShader;
-	this.fragmentShader = glFragmentShader;
+// 	this.name = parameters.shaderName;
+// 	this.id = programIdCount ++;
+// 	this.cacheKey = cacheKey;
+// 	this.usedTimes = 1;
+// 	this.program = program;
+// 	this.vertexShader = glVertexShader;
+// 	this.fragmentShader = glFragmentShader;
 
-	return this;
+// 	return this;
 
-}
+// }
 
-let _id = 0;
+// let _id = 0;
 
-class WebGLShaderCache {
+// class WebGLShaderCache {
 
-	constructor() {
+// 	constructor() {
 
-		this.shaderCache = new Map();
-		this.materialCache = new Map();
+// 		this.shaderCache = new Map();
+// 		this.materialCache = new Map();
 
-	}
+// 	}
 
-	update( material ) {
+// 	update( material ) {
 
-		const vertexShader = material.vertexShader;
-		const fragmentShader = material.fragmentShader;
+// 		const vertexShader = material.vertexShader;
+// 		const fragmentShader = material.fragmentShader;
 
-		const vertexShaderStage = this._getShaderStage( vertexShader );
-		const fragmentShaderStage = this._getShaderStage( fragmentShader );
+// 		const vertexShaderStage = this._getShaderStage( vertexShader );
+// 		const fragmentShaderStage = this._getShaderStage( fragmentShader );
 
-		const materialShaders = this._getShaderCacheForMaterial( material );
+// 		const materialShaders = this._getShaderCacheForMaterial( material );
 
-		if ( materialShaders.has( vertexShaderStage ) === false ) {
+// 		if ( materialShaders.has( vertexShaderStage ) === false ) {
 
-			materialShaders.add( vertexShaderStage );
-			vertexShaderStage.usedTimes ++;
+// 			materialShaders.add( vertexShaderStage );
+// 			vertexShaderStage.usedTimes ++;
 
-		}
+// 		}
 
-		if ( materialShaders.has( fragmentShaderStage ) === false ) {
+// 		if ( materialShaders.has( fragmentShaderStage ) === false ) {
 
-			materialShaders.add( fragmentShaderStage );
-			fragmentShaderStage.usedTimes ++;
+// 			materialShaders.add( fragmentShaderStage );
+// 			fragmentShaderStage.usedTimes ++;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	remove( material ) {
+// 	remove( material ) {
 
-		const materialShaders = this.materialCache.get( material );
+// 		const materialShaders = this.materialCache.get( material );
 
-		for ( const shaderStage of materialShaders ) {
+// 		for ( const shaderStage of materialShaders ) {
 
-			shaderStage.usedTimes --;
+// 			shaderStage.usedTimes --;
 
-			if ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );
+// 			if ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );
 
-		}
+// 		}
 
-		this.materialCache.delete( material );
+// 		this.materialCache.delete( material );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getVertexShaderID( material ) {
+// 	getVertexShaderID( material ) {
 
-		return this._getShaderStage( material.vertexShader ).id;
+// 		return this._getShaderStage( material.vertexShader ).id;
 
-	}
+// 	}
 
-	getFragmentShaderID( material ) {
+// 	getFragmentShaderID( material ) {
 
-		return this._getShaderStage( material.fragmentShader ).id;
+// 		return this._getShaderStage( material.fragmentShader ).id;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.shaderCache.clear();
-		this.materialCache.clear();
+// 		this.shaderCache.clear();
+// 		this.materialCache.clear();
 
-	}
+// 	}
 
-	_getShaderCacheForMaterial( material ) {
+// 	_getShaderCacheForMaterial( material ) {
 
-		const cache = this.materialCache;
-		let set = cache.get( material );
+// 		const cache = this.materialCache;
+// 		let set = cache.get( material );
 
-		if ( set === undefined ) {
+// 		if ( set === undefined ) {
 
-			set = new Set();
-			cache.set( material, set );
+// 			set = new Set();
+// 			cache.set( material, set );
 
-		}
+// 		}
 
-		return set;
+// 		return set;
 
-	}
+// 	}
 
-	_getShaderStage( code ) {
+// 	_getShaderStage( code ) {
 
-		const cache = this.shaderCache;
-		let stage = cache.get( code );
+// 		const cache = this.shaderCache;
+// 		let stage = cache.get( code );
 
-		if ( stage === undefined ) {
+// 		if ( stage === undefined ) {
 
-			stage = new WebGLShaderStage( code );
-			cache.set( code, stage );
+// 			stage = new WebGLShaderStage( code );
+// 			cache.set( code, stage );
 
-		}
+// 		}
 
-		return stage;
+// 		return stage;
 
-	}
+// 	}
 
-}
+// }
 
-class WebGLShaderStage {
+// class WebGLShaderStage {
 
-	constructor( code ) {
+// 	constructor( code ) {
 
-		this.id = _id ++;
+// 		this.id = _id ++;
 
-		this.code = code;
-		this.usedTimes = 0;
+// 		this.code = code;
+// 		this.usedTimes = 0;
 
-	}
+// 	}
 
-}
+// }
 
-function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {
+// function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {
 
-	const _programLayers = new Layers();
-	const _customShaders = new WebGLShaderCache();
-	const programs = [];
+// 	const _programLayers = new Layers();
+// 	const _customShaders = new WebGLShaderCache();
+// 	const programs = [];
 
-	const isWebGL2 = capabilities.isWebGL2;
-	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
-	const vertexTextures = capabilities.vertexTextures;
-	let precision = capabilities.precision;
+// 	const isWebGL2 = capabilities.isWebGL2;
+// 	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
+// 	const vertexTextures = capabilities.vertexTextures;
+// 	let precision = capabilities.precision;
 
-	const shaderIDs = {
-		MeshDepthMaterial: 'depth',
-		MeshDistanceMaterial: 'distanceRGBA',
-		MeshNormalMaterial: 'normal',
-		MeshBasicMaterial: 'basic',
-		MeshLambertMaterial: 'lambert',
-		MeshPhongMaterial: 'phong',
-		MeshToonMaterial: 'toon',
-		MeshStandardMaterial: 'physical',
-		MeshPhysicalMaterial: 'physical',
-		MeshMatcapMaterial: 'matcap',
-		LineBasicMaterial: 'basic',
-		LineDashedMaterial: 'dashed',
-		PointsMaterial: 'points',
-		ShadowMaterial: 'shadow',
-		SpriteMaterial: 'sprite'
-	};
+// 	const shaderIDs = {
+// 		MeshDepthMaterial: 'depth',
+// 		MeshDistanceMaterial: 'distanceRGBA',
+// 		MeshNormalMaterial: 'normal',
+// 		MeshBasicMaterial: 'basic',
+// 		MeshLambertMaterial: 'lambert',
+// 		MeshPhongMaterial: 'phong',
+// 		MeshToonMaterial: 'toon',
+// 		MeshStandardMaterial: 'physical',
+// 		MeshPhysicalMaterial: 'physical',
+// 		MeshMatcapMaterial: 'matcap',
+// 		LineBasicMaterial: 'basic',
+// 		LineDashedMaterial: 'dashed',
+// 		PointsMaterial: 'points',
+// 		ShadowMaterial: 'shadow',
+// 		SpriteMaterial: 'sprite'
+// 	};
 
-	function getParameters( material, lights, shadows, scene, object ) {
+// 	function getParameters( material, lights, shadows, scene, object ) {
 
-		const fog = scene.fog;
-		const geometry = object.geometry;
-		const environment = material.isMeshStandardMaterial ? scene.environment : null;
+// 		const fog = scene.fog;
+// 		const geometry = object.geometry;
+// 		const environment = material.isMeshStandardMaterial ? scene.environment : null;
 
-		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
-		const envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;
+// 		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
+// 		const envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;
 
-		const shaderID = shaderIDs[ material.type ];
+// 		const shaderID = shaderIDs[ material.type ];
 
-		// heuristics to create shader parameters according to lights in the scene
-		// (not to blow over maxLights budget)
+// 		// heuristics to create shader parameters according to lights in the scene
+// 		// (not to blow over maxLights budget)
 
-		if ( material.precision !== null ) {
+// 		if ( material.precision !== null ) {
 
-			precision = capabilities.getMaxPrecision( material.precision );
+// 			precision = capabilities.getMaxPrecision( material.precision );
 
-			if ( precision !== material.precision ) {
+// 			if ( precision !== material.precision ) {
 
-				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );
+// 				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		//
+// 		//
 
-		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
-		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;
+// 		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
+// 		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;
 
-		let morphTextureStride = 0;
+// 		let morphTextureStride = 0;
 
-		if ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;
-		if ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;
-		if ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;
+// 		if ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;
+// 		if ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;
+// 		if ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;
 
-		//
+// 		//
 
-		let vertexShader, fragmentShader;
-		let customVertexShaderID, customFragmentShaderID;
+// 		let vertexShader, fragmentShader;
+// 		let customVertexShaderID, customFragmentShaderID;
 
-		if ( shaderID ) {
+// 		if ( shaderID ) {
 
-			const shader = ShaderLib[ shaderID ];
+// 			const shader = ShaderLib[ shaderID ];
 
-			vertexShader = shader.vertexShader;
-			fragmentShader = shader.fragmentShader;
+// 			vertexShader = shader.vertexShader;
+// 			fragmentShader = shader.fragmentShader;
 
-		} else {
+// 		} else {
 
-			vertexShader = material.vertexShader;
-			fragmentShader = material.fragmentShader;
+// 			vertexShader = material.vertexShader;
+// 			fragmentShader = material.fragmentShader;
 
-			_customShaders.update( material );
+// 			_customShaders.update( material );
 
-			customVertexShaderID = _customShaders.getVertexShaderID( material );
-			customFragmentShaderID = _customShaders.getFragmentShaderID( material );
+// 			customVertexShaderID = _customShaders.getVertexShaderID( material );
+// 			customFragmentShaderID = _customShaders.getFragmentShaderID( material );
 
-		}
+// 		}
 
-		const currentRenderTarget = renderer.getRenderTarget();
+// 		const currentRenderTarget = renderer.getRenderTarget();
 
-		const useAlphaTest = material.alphaTest > 0;
-		const useClearcoat = material.clearcoat > 0;
-		const useIridescence = material.iridescence > 0;
+// 		const useAlphaTest = material.alphaTest > 0;
+// 		const useClearcoat = material.clearcoat > 0;
+// 		const useIridescence = material.iridescence > 0;
 
-		const parameters = {
+// 		const parameters = {
 
-			isWebGL2: isWebGL2,
+// 			isWebGL2: isWebGL2,
 
-			shaderID: shaderID,
-			shaderName: material.type,
+// 			shaderID: shaderID,
+// 			shaderName: material.type,
 
-			vertexShader: vertexShader,
-			fragmentShader: fragmentShader,
-			defines: material.defines,
+// 			vertexShader: vertexShader,
+// 			fragmentShader: fragmentShader,
+// 			defines: material.defines,
 
-			customVertexShaderID: customVertexShaderID,
-			customFragmentShaderID: customFragmentShaderID,
+// 			customVertexShaderID: customVertexShaderID,
+// 			customFragmentShaderID: customFragmentShaderID,
 
-			isRawShaderMaterial: material.isRawShaderMaterial === true,
-			glslVersion: material.glslVersion,
+// 			isRawShaderMaterial: material.isRawShaderMaterial === true,
+// 			glslVersion: material.glslVersion,
 
-			precision: precision,
+// 			precision: precision,
 
-			instancing: object.isInstancedMesh === true,
-			instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
+// 			instancing: object.isInstancedMesh === true,
+// 			instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
 
-			supportsVertexTextures: vertexTextures,
-			outputEncoding: ( currentRenderTarget === null ) ? renderer.outputEncoding : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding ),
-			map: !! material.map,
-			matcap: !! material.matcap,
-			envMap: !! envMap,
-			envMapMode: envMap && envMap.mapping,
-			envMapCubeUVHeight: envMapCubeUVHeight,
-			lightMap: !! material.lightMap,
-			aoMap: !! material.aoMap,
-			emissiveMap: !! material.emissiveMap,
-			bumpMap: !! material.bumpMap,
-			normalMap: !! material.normalMap,
-			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
-			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
+// 			supportsVertexTextures: vertexTextures,
+// 			outputEncoding: ( currentRenderTarget === null ) ? renderer.outputEncoding : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.encoding : LinearEncoding ),
+// 			map: !! material.map,
+// 			matcap: !! material.matcap,
+// 			envMap: !! envMap,
+// 			envMapMode: envMap && envMap.mapping,
+// 			envMapCubeUVHeight: envMapCubeUVHeight,
+// 			lightMap: !! material.lightMap,
+// 			aoMap: !! material.aoMap,
+// 			emissiveMap: !! material.emissiveMap,
+// 			bumpMap: !! material.bumpMap,
+// 			normalMap: !! material.normalMap,
+// 			objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
+// 			tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
 
-			decodeVideoTexture: !! material.map && ( material.map.isVideoTexture === true ) && ( material.map.encoding === sRGBEncoding ),
+// 			decodeVideoTexture: !! material.map && ( material.map.isVideoTexture === true ) && ( material.map.encoding === sRGBEncoding ),
 
-			clearcoat: useClearcoat,
-			clearcoatMap: useClearcoat && !! material.clearcoatMap,
-			clearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,
-			clearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,
+// 			clearcoat: useClearcoat,
+// 			clearcoatMap: useClearcoat && !! material.clearcoatMap,
+// 			clearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,
+// 			clearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,
 
-			iridescence: useIridescence,
-			iridescenceMap: useIridescence && !! material.iridescenceMap,
-			iridescenceThicknessMap: useIridescence && !! material.iridescenceThicknessMap,
+// 			iridescence: useIridescence,
+// 			iridescenceMap: useIridescence && !! material.iridescenceMap,
+// 			iridescenceThicknessMap: useIridescence && !! material.iridescenceThicknessMap,
 
-			displacementMap: !! material.displacementMap,
-			roughnessMap: !! material.roughnessMap,
-			metalnessMap: !! material.metalnessMap,
-			specularMap: !! material.specularMap,
-			specularIntensityMap: !! material.specularIntensityMap,
-			specularColorMap: !! material.specularColorMap,
+// 			displacementMap: !! material.displacementMap,
+// 			roughnessMap: !! material.roughnessMap,
+// 			metalnessMap: !! material.metalnessMap,
+// 			specularMap: !! material.specularMap,
+// 			specularIntensityMap: !! material.specularIntensityMap,
+// 			specularColorMap: !! material.specularColorMap,
 
-			opaque: material.transparent === false && material.blending === NormalBlending,
+// 			opaque: material.transparent === false && material.blending === NormalBlending,
 
-			alphaMap: !! material.alphaMap,
-			alphaTest: useAlphaTest,
+// 			alphaMap: !! material.alphaMap,
+// 			alphaTest: useAlphaTest,
 
-			gradientMap: !! material.gradientMap,
+// 			gradientMap: !! material.gradientMap,
 
-			sheen: material.sheen > 0,
-			sheenColorMap: !! material.sheenColorMap,
-			sheenRoughnessMap: !! material.sheenRoughnessMap,
+// 			sheen: material.sheen > 0,
+// 			sheenColorMap: !! material.sheenColorMap,
+// 			sheenRoughnessMap: !! material.sheenRoughnessMap,
 
-			transmission: material.transmission > 0,
-			transmissionMap: !! material.transmissionMap,
-			thicknessMap: !! material.thicknessMap,
+// 			transmission: material.transmission > 0,
+// 			transmissionMap: !! material.transmissionMap,
+// 			thicknessMap: !! material.thicknessMap,
 
-			combine: material.combine,
+// 			combine: material.combine,
 
-			vertexTangents: ( !! material.normalMap && !! geometry.attributes.tangent ),
-			vertexColors: material.vertexColors,
-			vertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,
-			vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || !! material.sheenRoughnessMap,
-			uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,
+// 			vertexTangents: ( !! material.normalMap && !! geometry.attributes.tangent ),
+// 			vertexColors: material.vertexColors,
+// 			vertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,
+// 			vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || !! material.sheenRoughnessMap,
+// 			uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.iridescenceMap || !! material.iridescenceThicknessMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,
 
-			fog: !! fog,
-			useFog: material.fog === true,
-			fogExp2: ( fog && fog.isFogExp2 ),
+// 			fog: !! fog,
+// 			useFog: material.fog === true,
+// 			fogExp2: ( fog && fog.isFogExp2 ),
 
-			flatShading: !! material.flatShading,
+// 			flatShading: !! material.flatShading,
 
-			sizeAttenuation: material.sizeAttenuation,
-			logarithmicDepthBuffer: logarithmicDepthBuffer,
+// 			sizeAttenuation: material.sizeAttenuation,
+// 			logarithmicDepthBuffer: logarithmicDepthBuffer,
 
-			skinning: object.isSkinnedMesh === true,
+// 			skinning: object.isSkinnedMesh === true,
 
-			morphTargets: geometry.morphAttributes.position !== undefined,
-			morphNormals: geometry.morphAttributes.normal !== undefined,
-			morphColors: geometry.morphAttributes.color !== undefined,
-			morphTargetsCount: morphTargetsCount,
-			morphTextureStride: morphTextureStride,
+// 			morphTargets: geometry.morphAttributes.position !== undefined,
+// 			morphNormals: geometry.morphAttributes.normal !== undefined,
+// 			morphColors: geometry.morphAttributes.color !== undefined,
+// 			morphTargetsCount: morphTargetsCount,
+// 			morphTextureStride: morphTextureStride,
 
-			numDirLights: lights.directional.length,
-			numPointLights: lights.point.length,
-			numSpotLights: lights.spot.length,
-			numSpotLightMaps: lights.spotLightMap.length,
-			numRectAreaLights: lights.rectArea.length,
-			numHemiLights: lights.hemi.length,
+// 			numDirLights: lights.directional.length,
+// 			numPointLights: lights.point.length,
+// 			numSpotLights: lights.spot.length,
+// 			numSpotLightMaps: lights.spotLightMap.length,
+// 			numRectAreaLights: lights.rectArea.length,
+// 			numHemiLights: lights.hemi.length,
 
-			numDirLightShadows: lights.directionalShadowMap.length,
-			numPointLightShadows: lights.pointShadowMap.length,
-			numSpotLightShadows: lights.spotShadowMap.length,
-			numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
+// 			numDirLightShadows: lights.directionalShadowMap.length,
+// 			numPointLightShadows: lights.pointShadowMap.length,
+// 			numSpotLightShadows: lights.spotShadowMap.length,
+// 			numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
 
-			numClippingPlanes: clipping.numPlanes,
-			numClipIntersection: clipping.numIntersection,
+// 			numClippingPlanes: clipping.numPlanes,
+// 			numClipIntersection: clipping.numIntersection,
 
-			dithering: material.dithering,
+// 			dithering: material.dithering,
 
-			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
-			shadowMapType: renderer.shadowMap.type,
+// 			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
+// 			shadowMapType: renderer.shadowMap.type,
 
-			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
-			physicallyCorrectLights: renderer.physicallyCorrectLights,
+// 			toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
+// 			physicallyCorrectLights: renderer.physicallyCorrectLights,
 
-			premultipliedAlpha: material.premultipliedAlpha,
+// 			premultipliedAlpha: material.premultipliedAlpha,
 
-			doubleSided: material.side === DoubleSide,
-			flipSided: material.side === BackSide,
+// 			doubleSided: material.side === DoubleSide,
+// 			flipSided: material.side === BackSide,
 
-			useDepthPacking: !! material.depthPacking,
-			depthPacking: material.depthPacking || 0,
+// 			useDepthPacking: !! material.depthPacking,
+// 			depthPacking: material.depthPacking || 0,
 
-			index0AttributeName: material.index0AttributeName,
+// 			index0AttributeName: material.index0AttributeName,
 
-			extensionDerivatives: material.extensions && material.extensions.derivatives,
-			extensionFragDepth: material.extensions && material.extensions.fragDepth,
-			extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
-			extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
+// 			extensionDerivatives: material.extensions && material.extensions.derivatives,
+// 			extensionFragDepth: material.extensions && material.extensions.fragDepth,
+// 			extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
+// 			extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
 
-			rendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),
-			rendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),
-			rendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),
+// 			rendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),
+// 			rendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),
+// 			rendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),
 
-			customProgramCacheKey: material.customProgramCacheKey()
+// 			customProgramCacheKey: material.customProgramCacheKey()
 
-		};
+// 		};
 
-		return parameters;
+// 		return parameters;
 
-	}
+// 	}
 
-	function getProgramCacheKey( parameters ) {
+// 	function getProgramCacheKey( parameters ) {
 
-		const array = [];
+// 		const array = [];
 
-		if ( parameters.shaderID ) {
+// 		if ( parameters.shaderID ) {
 
-			array.push( parameters.shaderID );
+// 			array.push( parameters.shaderID );
 
-		} else {
+// 		} else {
 
-			array.push( parameters.customVertexShaderID );
-			array.push( parameters.customFragmentShaderID );
+// 			array.push( parameters.customVertexShaderID );
+// 			array.push( parameters.customFragmentShaderID );
 
-		}
+// 		}
 
-		if ( parameters.defines !== undefined ) {
-
-			for ( const name in parameters.defines ) {
-
-				array.push( name );
-				array.push( parameters.defines[ name ] );
-
-			}
-
-		}
-
-		if ( parameters.isRawShaderMaterial === false ) {
-
-			getProgramCacheKeyParameters( array, parameters );
-			getProgramCacheKeyBooleans( array, parameters );
-			array.push( renderer.outputEncoding );
-
-		}
-
-		array.push( parameters.customProgramCacheKey );
-
-		return array.join();
-
-	}
-
-	function getProgramCacheKeyParameters( array, parameters ) {
-
-		array.push( parameters.precision );
-		array.push( parameters.outputEncoding );
-		array.push( parameters.envMapMode );
-		array.push( parameters.envMapCubeUVHeight );
-		array.push( parameters.combine );
-		array.push( parameters.vertexUvs );
-		array.push( parameters.fogExp2 );
-		array.push( parameters.sizeAttenuation );
-		array.push( parameters.morphTargetsCount );
-		array.push( parameters.morphAttributeCount );
-		array.push( parameters.numDirLights );
-		array.push( parameters.numPointLights );
-		array.push( parameters.numSpotLights );
-		array.push( parameters.numSpotLightMaps );
-		array.push( parameters.numHemiLights );
-		array.push( parameters.numRectAreaLights );
-		array.push( parameters.numDirLightShadows );
-		array.push( parameters.numPointLightShadows );
-		array.push( parameters.numSpotLightShadows );
-		array.push( parameters.numSpotLightShadowsWithMaps );
-		array.push( parameters.shadowMapType );
-		array.push( parameters.toneMapping );
-		array.push( parameters.numClippingPlanes );
-		array.push( parameters.numClipIntersection );
-		array.push( parameters.depthPacking );
-
-	}
-
-	function getProgramCacheKeyBooleans( array, parameters ) {
-
-		_programLayers.disableAll();
-
-		if ( parameters.isWebGL2 )
-			_programLayers.enable( 0 );
-		if ( parameters.supportsVertexTextures )
-			_programLayers.enable( 1 );
-		if ( parameters.instancing )
-			_programLayers.enable( 2 );
-		if ( parameters.instancingColor )
-			_programLayers.enable( 3 );
-		if ( parameters.map )
-			_programLayers.enable( 4 );
-		if ( parameters.matcap )
-			_programLayers.enable( 5 );
-		if ( parameters.envMap )
-			_programLayers.enable( 6 );
-		if ( parameters.lightMap )
-			_programLayers.enable( 7 );
-		if ( parameters.aoMap )
-			_programLayers.enable( 8 );
-		if ( parameters.emissiveMap )
-			_programLayers.enable( 9 );
-		if ( parameters.bumpMap )
-			_programLayers.enable( 10 );
-		if ( parameters.normalMap )
-			_programLayers.enable( 11 );
-		if ( parameters.objectSpaceNormalMap )
-			_programLayers.enable( 12 );
-		if ( parameters.tangentSpaceNormalMap )
-			_programLayers.enable( 13 );
-		if ( parameters.clearcoat )
-			_programLayers.enable( 14 );
-		if ( parameters.clearcoatMap )
-			_programLayers.enable( 15 );
-		if ( parameters.clearcoatRoughnessMap )
-			_programLayers.enable( 16 );
-		if ( parameters.clearcoatNormalMap )
-			_programLayers.enable( 17 );
-		if ( parameters.iridescence )
-			_programLayers.enable( 18 );
-		if ( parameters.iridescenceMap )
-			_programLayers.enable( 19 );
-		if ( parameters.iridescenceThicknessMap )
-			_programLayers.enable( 20 );
-		if ( parameters.displacementMap )
-			_programLayers.enable( 21 );
-		if ( parameters.specularMap )
-			_programLayers.enable( 22 );
-		if ( parameters.roughnessMap )
-			_programLayers.enable( 23 );
-		if ( parameters.metalnessMap )
-			_programLayers.enable( 24 );
-		if ( parameters.gradientMap )
-			_programLayers.enable( 25 );
-		if ( parameters.alphaMap )
-			_programLayers.enable( 26 );
-		if ( parameters.alphaTest )
-			_programLayers.enable( 27 );
-		if ( parameters.vertexColors )
-			_programLayers.enable( 28 );
-		if ( parameters.vertexAlphas )
-			_programLayers.enable( 29 );
-		if ( parameters.vertexUvs )
-			_programLayers.enable( 30 );
-		if ( parameters.vertexTangents )
-			_programLayers.enable( 31 );
-		if ( parameters.uvsVertexOnly )
-			_programLayers.enable( 32 );
-
-		array.push( _programLayers.mask );
-		_programLayers.disableAll();
-
-		if ( parameters.fog )
-			_programLayers.enable( 0 );
-		if ( parameters.useFog )
-			_programLayers.enable( 1 );
-		if ( parameters.flatShading )
-			_programLayers.enable( 2 );
-		if ( parameters.logarithmicDepthBuffer )
-			_programLayers.enable( 3 );
-		if ( parameters.skinning )
-			_programLayers.enable( 4 );
-		if ( parameters.morphTargets )
-			_programLayers.enable( 5 );
-		if ( parameters.morphNormals )
-			_programLayers.enable( 6 );
-		if ( parameters.morphColors )
-			_programLayers.enable( 7 );
-		if ( parameters.premultipliedAlpha )
-			_programLayers.enable( 8 );
-		if ( parameters.shadowMapEnabled )
-			_programLayers.enable( 9 );
-		if ( parameters.physicallyCorrectLights )
-			_programLayers.enable( 10 );
-		if ( parameters.doubleSided )
-			_programLayers.enable( 11 );
-		if ( parameters.flipSided )
-			_programLayers.enable( 12 );
-		if ( parameters.useDepthPacking )
-			_programLayers.enable( 13 );
-		if ( parameters.dithering )
-			_programLayers.enable( 14 );
-		if ( parameters.specularIntensityMap )
-			_programLayers.enable( 15 );
-		if ( parameters.specularColorMap )
-			_programLayers.enable( 16 );
-		if ( parameters.transmission )
-			_programLayers.enable( 17 );
-		if ( parameters.transmissionMap )
-			_programLayers.enable( 18 );
-		if ( parameters.thicknessMap )
-			_programLayers.enable( 19 );
-		if ( parameters.sheen )
-			_programLayers.enable( 20 );
-		if ( parameters.sheenColorMap )
-			_programLayers.enable( 21 );
-		if ( parameters.sheenRoughnessMap )
-			_programLayers.enable( 22 );
-		if ( parameters.decodeVideoTexture )
-			_programLayers.enable( 23 );
-		if ( parameters.opaque )
-			_programLayers.enable( 24 );
-
-		array.push( _programLayers.mask );
-
-	}
-
-	function getUniforms( material ) {
-
-		const shaderID = shaderIDs[ material.type ];
-		let uniforms;
-
-		if ( shaderID ) {
-
-			const shader = ShaderLib[ shaderID ];
-			uniforms = UniformsUtils.clone( shader.uniforms );
+// 		if ( parameters.defines !== undefined ) {
+
+// 			for ( const name in parameters.defines ) {
+
+// 				array.push( name );
+// 				array.push( parameters.defines[ name ] );
+
+// 			}
+
+// 		}
+
+// 		if ( parameters.isRawShaderMaterial === false ) {
+
+// 			getProgramCacheKeyParameters( array, parameters );
+// 			getProgramCacheKeyBooleans( array, parameters );
+// 			array.push( renderer.outputEncoding );
+
+// 		}
+
+// 		array.push( parameters.customProgramCacheKey );
+
+// 		return array.join();
+
+// 	}
+
+// 	function getProgramCacheKeyParameters( array, parameters ) {
+
+// 		array.push( parameters.precision );
+// 		array.push( parameters.outputEncoding );
+// 		array.push( parameters.envMapMode );
+// 		array.push( parameters.envMapCubeUVHeight );
+// 		array.push( parameters.combine );
+// 		array.push( parameters.vertexUvs );
+// 		array.push( parameters.fogExp2 );
+// 		array.push( parameters.sizeAttenuation );
+// 		array.push( parameters.morphTargetsCount );
+// 		array.push( parameters.morphAttributeCount );
+// 		array.push( parameters.numDirLights );
+// 		array.push( parameters.numPointLights );
+// 		array.push( parameters.numSpotLights );
+// 		array.push( parameters.numSpotLightMaps );
+// 		array.push( parameters.numHemiLights );
+// 		array.push( parameters.numRectAreaLights );
+// 		array.push( parameters.numDirLightShadows );
+// 		array.push( parameters.numPointLightShadows );
+// 		array.push( parameters.numSpotLightShadows );
+// 		array.push( parameters.numSpotLightShadowsWithMaps );
+// 		array.push( parameters.shadowMapType );
+// 		array.push( parameters.toneMapping );
+// 		array.push( parameters.numClippingPlanes );
+// 		array.push( parameters.numClipIntersection );
+// 		array.push( parameters.depthPacking );
+
+// 	}
+
+// 	function getProgramCacheKeyBooleans( array, parameters ) {
+
+// 		_programLayers.disableAll();
+
+// 		if ( parameters.isWebGL2 )
+// 			_programLayers.enable( 0 );
+// 		if ( parameters.supportsVertexTextures )
+// 			_programLayers.enable( 1 );
+// 		if ( parameters.instancing )
+// 			_programLayers.enable( 2 );
+// 		if ( parameters.instancingColor )
+// 			_programLayers.enable( 3 );
+// 		if ( parameters.map )
+// 			_programLayers.enable( 4 );
+// 		if ( parameters.matcap )
+// 			_programLayers.enable( 5 );
+// 		if ( parameters.envMap )
+// 			_programLayers.enable( 6 );
+// 		if ( parameters.lightMap )
+// 			_programLayers.enable( 7 );
+// 		if ( parameters.aoMap )
+// 			_programLayers.enable( 8 );
+// 		if ( parameters.emissiveMap )
+// 			_programLayers.enable( 9 );
+// 		if ( parameters.bumpMap )
+// 			_programLayers.enable( 10 );
+// 		if ( parameters.normalMap )
+// 			_programLayers.enable( 11 );
+// 		if ( parameters.objectSpaceNormalMap )
+// 			_programLayers.enable( 12 );
+// 		if ( parameters.tangentSpaceNormalMap )
+// 			_programLayers.enable( 13 );
+// 		if ( parameters.clearcoat )
+// 			_programLayers.enable( 14 );
+// 		if ( parameters.clearcoatMap )
+// 			_programLayers.enable( 15 );
+// 		if ( parameters.clearcoatRoughnessMap )
+// 			_programLayers.enable( 16 );
+// 		if ( parameters.clearcoatNormalMap )
+// 			_programLayers.enable( 17 );
+// 		if ( parameters.iridescence )
+// 			_programLayers.enable( 18 );
+// 		if ( parameters.iridescenceMap )
+// 			_programLayers.enable( 19 );
+// 		if ( parameters.iridescenceThicknessMap )
+// 			_programLayers.enable( 20 );
+// 		if ( parameters.displacementMap )
+// 			_programLayers.enable( 21 );
+// 		if ( parameters.specularMap )
+// 			_programLayers.enable( 22 );
+// 		if ( parameters.roughnessMap )
+// 			_programLayers.enable( 23 );
+// 		if ( parameters.metalnessMap )
+// 			_programLayers.enable( 24 );
+// 		if ( parameters.gradientMap )
+// 			_programLayers.enable( 25 );
+// 		if ( parameters.alphaMap )
+// 			_programLayers.enable( 26 );
+// 		if ( parameters.alphaTest )
+// 			_programLayers.enable( 27 );
+// 		if ( parameters.vertexColors )
+// 			_programLayers.enable( 28 );
+// 		if ( parameters.vertexAlphas )
+// 			_programLayers.enable( 29 );
+// 		if ( parameters.vertexUvs )
+// 			_programLayers.enable( 30 );
+// 		if ( parameters.vertexTangents )
+// 			_programLayers.enable( 31 );
+// 		if ( parameters.uvsVertexOnly )
+// 			_programLayers.enable( 32 );
+
+// 		array.push( _programLayers.mask );
+// 		_programLayers.disableAll();
+
+// 		if ( parameters.fog )
+// 			_programLayers.enable( 0 );
+// 		if ( parameters.useFog )
+// 			_programLayers.enable( 1 );
+// 		if ( parameters.flatShading )
+// 			_programLayers.enable( 2 );
+// 		if ( parameters.logarithmicDepthBuffer )
+// 			_programLayers.enable( 3 );
+// 		if ( parameters.skinning )
+// 			_programLayers.enable( 4 );
+// 		if ( parameters.morphTargets )
+// 			_programLayers.enable( 5 );
+// 		if ( parameters.morphNormals )
+// 			_programLayers.enable( 6 );
+// 		if ( parameters.morphColors )
+// 			_programLayers.enable( 7 );
+// 		if ( parameters.premultipliedAlpha )
+// 			_programLayers.enable( 8 );
+// 		if ( parameters.shadowMapEnabled )
+// 			_programLayers.enable( 9 );
+// 		if ( parameters.physicallyCorrectLights )
+// 			_programLayers.enable( 10 );
+// 		if ( parameters.doubleSided )
+// 			_programLayers.enable( 11 );
+// 		if ( parameters.flipSided )
+// 			_programLayers.enable( 12 );
+// 		if ( parameters.useDepthPacking )
+// 			_programLayers.enable( 13 );
+// 		if ( parameters.dithering )
+// 			_programLayers.enable( 14 );
+// 		if ( parameters.specularIntensityMap )
+// 			_programLayers.enable( 15 );
+// 		if ( parameters.specularColorMap )
+// 			_programLayers.enable( 16 );
+// 		if ( parameters.transmission )
+// 			_programLayers.enable( 17 );
+// 		if ( parameters.transmissionMap )
+// 			_programLayers.enable( 18 );
+// 		if ( parameters.thicknessMap )
+// 			_programLayers.enable( 19 );
+// 		if ( parameters.sheen )
+// 			_programLayers.enable( 20 );
+// 		if ( parameters.sheenColorMap )
+// 			_programLayers.enable( 21 );
+// 		if ( parameters.sheenRoughnessMap )
+// 			_programLayers.enable( 22 );
+// 		if ( parameters.decodeVideoTexture )
+// 			_programLayers.enable( 23 );
+// 		if ( parameters.opaque )
+// 			_programLayers.enable( 24 );
+
+// 		array.push( _programLayers.mask );
+
+// 	}
+
+// 	function getUniforms( material ) {
+
+// 		const shaderID = shaderIDs[ material.type ];
+// 		let uniforms;
+
+// 		if ( shaderID ) {
+
+// 			const shader = ShaderLib[ shaderID ];
+// 			uniforms = UniformsUtils.clone( shader.uniforms );
 
-		} else {
+// 		} else {
 
-			uniforms = material.uniforms;
+// 			uniforms = material.uniforms;
 
-		}
+// 		}
 
-		return uniforms;
+// 		return uniforms;
 
-	}
+// 	}
 
-	function acquireProgram( parameters, cacheKey ) {
+// 	function acquireProgram( parameters, cacheKey ) {
 
-		let program;
+// 		let program;
 
-		// Check if code has been already compiled
-		for ( let p = 0, pl = programs.length; p < pl; p ++ ) {
+// 		// Check if code has been already compiled
+// 		for ( let p = 0, pl = programs.length; p < pl; p ++ ) {
 
-			const preexistingProgram = programs[ p ];
+// 			const preexistingProgram = programs[ p ];
 
-			if ( preexistingProgram.cacheKey === cacheKey ) {
+// 			if ( preexistingProgram.cacheKey === cacheKey ) {
 
-				program = preexistingProgram;
-				++ program.usedTimes;
+// 				program = preexistingProgram;
+// 				++ program.usedTimes;
 
-				break;
+// 				break;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( program === undefined ) {
+// 		if ( program === undefined ) {
 
-			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
-			programs.push( program );
+// 			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
+// 			programs.push( program );
 
-		}
+// 		}
 
-		return program;
+// 		return program;
 
-	}
+// 	}
 
-	function releaseProgram( program ) {
+// 	function releaseProgram( program ) {
 
-		if ( -- program.usedTimes === 0 ) {
+// 		if ( -- program.usedTimes === 0 ) {
 
-			// Remove from unordered set
-			const i = programs.indexOf( program );
-			programs[ i ] = programs[ programs.length - 1 ];
-			programs.pop();
+// 			// Remove from unordered set
+// 			const i = programs.indexOf( program );
+// 			programs[ i ] = programs[ programs.length - 1 ];
+// 			programs.pop();
 
-			// Free WebGL resources
-			program.destroy();
+// 			// Free WebGL resources
+// 			program.destroy();
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function releaseShaderCache( material ) {
+// 	function releaseShaderCache( material ) {
 
-		_customShaders.remove( material );
+// 		_customShaders.remove( material );
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		_customShaders.dispose();
+// 		_customShaders.dispose();
 
-	}
+// 	}
 
-	return {
-		getParameters: getParameters,
-		getProgramCacheKey: getProgramCacheKey,
-		getUniforms: getUniforms,
-		acquireProgram: acquireProgram,
-		releaseProgram: releaseProgram,
-		releaseShaderCache: releaseShaderCache,
-		// Exposed for resource monitoring & error feedback via renderer.info:
-		programs: programs,
-		dispose: dispose
-	};
+// 	return {
+// 		getParameters: getParameters,
+// 		getProgramCacheKey: getProgramCacheKey,
+// 		getUniforms: getUniforms,
+// 		acquireProgram: acquireProgram,
+// 		releaseProgram: releaseProgram,
+// 		releaseShaderCache: releaseShaderCache,
+// 		// Exposed for resource monitoring & error feedback via renderer.info:
+// 		programs: programs,
+// 		dispose: dispose
+// 	};
 
-}
+// }
 
-function WebGLProperties() {
+// function WebGLProperties() {
 
-	let properties = new WeakMap();
+// 	let properties = new WeakMap();
 
-	function get( object ) {
+// 	function get( object ) {
 
-		let map = properties.get( object );
+// 		let map = properties.get( object );
 
-		if ( map === undefined ) {
+// 		if ( map === undefined ) {
 
-			map = {};
-			properties.set( object, map );
+// 			map = {};
+// 			properties.set( object, map );
 
-		}
+// 		}
 
-		return map;
+// 		return map;
 
-	}
+// 	}
 
-	function remove( object ) {
+// 	function remove( object ) {
 
-		properties.delete( object );
+// 		properties.delete( object );
 
-	}
+// 	}
 
-	function update( object, key, value ) {
+// 	function update( object, key, value ) {
 
-		properties.get( object )[ key ] = value;
+// 		properties.get( object )[ key ] = value;
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		properties = new WeakMap();
+// 		properties = new WeakMap();
 
-	}
+// 	}
 
-	return {
-		get: get,
-		remove: remove,
-		update: update,
-		dispose: dispose
-	};
+// 	return {
+// 		get: get,
+// 		remove: remove,
+// 		update: update,
+// 		dispose: dispose
+// 	};
 
-}
+// }
 
-function painterSortStable( a, b ) {
+// function painterSortStable( a, b ) {
 
-	if ( a.groupOrder !== b.groupOrder ) {
+// 	if ( a.groupOrder !== b.groupOrder ) {
 
-		return a.groupOrder - b.groupOrder;
+// 		return a.groupOrder - b.groupOrder;
 
-	} else if ( a.renderOrder !== b.renderOrder ) {
+// 	} else if ( a.renderOrder !== b.renderOrder ) {
 
-		return a.renderOrder - b.renderOrder;
+// 		return a.renderOrder - b.renderOrder;
 
-	} else if ( a.material.id !== b.material.id ) {
+// 	} else if ( a.material.id !== b.material.id ) {
 
-		return a.material.id - b.material.id;
+// 		return a.material.id - b.material.id;
 
-	} else if ( a.z !== b.z ) {
+// 	} else if ( a.z !== b.z ) {
 
-		return a.z - b.z;
+// 		return a.z - b.z;
 
-	} else {
+// 	} else {
 
-		return a.id - b.id;
+// 		return a.id - b.id;
 
-	}
+// 	}
 
-}
+// }
 
-function reversePainterSortStable( a, b ) {
+// function reversePainterSortStable( a, b ) {
 
-	if ( a.groupOrder !== b.groupOrder ) {
+// 	if ( a.groupOrder !== b.groupOrder ) {
 
-		return a.groupOrder - b.groupOrder;
+// 		return a.groupOrder - b.groupOrder;
 
-	} else if ( a.renderOrder !== b.renderOrder ) {
+// 	} else if ( a.renderOrder !== b.renderOrder ) {
 
-		return a.renderOrder - b.renderOrder;
+// 		return a.renderOrder - b.renderOrder;
 
-	} else if ( a.z !== b.z ) {
+// 	} else if ( a.z !== b.z ) {
 
-		return b.z - a.z;
+// 		return b.z - a.z;
 
-	} else {
+// 	} else {
 
-		return a.id - b.id;
+// 		return a.id - b.id;
 
-	}
+// 	}
 
-}
+// }
 
 
-function WebGLRenderList() {
+// function WebGLRenderList() {
 
-	const renderItems = [];
-	let renderItemsIndex = 0;
+// 	const renderItems = [];
+// 	let renderItemsIndex = 0;
 
-	const opaque = [];
-	const transmissive = [];
-	const transparent = [];
+// 	const opaque = [];
+// 	const transmissive = [];
+// 	const transparent = [];
 
-	function init() {
+// 	function init() {
 
-		renderItemsIndex = 0;
+// 		renderItemsIndex = 0;
 
-		opaque.length = 0;
-		transmissive.length = 0;
-		transparent.length = 0;
+// 		opaque.length = 0;
+// 		transmissive.length = 0;
+// 		transparent.length = 0;
 
-	}
+// 	}
 
-	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {
+// 	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {
 
-		let renderItem = renderItems[ renderItemsIndex ];
+// 		let renderItem = renderItems[ renderItemsIndex ];
 
-		if ( renderItem === undefined ) {
+// 		if ( renderItem === undefined ) {
 
-			renderItem = {
-				id: object.id,
-				object: object,
-				geometry: geometry,
-				material: material,
-				groupOrder: groupOrder,
-				renderOrder: object.renderOrder,
-				z: z,
-				group: group
-			};
+// 			renderItem = {
+// 				id: object.id,
+// 				object: object,
+// 				geometry: geometry,
+// 				material: material,
+// 				groupOrder: groupOrder,
+// 				renderOrder: object.renderOrder,
+// 				z: z,
+// 				group: group
+// 			};
 
-			renderItems[ renderItemsIndex ] = renderItem;
+// 			renderItems[ renderItemsIndex ] = renderItem;
 
-		} else {
+// 		} else {
 
-			renderItem.id = object.id;
-			renderItem.object = object;
-			renderItem.geometry = geometry;
-			renderItem.material = material;
-			renderItem.groupOrder = groupOrder;
-			renderItem.renderOrder = object.renderOrder;
-			renderItem.z = z;
-			renderItem.group = group;
+// 			renderItem.id = object.id;
+// 			renderItem.object = object;
+// 			renderItem.geometry = geometry;
+// 			renderItem.material = material;
+// 			renderItem.groupOrder = groupOrder;
+// 			renderItem.renderOrder = object.renderOrder;
+// 			renderItem.z = z;
+// 			renderItem.group = group;
 
-		}
+// 		}
 
-		renderItemsIndex ++;
+// 		renderItemsIndex ++;
 
-		return renderItem;
+// 		return renderItem;
 
-	}
+// 	}
 
-	function push( object, geometry, material, groupOrder, z, group ) {
+// 	function push( object, geometry, material, groupOrder, z, group ) {
 
-		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
+// 		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
 
-		if ( material.transmission > 0.0 ) {
+// 		if ( material.transmission > 0.0 ) {
 
-			transmissive.push( renderItem );
+// 			transmissive.push( renderItem );
 
-		} else if ( material.transparent === true ) {
+// 		} else if ( material.transparent === true ) {
 
-			transparent.push( renderItem );
+// 			transparent.push( renderItem );
 
-		} else {
+// 		} else {
 
-			opaque.push( renderItem );
+// 			opaque.push( renderItem );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function unshift( object, geometry, material, groupOrder, z, group ) {
+// 	function unshift( object, geometry, material, groupOrder, z, group ) {
 
-		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
+// 		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
 
-		if ( material.transmission > 0.0 ) {
+// 		if ( material.transmission > 0.0 ) {
 
-			transmissive.unshift( renderItem );
+// 			transmissive.unshift( renderItem );
 
-		} else if ( material.transparent === true ) {
+// 		} else if ( material.transparent === true ) {
 
-			transparent.unshift( renderItem );
+// 			transparent.unshift( renderItem );
 
-		} else {
+// 		} else {
 
-			opaque.unshift( renderItem );
+// 			opaque.unshift( renderItem );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function sort( customOpaqueSort, customTransparentSort ) {
+// 	function sort( customOpaqueSort, customTransparentSort ) {
 
-		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
-		if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );
-		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );
+// 		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
+// 		if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );
+// 		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );
 
-	}
+// 	}
 
-	function finish() {
+// 	function finish() {
 
-		// Clear references from inactive renderItems in the list
+// 		// Clear references from inactive renderItems in the list
 
-		for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {
+// 		for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {
 
-			const renderItem = renderItems[ i ];
+// 			const renderItem = renderItems[ i ];
 
-			if ( renderItem.id === null ) break;
+// 			if ( renderItem.id === null ) break;
 
-			renderItem.id = null;
-			renderItem.object = null;
-			renderItem.geometry = null;
-			renderItem.material = null;
-			renderItem.group = null;
+// 			renderItem.id = null;
+// 			renderItem.object = null;
+// 			renderItem.geometry = null;
+// 			renderItem.material = null;
+// 			renderItem.group = null;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		opaque: opaque,
-		transmissive: transmissive,
-		transparent: transparent,
+// 		opaque: opaque,
+// 		transmissive: transmissive,
+// 		transparent: transparent,
 
-		init: init,
-		push: push,
-		unshift: unshift,
-		finish: finish,
+// 		init: init,
+// 		push: push,
+// 		unshift: unshift,
+// 		finish: finish,
 
-		sort: sort
-	};
+// 		sort: sort
+// 	};
 
-}
+// }
 
-function WebGLRenderLists() {
+// function WebGLRenderLists() {
 
-	let lists = new WeakMap();
+// 	let lists = new WeakMap();
 
-	function get( scene, renderCallDepth ) {
+// 	function get( scene, renderCallDepth ) {
 
-		const listArray = lists.get( scene );
-		let list;
+// 		const listArray = lists.get( scene );
+// 		let list;
 
-		if ( listArray === undefined ) {
+// 		if ( listArray === undefined ) {
 
-			list = new WebGLRenderList();
-			lists.set( scene, [ list ] );
+// 			list = new WebGLRenderList();
+// 			lists.set( scene, [ list ] );
 
-		} else {
+// 		} else {
 
-			if ( renderCallDepth >= listArray.length ) {
+// 			if ( renderCallDepth >= listArray.length ) {
 
-				list = new WebGLRenderList();
-				listArray.push( list );
+// 				list = new WebGLRenderList();
+// 				listArray.push( list );
 
-			} else {
+// 			} else {
 
-				list = listArray[ renderCallDepth ];
+// 				list = listArray[ renderCallDepth ];
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return list;
+// 		return list;
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		lists = new WeakMap();
+// 		lists = new WeakMap();
 
-	}
+// 	}
 
-	return {
-		get: get,
-		dispose: dispose
-	};
+// 	return {
+// 		get: get,
+// 		dispose: dispose
+// 	};
 
-}
+// }
 
-function UniformsCache() {
+// function UniformsCache() {
 
-	const lights = {};
+// 	const lights = {};
 
-	return {
+// 	return {
 
-		get: function ( light ) {
+// 		get: function ( light ) {
 
-			if ( lights[ light.id ] !== undefined ) {
+// 			if ( lights[ light.id ] !== undefined ) {
 
-				return lights[ light.id ];
+// 				return lights[ light.id ];
 
-			}
+// 			}
 
-			let uniforms;
+// 			let uniforms;
 
-			switch ( light.type ) {
+// 			switch ( light.type ) {
 
-				case 'DirectionalLight':
-					uniforms = {
-						direction: new Vector3(),
-						color: new Color()
-					};
-					break;
+// 				case 'DirectionalLight':
+// 					uniforms = {
+// 						direction: new Vector3(),
+// 						color: new Color()
+// 					};
+// 					break;
 
-				case 'SpotLight':
-					uniforms = {
-						position: new Vector3(),
-						direction: new Vector3(),
-						color: new Color(),
-						distance: 0,
-						coneCos: 0,
-						penumbraCos: 0,
-						decay: 0
-					};
-					break;
+// 				case 'SpotLight':
+// 					uniforms = {
+// 						position: new Vector3(),
+// 						direction: new Vector3(),
+// 						color: new Color(),
+// 						distance: 0,
+// 						coneCos: 0,
+// 						penumbraCos: 0,
+// 						decay: 0
+// 					};
+// 					break;
 
-				case 'PointLight':
-					uniforms = {
-						position: new Vector3(),
-						color: new Color(),
-						distance: 0,
-						decay: 0
-					};
-					break;
+// 				case 'PointLight':
+// 					uniforms = {
+// 						position: new Vector3(),
+// 						color: new Color(),
+// 						distance: 0,
+// 						decay: 0
+// 					};
+// 					break;
 
-				case 'HemisphereLight':
-					uniforms = {
-						direction: new Vector3(),
-						skyColor: new Color(),
-						groundColor: new Color()
-					};
-					break;
+// 				case 'HemisphereLight':
+// 					uniforms = {
+// 						direction: new Vector3(),
+// 						skyColor: new Color(),
+// 						groundColor: new Color()
+// 					};
+// 					break;
 
-				case 'RectAreaLight':
-					uniforms = {
-						color: new Color(),
-						position: new Vector3(),
-						halfWidth: new Vector3(),
-						halfHeight: new Vector3()
-					};
-					break;
+// 				case 'RectAreaLight':
+// 					uniforms = {
+// 						color: new Color(),
+// 						position: new Vector3(),
+// 						halfWidth: new Vector3(),
+// 						halfHeight: new Vector3()
+// 					};
+// 					break;
 
-			}
+// 			}
 
-			lights[ light.id ] = uniforms;
+// 			lights[ light.id ] = uniforms;
 
-			return uniforms;
+// 			return uniforms;
 
-		}
+// 		}
 
-	};
+// 	};
 
-}
+// }
 
-function ShadowUniformsCache() {
+// function ShadowUniformsCache() {
 
-	const lights = {};
+// 	const lights = {};
 
-	return {
+// 	return {
 
-		get: function ( light ) {
+// 		get: function ( light ) {
 
-			if ( lights[ light.id ] !== undefined ) {
+// 			if ( lights[ light.id ] !== undefined ) {
 
-				return lights[ light.id ];
+// 				return lights[ light.id ];
 
-			}
+// 			}
 
-			let uniforms;
+// 			let uniforms;
 
-			switch ( light.type ) {
+// 			switch ( light.type ) {
 
-				case 'DirectionalLight':
-					uniforms = {
-						shadowBias: 0,
-						shadowNormalBias: 0,
-						shadowRadius: 1,
-						shadowMapSize: new Vector2()
-					};
-					break;
+// 				case 'DirectionalLight':
+// 					uniforms = {
+// 						shadowBias: 0,
+// 						shadowNormalBias: 0,
+// 						shadowRadius: 1,
+// 						shadowMapSize: new Vector2()
+// 					};
+// 					break;
 
-				case 'SpotLight':
-					uniforms = {
-						shadowBias: 0,
-						shadowNormalBias: 0,
-						shadowRadius: 1,
-						shadowMapSize: new Vector2()
-					};
-					break;
+// 				case 'SpotLight':
+// 					uniforms = {
+// 						shadowBias: 0,
+// 						shadowNormalBias: 0,
+// 						shadowRadius: 1,
+// 						shadowMapSize: new Vector2()
+// 					};
+// 					break;
 
-				case 'PointLight':
-					uniforms = {
-						shadowBias: 0,
-						shadowNormalBias: 0,
-						shadowRadius: 1,
-						shadowMapSize: new Vector2(),
-						shadowCameraNear: 1,
-						shadowCameraFar: 1000
-					};
-					break;
+// 				case 'PointLight':
+// 					uniforms = {
+// 						shadowBias: 0,
+// 						shadowNormalBias: 0,
+// 						shadowRadius: 1,
+// 						shadowMapSize: new Vector2(),
+// 						shadowCameraNear: 1,
+// 						shadowCameraFar: 1000
+// 					};
+// 					break;
 
-				// TODO (abelnation): set RectAreaLight shadow uniforms
+// 				// TODO (abelnation): set RectAreaLight shadow uniforms
 
-			}
+// 			}
 
-			lights[ light.id ] = uniforms;
+// 			lights[ light.id ] = uniforms;
 
-			return uniforms;
+// 			return uniforms;
 
-		}
+// 		}
 
-	};
+// 	};
 
-}
+// }
 
 
 
-let nextVersion = 0;
+// let nextVersion = 0;
 
-function shadowCastingAndTexturingLightsFirst( lightA, lightB ) {
+// function shadowCastingAndTexturingLightsFirst( lightA, lightB ) {
 
-	return ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );
+// 	return ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );
 
-}
+// }
 
-function WebGLLights( extensions, capabilities ) {
+// function WebGLLights( extensions, capabilities ) {
 
-	const cache = new UniformsCache();
+// 	const cache = new UniformsCache();
 
-	const shadowCache = ShadowUniformsCache();
+// 	const shadowCache = ShadowUniformsCache();
 
-	const state = {
+// 	const state = {
 
-		version: 0,
+// 		version: 0,
 
-		hash: {
-			directionalLength: - 1,
-			pointLength: - 1,
-			spotLength: - 1,
-			rectAreaLength: - 1,
-			hemiLength: - 1,
+// 		hash: {
+// 			directionalLength: - 1,
+// 			pointLength: - 1,
+// 			spotLength: - 1,
+// 			rectAreaLength: - 1,
+// 			hemiLength: - 1,
 
-			numDirectionalShadows: - 1,
-			numPointShadows: - 1,
-			numSpotShadows: - 1,
-			numSpotMaps: - 1
-		},
+// 			numDirectionalShadows: - 1,
+// 			numPointShadows: - 1,
+// 			numSpotShadows: - 1,
+// 			numSpotMaps: - 1
+// 		},
 
-		ambient: [ 0, 0, 0 ],
-		probe: [],
-		directional: [],
-		directionalShadow: [],
-		directionalShadowMap: [],
-		directionalShadowMatrix: [],
-		spot: [],
-		spotLightMap: [],
-		spotShadow: [],
-		spotShadowMap: [],
-		spotLightMatrix: [],
-		rectArea: [],
-		rectAreaLTC1: null,
-		rectAreaLTC2: null,
-		point: [],
-		pointShadow: [],
-		pointShadowMap: [],
-		pointShadowMatrix: [],
-		hemi: [],
-		numSpotLightShadowsWithMaps: 0
+// 		ambient: [ 0, 0, 0 ],
+// 		probe: [],
+// 		directional: [],
+// 		directionalShadow: [],
+// 		directionalShadowMap: [],
+// 		directionalShadowMatrix: [],
+// 		spot: [],
+// 		spotLightMap: [],
+// 		spotShadow: [],
+// 		spotShadowMap: [],
+// 		spotLightMatrix: [],
+// 		rectArea: [],
+// 		rectAreaLTC1: null,
+// 		rectAreaLTC2: null,
+// 		point: [],
+// 		pointShadow: [],
+// 		pointShadowMap: [],
+// 		pointShadowMatrix: [],
+// 		hemi: [],
+// 		numSpotLightShadowsWithMaps: 0
 
-	};
+// 	};
 
-	for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );
+// 	for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );
 
-	const vector3 = new Vector3();
-	const matrix4 = new Matrix4();
-	const matrix42 = new Matrix4();
+// 	const vector3 = new Vector3();
+// 	const matrix4 = new Matrix4();
+// 	const matrix42 = new Matrix4();
 
-	function setup( lights, physicallyCorrectLights ) {
+// 	function setup( lights, physicallyCorrectLights ) {
 
-		let r = 0, g = 0, b = 0;
+// 		let r = 0, g = 0, b = 0;
 
-		for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );
+// 		for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );
 
-		let directionalLength = 0;
-		let pointLength = 0;
-		let spotLength = 0;
-		let rectAreaLength = 0;
-		let hemiLength = 0;
+// 		let directionalLength = 0;
+// 		let pointLength = 0;
+// 		let spotLength = 0;
+// 		let rectAreaLength = 0;
+// 		let hemiLength = 0;
 
-		let numDirectionalShadows = 0;
-		let numPointShadows = 0;
-		let numSpotShadows = 0;
-		let numSpotMaps = 0;
-		let numSpotShadowsWithMaps = 0;
+// 		let numDirectionalShadows = 0;
+// 		let numPointShadows = 0;
+// 		let numSpotShadows = 0;
+// 		let numSpotMaps = 0;
+// 		let numSpotShadowsWithMaps = 0;
 
-		// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
-		lights.sort( shadowCastingAndTexturingLightsFirst );
+// 		// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
+// 		lights.sort( shadowCastingAndTexturingLightsFirst );
 
-		// artist-friendly light intensity scaling factor
-		const scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;
+// 		// artist-friendly light intensity scaling factor
+// 		const scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;
 
-		for ( let i = 0, l = lights.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = lights.length; i < l; i ++ ) {
 
-			const light = lights[ i ];
+// 			const light = lights[ i ];
 
-			const color = light.color;
-			const intensity = light.intensity;
-			const distance = light.distance;
+// 			const color = light.color;
+// 			const intensity = light.intensity;
+// 			const distance = light.distance;
 
-			const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;
+// 			const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;
 
-			if ( light.isAmbientLight ) {
+// 			if ( light.isAmbientLight ) {
 
-				r += color.r * intensity * scaleFactor;
-				g += color.g * intensity * scaleFactor;
-				b += color.b * intensity * scaleFactor;
+// 				r += color.r * intensity * scaleFactor;
+// 				g += color.g * intensity * scaleFactor;
+// 				b += color.b * intensity * scaleFactor;
 
-			} else if ( light.isLightProbe ) {
+// 			} else if ( light.isLightProbe ) {
 
-				for ( let j = 0; j < 9; j ++ ) {
+// 				for ( let j = 0; j < 9; j ++ ) {
 
-					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );
+// 					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );
 
-				}
+// 				}
 
-			} else if ( light.isDirectionalLight ) {
+// 			} else if ( light.isDirectionalLight ) {
 
-				const uniforms = cache.get( light );
+// 				const uniforms = cache.get( light );
 
-				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
+// 				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
 
-				if ( light.castShadow ) {
+// 				if ( light.castShadow ) {
 
-					const shadow = light.shadow;
+// 					const shadow = light.shadow;
 
-					const shadowUniforms = shadowCache.get( light );
+// 					const shadowUniforms = shadowCache.get( light );
 
-					shadowUniforms.shadowBias = shadow.bias;
-					shadowUniforms.shadowNormalBias = shadow.normalBias;
-					shadowUniforms.shadowRadius = shadow.radius;
-					shadowUniforms.shadowMapSize = shadow.mapSize;
+// 					shadowUniforms.shadowBias = shadow.bias;
+// 					shadowUniforms.shadowNormalBias = shadow.normalBias;
+// 					shadowUniforms.shadowRadius = shadow.radius;
+// 					shadowUniforms.shadowMapSize = shadow.mapSize;
 
-					state.directionalShadow[ directionalLength ] = shadowUniforms;
-					state.directionalShadowMap[ directionalLength ] = shadowMap;
-					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
+// 					state.directionalShadow[ directionalLength ] = shadowUniforms;
+// 					state.directionalShadowMap[ directionalLength ] = shadowMap;
+// 					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
 
-					numDirectionalShadows ++;
+// 					numDirectionalShadows ++;
 
-				}
+// 				}
 
-				state.directional[ directionalLength ] = uniforms;
+// 				state.directional[ directionalLength ] = uniforms;
 
-				directionalLength ++;
+// 				directionalLength ++;
 
-			} else if ( light.isSpotLight ) {
+// 			} else if ( light.isSpotLight ) {
 
-				const uniforms = cache.get( light );
+// 				const uniforms = cache.get( light );
 
-				uniforms.position.setFromMatrixPosition( light.matrixWorld );
+// 				uniforms.position.setFromMatrixPosition( light.matrixWorld );
 
-				uniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );
-				uniforms.distance = distance;
+// 				uniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );
+// 				uniforms.distance = distance;
 
-				uniforms.coneCos = Math.cos( light.angle );
-				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
-				uniforms.decay = light.decay;
+// 				uniforms.coneCos = Math.cos( light.angle );
+// 				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
+// 				uniforms.decay = light.decay;
 
-				state.spot[ spotLength ] = uniforms;
+// 				state.spot[ spotLength ] = uniforms;
 
-				const shadow = light.shadow;
+// 				const shadow = light.shadow;
 
-				if ( light.map ) {
+// 				if ( light.map ) {
 
-					state.spotLightMap[ numSpotMaps ] = light.map;
-					numSpotMaps ++;
+// 					state.spotLightMap[ numSpotMaps ] = light.map;
+// 					numSpotMaps ++;
 
-					// make sure the lightMatrix is up to date
-					// TODO : do it if required only
-					shadow.updateMatrices( light );
+// 					// make sure the lightMatrix is up to date
+// 					// TODO : do it if required only
+// 					shadow.updateMatrices( light );
 
-					if ( light.castShadow ) numSpotShadowsWithMaps ++;
+// 					if ( light.castShadow ) numSpotShadowsWithMaps ++;
 
-				}
+// 				}
 
-				state.spotLightMatrix[ spotLength ] = shadow.matrix;
+// 				state.spotLightMatrix[ spotLength ] = shadow.matrix;
 
-				if ( light.castShadow ) {
+// 				if ( light.castShadow ) {
 
-					const shadowUniforms = shadowCache.get( light );
+// 					const shadowUniforms = shadowCache.get( light );
 
-					shadowUniforms.shadowBias = shadow.bias;
-					shadowUniforms.shadowNormalBias = shadow.normalBias;
-					shadowUniforms.shadowRadius = shadow.radius;
-					shadowUniforms.shadowMapSize = shadow.mapSize;
+// 					shadowUniforms.shadowBias = shadow.bias;
+// 					shadowUniforms.shadowNormalBias = shadow.normalBias;
+// 					shadowUniforms.shadowRadius = shadow.radius;
+// 					shadowUniforms.shadowMapSize = shadow.mapSize;
 
-					state.spotShadow[ spotLength ] = shadowUniforms;
-					state.spotShadowMap[ spotLength ] = shadowMap;
+// 					state.spotShadow[ spotLength ] = shadowUniforms;
+// 					state.spotShadowMap[ spotLength ] = shadowMap;
 
-					numSpotShadows ++;
+// 					numSpotShadows ++;
 
-				}
+// 				}
 
-				spotLength ++;
+// 				spotLength ++;
 
-			} else if ( light.isRectAreaLight ) {
+// 			} else if ( light.isRectAreaLight ) {
 
-				const uniforms = cache.get( light );
+// 				const uniforms = cache.get( light );
 
-				// (a) intensity is the total visible light emitted
-				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
+// 				// (a) intensity is the total visible light emitted
+// 				//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
 
-				// (b) intensity is the brightness of the light
-				uniforms.color.copy( color ).multiplyScalar( intensity );
+// 				// (b) intensity is the brightness of the light
+// 				uniforms.color.copy( color ).multiplyScalar( intensity );
 
-				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
-				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
+// 				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
+// 				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
 
-				state.rectArea[ rectAreaLength ] = uniforms;
+// 				state.rectArea[ rectAreaLength ] = uniforms;
 
-				rectAreaLength ++;
+// 				rectAreaLength ++;
 
-			} else if ( light.isPointLight ) {
+// 			} else if ( light.isPointLight ) {
 
-				const uniforms = cache.get( light );
+// 				const uniforms = cache.get( light );
 
-				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
-				uniforms.distance = light.distance;
-				uniforms.decay = light.decay;
+// 				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
+// 				uniforms.distance = light.distance;
+// 				uniforms.decay = light.decay;
 
-				if ( light.castShadow ) {
+// 				if ( light.castShadow ) {
 
-					const shadow = light.shadow;
+// 					const shadow = light.shadow;
 
-					const shadowUniforms = shadowCache.get( light );
+// 					const shadowUniforms = shadowCache.get( light );
 
-					shadowUniforms.shadowBias = shadow.bias;
-					shadowUniforms.shadowNormalBias = shadow.normalBias;
-					shadowUniforms.shadowRadius = shadow.radius;
-					shadowUniforms.shadowMapSize = shadow.mapSize;
-					shadowUniforms.shadowCameraNear = shadow.camera.near;
-					shadowUniforms.shadowCameraFar = shadow.camera.far;
+// 					shadowUniforms.shadowBias = shadow.bias;
+// 					shadowUniforms.shadowNormalBias = shadow.normalBias;
+// 					shadowUniforms.shadowRadius = shadow.radius;
+// 					shadowUniforms.shadowMapSize = shadow.mapSize;
+// 					shadowUniforms.shadowCameraNear = shadow.camera.near;
+// 					shadowUniforms.shadowCameraFar = shadow.camera.far;
 
-					state.pointShadow[ pointLength ] = shadowUniforms;
-					state.pointShadowMap[ pointLength ] = shadowMap;
-					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
+// 					state.pointShadow[ pointLength ] = shadowUniforms;
+// 					state.pointShadowMap[ pointLength ] = shadowMap;
+// 					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
 
-					numPointShadows ++;
+// 					numPointShadows ++;
 
-				}
+// 				}
 
-				state.point[ pointLength ] = uniforms;
+// 				state.point[ pointLength ] = uniforms;
 
-				pointLength ++;
+// 				pointLength ++;
 
-			} else if ( light.isHemisphereLight ) {
+// 			} else if ( light.isHemisphereLight ) {
 
-				const uniforms = cache.get( light );
+// 				const uniforms = cache.get( light );
 
-				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );
-				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );
+// 				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );
+// 				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );
 
-				state.hemi[ hemiLength ] = uniforms;
+// 				state.hemi[ hemiLength ] = uniforms;
 
-				hemiLength ++;
+// 				hemiLength ++;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( rectAreaLength > 0 ) {
+// 		if ( rectAreaLength > 0 ) {
 
-			if ( capabilities.isWebGL2 ) {
+// 			if ( capabilities.isWebGL2 ) {
 
-				// WebGL 2
+// 				// WebGL 2
 
-				state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
-				state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
+// 				state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
+// 				state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
 
-			} else {
+// 			} else {
 
-				// WebGL 1
+// 				// WebGL 1
 
-				if ( extensions.has( 'OES_texture_float_linear' ) === true ) {
+// 				if ( extensions.has( 'OES_texture_float_linear' ) === true ) {
 
-					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
-					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
+// 					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
+// 					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
 
-				} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {
+// 				} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {
 
-					state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
-					state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
+// 					state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
+// 					state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
 
-				} else {
+// 				} else {
 
-					console.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );
+// 					console.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		state.ambient[ 0 ] = r;
-		state.ambient[ 1 ] = g;
-		state.ambient[ 2 ] = b;
+// 		state.ambient[ 0 ] = r;
+// 		state.ambient[ 1 ] = g;
+// 		state.ambient[ 2 ] = b;
 
-		const hash = state.hash;
+// 		const hash = state.hash;
 
-		if ( hash.directionalLength !== directionalLength ||
-			hash.pointLength !== pointLength ||
-			hash.spotLength !== spotLength ||
-			hash.rectAreaLength !== rectAreaLength ||
-			hash.hemiLength !== hemiLength ||
-			hash.numDirectionalShadows !== numDirectionalShadows ||
-			hash.numPointShadows !== numPointShadows ||
-			hash.numSpotShadows !== numSpotShadows ||
-			hash.numSpotMaps !== numSpotMaps ) {
+// 		if ( hash.directionalLength !== directionalLength ||
+// 			hash.pointLength !== pointLength ||
+// 			hash.spotLength !== spotLength ||
+// 			hash.rectAreaLength !== rectAreaLength ||
+// 			hash.hemiLength !== hemiLength ||
+// 			hash.numDirectionalShadows !== numDirectionalShadows ||
+// 			hash.numPointShadows !== numPointShadows ||
+// 			hash.numSpotShadows !== numSpotShadows ||
+// 			hash.numSpotMaps !== numSpotMaps ) {
 
-			state.directional.length = directionalLength;
-			state.spot.length = spotLength;
-			state.rectArea.length = rectAreaLength;
-			state.point.length = pointLength;
-			state.hemi.length = hemiLength;
+// 			state.directional.length = directionalLength;
+// 			state.spot.length = spotLength;
+// 			state.rectArea.length = rectAreaLength;
+// 			state.point.length = pointLength;
+// 			state.hemi.length = hemiLength;
 
-			state.directionalShadow.length = numDirectionalShadows;
-			state.directionalShadowMap.length = numDirectionalShadows;
-			state.pointShadow.length = numPointShadows;
-			state.pointShadowMap.length = numPointShadows;
-			state.spotShadow.length = numSpotShadows;
-			state.spotShadowMap.length = numSpotShadows;
-			state.directionalShadowMatrix.length = numDirectionalShadows;
-			state.pointShadowMatrix.length = numPointShadows;
-			state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
-			state.spotLightMap.length = numSpotMaps;
-			state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
+// 			state.directionalShadow.length = numDirectionalShadows;
+// 			state.directionalShadowMap.length = numDirectionalShadows;
+// 			state.pointShadow.length = numPointShadows;
+// 			state.pointShadowMap.length = numPointShadows;
+// 			state.spotShadow.length = numSpotShadows;
+// 			state.spotShadowMap.length = numSpotShadows;
+// 			state.directionalShadowMatrix.length = numDirectionalShadows;
+// 			state.pointShadowMatrix.length = numPointShadows;
+// 			state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
+// 			state.spotLightMap.length = numSpotMaps;
+// 			state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
 
-			hash.directionalLength = directionalLength;
-			hash.pointLength = pointLength;
-			hash.spotLength = spotLength;
-			hash.rectAreaLength = rectAreaLength;
-			hash.hemiLength = hemiLength;
+// 			hash.directionalLength = directionalLength;
+// 			hash.pointLength = pointLength;
+// 			hash.spotLength = spotLength;
+// 			hash.rectAreaLength = rectAreaLength;
+// 			hash.hemiLength = hemiLength;
 
-			hash.numDirectionalShadows = numDirectionalShadows;
-			hash.numPointShadows = numPointShadows;
-			hash.numSpotShadows = numSpotShadows;
-			hash.numSpotMaps = numSpotMaps;
+// 			hash.numDirectionalShadows = numDirectionalShadows;
+// 			hash.numPointShadows = numPointShadows;
+// 			hash.numSpotShadows = numSpotShadows;
+// 			hash.numSpotMaps = numSpotMaps;
 
-			state.version = nextVersion ++;
+// 			state.version = nextVersion ++;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function setupView( lights, camera ) {
+// 	function setupView( lights, camera ) {
 
-		let directionalLength = 0;
-		let pointLength = 0;
-		let spotLength = 0;
-		let rectAreaLength = 0;
-		let hemiLength = 0;
+// 		let directionalLength = 0;
+// 		let pointLength = 0;
+// 		let spotLength = 0;
+// 		let rectAreaLength = 0;
+// 		let hemiLength = 0;
 
-		const viewMatrix = camera.matrixWorldInverse;
+// 		const viewMatrix = camera.matrixWorldInverse;
 
-		for ( let i = 0, l = lights.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = lights.length; i < l; i ++ ) {
 
-			const light = lights[ i ];
+// 			const light = lights[ i ];
 
-			if ( light.isDirectionalLight ) {
+// 			if ( light.isDirectionalLight ) {
 
-				const uniforms = state.directional[ directionalLength ];
+// 				const uniforms = state.directional[ directionalLength ];
 
-				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
-				vector3.setFromMatrixPosition( light.target.matrixWorld );
-				uniforms.direction.sub( vector3 );
-				uniforms.direction.transformDirection( viewMatrix );
+// 				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
+// 				vector3.setFromMatrixPosition( light.target.matrixWorld );
+// 				uniforms.direction.sub( vector3 );
+// 				uniforms.direction.transformDirection( viewMatrix );
 
-				directionalLength ++;
+// 				directionalLength ++;
 
-			} else if ( light.isSpotLight ) {
+// 			} else if ( light.isSpotLight ) {
 
-				const uniforms = state.spot[ spotLength ];
+// 				const uniforms = state.spot[ spotLength ];
 
-				uniforms.position.setFromMatrixPosition( light.matrixWorld );
-				uniforms.position.applyMatrix4( viewMatrix );
+// 				uniforms.position.setFromMatrixPosition( light.matrixWorld );
+// 				uniforms.position.applyMatrix4( viewMatrix );
 
-				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
-				vector3.setFromMatrixPosition( light.target.matrixWorld );
-				uniforms.direction.sub( vector3 );
-				uniforms.direction.transformDirection( viewMatrix );
+// 				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
+// 				vector3.setFromMatrixPosition( light.target.matrixWorld );
+// 				uniforms.direction.sub( vector3 );
+// 				uniforms.direction.transformDirection( viewMatrix );
 
-				spotLength ++;
+// 				spotLength ++;
 
-			} else if ( light.isRectAreaLight ) {
+// 			} else if ( light.isRectAreaLight ) {
 
-				const uniforms = state.rectArea[ rectAreaLength ];
+// 				const uniforms = state.rectArea[ rectAreaLength ];
 
-				uniforms.position.setFromMatrixPosition( light.matrixWorld );
-				uniforms.position.applyMatrix4( viewMatrix );
+// 				uniforms.position.setFromMatrixPosition( light.matrixWorld );
+// 				uniforms.position.applyMatrix4( viewMatrix );
 
-				// extract local rotation of light to derive width/height half vectors
-				matrix42.identity();
-				matrix4.copy( light.matrixWorld );
-				matrix4.premultiply( viewMatrix );
-				matrix42.extractRotation( matrix4 );
+// 				// extract local rotation of light to derive width/height half vectors
+// 				matrix42.identity();
+// 				matrix4.copy( light.matrixWorld );
+// 				matrix4.premultiply( viewMatrix );
+// 				matrix42.extractRotation( matrix4 );
 
-				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
-				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
+// 				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
+// 				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
 
-				uniforms.halfWidth.applyMatrix4( matrix42 );
-				uniforms.halfHeight.applyMatrix4( matrix42 );
+// 				uniforms.halfWidth.applyMatrix4( matrix42 );
+// 				uniforms.halfHeight.applyMatrix4( matrix42 );
 
-				rectAreaLength ++;
+// 				rectAreaLength ++;
 
-			} else if ( light.isPointLight ) {
+// 			} else if ( light.isPointLight ) {
 
-				const uniforms = state.point[ pointLength ];
+// 				const uniforms = state.point[ pointLength ];
 
-				uniforms.position.setFromMatrixPosition( light.matrixWorld );
-				uniforms.position.applyMatrix4( viewMatrix );
+// 				uniforms.position.setFromMatrixPosition( light.matrixWorld );
+// 				uniforms.position.applyMatrix4( viewMatrix );
 
-				pointLength ++;
+// 				pointLength ++;
 
-			} else if ( light.isHemisphereLight ) {
+// 			} else if ( light.isHemisphereLight ) {
 
-				const uniforms = state.hemi[ hemiLength ];
+// 				const uniforms = state.hemi[ hemiLength ];
 
-				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
-				uniforms.direction.transformDirection( viewMatrix );
+// 				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
+// 				uniforms.direction.transformDirection( viewMatrix );
 
-				hemiLength ++;
+// 				hemiLength ++;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return {
-		setup: setup,
-		setupView: setupView,
-		state: state
-	};
+// 	return {
+// 		setup: setup,
+// 		setupView: setupView,
+// 		state: state
+// 	};
 
-}
+// }
 
-function WebGLRenderState( extensions, capabilities ) {
+// function WebGLRenderState( extensions, capabilities ) {
 
-	const lights = new WebGLLights( extensions, capabilities );
+// 	const lights = new WebGLLights( extensions, capabilities );
 
-	const lightsArray = [];
-	const shadowsArray = [];
+// 	const lightsArray = [];
+// 	const shadowsArray = [];
 
-	function init() {
+// 	function init() {
 
-		lightsArray.length = 0;
-		shadowsArray.length = 0;
+// 		lightsArray.length = 0;
+// 		shadowsArray.length = 0;
 
-	}
+// 	}
 
-	function pushLight( light ) {
+// 	function pushLight( light ) {
 
-		lightsArray.push( light );
+// 		lightsArray.push( light );
 
-	}
+// 	}
 
-	function pushShadow( shadowLight ) {
+// 	function pushShadow( shadowLight ) {
 
-		shadowsArray.push( shadowLight );
+// 		shadowsArray.push( shadowLight );
 
-	}
+// 	}
 
-	function setupLights( physicallyCorrectLights ) {
+// 	function setupLights( physicallyCorrectLights ) {
 
-		lights.setup( lightsArray, physicallyCorrectLights );
+// 		lights.setup( lightsArray, physicallyCorrectLights );
 
-	}
+// 	}
 
-	function setupLightsView( camera ) {
+// 	function setupLightsView( camera ) {
 
-		lights.setupView( lightsArray, camera );
+// 		lights.setupView( lightsArray, camera );
 
-	}
+// 	}
 
-	const state = {
-		lightsArray: lightsArray,
-		shadowsArray: shadowsArray,
+// 	const state = {
+// 		lightsArray: lightsArray,
+// 		shadowsArray: shadowsArray,
 
-		lights: lights
-	};
+// 		lights: lights
+// 	};
 
-	return {
-		init: init,
-		state: state,
-		setupLights: setupLights,
-		setupLightsView: setupLightsView,
+// 	return {
+// 		init: init,
+// 		state: state,
+// 		setupLights: setupLights,
+// 		setupLightsView: setupLightsView,
 
-		pushLight: pushLight,
-		pushShadow: pushShadow
-	};
+// 		pushLight: pushLight,
+// 		pushShadow: pushShadow
+// 	};
 
-}
+// }
 
-function WebGLRenderStates( extensions, capabilities ) {
+// function WebGLRenderStates( extensions, capabilities ) {
 
-	let renderStates = new WeakMap();
+// 	let renderStates = new WeakMap();
 
-	function get( scene, renderCallDepth = 0 ) {
+// 	function get( scene, renderCallDepth = 0 ) {
 
-		const renderStateArray = renderStates.get( scene );
-		let renderState;
+// 		const renderStateArray = renderStates.get( scene );
+// 		let renderState;
 
-		if ( renderStateArray === undefined ) {
+// 		if ( renderStateArray === undefined ) {
 
-			renderState = new WebGLRenderState( extensions, capabilities );
-			renderStates.set( scene, [ renderState ] );
+// 			renderState = new WebGLRenderState( extensions, capabilities );
+// 			renderStates.set( scene, [ renderState ] );
 
-		} else {
+// 		} else {
 
-			if ( renderCallDepth >= renderStateArray.length ) {
+// 			if ( renderCallDepth >= renderStateArray.length ) {
 
-				renderState = new WebGLRenderState( extensions, capabilities );
-				renderStateArray.push( renderState );
+// 				renderState = new WebGLRenderState( extensions, capabilities );
+// 				renderStateArray.push( renderState );
 
-			} else {
+// 			} else {
 
-				renderState = renderStateArray[ renderCallDepth ];
+// 				renderState = renderStateArray[ renderCallDepth ];
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return renderState;
+// 		return renderState;
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		renderStates = new WeakMap();
+// 		renderStates = new WeakMap();
 
-	}
+// 	}
 
-	return {
-		get: get,
-		dispose: dispose
-	};
+// 	return {
+// 		get: get,
+// 		dispose: dispose
+// 	};
 
-}
+// }
 
-class MeshDepthMaterial extends Material {
+// class MeshDepthMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshDepthMaterial = true;
+// 		this.isMeshDepthMaterial = true;
 
-		this.type = 'MeshDepthMaterial';
+// 		this.type = 'MeshDepthMaterial';
 
-		this.depthPacking = BasicDepthPacking;
+// 		this.depthPacking = BasicDepthPacking;
 
-		this.map = null;
+// 		this.map = null;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.displacementMap = null;
-		this.displacementScale = 1;
-		this.displacementBias = 0;
+// 		this.displacementMap = null;
+// 		this.displacementScale = 1;
+// 		this.displacementBias = 0;
 
-		this.wireframe = false;
-		this.wireframeLinewidth = 1;
+// 		this.wireframe = false;
+// 		this.wireframeLinewidth = 1;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.depthPacking = source.depthPacking;
+// 		this.depthPacking = source.depthPacking;
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.displacementMap = source.displacementMap;
-		this.displacementScale = source.displacementScale;
-		this.displacementBias = source.displacementBias;
+// 		this.displacementMap = source.displacementMap;
+// 		this.displacementScale = source.displacementScale;
+// 		this.displacementBias = source.displacementBias;
 
-		this.wireframe = source.wireframe;
-		this.wireframeLinewidth = source.wireframeLinewidth;
+// 		this.wireframe = source.wireframe;
+// 		this.wireframeLinewidth = source.wireframeLinewidth;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class MeshDistanceMaterial extends Material {
+// class MeshDistanceMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshDistanceMaterial = true;
+// 		this.isMeshDistanceMaterial = true;
 
-		this.type = 'MeshDistanceMaterial';
+// 		this.type = 'MeshDistanceMaterial';
 
-		this.referencePosition = new Vector3();
-		this.nearDistance = 1;
-		this.farDistance = 1000;
+// 		this.referencePosition = new Vector3();
+// 		this.nearDistance = 1;
+// 		this.farDistance = 1000;
 
-		this.map = null;
+// 		this.map = null;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.displacementMap = null;
-		this.displacementScale = 1;
-		this.displacementBias = 0;
+// 		this.displacementMap = null;
+// 		this.displacementScale = 1;
+// 		this.displacementBias = 0;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.referencePosition.copy( source.referencePosition );
-		this.nearDistance = source.nearDistance;
-		this.farDistance = source.farDistance;
+// 		this.referencePosition.copy( source.referencePosition );
+// 		this.nearDistance = source.nearDistance;
+// 		this.farDistance = source.farDistance;
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.displacementMap = source.displacementMap;
-		this.displacementScale = source.displacementScale;
-		this.displacementBias = source.displacementBias;
+// 		this.displacementMap = source.displacementMap;
+// 		this.displacementScale = source.displacementScale;
+// 		this.displacementBias = source.displacementBias;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
+// const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
 
-const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
+// const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
 
-function WebGLShadowMap( _renderer, _objects, _capabilities ) {
+// function WebGLShadowMap( _renderer, _objects, _capabilities ) {
 
-	let _frustum = new Frustum();
+// 	let _frustum = new Frustum();
 
-	const _shadowMapSize = new Vector2(),
-		_viewportSize = new Vector2(),
+// 	const _shadowMapSize = new Vector2(),
+// 		_viewportSize = new Vector2(),
 
-		_viewport = new Vector4(),
+// 		_viewport = new Vector4(),
 
-		_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
-		_distanceMaterial = new MeshDistanceMaterial(),
+// 		_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
+// 		_distanceMaterial = new MeshDistanceMaterial(),
 
-		_materialCache = {},
+// 		_materialCache = {},
 
-		_maxTextureSize = _capabilities.maxTextureSize;
+// 		_maxTextureSize = _capabilities.maxTextureSize;
 
-	const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
+// 	const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
 
-	const shadowMaterialVertical = new ShaderMaterial( {
-		defines: {
-			VSM_SAMPLES: 8
-		},
-		uniforms: {
-			shadow_pass: { value: null },
-			resolution: { value: new Vector2() },
-			radius: { value: 4.0 }
-		},
+// 	const shadowMaterialVertical = new ShaderMaterial( {
+// 		defines: {
+// 			VSM_SAMPLES: 8
+// 		},
+// 		uniforms: {
+// 			shadow_pass: { value: null },
+// 			resolution: { value: new Vector2() },
+// 			radius: { value: 4.0 }
+// 		},
 
-		vertexShader: vertex,
-		fragmentShader: fragment
+// 		vertexShader: vertex,
+// 		fragmentShader: fragment
 
-	} );
+// 	} );
 
-	const shadowMaterialHorizontal = shadowMaterialVertical.clone();
-	shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
+// 	const shadowMaterialHorizontal = shadowMaterialVertical.clone();
+// 	shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
 
-	const fullScreenTri = new BufferGeometry();
-	fullScreenTri.setAttribute(
-		'position',
-		new BufferAttribute(
-			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
-			3
-		)
-	);
+// 	const fullScreenTri = new BufferGeometry();
+// 	fullScreenTri.setAttribute(
+// 		'position',
+// 		new BufferAttribute(
+// 			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
+// 			3
+// 		)
+// 	);
 
-	const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );
+// 	const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );
 
-	const scope = this;
+// 	const scope = this;
 
-	this.enabled = false;
+// 	this.enabled = false;
 
-	this.autoUpdate = true;
-	this.needsUpdate = false;
+// 	this.autoUpdate = true;
+// 	this.needsUpdate = false;
 
-	this.type = PCFShadowMap;
+// 	this.type = PCFShadowMap;
 
-	this.render = function ( lights, scene, camera ) {
+// 	this.render = function ( lights, scene, camera ) {
 
-		if ( scope.enabled === false ) return;
-		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;
+// 		if ( scope.enabled === false ) return;
+// 		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;
 
-		if ( lights.length === 0 ) return;
+// 		if ( lights.length === 0 ) return;
 
-		const currentRenderTarget = _renderer.getRenderTarget();
-		const activeCubeFace = _renderer.getActiveCubeFace();
-		const activeMipmapLevel = _renderer.getActiveMipmapLevel();
+// 		const currentRenderTarget = _renderer.getRenderTarget();
+// 		const activeCubeFace = _renderer.getActiveCubeFace();
+// 		const activeMipmapLevel = _renderer.getActiveMipmapLevel();
 
-		const _state = _renderer.state;
+// 		const _state = _renderer.state;
 
-		// Set GL state for depth map.
-		_state.setBlending( NoBlending );
-		_state.buffers.color.setClear( 1, 1, 1, 1 );
-		_state.buffers.depth.setTest( true );
-		_state.setScissorTest( false );
+// 		// Set GL state for depth map.
+// 		_state.setBlending( NoBlending );
+// 		_state.buffers.color.setClear( 1, 1, 1, 1 );
+// 		_state.buffers.depth.setTest( true );
+// 		_state.setScissorTest( false );
 
-		// render depth map
+// 		// render depth map
 
-		for ( let i = 0, il = lights.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = lights.length; i < il; i ++ ) {
 
-			const light = lights[ i ];
-			const shadow = light.shadow;
+// 			const light = lights[ i ];
+// 			const shadow = light.shadow;
 
-			if ( shadow === undefined ) {
+// 			if ( shadow === undefined ) {
 
-				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
-				continue;
+// 				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
+// 				continue;
 
-			}
+// 			}
 
-			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;
+// 			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;
 
-			_shadowMapSize.copy( shadow.mapSize );
+// 			_shadowMapSize.copy( shadow.mapSize );
 
-			const shadowFrameExtents = shadow.getFrameExtents();
+// 			const shadowFrameExtents = shadow.getFrameExtents();
 
-			_shadowMapSize.multiply( shadowFrameExtents );
+// 			_shadowMapSize.multiply( shadowFrameExtents );
 
-			_viewportSize.copy( shadow.mapSize );
+// 			_viewportSize.copy( shadow.mapSize );
 
-			if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {
+// 			if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {
 
-				if ( _shadowMapSize.x > _maxTextureSize ) {
+// 				if ( _shadowMapSize.x > _maxTextureSize ) {
 
-					_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
-					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
-					shadow.mapSize.x = _viewportSize.x;
+// 					_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
+// 					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
+// 					shadow.mapSize.x = _viewportSize.x;
 
-				}
+// 				}
 
-				if ( _shadowMapSize.y > _maxTextureSize ) {
+// 				if ( _shadowMapSize.y > _maxTextureSize ) {
 
-					_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
-					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
-					shadow.mapSize.y = _viewportSize.y;
+// 					_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
+// 					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
+// 					shadow.mapSize.y = _viewportSize.y;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( shadow.map === null ) {
+// 			if ( shadow.map === null ) {
 
-				const pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
+// 				const pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
 
-				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
-				shadow.map.texture.name = light.name + '.shadowMap';
+// 				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
+// 				shadow.map.texture.name = light.name + '.shadowMap';
 
-				shadow.camera.updateProjectionMatrix();
+// 				shadow.camera.updateProjectionMatrix();
 
-			}
+// 			}
 
-			_renderer.setRenderTarget( shadow.map );
-			_renderer.clear();
+// 			_renderer.setRenderTarget( shadow.map );
+// 			_renderer.clear();
 
-			const viewportCount = shadow.getViewportCount();
+// 			const viewportCount = shadow.getViewportCount();
 
-			for ( let vp = 0; vp < viewportCount; vp ++ ) {
+// 			for ( let vp = 0; vp < viewportCount; vp ++ ) {
 
-				const viewport = shadow.getViewport( vp );
+// 				const viewport = shadow.getViewport( vp );
 
-				_viewport.set(
-					_viewportSize.x * viewport.x,
-					_viewportSize.y * viewport.y,
-					_viewportSize.x * viewport.z,
-					_viewportSize.y * viewport.w
-				);
+// 				_viewport.set(
+// 					_viewportSize.x * viewport.x,
+// 					_viewportSize.y * viewport.y,
+// 					_viewportSize.x * viewport.z,
+// 					_viewportSize.y * viewport.w
+// 				);
 
-				_state.viewport( _viewport );
+// 				_state.viewport( _viewport );
 
-				shadow.updateMatrices( light, vp );
+// 				shadow.updateMatrices( light, vp );
 
-				_frustum = shadow.getFrustum();
+// 				_frustum = shadow.getFrustum();
 
-				renderObject( scene, camera, shadow.camera, light, this.type );
+// 				renderObject( scene, camera, shadow.camera, light, this.type );
 
-			}
+// 			}
 
-			// do blur pass for VSM
+// 			// do blur pass for VSM
 
-			if ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {
+// 			if ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {
 
-				VSMPass( shadow, camera );
+// 				VSMPass( shadow, camera );
 
-			}
+// 			}
 
-			shadow.needsUpdate = false;
+// 			shadow.needsUpdate = false;
 
-		}
+// 		}
 
-		scope.needsUpdate = false;
+// 		scope.needsUpdate = false;
 
-		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );
+// 		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );
 
-	};
+// 	};
 
-	function VSMPass( shadow, camera ) {
+// 	function VSMPass( shadow, camera ) {
 
-		const geometry = _objects.update( fullScreenMesh );
+// 		const geometry = _objects.update( fullScreenMesh );
 
-		if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {
+// 		if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {
 
-			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
-			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
+// 			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
+// 			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
 
-			shadowMaterialVertical.needsUpdate = true;
-			shadowMaterialHorizontal.needsUpdate = true;
+// 			shadowMaterialVertical.needsUpdate = true;
+// 			shadowMaterialHorizontal.needsUpdate = true;
 
-		}
+// 		}
 
-		if ( shadow.mapPass === null ) {
+// 		if ( shadow.mapPass === null ) {
 
-			shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );
+// 			shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );
 
-		}
+// 		}
 
-		// vertical pass
+// 		// vertical pass
 
-		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
-		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
-		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
-		_renderer.setRenderTarget( shadow.mapPass );
-		_renderer.clear();
-		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );
+// 		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
+// 		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
+// 		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
+// 		_renderer.setRenderTarget( shadow.mapPass );
+// 		_renderer.clear();
+// 		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );
 
-		// horizontal pass
+// 		// horizontal pass
 
-		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
-		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
-		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
-		_renderer.setRenderTarget( shadow.map );
-		_renderer.clear();
-		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );
+// 		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
+// 		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
+// 		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
+// 		_renderer.setRenderTarget( shadow.map );
+// 		_renderer.clear();
+// 		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );
 
-	}
+// 	}
 
-	function getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {
+// 	function getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {
 
-		let result = null;
+// 		let result = null;
 
-		const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;
+// 		const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;
 
-		if ( customMaterial !== undefined ) {
+// 		if ( customMaterial !== undefined ) {
 
-			result = customMaterial;
+// 			result = customMaterial;
 
-		} else {
+// 		} else {
 
-			result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;
+// 			result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;
 
-		}
+// 		}
 
-		if ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||
-			( material.displacementMap && material.displacementScale !== 0 ) ||
-			( material.alphaMap && material.alphaTest > 0 ) ) {
+// 		if ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||
+// 			( material.displacementMap && material.displacementScale !== 0 ) ||
+// 			( material.alphaMap && material.alphaTest > 0 ) ) {
 
-			// in this case we need a unique material instance reflecting the
-			// appropriate state
+// 			// in this case we need a unique material instance reflecting the
+// 			// appropriate state
 
-			const keyA = result.uuid, keyB = material.uuid;
+// 			const keyA = result.uuid, keyB = material.uuid;
 
-			let materialsForVariant = _materialCache[ keyA ];
+// 			let materialsForVariant = _materialCache[ keyA ];
 
-			if ( materialsForVariant === undefined ) {
+// 			if ( materialsForVariant === undefined ) {
 
-				materialsForVariant = {};
-				_materialCache[ keyA ] = materialsForVariant;
+// 				materialsForVariant = {};
+// 				_materialCache[ keyA ] = materialsForVariant;
 
-			}
+// 			}
 
-			let cachedMaterial = materialsForVariant[ keyB ];
+// 			let cachedMaterial = materialsForVariant[ keyB ];
 
-			if ( cachedMaterial === undefined ) {
+// 			if ( cachedMaterial === undefined ) {
 
-				cachedMaterial = result.clone();
-				materialsForVariant[ keyB ] = cachedMaterial;
+// 				cachedMaterial = result.clone();
+// 				materialsForVariant[ keyB ] = cachedMaterial;
 
-			}
+// 			}
 
-			result = cachedMaterial;
+// 			result = cachedMaterial;
 
-		}
+// 		}
 
-		result.visible = material.visible;
-		result.wireframe = material.wireframe;
+// 		result.visible = material.visible;
+// 		result.wireframe = material.wireframe;
 
-		if ( type === VSMShadowMap ) {
+// 		if ( type === VSMShadowMap ) {
 
-			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;
+// 			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;
 
-		} else {
+// 		} else {
 
-			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];
+// 			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];
 
-		}
+// 		}
 
-		result.alphaMap = material.alphaMap;
-		result.alphaTest = material.alphaTest;
+// 		result.alphaMap = material.alphaMap;
+// 		result.alphaTest = material.alphaTest;
 
-		result.clipShadows = material.clipShadows;
-		result.clippingPlanes = material.clippingPlanes;
-		result.clipIntersection = material.clipIntersection;
+// 		result.clipShadows = material.clipShadows;
+// 		result.clippingPlanes = material.clippingPlanes;
+// 		result.clipIntersection = material.clipIntersection;
 
-		result.displacementMap = material.displacementMap;
-		result.displacementScale = material.displacementScale;
-		result.displacementBias = material.displacementBias;
+// 		result.displacementMap = material.displacementMap;
+// 		result.displacementScale = material.displacementScale;
+// 		result.displacementBias = material.displacementBias;
 
-		result.wireframeLinewidth = material.wireframeLinewidth;
-		result.linewidth = material.linewidth;
+// 		result.wireframeLinewidth = material.wireframeLinewidth;
+// 		result.linewidth = material.linewidth;
 
-		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {
+// 		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {
 
-			result.referencePosition.setFromMatrixPosition( light.matrixWorld );
-			result.nearDistance = shadowCameraNear;
-			result.farDistance = shadowCameraFar;
+// 			result.referencePosition.setFromMatrixPosition( light.matrixWorld );
+// 			result.nearDistance = shadowCameraNear;
+// 			result.farDistance = shadowCameraFar;
 
-		}
+// 		}
 
-		return result;
+// 		return result;
 
-	}
+// 	}
 
-	function renderObject( object, camera, shadowCamera, light, type ) {
+// 	function renderObject( object, camera, shadowCamera, light, type ) {
 
-		if ( object.visible === false ) return;
+// 		if ( object.visible === false ) return;
 
-		const visible = object.layers.test( camera.layers );
+// 		const visible = object.layers.test( camera.layers );
 
-		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {
+// 		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {
 
-			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {
+// 			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {
 
-				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
+// 				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
 
-				const geometry = _objects.update( object );
-				const material = object.material;
+// 				const geometry = _objects.update( object );
+// 				const material = object.material;
 
-				if ( Array.isArray( material ) ) {
+// 				if ( Array.isArray( material ) ) {
 
-					const groups = geometry.groups;
+// 					const groups = geometry.groups;
 
-					for ( let k = 0, kl = groups.length; k < kl; k ++ ) {
+// 					for ( let k = 0, kl = groups.length; k < kl; k ++ ) {
 
-						const group = groups[ k ];
-						const groupMaterial = material[ group.materialIndex ];
+// 						const group = groups[ k ];
+// 						const groupMaterial = material[ group.materialIndex ];
 
-						if ( groupMaterial && groupMaterial.visible ) {
+// 						if ( groupMaterial && groupMaterial.visible ) {
 
-							const depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );
+// 							const depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );
 
-							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );
+// 							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );
 
-						}
+// 						}
 
-					}
+// 					}
 
-				} else if ( material.visible ) {
+// 				} else if ( material.visible ) {
 
-					const depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );
+// 					const depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );
 
-					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );
+// 					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const children = object.children;
+// 		const children = object.children;
 
-		for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-			renderObject( children[ i ], camera, shadowCamera, light, type );
+// 			renderObject( children[ i ], camera, shadowCamera, light, type );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-function WebGLState( gl, extensions, capabilities ) {
+// function WebGLState( gl, extensions, capabilities ) {
 
-	const isWebGL2 = capabilities.isWebGL2;
+// 	const isWebGL2 = capabilities.isWebGL2;
 
-	function ColorBuffer() {
+// 	function ColorBuffer() {
 
-		let locked = false;
+// 		let locked = false;
 
-		const color = new Vector4();
-		let currentColorMask = null;
-		const currentColorClear = new Vector4( 0, 0, 0, 0 );
+// 		const color = new Vector4();
+// 		let currentColorMask = null;
+// 		const currentColorClear = new Vector4( 0, 0, 0, 0 );
 
-		return {
+// 		return {
 
-			setMask: function ( colorMask ) {
+// 			setMask: function ( colorMask ) {
 
-				if ( currentColorMask !== colorMask && ! locked ) {
+// 				if ( currentColorMask !== colorMask && ! locked ) {
 
-					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
-					currentColorMask = colorMask;
+// 					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
+// 					currentColorMask = colorMask;
 
-				}
+// 				}
 
-			},
+// 			},
 
-			setLocked: function ( lock ) {
+// 			setLocked: function ( lock ) {
 
-				locked = lock;
+// 				locked = lock;
 
-			},
+// 			},
 
-			setClear: function ( r, g, b, a, premultipliedAlpha ) {
+// 			setClear: function ( r, g, b, a, premultipliedAlpha ) {
 
-				if ( premultipliedAlpha === true ) {
+// 				if ( premultipliedAlpha === true ) {
 
-					r *= a; g *= a; b *= a;
+// 					r *= a; g *= a; b *= a;
 
-				}
+// 				}
 
-				color.set( r, g, b, a );
+// 				color.set( r, g, b, a );
 
-				if ( currentColorClear.equals( color ) === false ) {
+// 				if ( currentColorClear.equals( color ) === false ) {
 
-					gl.clearColor( r, g, b, a );
-					currentColorClear.copy( color );
+// 					gl.clearColor( r, g, b, a );
+// 					currentColorClear.copy( color );
 
-				}
+// 				}
 
-			},
+// 			},
 
-			reset: function () {
+// 			reset: function () {
 
-				locked = false;
+// 				locked = false;
 
-				currentColorMask = null;
-				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state
+// 				currentColorMask = null;
+// 				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state
 
-			}
+// 			}
 
-		};
+// 		};
 
-	}
+// 	}
 
-	function DepthBuffer() {
+// 	function DepthBuffer() {
 
-		let locked = false;
+// 		let locked = false;
 
-		let currentDepthMask = null;
-		let currentDepthFunc = null;
-		let currentDepthClear = null;
+// 		let currentDepthMask = null;
+// 		let currentDepthFunc = null;
+// 		let currentDepthClear = null;
 
-		return {
+// 		return {
 
-			setTest: function ( depthTest ) {
+// 			setTest: function ( depthTest ) {
 
-				if ( depthTest ) {
+// 				if ( depthTest ) {
 
-					enable( 2929 );
+// 					enable( 2929 );
 
-				} else {
+// 				} else {
 
-					disable( 2929 );
+// 					disable( 2929 );
 
-				}
+// 				}
 
-			},
+// 			},
 
-			setMask: function ( depthMask ) {
+// 			setMask: function ( depthMask ) {
 
-				if ( currentDepthMask !== depthMask && ! locked ) {
+// 				if ( currentDepthMask !== depthMask && ! locked ) {
 
-					gl.depthMask( depthMask );
-					currentDepthMask = depthMask;
+// 					gl.depthMask( depthMask );
+// 					currentDepthMask = depthMask;
 
-				}
+// 				}
 
-			},
+// 			},
 
-			setFunc: function ( depthFunc ) {
+// 			setFunc: function ( depthFunc ) {
 
-				if ( currentDepthFunc !== depthFunc ) {
+// 				if ( currentDepthFunc !== depthFunc ) {
 
-					switch ( depthFunc ) {
+// 					switch ( depthFunc ) {
 
-						case NeverDepth:
+// 						case NeverDepth:
 
-							gl.depthFunc( 512 );
-							break;
+// 							gl.depthFunc( 512 );
+// 							break;
 
-						case AlwaysDepth:
+// 						case AlwaysDepth:
 
-							gl.depthFunc( 519 );
-							break;
+// 							gl.depthFunc( 519 );
+// 							break;
 
-						case LessDepth:
+// 						case LessDepth:
 
-							gl.depthFunc( 513 );
-							break;
+// 							gl.depthFunc( 513 );
+// 							break;
 
-						case LessEqualDepth:
+// 						case LessEqualDepth:
 
-							gl.depthFunc( 515 );
-							break;
+// 							gl.depthFunc( 515 );
+// 							break;
 
-						case EqualDepth:
+// 						case EqualDepth:
 
-							gl.depthFunc( 514 );
-							break;
+// 							gl.depthFunc( 514 );
+// 							break;
 
-						case GreaterEqualDepth:
+// 						case GreaterEqualDepth:
 
-							gl.depthFunc( 518 );
-							break;
+// 							gl.depthFunc( 518 );
+// 							break;
 
-						case GreaterDepth:
+// 						case GreaterDepth:
 
-							gl.depthFunc( 516 );
-							break;
+// 							gl.depthFunc( 516 );
+// 							break;
 
-						case NotEqualDepth:
+// 						case NotEqualDepth:
 
-							gl.depthFunc( 517 );
-							break;
+// 							gl.depthFunc( 517 );
+// 							break;
 
-						default:
+// 						default:
 
-							gl.depthFunc( 515 );
+// 							gl.depthFunc( 515 );
 
-					}
+// 					}
 
-					currentDepthFunc = depthFunc;
+// 					currentDepthFunc = depthFunc;
 
-				}
+// 				}
 
-			},
+// 			},
 
-			setLocked: function ( lock ) {
+// 			setLocked: function ( lock ) {
 
-				locked = lock;
+// 				locked = lock;
 
-			},
+// 			},
 
-			setClear: function ( depth ) {
+// 			setClear: function ( depth ) {
 
-				if ( currentDepthClear !== depth ) {
+// 				if ( currentDepthClear !== depth ) {
 
-					gl.clearDepth( depth );
-					currentDepthClear = depth;
+// 					gl.clearDepth( depth );
+// 					currentDepthClear = depth;
 
-				}
+// 				}
 
-			},
+// 			},
 
-			reset: function () {
+// 			reset: function () {
 
-				locked = false;
+// 				locked = false;
 
-				currentDepthMask = null;
-				currentDepthFunc = null;
-				currentDepthClear = null;
+// 				currentDepthMask = null;
+// 				currentDepthFunc = null;
+// 				currentDepthClear = null;
 
-			}
+// 			}
 
-		};
+// 		};
 
-	}
+// 	}
 
-	function StencilBuffer() {
+// 	function StencilBuffer() {
 
-		let locked = false;
+// 		let locked = false;
 
-		let currentStencilMask = null;
-		let currentStencilFunc = null;
-		let currentStencilRef = null;
-		let currentStencilFuncMask = null;
-		let currentStencilFail = null;
-		let currentStencilZFail = null;
-		let currentStencilZPass = null;
-		let currentStencilClear = null;
+// 		let currentStencilMask = null;
+// 		let currentStencilFunc = null;
+// 		let currentStencilRef = null;
+// 		let currentStencilFuncMask = null;
+// 		let currentStencilFail = null;
+// 		let currentStencilZFail = null;
+// 		let currentStencilZPass = null;
+// 		let currentStencilClear = null;
 
-		return {
+// 		return {
 
-			setTest: function ( stencilTest ) {
+// 			setTest: function ( stencilTest ) {
 
-				if ( ! locked ) {
+// 				if ( ! locked ) {
 
-					if ( stencilTest ) {
+// 					if ( stencilTest ) {
 
-						enable( 2960 );
+// 						enable( 2960 );
 
-					} else {
+// 					} else {
 
-						disable( 2960 );
+// 						disable( 2960 );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			},
+// 			},
 
-			setMask: function ( stencilMask ) {
+// 			setMask: function ( stencilMask ) {
 
-				if ( currentStencilMask !== stencilMask && ! locked ) {
+// 				if ( currentStencilMask !== stencilMask && ! locked ) {
 
-					gl.stencilMask( stencilMask );
-					currentStencilMask = stencilMask;
+// 					gl.stencilMask( stencilMask );
+// 					currentStencilMask = stencilMask;
 
-				}
+// 				}
 
-			},
+// 			},
 
-			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {
+// 			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {
 
-				if ( currentStencilFunc !== stencilFunc ||
-				     currentStencilRef !== stencilRef ||
-				     currentStencilFuncMask !== stencilMask ) {
+// 				if ( currentStencilFunc !== stencilFunc ||
+// 				     currentStencilRef !== stencilRef ||
+// 				     currentStencilFuncMask !== stencilMask ) {
 
-					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );
+// 					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );
 
-					currentStencilFunc = stencilFunc;
-					currentStencilRef = stencilRef;
-					currentStencilFuncMask = stencilMask;
+// 					currentStencilFunc = stencilFunc;
+// 					currentStencilRef = stencilRef;
+// 					currentStencilFuncMask = stencilMask;
 
-				}
+// 				}
 
-			},
+// 			},
 
-			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {
+// 			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {
 
-				if ( currentStencilFail !== stencilFail ||
-				     currentStencilZFail !== stencilZFail ||
-				     currentStencilZPass !== stencilZPass ) {
+// 				if ( currentStencilFail !== stencilFail ||
+// 				     currentStencilZFail !== stencilZFail ||
+// 				     currentStencilZPass !== stencilZPass ) {
 
-					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );
+// 					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );
 
-					currentStencilFail = stencilFail;
-					currentStencilZFail = stencilZFail;
-					currentStencilZPass = stencilZPass;
+// 					currentStencilFail = stencilFail;
+// 					currentStencilZFail = stencilZFail;
+// 					currentStencilZPass = stencilZPass;
 
-				}
+// 				}
 
-			},
+// 			},
 
-			setLocked: function ( lock ) {
+// 			setLocked: function ( lock ) {
 
-				locked = lock;
+// 				locked = lock;
 
-			},
+// 			},
 
-			setClear: function ( stencil ) {
+// 			setClear: function ( stencil ) {
 
-				if ( currentStencilClear !== stencil ) {
+// 				if ( currentStencilClear !== stencil ) {
 
-					gl.clearStencil( stencil );
-					currentStencilClear = stencil;
+// 					gl.clearStencil( stencil );
+// 					currentStencilClear = stencil;
 
-				}
+// 				}
 
-			},
+// 			},
 
-			reset: function () {
+// 			reset: function () {
 
-				locked = false;
+// 				locked = false;
 
-				currentStencilMask = null;
-				currentStencilFunc = null;
-				currentStencilRef = null;
-				currentStencilFuncMask = null;
-				currentStencilFail = null;
-				currentStencilZFail = null;
-				currentStencilZPass = null;
-				currentStencilClear = null;
+// 				currentStencilMask = null;
+// 				currentStencilFunc = null;
+// 				currentStencilRef = null;
+// 				currentStencilFuncMask = null;
+// 				currentStencilFail = null;
+// 				currentStencilZFail = null;
+// 				currentStencilZPass = null;
+// 				currentStencilClear = null;
 
-			}
+// 			}
 
-		};
+// 		};
 
-	}
+// 	}
 
-	//
+// 	//
 
-	const colorBuffer = new ColorBuffer();
-	const depthBuffer = new DepthBuffer();
-	const stencilBuffer = new StencilBuffer();
+// 	const colorBuffer = new ColorBuffer();
+// 	const depthBuffer = new DepthBuffer();
+// 	const stencilBuffer = new StencilBuffer();
 
-	const uboBindings = new WeakMap();
-	const uboProgamMap = new WeakMap();
+// 	const uboBindings = new WeakMap();
+// 	const uboProgamMap = new WeakMap();
 
-	let enabledCapabilities = {};
+// 	let enabledCapabilities = {};
 
-	let currentBoundFramebuffers = {};
-	let currentDrawbuffers = new WeakMap();
-	let defaultDrawbuffers = [];
+// 	let currentBoundFramebuffers = {};
+// 	let currentDrawbuffers = new WeakMap();
+// 	let defaultDrawbuffers = [];
 
-	let currentProgram = null;
+// 	let currentProgram = null;
 
-	let currentBlendingEnabled = false;
-	let currentBlending = null;
-	let currentBlendEquation = null;
-	let currentBlendSrc = null;
-	let currentBlendDst = null;
-	let currentBlendEquationAlpha = null;
-	let currentBlendSrcAlpha = null;
-	let currentBlendDstAlpha = null;
-	let currentPremultipledAlpha = false;
+// 	let currentBlendingEnabled = false;
+// 	let currentBlending = null;
+// 	let currentBlendEquation = null;
+// 	let currentBlendSrc = null;
+// 	let currentBlendDst = null;
+// 	let currentBlendEquationAlpha = null;
+// 	let currentBlendSrcAlpha = null;
+// 	let currentBlendDstAlpha = null;
+// 	let currentPremultipledAlpha = false;
 
-	let currentFlipSided = null;
-	let currentCullFace = null;
+// 	let currentFlipSided = null;
+// 	let currentCullFace = null;
 
-	let currentLineWidth = null;
+// 	let currentLineWidth = null;
 
-	let currentPolygonOffsetFactor = null;
-	let currentPolygonOffsetUnits = null;
+// 	let currentPolygonOffsetFactor = null;
+// 	let currentPolygonOffsetUnits = null;
 
-	const maxTextures = gl.getParameter( 35661 );
+// 	const maxTextures = gl.getParameter( 35661 );
 
-	let lineWidthAvailable = false;
-	let version = 0;
-	const glVersion = gl.getParameter( 7938 );
+// 	let lineWidthAvailable = false;
+// 	let version = 0;
+// 	const glVersion = gl.getParameter( 7938 );
 
-	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {
+// 	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {
 
-		version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
-		lineWidthAvailable = ( version >= 1.0 );
+// 		version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
+// 		lineWidthAvailable = ( version >= 1.0 );
 
-	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {
+// 	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {
 
-		version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
-		lineWidthAvailable = ( version >= 2.0 );
+// 		version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
+// 		lineWidthAvailable = ( version >= 2.0 );
 
-	}
+// 	}
 
-	let currentTextureSlot = null;
-	let currentBoundTextures = {};
+// 	let currentTextureSlot = null;
+// 	let currentBoundTextures = {};
 
-	const scissorParam = gl.getParameter( 3088 );
-	const viewportParam = gl.getParameter( 2978 );
+// 	const scissorParam = gl.getParameter( 3088 );
+// 	const viewportParam = gl.getParameter( 2978 );
 
-	const currentScissor = new Vector4().fromArray( scissorParam );
-	const currentViewport = new Vector4().fromArray( viewportParam );
+// 	const currentScissor = new Vector4().fromArray( scissorParam );
+// 	const currentViewport = new Vector4().fromArray( viewportParam );
 
-	function createTexture( type, target, count ) {
+// 	function createTexture( type, target, count ) {
 
-		const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
-		const texture = gl.createTexture();
+// 		const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
+// 		const texture = gl.createTexture();
 
-		gl.bindTexture( type, texture );
-		gl.texParameteri( type, 10241, 9728 );
-		gl.texParameteri( type, 10240, 9728 );
+// 		gl.bindTexture( type, texture );
+// 		gl.texParameteri( type, 10241, 9728 );
+// 		gl.texParameteri( type, 10240, 9728 );
 
-		for ( let i = 0; i < count; i ++ ) {
+// 		for ( let i = 0; i < count; i ++ ) {
 
-			gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );
+// 			gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );
 
-		}
+// 		}
 
-		return texture;
+// 		return texture;
 
-	}
+// 	}
 
-	const emptyTextures = {};
-	emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
-	emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );
+// 	const emptyTextures = {};
+// 	emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
+// 	emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );
 
-	// init
+// 	// init
 
-	colorBuffer.setClear( 0, 0, 0, 1 );
-	depthBuffer.setClear( 1 );
-	stencilBuffer.setClear( 0 );
+// 	colorBuffer.setClear( 0, 0, 0, 1 );
+// 	depthBuffer.setClear( 1 );
+// 	stencilBuffer.setClear( 0 );
 
-	enable( 2929 );
-	depthBuffer.setFunc( LessEqualDepth );
+// 	enable( 2929 );
+// 	depthBuffer.setFunc( LessEqualDepth );
 
-	setFlipSided( false );
-	setCullFace( CullFaceBack );
-	enable( 2884 );
+// 	setFlipSided( false );
+// 	setCullFace( CullFaceBack );
+// 	enable( 2884 );
 
-	setBlending( NoBlending );
+// 	setBlending( NoBlending );
 
-	//
+// 	//
 
-	function enable( id ) {
+// 	function enable( id ) {
 
-		if ( enabledCapabilities[ id ] !== true ) {
+// 		if ( enabledCapabilities[ id ] !== true ) {
 
-			gl.enable( id );
-			enabledCapabilities[ id ] = true;
+// 			gl.enable( id );
+// 			enabledCapabilities[ id ] = true;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function disable( id ) {
+// 	function disable( id ) {
 
-		if ( enabledCapabilities[ id ] !== false ) {
+// 		if ( enabledCapabilities[ id ] !== false ) {
 
-			gl.disable( id );
-			enabledCapabilities[ id ] = false;
+// 			gl.disable( id );
+// 			enabledCapabilities[ id ] = false;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function bindFramebuffer( target, framebuffer ) {
+// 	function bindFramebuffer( target, framebuffer ) {
 
-		if ( currentBoundFramebuffers[ target ] !== framebuffer ) {
+// 		if ( currentBoundFramebuffers[ target ] !== framebuffer ) {
 
-			gl.bindFramebuffer( target, framebuffer );
+// 			gl.bindFramebuffer( target, framebuffer );
 
-			currentBoundFramebuffers[ target ] = framebuffer;
+// 			currentBoundFramebuffers[ target ] = framebuffer;
 
-			if ( isWebGL2 ) {
+// 			if ( isWebGL2 ) {
 
-				// 36009 is equivalent to 36160
+// 				// 36009 is equivalent to 36160
 
-				if ( target === 36009 ) {
+// 				if ( target === 36009 ) {
 
-					currentBoundFramebuffers[ 36160 ] = framebuffer;
+// 					currentBoundFramebuffers[ 36160 ] = framebuffer;
 
-				}
+// 				}
 
-				if ( target === 36160 ) {
+// 				if ( target === 36160 ) {
 
-					currentBoundFramebuffers[ 36009 ] = framebuffer;
+// 					currentBoundFramebuffers[ 36009 ] = framebuffer;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			return true;
+// 			return true;
 
-		}
+// 		}
 
-		return false;
+// 		return false;
 
-	}
+// 	}
 
-	function drawBuffers( renderTarget, framebuffer ) {
+// 	function drawBuffers( renderTarget, framebuffer ) {
 
-		let drawBuffers = defaultDrawbuffers;
+// 		let drawBuffers = defaultDrawbuffers;
 
-		let needsUpdate = false;
+// 		let needsUpdate = false;
 
-		if ( renderTarget ) {
+// 		if ( renderTarget ) {
 
-			drawBuffers = currentDrawbuffers.get( framebuffer );
+// 			drawBuffers = currentDrawbuffers.get( framebuffer );
 
-			if ( drawBuffers === undefined ) {
+// 			if ( drawBuffers === undefined ) {
 
-				drawBuffers = [];
-				currentDrawbuffers.set( framebuffer, drawBuffers );
+// 				drawBuffers = [];
+// 				currentDrawbuffers.set( framebuffer, drawBuffers );
 
-			}
+// 			}
 
-			if ( renderTarget.isWebGLMultipleRenderTargets ) {
+// 			if ( renderTarget.isWebGLMultipleRenderTargets ) {
 
-				const textures = renderTarget.texture;
+// 				const textures = renderTarget.texture;
 
-				if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== 36064 ) {
+// 				if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== 36064 ) {
 
-					for ( let i = 0, il = textures.length; i < il; i ++ ) {
+// 					for ( let i = 0, il = textures.length; i < il; i ++ ) {
 
-						drawBuffers[ i ] = 36064 + i;
+// 						drawBuffers[ i ] = 36064 + i;
 
-					}
+// 					}
 
-					drawBuffers.length = textures.length;
+// 					drawBuffers.length = textures.length;
 
-					needsUpdate = true;
+// 					needsUpdate = true;
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				if ( drawBuffers[ 0 ] !== 36064 ) {
+// 				if ( drawBuffers[ 0 ] !== 36064 ) {
 
-					drawBuffers[ 0 ] = 36064;
+// 					drawBuffers[ 0 ] = 36064;
 
-					needsUpdate = true;
+// 					needsUpdate = true;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			if ( drawBuffers[ 0 ] !== 1029 ) {
+// 			if ( drawBuffers[ 0 ] !== 1029 ) {
 
-				drawBuffers[ 0 ] = 1029;
+// 				drawBuffers[ 0 ] = 1029;
 
-				needsUpdate = true;
+// 				needsUpdate = true;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( needsUpdate ) {
+// 		if ( needsUpdate ) {
 
-			if ( capabilities.isWebGL2 ) {
+// 			if ( capabilities.isWebGL2 ) {
 
-				gl.drawBuffers( drawBuffers );
+// 				gl.drawBuffers( drawBuffers );
 
-			} else {
+// 			} else {
 
-				extensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );
+// 				extensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );
 
-			}
+// 			}
 
-		}
+// 		}
 
 
-	}
+// 	}
 
-	function useProgram( program ) {
+// 	function useProgram( program ) {
 
-		if ( currentProgram !== program ) {
+// 		if ( currentProgram !== program ) {
 
-			gl.useProgram( program );
+// 			gl.useProgram( program );
 
-			currentProgram = program;
+// 			currentProgram = program;
 
-			return true;
+// 			return true;
 
-		}
+// 		}
 
-		return false;
+// 		return false;
 
-	}
+// 	}
 
-	const equationToGL = {
-		[ AddEquation ]: 32774,
-		[ SubtractEquation ]: 32778,
-		[ ReverseSubtractEquation ]: 32779
-	};
+// 	const equationToGL = {
+// 		[ AddEquation ]: 32774,
+// 		[ SubtractEquation ]: 32778,
+// 		[ ReverseSubtractEquation ]: 32779
+// 	};
 
-	if ( isWebGL2 ) {
+// 	if ( isWebGL2 ) {
 
-		equationToGL[ MinEquation ] = 32775;
-		equationToGL[ MaxEquation ] = 32776;
+// 		equationToGL[ MinEquation ] = 32775;
+// 		equationToGL[ MaxEquation ] = 32776;
 
-	} else {
+// 	} else {
 
-		const extension = extensions.get( 'EXT_blend_minmax' );
+// 		const extension = extensions.get( 'EXT_blend_minmax' );
 
-		if ( extension !== null ) {
+// 		if ( extension !== null ) {
 
-			equationToGL[ MinEquation ] = extension.MIN_EXT;
-			equationToGL[ MaxEquation ] = extension.MAX_EXT;
+// 			equationToGL[ MinEquation ] = extension.MIN_EXT;
+// 			equationToGL[ MaxEquation ] = extension.MAX_EXT;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	const factorToGL = {
-		[ ZeroFactor ]: 0,
-		[ OneFactor ]: 1,
-		[ SrcColorFactor ]: 768,
-		[ SrcAlphaFactor ]: 770,
-		[ SrcAlphaSaturateFactor ]: 776,
-		[ DstColorFactor ]: 774,
-		[ DstAlphaFactor ]: 772,
-		[ OneMinusSrcColorFactor ]: 769,
-		[ OneMinusSrcAlphaFactor ]: 771,
-		[ OneMinusDstColorFactor ]: 775,
-		[ OneMinusDstAlphaFactor ]: 773
-	};
+// 	const factorToGL = {
+// 		[ ZeroFactor ]: 0,
+// 		[ OneFactor ]: 1,
+// 		[ SrcColorFactor ]: 768,
+// 		[ SrcAlphaFactor ]: 770,
+// 		[ SrcAlphaSaturateFactor ]: 776,
+// 		[ DstColorFactor ]: 774,
+// 		[ DstAlphaFactor ]: 772,
+// 		[ OneMinusSrcColorFactor ]: 769,
+// 		[ OneMinusSrcAlphaFactor ]: 771,
+// 		[ OneMinusDstColorFactor ]: 775,
+// 		[ OneMinusDstAlphaFactor ]: 773
+// 	};
 
-	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {
+// 	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {
 
-		if ( blending === NoBlending ) {
+// 		if ( blending === NoBlending ) {
 
-			if ( currentBlendingEnabled === true ) {
+// 			if ( currentBlendingEnabled === true ) {
 
-				disable( 3042 );
-				currentBlendingEnabled = false;
+// 				disable( 3042 );
+// 				currentBlendingEnabled = false;
 
-			}
+// 			}
 
-			return;
+// 			return;
 
-		}
+// 		}
 
-		if ( currentBlendingEnabled === false ) {
+// 		if ( currentBlendingEnabled === false ) {
 
-			enable( 3042 );
-			currentBlendingEnabled = true;
+// 			enable( 3042 );
+// 			currentBlendingEnabled = true;
 
-		}
+// 		}
 
-		if ( blending !== CustomBlending ) {
+// 		if ( blending !== CustomBlending ) {
 
-			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {
+// 			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {
 
-				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {
+// 				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {
 
-					gl.blendEquation( 32774 );
+// 					gl.blendEquation( 32774 );
 
-					currentBlendEquation = AddEquation;
-					currentBlendEquationAlpha = AddEquation;
+// 					currentBlendEquation = AddEquation;
+// 					currentBlendEquationAlpha = AddEquation;
 
-				}
+// 				}
 
-				if ( premultipliedAlpha ) {
+// 				if ( premultipliedAlpha ) {
 
-					switch ( blending ) {
+// 					switch ( blending ) {
 
-						case NormalBlending:
-							gl.blendFuncSeparate( 1, 771, 1, 771 );
-							break;
+// 						case NormalBlending:
+// 							gl.blendFuncSeparate( 1, 771, 1, 771 );
+// 							break;
 
-						case AdditiveBlending:
-							gl.blendFunc( 1, 1 );
-							break;
+// 						case AdditiveBlending:
+// 							gl.blendFunc( 1, 1 );
+// 							break;
 
-						case SubtractiveBlending:
-							gl.blendFuncSeparate( 0, 769, 0, 1 );
-							break;
+// 						case SubtractiveBlending:
+// 							gl.blendFuncSeparate( 0, 769, 0, 1 );
+// 							break;
 
-						case MultiplyBlending:
-							gl.blendFuncSeparate( 0, 768, 0, 770 );
-							break;
+// 						case MultiplyBlending:
+// 							gl.blendFuncSeparate( 0, 768, 0, 770 );
+// 							break;
 
-						default:
-							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
-							break;
+// 						default:
+// 							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
+// 							break;
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					switch ( blending ) {
+// 					switch ( blending ) {
 
-						case NormalBlending:
-							gl.blendFuncSeparate( 770, 771, 1, 771 );
-							break;
+// 						case NormalBlending:
+// 							gl.blendFuncSeparate( 770, 771, 1, 771 );
+// 							break;
 
-						case AdditiveBlending:
-							gl.blendFunc( 770, 1 );
-							break;
+// 						case AdditiveBlending:
+// 							gl.blendFunc( 770, 1 );
+// 							break;
 
-						case SubtractiveBlending:
-							gl.blendFuncSeparate( 0, 769, 0, 1 );
-							break;
+// 						case SubtractiveBlending:
+// 							gl.blendFuncSeparate( 0, 769, 0, 1 );
+// 							break;
 
-						case MultiplyBlending:
-							gl.blendFunc( 0, 768 );
-							break;
+// 						case MultiplyBlending:
+// 							gl.blendFunc( 0, 768 );
+// 							break;
 
-						default:
-							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
-							break;
+// 						default:
+// 							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
+// 							break;
 
-					}
+// 					}
 
-				}
+// 				}
 
-				currentBlendSrc = null;
-				currentBlendDst = null;
-				currentBlendSrcAlpha = null;
-				currentBlendDstAlpha = null;
+// 				currentBlendSrc = null;
+// 				currentBlendDst = null;
+// 				currentBlendSrcAlpha = null;
+// 				currentBlendDstAlpha = null;
 
-				currentBlending = blending;
-				currentPremultipledAlpha = premultipliedAlpha;
+// 				currentBlending = blending;
+// 				currentPremultipledAlpha = premultipliedAlpha;
 
-			}
+// 			}
 
-			return;
+// 			return;
 
-		}
+// 		}
 
-		// custom blending
+// 		// custom blending
 
-		blendEquationAlpha = blendEquationAlpha || blendEquation;
-		blendSrcAlpha = blendSrcAlpha || blendSrc;
-		blendDstAlpha = blendDstAlpha || blendDst;
+// 		blendEquationAlpha = blendEquationAlpha || blendEquation;
+// 		blendSrcAlpha = blendSrcAlpha || blendSrc;
+// 		blendDstAlpha = blendDstAlpha || blendDst;
 
-		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
+// 		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
 
-			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );
+// 			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );
 
-			currentBlendEquation = blendEquation;
-			currentBlendEquationAlpha = blendEquationAlpha;
+// 			currentBlendEquation = blendEquation;
+// 			currentBlendEquationAlpha = blendEquationAlpha;
 
-		}
+// 		}
 
-		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
+// 		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
 
-			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );
+// 			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );
 
-			currentBlendSrc = blendSrc;
-			currentBlendDst = blendDst;
-			currentBlendSrcAlpha = blendSrcAlpha;
-			currentBlendDstAlpha = blendDstAlpha;
+// 			currentBlendSrc = blendSrc;
+// 			currentBlendDst = blendDst;
+// 			currentBlendSrcAlpha = blendSrcAlpha;
+// 			currentBlendDstAlpha = blendDstAlpha;
 
-		}
+// 		}
 
-		currentBlending = blending;
-		currentPremultipledAlpha = null;
+// 		currentBlending = blending;
+// 		currentPremultipledAlpha = null;
 
-	}
+// 	}
 
-	function setMaterial( material, frontFaceCW ) {
+// 	function setMaterial( material, frontFaceCW ) {
 
-		material.side === DoubleSide
-			? disable( 2884 )
-			: enable( 2884 );
+// 		material.side === DoubleSide
+// 			? disable( 2884 )
+// 			: enable( 2884 );
 
-		let flipSided = ( material.side === BackSide );
-		if ( frontFaceCW ) flipSided = ! flipSided;
+// 		let flipSided = ( material.side === BackSide );
+// 		if ( frontFaceCW ) flipSided = ! flipSided;
 
-		setFlipSided( flipSided );
+// 		setFlipSided( flipSided );
 
-		( material.blending === NormalBlending && material.transparent === false )
-			? setBlending( NoBlending )
-			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
+// 		( material.blending === NormalBlending && material.transparent === false )
+// 			? setBlending( NoBlending )
+// 			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
 
-		depthBuffer.setFunc( material.depthFunc );
-		depthBuffer.setTest( material.depthTest );
-		depthBuffer.setMask( material.depthWrite );
-		colorBuffer.setMask( material.colorWrite );
+// 		depthBuffer.setFunc( material.depthFunc );
+// 		depthBuffer.setTest( material.depthTest );
+// 		depthBuffer.setMask( material.depthWrite );
+// 		colorBuffer.setMask( material.colorWrite );
 
-		const stencilWrite = material.stencilWrite;
-		stencilBuffer.setTest( stencilWrite );
-		if ( stencilWrite ) {
+// 		const stencilWrite = material.stencilWrite;
+// 		stencilBuffer.setTest( stencilWrite );
+// 		if ( stencilWrite ) {
 
-			stencilBuffer.setMask( material.stencilWriteMask );
-			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
-			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );
+// 			stencilBuffer.setMask( material.stencilWriteMask );
+// 			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
+// 			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );
 
-		}
+// 		}
 
-		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
+// 		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
 
-		material.alphaToCoverage === true
-			? enable( 32926 )
-			: disable( 32926 );
+// 		material.alphaToCoverage === true
+// 			? enable( 32926 )
+// 			: disable( 32926 );
 
-	}
+// 	}
 
-	//
+// 	//
 
-	function setFlipSided( flipSided ) {
+// 	function setFlipSided( flipSided ) {
 
-		if ( currentFlipSided !== flipSided ) {
+// 		if ( currentFlipSided !== flipSided ) {
 
-			if ( flipSided ) {
+// 			if ( flipSided ) {
 
-				gl.frontFace( 2304 );
+// 				gl.frontFace( 2304 );
 
-			} else {
+// 			} else {
 
-				gl.frontFace( 2305 );
+// 				gl.frontFace( 2305 );
 
-			}
+// 			}
 
-			currentFlipSided = flipSided;
+// 			currentFlipSided = flipSided;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function setCullFace( cullFace ) {
+// 	function setCullFace( cullFace ) {
 
-		if ( cullFace !== CullFaceNone ) {
+// 		if ( cullFace !== CullFaceNone ) {
 
-			enable( 2884 );
+// 			enable( 2884 );
 
-			if ( cullFace !== currentCullFace ) {
+// 			if ( cullFace !== currentCullFace ) {
 
-				if ( cullFace === CullFaceBack ) {
+// 				if ( cullFace === CullFaceBack ) {
 
-					gl.cullFace( 1029 );
+// 					gl.cullFace( 1029 );
 
-				} else if ( cullFace === CullFaceFront ) {
+// 				} else if ( cullFace === CullFaceFront ) {
 
-					gl.cullFace( 1028 );
+// 					gl.cullFace( 1028 );
 
-				} else {
+// 				} else {
 
-					gl.cullFace( 1032 );
+// 					gl.cullFace( 1032 );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			disable( 2884 );
+// 			disable( 2884 );
 
-		}
+// 		}
 
-		currentCullFace = cullFace;
+// 		currentCullFace = cullFace;
 
-	}
+// 	}
 
-	function setLineWidth( width ) {
+// 	function setLineWidth( width ) {
 
-		if ( width !== currentLineWidth ) {
+// 		if ( width !== currentLineWidth ) {
 
-			if ( lineWidthAvailable ) gl.lineWidth( width );
+// 			if ( lineWidthAvailable ) gl.lineWidth( width );
 
-			currentLineWidth = width;
+// 			currentLineWidth = width;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function setPolygonOffset( polygonOffset, factor, units ) {
+// 	function setPolygonOffset( polygonOffset, factor, units ) {
 
-		if ( polygonOffset ) {
+// 		if ( polygonOffset ) {
 
-			enable( 32823 );
+// 			enable( 32823 );
 
-			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {
+// 			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {
 
-				gl.polygonOffset( factor, units );
+// 				gl.polygonOffset( factor, units );
 
-				currentPolygonOffsetFactor = factor;
-				currentPolygonOffsetUnits = units;
+// 				currentPolygonOffsetFactor = factor;
+// 				currentPolygonOffsetUnits = units;
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			disable( 32823 );
+// 			disable( 32823 );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function setScissorTest( scissorTest ) {
+// 	function setScissorTest( scissorTest ) {
 
-		if ( scissorTest ) {
+// 		if ( scissorTest ) {
 
-			enable( 3089 );
+// 			enable( 3089 );
 
-		} else {
+// 		} else {
 
-			disable( 3089 );
+// 			disable( 3089 );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// texture
+// 	// texture
 
-	function activeTexture( webglSlot ) {
+// 	function activeTexture( webglSlot ) {
 
-		if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;
+// 		if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;
 
-		if ( currentTextureSlot !== webglSlot ) {
+// 		if ( currentTextureSlot !== webglSlot ) {
 
-			gl.activeTexture( webglSlot );
-			currentTextureSlot = webglSlot;
+// 			gl.activeTexture( webglSlot );
+// 			currentTextureSlot = webglSlot;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function bindTexture( webglType, webglTexture, webglSlot ) {
+// 	function bindTexture( webglType, webglTexture, webglSlot ) {
 
-		if ( webglSlot === undefined ) {
+// 		if ( webglSlot === undefined ) {
 
-			if ( currentTextureSlot === null ) {
+// 			if ( currentTextureSlot === null ) {
 
-				webglSlot = 33984 + maxTextures - 1;
+// 				webglSlot = 33984 + maxTextures - 1;
 
-			} else {
+// 			} else {
 
-				webglSlot = currentTextureSlot;
+// 				webglSlot = currentTextureSlot;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		let boundTexture = currentBoundTextures[ webglSlot ];
+// 		let boundTexture = currentBoundTextures[ webglSlot ];
 
-		if ( boundTexture === undefined ) {
+// 		if ( boundTexture === undefined ) {
 
-			boundTexture = { type: undefined, texture: undefined };
-			currentBoundTextures[ webglSlot ] = boundTexture;
+// 			boundTexture = { type: undefined, texture: undefined };
+// 			currentBoundTextures[ webglSlot ] = boundTexture;
 
-		}
+// 		}
 
-		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
+// 		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
 
-			if ( currentTextureSlot !== webglSlot ) {
+// 			if ( currentTextureSlot !== webglSlot ) {
 
-				gl.activeTexture( webglSlot );
-				currentTextureSlot = webglSlot;
+// 				gl.activeTexture( webglSlot );
+// 				currentTextureSlot = webglSlot;
 
-			}
+// 			}
 
-			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );
+// 			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );
 
-			boundTexture.type = webglType;
-			boundTexture.texture = webglTexture;
+// 			boundTexture.type = webglType;
+// 			boundTexture.texture = webglTexture;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function unbindTexture() {
+// 	function unbindTexture() {
 
-		const boundTexture = currentBoundTextures[ currentTextureSlot ];
+// 		const boundTexture = currentBoundTextures[ currentTextureSlot ];
 
-		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {
+// 		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {
 
-			gl.bindTexture( boundTexture.type, null );
+// 			gl.bindTexture( boundTexture.type, null );
 
-			boundTexture.type = undefined;
-			boundTexture.texture = undefined;
+// 			boundTexture.type = undefined;
+// 			boundTexture.texture = undefined;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function compressedTexImage2D() {
+// 	function compressedTexImage2D() {
 
-		try {
+// 		try {
 
-			gl.compressedTexImage2D.apply( gl, arguments );
+// 			gl.compressedTexImage2D.apply( gl, arguments );
 
-		} catch ( error ) {
+// 		} catch ( error ) {
 
-			console.error( 'THREE.WebGLState:', error );
+// 			console.error( 'THREE.WebGLState:', error );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function texSubImage2D() {
+// 	function texSubImage2D() {
 
-		try {
+// 		try {
 
-			gl.texSubImage2D.apply( gl, arguments );
+// 			gl.texSubImage2D.apply( gl, arguments );
 
-		} catch ( error ) {
+// 		} catch ( error ) {
 
-			console.error( 'THREE.WebGLState:', error );
+// 			console.error( 'THREE.WebGLState:', error );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function texSubImage3D() {
+// 	function texSubImage3D() {
 
-		try {
+// 		try {
 
-			gl.texSubImage3D.apply( gl, arguments );
+// 			gl.texSubImage3D.apply( gl, arguments );
 
-		} catch ( error ) {
+// 		} catch ( error ) {
 
-			console.error( 'THREE.WebGLState:', error );
+// 			console.error( 'THREE.WebGLState:', error );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function compressedTexSubImage2D() {
+// 	function compressedTexSubImage2D() {
 
-		try {
+// 		try {
 
-			gl.compressedTexSubImage2D.apply( gl, arguments );
+// 			gl.compressedTexSubImage2D.apply( gl, arguments );
 
-		} catch ( error ) {
+// 		} catch ( error ) {
 
-			console.error( 'THREE.WebGLState:', error );
+// 			console.error( 'THREE.WebGLState:', error );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function texStorage2D() {
+// 	function texStorage2D() {
 
-		try {
+// 		try {
 
-			gl.texStorage2D.apply( gl, arguments );
+// 			gl.texStorage2D.apply( gl, arguments );
 
-		} catch ( error ) {
+// 		} catch ( error ) {
 
-			console.error( 'THREE.WebGLState:', error );
+// 			console.error( 'THREE.WebGLState:', error );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function texStorage3D() {
+// 	function texStorage3D() {
 
-		try {
+// 		try {
 
-			gl.texStorage3D.apply( gl, arguments );
+// 			gl.texStorage3D.apply( gl, arguments );
 
-		} catch ( error ) {
+// 		} catch ( error ) {
 
-			console.error( 'THREE.WebGLState:', error );
+// 			console.error( 'THREE.WebGLState:', error );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function texImage2D() {
+// 	function texImage2D() {
 
-		try {
+// 		try {
 
-			gl.texImage2D.apply( gl, arguments );
+// 			gl.texImage2D.apply( gl, arguments );
 
-		} catch ( error ) {
+// 		} catch ( error ) {
 
-			console.error( 'THREE.WebGLState:', error );
+// 			console.error( 'THREE.WebGLState:', error );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function texImage3D() {
+// 	function texImage3D() {
 
-		try {
+// 		try {
 
-			gl.texImage3D.apply( gl, arguments );
+// 			gl.texImage3D.apply( gl, arguments );
 
-		} catch ( error ) {
+// 		} catch ( error ) {
 
-			console.error( 'THREE.WebGLState:', error );
+// 			console.error( 'THREE.WebGLState:', error );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	//
+// 	//
 
-	function scissor( scissor ) {
+// 	function scissor( scissor ) {
 
-		if ( currentScissor.equals( scissor ) === false ) {
+// 		if ( currentScissor.equals( scissor ) === false ) {
 
-			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
-			currentScissor.copy( scissor );
+// 			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
+// 			currentScissor.copy( scissor );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function viewport( viewport ) {
+// 	function viewport( viewport ) {
 
-		if ( currentViewport.equals( viewport ) === false ) {
+// 		if ( currentViewport.equals( viewport ) === false ) {
 
-			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
-			currentViewport.copy( viewport );
+// 			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
+// 			currentViewport.copy( viewport );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function updateUBOMapping( uniformsGroup, program ) {
+// 	function updateUBOMapping( uniformsGroup, program ) {
 
-		let mapping = uboProgamMap.get( program );
+// 		let mapping = uboProgamMap.get( program );
 
-		if ( mapping === undefined ) {
+// 		if ( mapping === undefined ) {
 
-			mapping = new WeakMap();
+// 			mapping = new WeakMap();
 
-			uboProgamMap.set( program, mapping );
+// 			uboProgamMap.set( program, mapping );
 
-		}
+// 		}
 
-		let blockIndex = mapping.get( uniformsGroup );
+// 		let blockIndex = mapping.get( uniformsGroup );
 
-		if ( blockIndex === undefined ) {
+// 		if ( blockIndex === undefined ) {
 
-			blockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );
+// 			blockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );
 
-			mapping.set( uniformsGroup, blockIndex );
+// 			mapping.set( uniformsGroup, blockIndex );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function uniformBlockBinding( uniformsGroup, program ) {
+// 	function uniformBlockBinding( uniformsGroup, program ) {
 
-		const mapping = uboProgamMap.get( program );
-		const blockIndex = mapping.get( uniformsGroup );
+// 		const mapping = uboProgamMap.get( program );
+// 		const blockIndex = mapping.get( uniformsGroup );
 
-		if ( uboBindings.get( uniformsGroup ) !== blockIndex ) {
+// 		if ( uboBindings.get( uniformsGroup ) !== blockIndex ) {
 
-			// bind shader specific block index to global block point
+// 			// bind shader specific block index to global block point
 
-			gl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );
+// 			gl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );
 
-			uboBindings.set( uniformsGroup, blockIndex );
+// 			uboBindings.set( uniformsGroup, blockIndex );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	//
+// 	//
 
-	function reset() {
+// 	function reset() {
 
-		// reset state
+// 		// reset state
 
-		gl.disable( 3042 );
-		gl.disable( 2884 );
-		gl.disable( 2929 );
-		gl.disable( 32823 );
-		gl.disable( 3089 );
-		gl.disable( 2960 );
-		gl.disable( 32926 );
+// 		gl.disable( 3042 );
+// 		gl.disable( 2884 );
+// 		gl.disable( 2929 );
+// 		gl.disable( 32823 );
+// 		gl.disable( 3089 );
+// 		gl.disable( 2960 );
+// 		gl.disable( 32926 );
 
-		gl.blendEquation( 32774 );
-		gl.blendFunc( 1, 0 );
-		gl.blendFuncSeparate( 1, 0, 1, 0 );
+// 		gl.blendEquation( 32774 );
+// 		gl.blendFunc( 1, 0 );
+// 		gl.blendFuncSeparate( 1, 0, 1, 0 );
 
-		gl.colorMask( true, true, true, true );
-		gl.clearColor( 0, 0, 0, 0 );
+// 		gl.colorMask( true, true, true, true );
+// 		gl.clearColor( 0, 0, 0, 0 );
 
-		gl.depthMask( true );
-		gl.depthFunc( 513 );
-		gl.clearDepth( 1 );
+// 		gl.depthMask( true );
+// 		gl.depthFunc( 513 );
+// 		gl.clearDepth( 1 );
 
-		gl.stencilMask( 0xffffffff );
-		gl.stencilFunc( 519, 0, 0xffffffff );
-		gl.stencilOp( 7680, 7680, 7680 );
-		gl.clearStencil( 0 );
+// 		gl.stencilMask( 0xffffffff );
+// 		gl.stencilFunc( 519, 0, 0xffffffff );
+// 		gl.stencilOp( 7680, 7680, 7680 );
+// 		gl.clearStencil( 0 );
 
-		gl.cullFace( 1029 );
-		gl.frontFace( 2305 );
+// 		gl.cullFace( 1029 );
+// 		gl.frontFace( 2305 );
 
-		gl.polygonOffset( 0, 0 );
+// 		gl.polygonOffset( 0, 0 );
 
-		gl.activeTexture( 33984 );
+// 		gl.activeTexture( 33984 );
 
-		gl.bindFramebuffer( 36160, null );
+// 		gl.bindFramebuffer( 36160, null );
 
-		if ( isWebGL2 === true ) {
+// 		if ( isWebGL2 === true ) {
 
-			gl.bindFramebuffer( 36009, null );
-			gl.bindFramebuffer( 36008, null );
+// 			gl.bindFramebuffer( 36009, null );
+// 			gl.bindFramebuffer( 36008, null );
 
-		}
+// 		}
 
-		gl.useProgram( null );
+// 		gl.useProgram( null );
 
-		gl.lineWidth( 1 );
+// 		gl.lineWidth( 1 );
 
-		gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
-		gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );
+// 		gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
+// 		gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );
 
-		// reset internals
+// 		// reset internals
 
-		enabledCapabilities = {};
+// 		enabledCapabilities = {};
 
-		currentTextureSlot = null;
-		currentBoundTextures = {};
+// 		currentTextureSlot = null;
+// 		currentBoundTextures = {};
 
-		currentBoundFramebuffers = {};
-		currentDrawbuffers = new WeakMap();
-		defaultDrawbuffers = [];
+// 		currentBoundFramebuffers = {};
+// 		currentDrawbuffers = new WeakMap();
+// 		defaultDrawbuffers = [];
 
-		currentProgram = null;
+// 		currentProgram = null;
 
-		currentBlendingEnabled = false;
-		currentBlending = null;
-		currentBlendEquation = null;
-		currentBlendSrc = null;
-		currentBlendDst = null;
-		currentBlendEquationAlpha = null;
-		currentBlendSrcAlpha = null;
-		currentBlendDstAlpha = null;
-		currentPremultipledAlpha = false;
+// 		currentBlendingEnabled = false;
+// 		currentBlending = null;
+// 		currentBlendEquation = null;
+// 		currentBlendSrc = null;
+// 		currentBlendDst = null;
+// 		currentBlendEquationAlpha = null;
+// 		currentBlendSrcAlpha = null;
+// 		currentBlendDstAlpha = null;
+// 		currentPremultipledAlpha = false;
 
-		currentFlipSided = null;
-		currentCullFace = null;
+// 		currentFlipSided = null;
+// 		currentCullFace = null;
 
-		currentLineWidth = null;
+// 		currentLineWidth = null;
 
-		currentPolygonOffsetFactor = null;
-		currentPolygonOffsetUnits = null;
+// 		currentPolygonOffsetFactor = null;
+// 		currentPolygonOffsetUnits = null;
 
-		currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
-		currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );
+// 		currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
+// 		currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );
 
-		colorBuffer.reset();
-		depthBuffer.reset();
-		stencilBuffer.reset();
+// 		colorBuffer.reset();
+// 		depthBuffer.reset();
+// 		stencilBuffer.reset();
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		buffers: {
-			color: colorBuffer,
-			depth: depthBuffer,
-			stencil: stencilBuffer
-		},
+// 		buffers: {
+// 			color: colorBuffer,
+// 			depth: depthBuffer,
+// 			stencil: stencilBuffer
+// 		},
 
-		enable: enable,
-		disable: disable,
+// 		enable: enable,
+// 		disable: disable,
 
-		bindFramebuffer: bindFramebuffer,
-		drawBuffers: drawBuffers,
+// 		bindFramebuffer: bindFramebuffer,
+// 		drawBuffers: drawBuffers,
 
-		useProgram: useProgram,
+// 		useProgram: useProgram,
 
-		setBlending: setBlending,
-		setMaterial: setMaterial,
+// 		setBlending: setBlending,
+// 		setMaterial: setMaterial,
 
-		setFlipSided: setFlipSided,
-		setCullFace: setCullFace,
+// 		setFlipSided: setFlipSided,
+// 		setCullFace: setCullFace,
 
-		setLineWidth: setLineWidth,
-		setPolygonOffset: setPolygonOffset,
+// 		setLineWidth: setLineWidth,
+// 		setPolygonOffset: setPolygonOffset,
 
-		setScissorTest: setScissorTest,
+// 		setScissorTest: setScissorTest,
 
-		activeTexture: activeTexture,
-		bindTexture: bindTexture,
-		unbindTexture: unbindTexture,
-		compressedTexImage2D: compressedTexImage2D,
-		texImage2D: texImage2D,
-		texImage3D: texImage3D,
+// 		activeTexture: activeTexture,
+// 		bindTexture: bindTexture,
+// 		unbindTexture: unbindTexture,
+// 		compressedTexImage2D: compressedTexImage2D,
+// 		texImage2D: texImage2D,
+// 		texImage3D: texImage3D,
 
-		updateUBOMapping: updateUBOMapping,
-		uniformBlockBinding: uniformBlockBinding,
+// 		updateUBOMapping: updateUBOMapping,
+// 		uniformBlockBinding: uniformBlockBinding,
 
-		texStorage2D: texStorage2D,
-		texStorage3D: texStorage3D,
-		texSubImage2D: texSubImage2D,
-		texSubImage3D: texSubImage3D,
-		compressedTexSubImage2D: compressedTexSubImage2D,
+// 		texStorage2D: texStorage2D,
+// 		texStorage3D: texStorage3D,
+// 		texSubImage2D: texSubImage2D,
+// 		texSubImage3D: texSubImage3D,
+// 		compressedTexSubImage2D: compressedTexSubImage2D,
 
-		scissor: scissor,
-		viewport: viewport,
+// 		scissor: scissor,
+// 		viewport: viewport,
 
-		reset: reset
+// 		reset: reset
 
-	};
+// 	};
 
-}
+// }
 
-function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {
+// function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {
 
-	const isWebGL2 = capabilities.isWebGL2;
-	const maxTextures = capabilities.maxTextures;
-	const maxCubemapSize = capabilities.maxCubemapSize;
-	const maxTextureSize = capabilities.maxTextureSize;
-	const maxSamples = capabilities.maxSamples;
-	const multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;
-	const supportsInvalidateFramebuffer = /OculusBrowser/g.test( navigator.userAgent );
+// 	const isWebGL2 = capabilities.isWebGL2;
+// 	const maxTextures = capabilities.maxTextures;
+// 	const maxCubemapSize = capabilities.maxCubemapSize;
+// 	const maxTextureSize = capabilities.maxTextureSize;
+// 	const maxSamples = capabilities.maxSamples;
+// 	const multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;
+// 	const supportsInvalidateFramebuffer = /OculusBrowser/g.test( navigator.userAgent );
 
-	const _videoTextures = new WeakMap();
-	let _canvas;
+// 	const _videoTextures = new WeakMap();
+// 	let _canvas;
 
-	const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source
+// 	const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source
 
-	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
-	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
-	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
+// 	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
+// 	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
+// 	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
 
-	let useOffscreenCanvas = false;
+// 	let useOffscreenCanvas = false;
 
-	try {
+// 	try {
 
-		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
-			// eslint-disable-next-line compat/compat
-			&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;
+// 		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
+// 			// eslint-disable-next-line compat/compat
+// 			&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;
 
-	} catch ( err ) {
+// 	} catch ( err ) {
 
-		// Ignore any errors
+// 		// Ignore any errors
 
-	}
+// 	}
 
-	function createCanvas( width, height ) {
+// 	function createCanvas( width, height ) {
 
-		// Use OffscreenCanvas when available. Specially needed in web workers
+// 		// Use OffscreenCanvas when available. Specially needed in web workers
 
-		return useOffscreenCanvas ?
-			// eslint-disable-next-line compat/compat
-			new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );
+// 		return useOffscreenCanvas ?
+// 			// eslint-disable-next-line compat/compat
+// 			new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );
 
-	}
+// 	}
 
-	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {
+// 	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {
 
-		let scale = 1;
+// 		let scale = 1;
 
-		// handle case if texture exceeds max size
+// 		// handle case if texture exceeds max size
 
-		if ( image.width > maxSize || image.height > maxSize ) {
+// 		if ( image.width > maxSize || image.height > maxSize ) {
 
-			scale = maxSize / Math.max( image.width, image.height );
+// 			scale = maxSize / Math.max( image.width, image.height );
 
-		}
+// 		}
 
-		// only perform resize if necessary
+// 		// only perform resize if necessary
 
-		if ( scale < 1 || needsPowerOfTwo === true ) {
+// 		if ( scale < 1 || needsPowerOfTwo === true ) {
 
-			// only perform resize for certain image types
+// 			// only perform resize for certain image types
 
-			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
-				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
-				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
+// 			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
+// 				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
+// 				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
 
-				const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
+// 				const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
 
-				const width = floor( scale * image.width );
-				const height = floor( scale * image.height );
+// 				const width = floor( scale * image.width );
+// 				const height = floor( scale * image.height );
 
-				if ( _canvas === undefined ) _canvas = createCanvas( width, height );
+// 				if ( _canvas === undefined ) _canvas = createCanvas( width, height );
 
-				// cube textures can't reuse the same canvas
+// 				// cube textures can't reuse the same canvas
 
-				const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;
+// 				const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;
 
-				canvas.width = width;
-				canvas.height = height;
+// 				canvas.width = width;
+// 				canvas.height = height;
 
-				const context = canvas.getContext( '2d' );
-				context.drawImage( image, 0, 0, width, height );
+// 				const context = canvas.getContext( '2d' );
+// 				context.drawImage( image, 0, 0, width, height );
 
-				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );
+// 				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );
 
-				return canvas;
+// 				return canvas;
 
-			} else {
+// 			} else {
 
-				if ( 'data' in image ) {
+// 				if ( 'data' in image ) {
 
-					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );
+// 					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );
 
-				}
+// 				}
 
-				return image;
+// 				return image;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return image;
+// 		return image;
 
-	}
+// 	}
 
-	function isPowerOfTwo$1( image ) {
+// 	function isPowerOfTwo$1( image ) {
 
-		return isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );
+// 		return isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );
 
-	}
+// 	}
 
-	function textureNeedsPowerOfTwo( texture ) {
+// 	function textureNeedsPowerOfTwo( texture ) {
 
-		if ( isWebGL2 ) return false;
+// 		if ( isWebGL2 ) return false;
 
-		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
-			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );
+// 		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
+// 			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );
 
-	}
+// 	}
 
-	function textureNeedsGenerateMipmaps( texture, supportsMips ) {
+// 	function textureNeedsGenerateMipmaps( texture, supportsMips ) {
 
-		return texture.generateMipmaps && supportsMips &&
-			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
+// 		return texture.generateMipmaps && supportsMips &&
+// 			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
 
-	}
+// 	}
 
-	function generateMipmap( target ) {
+// 	function generateMipmap( target ) {
 
-		_gl.generateMipmap( target );
+// 		_gl.generateMipmap( target );
 
-	}
+// 	}
 
-	function getInternalFormat( internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false ) {
+// 	function getInternalFormat( internalFormatName, glFormat, glType, encoding, forceLinearEncoding = false ) {
 
-		if ( isWebGL2 === false ) return glFormat;
+// 		if ( isWebGL2 === false ) return glFormat;
 
-		if ( internalFormatName !== null ) {
+// 		if ( internalFormatName !== null ) {
 
-			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];
+// 			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];
 
-			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );
+// 			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );
 
-		}
+// 		}
 
-		let internalFormat = glFormat;
+// 		let internalFormat = glFormat;
 
-		if ( glFormat === 6403 ) {
+// 		if ( glFormat === 6403 ) {
 
-			if ( glType === 5126 ) internalFormat = 33326;
-			if ( glType === 5131 ) internalFormat = 33325;
-			if ( glType === 5121 ) internalFormat = 33321;
+// 			if ( glType === 5126 ) internalFormat = 33326;
+// 			if ( glType === 5131 ) internalFormat = 33325;
+// 			if ( glType === 5121 ) internalFormat = 33321;
 
-		}
+// 		}
 
-		if ( glFormat === 33319 ) {
+// 		if ( glFormat === 33319 ) {
 
-			if ( glType === 5126 ) internalFormat = 33328;
-			if ( glType === 5131 ) internalFormat = 33327;
-			if ( glType === 5121 ) internalFormat = 33323;
+// 			if ( glType === 5126 ) internalFormat = 33328;
+// 			if ( glType === 5131 ) internalFormat = 33327;
+// 			if ( glType === 5121 ) internalFormat = 33323;
 
-		}
+// 		}
 
-		if ( glFormat === 6408 ) {
+// 		if ( glFormat === 6408 ) {
 
-			if ( glType === 5126 ) internalFormat = 34836;
-			if ( glType === 5131 ) internalFormat = 34842;
-			if ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding && forceLinearEncoding === false ) ? 35907 : 32856;
-			if ( glType === 32819 ) internalFormat = 32854;
-			if ( glType === 32820 ) internalFormat = 32855;
+// 			if ( glType === 5126 ) internalFormat = 34836;
+// 			if ( glType === 5131 ) internalFormat = 34842;
+// 			if ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding && forceLinearEncoding === false ) ? 35907 : 32856;
+// 			if ( glType === 32819 ) internalFormat = 32854;
+// 			if ( glType === 32820 ) internalFormat = 32855;
 
-		}
+// 		}
 
-		if ( internalFormat === 33325 || internalFormat === 33326 ||
-			internalFormat === 33327 || internalFormat === 33328 ||
-			internalFormat === 34842 || internalFormat === 34836 ) {
+// 		if ( internalFormat === 33325 || internalFormat === 33326 ||
+// 			internalFormat === 33327 || internalFormat === 33328 ||
+// 			internalFormat === 34842 || internalFormat === 34836 ) {
 
-			extensions.get( 'EXT_color_buffer_float' );
+// 			extensions.get( 'EXT_color_buffer_float' );
 
-		}
+// 		}
 
-		return internalFormat;
+// 		return internalFormat;
 
-	}
+// 	}
 
-	function getMipLevels( texture, image, supportsMips ) {
+// 	function getMipLevels( texture, image, supportsMips ) {
 
-		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {
+// 		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {
 
-			return Math.log2( Math.max( image.width, image.height ) ) + 1;
+// 			return Math.log2( Math.max( image.width, image.height ) ) + 1;
 
-		} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {
+// 		} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {
 
-			// user-defined mipmaps
+// 			// user-defined mipmaps
 
-			return texture.mipmaps.length;
+// 			return texture.mipmaps.length;
 
-		} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {
+// 		} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {
 
-			return image.mipmaps.length;
+// 			return image.mipmaps.length;
 
-		} else {
+// 		} else {
 
-			// texture without mipmaps (only base level)
+// 			// texture without mipmaps (only base level)
 
-			return 1;
+// 			return 1;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// Fallback filters for non-power-of-2 textures
+// 	// Fallback filters for non-power-of-2 textures
 
-	function filterFallback( f ) {
+// 	function filterFallback( f ) {
 
-		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {
+// 		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {
 
-			return 9728;
+// 			return 9728;
 
-		}
+// 		}
 
-		return 9729;
+// 		return 9729;
 
-	}
+// 	}
 
-	//
+// 	//
 
-	function onTextureDispose( event ) {
+// 	function onTextureDispose( event ) {
 
-		const texture = event.target;
+// 		const texture = event.target;
 
-		texture.removeEventListener( 'dispose', onTextureDispose );
+// 		texture.removeEventListener( 'dispose', onTextureDispose );
 
-		deallocateTexture( texture );
+// 		deallocateTexture( texture );
 
-		if ( texture.isVideoTexture ) {
+// 		if ( texture.isVideoTexture ) {
 
-			_videoTextures.delete( texture );
+// 			_videoTextures.delete( texture );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function onRenderTargetDispose( event ) {
+// 	function onRenderTargetDispose( event ) {
 
-		const renderTarget = event.target;
+// 		const renderTarget = event.target;
 
-		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
+// 		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
 
-		deallocateRenderTarget( renderTarget );
+// 		deallocateRenderTarget( renderTarget );
 
-	}
+// 	}
 
-	//
+// 	//
 
-	function deallocateTexture( texture ) {
+// 	function deallocateTexture( texture ) {
 
-		const textureProperties = properties.get( texture );
+// 		const textureProperties = properties.get( texture );
 
-		if ( textureProperties.__webglInit === undefined ) return;
+// 		if ( textureProperties.__webglInit === undefined ) return;
 
-		// check if it's necessary to remove the WebGLTexture object
+// 		// check if it's necessary to remove the WebGLTexture object
 
-		const source = texture.source;
-		const webglTextures = _sources.get( source );
+// 		const source = texture.source;
+// 		const webglTextures = _sources.get( source );
 
-		if ( webglTextures ) {
+// 		if ( webglTextures ) {
 
-			const webglTexture = webglTextures[ textureProperties.__cacheKey ];
-			webglTexture.usedTimes --;
+// 			const webglTexture = webglTextures[ textureProperties.__cacheKey ];
+// 			webglTexture.usedTimes --;
 
-			// the WebGLTexture object is not used anymore, remove it
+// 			// the WebGLTexture object is not used anymore, remove it
 
-			if ( webglTexture.usedTimes === 0 ) {
+// 			if ( webglTexture.usedTimes === 0 ) {
 
-				deleteTexture( texture );
+// 				deleteTexture( texture );
 
-			}
+// 			}
 
-			// remove the weak map entry if no WebGLTexture uses the source anymore
+// 			// remove the weak map entry if no WebGLTexture uses the source anymore
 
-			if ( Object.keys( webglTextures ).length === 0 ) {
+// 			if ( Object.keys( webglTextures ).length === 0 ) {
 
-				_sources.delete( source );
+// 				_sources.delete( source );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		properties.remove( texture );
+// 		properties.remove( texture );
 
-	}
+// 	}
 
-	function deleteTexture( texture ) {
+// 	function deleteTexture( texture ) {
 
-		const textureProperties = properties.get( texture );
-		_gl.deleteTexture( textureProperties.__webglTexture );
+// 		const textureProperties = properties.get( texture );
+// 		_gl.deleteTexture( textureProperties.__webglTexture );
 
-		const source = texture.source;
-		const webglTextures = _sources.get( source );
-		delete webglTextures[ textureProperties.__cacheKey ];
+// 		const source = texture.source;
+// 		const webglTextures = _sources.get( source );
+// 		delete webglTextures[ textureProperties.__cacheKey ];
 
-		info.memory.textures --;
+// 		info.memory.textures --;
 
-	}
+// 	}
 
-	function deallocateRenderTarget( renderTarget ) {
+// 	function deallocateRenderTarget( renderTarget ) {
 
-		const texture = renderTarget.texture;
+// 		const texture = renderTarget.texture;
 
-		const renderTargetProperties = properties.get( renderTarget );
-		const textureProperties = properties.get( texture );
+// 		const renderTargetProperties = properties.get( renderTarget );
+// 		const textureProperties = properties.get( texture );
 
-		if ( textureProperties.__webglTexture !== undefined ) {
+// 		if ( textureProperties.__webglTexture !== undefined ) {
 
-			_gl.deleteTexture( textureProperties.__webglTexture );
+// 			_gl.deleteTexture( textureProperties.__webglTexture );
 
-			info.memory.textures --;
+// 			info.memory.textures --;
 
-		}
+// 		}
 
-		if ( renderTarget.depthTexture ) {
+// 		if ( renderTarget.depthTexture ) {
 
-			renderTarget.depthTexture.dispose();
+// 			renderTarget.depthTexture.dispose();
 
-		}
+// 		}
 
-		if ( renderTarget.isWebGLCubeRenderTarget ) {
+// 		if ( renderTarget.isWebGLCubeRenderTarget ) {
 
-			for ( let i = 0; i < 6; i ++ ) {
+// 			for ( let i = 0; i < 6; i ++ ) {
 
-				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
-				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );
+// 				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
+// 				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
-			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
-			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );
+// 			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
+// 			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
+// 			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );
 
-			if ( renderTargetProperties.__webglColorRenderbuffer ) {
+// 			if ( renderTargetProperties.__webglColorRenderbuffer ) {
 
-				for ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {
+// 				for ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {
 
-					if ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );
+// 					if ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );
+// 			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );
 
-		}
+// 		}
 
-		if ( renderTarget.isWebGLMultipleRenderTargets ) {
+// 		if ( renderTarget.isWebGLMultipleRenderTargets ) {
 
-			for ( let i = 0, il = texture.length; i < il; i ++ ) {
+// 			for ( let i = 0, il = texture.length; i < il; i ++ ) {
 
-				const attachmentProperties = properties.get( texture[ i ] );
+// 				const attachmentProperties = properties.get( texture[ i ] );
 
-				if ( attachmentProperties.__webglTexture ) {
+// 				if ( attachmentProperties.__webglTexture ) {
 
-					_gl.deleteTexture( attachmentProperties.__webglTexture );
+// 					_gl.deleteTexture( attachmentProperties.__webglTexture );
 
-					info.memory.textures --;
+// 					info.memory.textures --;
 
-				}
+// 				}
 
-				properties.remove( texture[ i ] );
+// 				properties.remove( texture[ i ] );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		properties.remove( texture );
-		properties.remove( renderTarget );
+// 		properties.remove( texture );
+// 		properties.remove( renderTarget );
 
-	}
+// 	}
 
-	//
+// 	//
 
-	let textureUnits = 0;
+// 	let textureUnits = 0;
 
-	function resetTextureUnits() {
+// 	function resetTextureUnits() {
 
-		textureUnits = 0;
+// 		textureUnits = 0;
 
-	}
+// 	}
 
-	function allocateTextureUnit() {
+// 	function allocateTextureUnit() {
 
-		const textureUnit = textureUnits;
+// 		const textureUnit = textureUnits;
 
-		if ( textureUnit >= maxTextures ) {
+// 		if ( textureUnit >= maxTextures ) {
 
-			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );
+// 			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );
 
-		}
+// 		}
 
-		textureUnits += 1;
+// 		textureUnits += 1;
 
-		return textureUnit;
+// 		return textureUnit;
 
-	}
+// 	}
 
-	function getTextureCacheKey( texture ) {
+// 	function getTextureCacheKey( texture ) {
 
-		const array = [];
+// 		const array = [];
 
-		array.push( texture.wrapS );
-		array.push( texture.wrapT );
-		array.push( texture.magFilter );
-		array.push( texture.minFilter );
-		array.push( texture.anisotropy );
-		array.push( texture.internalFormat );
-		array.push( texture.format );
-		array.push( texture.type );
-		array.push( texture.generateMipmaps );
-		array.push( texture.premultiplyAlpha );
-		array.push( texture.flipY );
-		array.push( texture.unpackAlignment );
-		array.push( texture.encoding );
+// 		array.push( texture.wrapS );
+// 		array.push( texture.wrapT );
+// 		array.push( texture.magFilter );
+// 		array.push( texture.minFilter );
+// 		array.push( texture.anisotropy );
+// 		array.push( texture.internalFormat );
+// 		array.push( texture.format );
+// 		array.push( texture.type );
+// 		array.push( texture.generateMipmaps );
+// 		array.push( texture.premultiplyAlpha );
+// 		array.push( texture.flipY );
+// 		array.push( texture.unpackAlignment );
+// 		array.push( texture.encoding );
 
-		return array.join();
+// 		return array.join();
 
-	}
+// 	}
 
-	//
+// 	//
 
-	function setTexture2D( texture, slot ) {
+// 	function setTexture2D( texture, slot ) {
 
-		const textureProperties = properties.get( texture );
+// 		const textureProperties = properties.get( texture );
 
-		if ( texture.isVideoTexture ) updateVideoTexture( texture );
+// 		if ( texture.isVideoTexture ) updateVideoTexture( texture );
 
-		if ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {
+// 		if ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {
 
-			const image = texture.image;
+// 			const image = texture.image;
 
-			if ( image === null ) {
+// 			if ( image === null ) {
 
-				console.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );
+// 				console.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );
 
-			} else if ( image.complete === false ) {
+// 			} else if ( image.complete === false ) {
 
-				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );
+// 				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );
 
-			} else {
+// 			} else {
 
-				uploadTexture( textureProperties, texture, slot );
-				return;
+// 				uploadTexture( textureProperties, texture, slot );
+// 				return;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		state.bindTexture( 3553, textureProperties.__webglTexture, 33984 + slot );
+// 		state.bindTexture( 3553, textureProperties.__webglTexture, 33984 + slot );
 
-	}
+// 	}
 
-	function setTexture2DArray( texture, slot ) {
+// 	function setTexture2DArray( texture, slot ) {
 
-		const textureProperties = properties.get( texture );
+// 		const textureProperties = properties.get( texture );
 
-		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
+// 		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
 
-			uploadTexture( textureProperties, texture, slot );
-			return;
+// 			uploadTexture( textureProperties, texture, slot );
+// 			return;
 
-		}
+// 		}
 
-		state.bindTexture( 35866, textureProperties.__webglTexture, 33984 + slot );
+// 		state.bindTexture( 35866, textureProperties.__webglTexture, 33984 + slot );
 
-	}
+// 	}
 
-	function setTexture3D( texture, slot ) {
+// 	function setTexture3D( texture, slot ) {
 
-		const textureProperties = properties.get( texture );
+// 		const textureProperties = properties.get( texture );
 
-		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
+// 		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
 
-			uploadTexture( textureProperties, texture, slot );
-			return;
+// 			uploadTexture( textureProperties, texture, slot );
+// 			return;
 
-		}
+// 		}
 
-		state.bindTexture( 32879, textureProperties.__webglTexture, 33984 + slot );
+// 		state.bindTexture( 32879, textureProperties.__webglTexture, 33984 + slot );
 
-	}
+// 	}
 
-	function setTextureCube( texture, slot ) {
+// 	function setTextureCube( texture, slot ) {
 
-		const textureProperties = properties.get( texture );
+// 		const textureProperties = properties.get( texture );
 
-		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
+// 		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
 
-			uploadCubeTexture( textureProperties, texture, slot );
-			return;
+// 			uploadCubeTexture( textureProperties, texture, slot );
+// 			return;
 
-		}
+// 		}
 
-		state.bindTexture( 34067, textureProperties.__webglTexture, 33984 + slot );
+// 		state.bindTexture( 34067, textureProperties.__webglTexture, 33984 + slot );
 
-	}
+// 	}
 
-	const wrappingToGL = {
-		[ RepeatWrapping ]: 10497,
-		[ ClampToEdgeWrapping ]: 33071,
-		[ MirroredRepeatWrapping ]: 33648
-	};
+// 	const wrappingToGL = {
+// 		[ RepeatWrapping ]: 10497,
+// 		[ ClampToEdgeWrapping ]: 33071,
+// 		[ MirroredRepeatWrapping ]: 33648
+// 	};
 
-	const filterToGL = {
-		[ NearestFilter ]: 9728,
-		[ NearestMipmapNearestFilter ]: 9984,
-		[ NearestMipmapLinearFilter ]: 9986,
+// 	const filterToGL = {
+// 		[ NearestFilter ]: 9728,
+// 		[ NearestMipmapNearestFilter ]: 9984,
+// 		[ NearestMipmapLinearFilter ]: 9986,
 
-		[ LinearFilter ]: 9729,
-		[ LinearMipmapNearestFilter ]: 9985,
-		[ LinearMipmapLinearFilter ]: 9987
-	};
+// 		[ LinearFilter ]: 9729,
+// 		[ LinearMipmapNearestFilter ]: 9985,
+// 		[ LinearMipmapLinearFilter ]: 9987
+// 	};
 
-	function setTextureParameters( textureType, texture, supportsMips ) {
+// 	function setTextureParameters( textureType, texture, supportsMips ) {
 
-		if ( supportsMips ) {
+// 		if ( supportsMips ) {
 
-			_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
-			_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );
+// 			_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
+// 			_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );
 
-			if ( textureType === 32879 || textureType === 35866 ) {
+// 			if ( textureType === 32879 || textureType === 35866 ) {
 
-				_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );
+// 				_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );
 
-			}
+// 			}
 
-			_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
-			_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );
+// 			_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
+// 			_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );
 
-		} else {
+// 		} else {
 
-			_gl.texParameteri( textureType, 10242, 33071 );
-			_gl.texParameteri( textureType, 10243, 33071 );
+// 			_gl.texParameteri( textureType, 10242, 33071 );
+// 			_gl.texParameteri( textureType, 10243, 33071 );
 
-			if ( textureType === 32879 || textureType === 35866 ) {
+// 			if ( textureType === 32879 || textureType === 35866 ) {
 
-				_gl.texParameteri( textureType, 32882, 33071 );
+// 				_gl.texParameteri( textureType, 32882, 33071 );
 
-			}
+// 			}
 
-			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {
+// 			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {
 
-				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );
+// 				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );
 
-			}
+// 			}
 
-			_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
-			_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );
+// 			_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
+// 			_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );
 
-			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {
+// 			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {
 
-				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );
+// 				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {
+// 		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {
 
-			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );
+// 			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );
 
-			if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2
-			if ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only
+// 			if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2
+// 			if ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only
 
-			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
+// 			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
 
-				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
-				properties.get( texture ).__currentAnisotropy = texture.anisotropy;
+// 				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
+// 				properties.get( texture ).__currentAnisotropy = texture.anisotropy;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function initTexture( textureProperties, texture ) {
+// 	function initTexture( textureProperties, texture ) {
 
-		let forceUpload = false;
+// 		let forceUpload = false;
 
-		if ( textureProperties.__webglInit === undefined ) {
+// 		if ( textureProperties.__webglInit === undefined ) {
 
-			textureProperties.__webglInit = true;
+// 			textureProperties.__webglInit = true;
 
-			texture.addEventListener( 'dispose', onTextureDispose );
+// 			texture.addEventListener( 'dispose', onTextureDispose );
 
-		}
+// 		}
 
-		// create Source <-> WebGLTextures mapping if necessary
+// 		// create Source <-> WebGLTextures mapping if necessary
 
-		const source = texture.source;
-		let webglTextures = _sources.get( source );
+// 		const source = texture.source;
+// 		let webglTextures = _sources.get( source );
 
-		if ( webglTextures === undefined ) {
+// 		if ( webglTextures === undefined ) {
 
-			webglTextures = {};
-			_sources.set( source, webglTextures );
+// 			webglTextures = {};
+// 			_sources.set( source, webglTextures );
 
-		}
+// 		}
 
-		// check if there is already a WebGLTexture object for the given texture parameters
+// 		// check if there is already a WebGLTexture object for the given texture parameters
 
-		const textureCacheKey = getTextureCacheKey( texture );
+// 		const textureCacheKey = getTextureCacheKey( texture );
 
-		if ( textureCacheKey !== textureProperties.__cacheKey ) {
+// 		if ( textureCacheKey !== textureProperties.__cacheKey ) {
 
-			// if not, create a new instance of WebGLTexture
+// 			// if not, create a new instance of WebGLTexture
 
-			if ( webglTextures[ textureCacheKey ] === undefined ) {
+// 			if ( webglTextures[ textureCacheKey ] === undefined ) {
 
-				// create new entry
+// 				// create new entry
 
-				webglTextures[ textureCacheKey ] = {
-					texture: _gl.createTexture(),
-					usedTimes: 0
-				};
+// 				webglTextures[ textureCacheKey ] = {
+// 					texture: _gl.createTexture(),
+// 					usedTimes: 0
+// 				};
 
-				info.memory.textures ++;
+// 				info.memory.textures ++;
 
-				// when a new instance of WebGLTexture was created, a texture upload is required
-				// even if the image contents are identical
+// 				// when a new instance of WebGLTexture was created, a texture upload is required
+// 				// even if the image contents are identical
 
-				forceUpload = true;
+// 				forceUpload = true;
 
-			}
+// 			}
 
-			webglTextures[ textureCacheKey ].usedTimes ++;
+// 			webglTextures[ textureCacheKey ].usedTimes ++;
 
-			// every time the texture cache key changes, it's necessary to check if an instance of
-			// WebGLTexture can be deleted in order to avoid a memory leak.
+// 			// every time the texture cache key changes, it's necessary to check if an instance of
+// 			// WebGLTexture can be deleted in order to avoid a memory leak.
 
-			const webglTexture = webglTextures[ textureProperties.__cacheKey ];
+// 			const webglTexture = webglTextures[ textureProperties.__cacheKey ];
 
-			if ( webglTexture !== undefined ) {
+// 			if ( webglTexture !== undefined ) {
 
-				webglTextures[ textureProperties.__cacheKey ].usedTimes --;
+// 				webglTextures[ textureProperties.__cacheKey ].usedTimes --;
 
-				if ( webglTexture.usedTimes === 0 ) {
+// 				if ( webglTexture.usedTimes === 0 ) {
 
-					deleteTexture( texture );
+// 					deleteTexture( texture );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// store references to cache key and WebGLTexture object
+// 			// store references to cache key and WebGLTexture object
 
-			textureProperties.__cacheKey = textureCacheKey;
-			textureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;
+// 			textureProperties.__cacheKey = textureCacheKey;
+// 			textureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;
 
-		}
+// 		}
 
-		return forceUpload;
+// 		return forceUpload;
 
-	}
+// 	}
 
-	function uploadTexture( textureProperties, texture, slot ) {
+// 	function uploadTexture( textureProperties, texture, slot ) {
 
-		let textureType = 3553;
+// 		let textureType = 3553;
 
-		if ( texture.isDataArrayTexture ) textureType = 35866;
-		if ( texture.isData3DTexture ) textureType = 32879;
+// 		if ( texture.isDataArrayTexture ) textureType = 35866;
+// 		if ( texture.isData3DTexture ) textureType = 32879;
 
-		const forceUpload = initTexture( textureProperties, texture );
-		const source = texture.source;
+// 		const forceUpload = initTexture( textureProperties, texture );
+// 		const source = texture.source;
 
-		state.bindTexture( textureType, textureProperties.__webglTexture, 33984 + slot );
+// 		state.bindTexture( textureType, textureProperties.__webglTexture, 33984 + slot );
 
-		const sourceProperties = properties.get( source );
+// 		const sourceProperties = properties.get( source );
 
-		if ( source.version !== sourceProperties.__version || forceUpload === true ) {
+// 		if ( source.version !== sourceProperties.__version || forceUpload === true ) {
 
-			state.activeTexture( 33984 + slot );
+// 			state.activeTexture( 33984 + slot );
 
-			_gl.pixelStorei( 37440, texture.flipY );
-			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
-			_gl.pixelStorei( 3317, texture.unpackAlignment );
-			_gl.pixelStorei( 37443, 0 );
+// 			_gl.pixelStorei( 37440, texture.flipY );
+// 			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
+// 			_gl.pixelStorei( 3317, texture.unpackAlignment );
+// 			_gl.pixelStorei( 37443, 0 );
 
-			const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;
-			let image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );
-			image = verifyColorSpace( texture, image );
+// 			const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;
+// 			let image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );
+// 			image = verifyColorSpace( texture, image );
 
-			const supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
-				glFormat = utils.convert( texture.format, texture.encoding );
+// 			const supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
+// 				glFormat = utils.convert( texture.format, texture.encoding );
 
-			let glType = utils.convert( texture.type ),
-				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture );
+// 			let glType = utils.convert( texture.type ),
+// 				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, texture.isVideoTexture );
 
-			setTextureParameters( textureType, texture, supportsMips );
+// 			setTextureParameters( textureType, texture, supportsMips );
 
-			let mipmap;
-			const mipmaps = texture.mipmaps;
+// 			let mipmap;
+// 			const mipmaps = texture.mipmaps;
 
-			const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
-			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
-			const levels = getMipLevels( texture, image, supportsMips );
+// 			const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
+// 			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
+// 			const levels = getMipLevels( texture, image, supportsMips );
 
-			if ( texture.isDepthTexture ) {
+// 			if ( texture.isDepthTexture ) {
 
-				// populate depth texture with dummy data
+// 				// populate depth texture with dummy data
 
-				glInternalFormat = 6402;
+// 				glInternalFormat = 6402;
 
-				if ( isWebGL2 ) {
+// 				if ( isWebGL2 ) {
 
-					if ( texture.type === FloatType ) {
+// 					if ( texture.type === FloatType ) {
 
-						glInternalFormat = 36012;
+// 						glInternalFormat = 36012;
 
-					} else if ( texture.type === UnsignedIntType ) {
+// 					} else if ( texture.type === UnsignedIntType ) {
 
-						glInternalFormat = 33190;
+// 						glInternalFormat = 33190;
 
-					} else if ( texture.type === UnsignedInt248Type ) {
+// 					} else if ( texture.type === UnsignedInt248Type ) {
 
-						glInternalFormat = 35056;
+// 						glInternalFormat = 35056;
 
-					} else {
+// 					} else {
 
-						glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D
+// 						glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					if ( texture.type === FloatType ) {
+// 					if ( texture.type === FloatType ) {
 
-						console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );
+// 						console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );
 
-					}
+// 					}
 
-				}
+// 				}
 
-				// validation checks for WebGL 1
+// 				// validation checks for WebGL 1
 
-				if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {
+// 				if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {
 
-					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
-					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
-					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
-					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {
+// 					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
+// 					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
+// 					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
+// 					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {
 
-						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );
+// 						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );
 
-						texture.type = UnsignedIntType;
-						glType = utils.convert( texture.type );
+// 						texture.type = UnsignedIntType;
+// 						glType = utils.convert( texture.type );
 
-					}
+// 					}
 
-				}
+// 				}
 
-				if ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {
+// 				if ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {
 
-					// Depth stencil textures need the DEPTH_STENCIL internal format
-					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
-					glInternalFormat = 34041;
+// 					// Depth stencil textures need the DEPTH_STENCIL internal format
+// 					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
+// 					glInternalFormat = 34041;
 
-					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
-					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
-					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
-					if ( texture.type !== UnsignedInt248Type ) {
+// 					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
+// 					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
+// 					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
+// 					if ( texture.type !== UnsignedInt248Type ) {
 
-						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );
+// 						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );
 
-						texture.type = UnsignedInt248Type;
-						glType = utils.convert( texture.type );
+// 						texture.type = UnsignedInt248Type;
+// 						glType = utils.convert( texture.type );
 
-					}
+// 					}
 
-				}
+// 				}
 
-				//
+// 				//
 
-				if ( allocateMemory ) {
+// 				if ( allocateMemory ) {
 
-					if ( useTexStorage ) {
+// 					if ( useTexStorage ) {
 
-						state.texStorage2D( 3553, 1, glInternalFormat, image.width, image.height );
+// 						state.texStorage2D( 3553, 1, glInternalFormat, image.width, image.height );
 
-					} else {
+// 					} else {
 
-						state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );
+// 						state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else if ( texture.isDataTexture ) {
+// 			} else if ( texture.isDataTexture ) {
 
-				// use manually created mipmaps if available
-				// if there are no manual mipmaps
-				// set 0 level mipmap and then use GL to generate other mipmap levels
+// 				// use manually created mipmaps if available
+// 				// if there are no manual mipmaps
+// 				// set 0 level mipmap and then use GL to generate other mipmap levels
 
-				if ( mipmaps.length > 0 && supportsMips ) {
+// 				if ( mipmaps.length > 0 && supportsMips ) {
 
-					if ( useTexStorage && allocateMemory ) {
+// 					if ( useTexStorage && allocateMemory ) {
 
-						state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );
+// 						state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );
 
-					}
+// 					}
 
-					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {
+// 					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {
 
-						mipmap = mipmaps[ i ];
+// 						mipmap = mipmaps[ i ];
 
-						if ( useTexStorage ) {
+// 						if ( useTexStorage ) {
 
-							state.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );
+// 							state.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );
 
-						} else {
+// 						} else {
 
-							state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
+// 							state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
 
-						}
+// 						}
 
-					}
+// 					}
 
-					texture.generateMipmaps = false;
+// 					texture.generateMipmaps = false;
 
-				} else {
+// 				} else {
 
-					if ( useTexStorage ) {
+// 					if ( useTexStorage ) {
 
-						if ( allocateMemory ) {
+// 						if ( allocateMemory ) {
 
-							state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );
+// 							state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );
 
-						}
+// 						}
 
-						state.texSubImage2D( 3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );
+// 						state.texSubImage2D( 3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );
 
-					} else {
+// 					} else {
 
-						state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
+// 						state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else if ( texture.isCompressedTexture ) {
+// 			} else if ( texture.isCompressedTexture ) {
 
-				if ( useTexStorage && allocateMemory ) {
+// 				if ( useTexStorage && allocateMemory ) {
 
-					state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );
+// 					state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );
 
-				}
+// 				}
 
-				for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {
 
-					mipmap = mipmaps[ i ];
+// 					mipmap = mipmaps[ i ];
 
-					if ( texture.format !== RGBAFormat ) {
+// 					if ( texture.format !== RGBAFormat ) {
 
-						if ( glFormat !== null ) {
+// 						if ( glFormat !== null ) {
 
-							if ( useTexStorage ) {
+// 							if ( useTexStorage ) {
 
-								state.compressedTexSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );
+// 								state.compressedTexSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );
 
-							} else {
+// 							} else {
 
-								state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
+// 								state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
 
-							}
+// 							}
 
-						} else {
+// 						} else {
 
-							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );
+// 							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );
 
-						}
+// 						}
 
-					} else {
+// 					} else {
 
-						if ( useTexStorage ) {
+// 						if ( useTexStorage ) {
 
-							state.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );
+// 							state.texSubImage2D( 3553, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );
 
-						} else {
+// 						} else {
 
-							state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
+// 							state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else if ( texture.isDataArrayTexture ) {
+// 			} else if ( texture.isDataArrayTexture ) {
 
-				if ( useTexStorage ) {
+// 				if ( useTexStorage ) {
 
-					if ( allocateMemory ) {
+// 					if ( allocateMemory ) {
 
-						state.texStorage3D( 35866, levels, glInternalFormat, image.width, image.height, image.depth );
+// 						state.texStorage3D( 35866, levels, glInternalFormat, image.width, image.height, image.depth );
 
-					}
+// 					}
 
-					state.texSubImage3D( 35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );
+// 					state.texSubImage3D( 35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );
 
-				} else {
+// 				} else {
 
-					state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
+// 					state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
 
-				}
+// 				}
 
-			} else if ( texture.isData3DTexture ) {
+// 			} else if ( texture.isData3DTexture ) {
 
-				if ( useTexStorage ) {
+// 				if ( useTexStorage ) {
 
-					if ( allocateMemory ) {
+// 					if ( allocateMemory ) {
 
-						state.texStorage3D( 32879, levels, glInternalFormat, image.width, image.height, image.depth );
+// 						state.texStorage3D( 32879, levels, glInternalFormat, image.width, image.height, image.depth );
 
-					}
+// 					}
 
-					state.texSubImage3D( 32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );
+// 					state.texSubImage3D( 32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );
 
-				} else {
+// 				} else {
 
-					state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
+// 					state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
 
-				}
+// 				}
 
-			} else if ( texture.isFramebufferTexture ) {
+// 			} else if ( texture.isFramebufferTexture ) {
 
-				if ( allocateMemory ) {
+// 				if ( allocateMemory ) {
 
-					if ( useTexStorage ) {
+// 					if ( useTexStorage ) {
 
-						state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );
+// 						state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );
 
-					} else {
+// 					} else {
 
-						let width = image.width, height = image.height;
+// 						let width = image.width, height = image.height;
 
-						for ( let i = 0; i < levels; i ++ ) {
+// 						for ( let i = 0; i < levels; i ++ ) {
 
-							state.texImage2D( 3553, i, glInternalFormat, width, height, 0, glFormat, glType, null );
+// 							state.texImage2D( 3553, i, glInternalFormat, width, height, 0, glFormat, glType, null );
 
-							width >>= 1;
-							height >>= 1;
+// 							width >>= 1;
+// 							height >>= 1;
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				// regular Texture (image, video, canvas)
+// 				// regular Texture (image, video, canvas)
 
-				// use manually created mipmaps if available
-				// if there are no manual mipmaps
-				// set 0 level mipmap and then use GL to generate other mipmap levels
+// 				// use manually created mipmaps if available
+// 				// if there are no manual mipmaps
+// 				// set 0 level mipmap and then use GL to generate other mipmap levels
 
-				if ( mipmaps.length > 0 && supportsMips ) {
+// 				if ( mipmaps.length > 0 && supportsMips ) {
 
-					if ( useTexStorage && allocateMemory ) {
+// 					if ( useTexStorage && allocateMemory ) {
 
-						state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );
+// 						state.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );
 
-					}
+// 					}
 
-					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {
+// 					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {
 
-						mipmap = mipmaps[ i ];
+// 						mipmap = mipmaps[ i ];
 
-						if ( useTexStorage ) {
+// 						if ( useTexStorage ) {
 
-							state.texSubImage2D( 3553, i, 0, 0, glFormat, glType, mipmap );
+// 							state.texSubImage2D( 3553, i, 0, 0, glFormat, glType, mipmap );
 
-						} else {
+// 						} else {
 
-							state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );
+// 							state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );
 
-						}
+// 						}
 
-					}
+// 					}
 
-					texture.generateMipmaps = false;
+// 					texture.generateMipmaps = false;
 
-				} else {
+// 				} else {
 
-					if ( useTexStorage ) {
+// 					if ( useTexStorage ) {
 
-						if ( allocateMemory ) {
+// 						if ( allocateMemory ) {
 
-							state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );
+// 							state.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );
 
-						}
+// 						}
 
-						state.texSubImage2D( 3553, 0, 0, 0, glFormat, glType, image );
+// 						state.texSubImage2D( 3553, 0, 0, 0, glFormat, glType, image );
 
-					} else {
+// 					} else {
 
-						state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
+// 						state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
+// 			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
 
-				generateMipmap( textureType );
+// 				generateMipmap( textureType );
 
-			}
+// 			}
 
-			sourceProperties.__version = source.version;
+// 			sourceProperties.__version = source.version;
 
-			if ( texture.onUpdate ) texture.onUpdate( texture );
+// 			if ( texture.onUpdate ) texture.onUpdate( texture );
 
-		}
+// 		}
 
-		textureProperties.__version = texture.version;
+// 		textureProperties.__version = texture.version;
 
-	}
+// 	}
 
-	function uploadCubeTexture( textureProperties, texture, slot ) {
+// 	function uploadCubeTexture( textureProperties, texture, slot ) {
 
-		if ( texture.image.length !== 6 ) return;
+// 		if ( texture.image.length !== 6 ) return;
 
-		const forceUpload = initTexture( textureProperties, texture );
-		const source = texture.source;
+// 		const forceUpload = initTexture( textureProperties, texture );
+// 		const source = texture.source;
 
-		state.bindTexture( 34067, textureProperties.__webglTexture, 33984 + slot );
+// 		state.bindTexture( 34067, textureProperties.__webglTexture, 33984 + slot );
 
-		const sourceProperties = properties.get( source );
+// 		const sourceProperties = properties.get( source );
 
-		if ( source.version !== sourceProperties.__version || forceUpload === true ) {
+// 		if ( source.version !== sourceProperties.__version || forceUpload === true ) {
 
-			state.activeTexture( 33984 + slot );
+// 			state.activeTexture( 33984 + slot );
 
-			_gl.pixelStorei( 37440, texture.flipY );
-			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
-			_gl.pixelStorei( 3317, texture.unpackAlignment );
-			_gl.pixelStorei( 37443, 0 );
+// 			_gl.pixelStorei( 37440, texture.flipY );
+// 			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
+// 			_gl.pixelStorei( 3317, texture.unpackAlignment );
+// 			_gl.pixelStorei( 37443, 0 );
 
-			const isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );
-			const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );
+// 			const isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );
+// 			const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );
 
-			const cubeImage = [];
+// 			const cubeImage = [];
 
-			for ( let i = 0; i < 6; i ++ ) {
+// 			for ( let i = 0; i < 6; i ++ ) {
 
-				if ( ! isCompressed && ! isDataTexture ) {
+// 				if ( ! isCompressed && ! isDataTexture ) {
 
-					cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );
+// 					cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );
 
-				} else {
+// 				} else {
 
-					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
+// 					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
 
-				}
+// 				}
 
-				cubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );
+// 				cubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );
 
-			}
+// 			}
 
-			const image = cubeImage[ 0 ],
-				supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
-				glFormat = utils.convert( texture.format, texture.encoding ),
-				glType = utils.convert( texture.type ),
-				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
+// 			const image = cubeImage[ 0 ],
+// 				supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
+// 				glFormat = utils.convert( texture.format, texture.encoding ),
+// 				glType = utils.convert( texture.type ),
+// 				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
 
-			const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
-			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
-			let levels = getMipLevels( texture, image, supportsMips );
+// 			const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
+// 			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
+// 			let levels = getMipLevels( texture, image, supportsMips );
 
-			setTextureParameters( 34067, texture, supportsMips );
+// 			setTextureParameters( 34067, texture, supportsMips );
 
-			let mipmaps;
+// 			let mipmaps;
 
-			if ( isCompressed ) {
+// 			if ( isCompressed ) {
 
-				if ( useTexStorage && allocateMemory ) {
+// 				if ( useTexStorage && allocateMemory ) {
 
-					state.texStorage2D( 34067, levels, glInternalFormat, image.width, image.height );
+// 					state.texStorage2D( 34067, levels, glInternalFormat, image.width, image.height );
 
-				}
+// 				}
 
-				for ( let i = 0; i < 6; i ++ ) {
+// 				for ( let i = 0; i < 6; i ++ ) {
 
-					mipmaps = cubeImage[ i ].mipmaps;
+// 					mipmaps = cubeImage[ i ].mipmaps;
 
-					for ( let j = 0; j < mipmaps.length; j ++ ) {
+// 					for ( let j = 0; j < mipmaps.length; j ++ ) {
 
-						const mipmap = mipmaps[ j ];
+// 						const mipmap = mipmaps[ j ];
 
-						if ( texture.format !== RGBAFormat ) {
+// 						if ( texture.format !== RGBAFormat ) {
 
-							if ( glFormat !== null ) {
+// 							if ( glFormat !== null ) {
 
-								if ( useTexStorage ) {
+// 								if ( useTexStorage ) {
 
-									state.compressedTexSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );
+// 									state.compressedTexSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );
 
-								} else {
+// 								} else {
 
-									state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
+// 									state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
 
-								}
+// 								}
 
-							} else {
+// 							} else {
 
-								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );
+// 								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );
 
-							}
+// 							}
 
-						} else {
+// 						} else {
 
-							if ( useTexStorage ) {
+// 							if ( useTexStorage ) {
 
-								state.texSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );
+// 								state.texSubImage2D( 34069 + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );
 
-							} else {
+// 							} else {
 
-								state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
+// 								state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
 
-							}
+// 							}
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				mipmaps = texture.mipmaps;
+// 				mipmaps = texture.mipmaps;
 
-				if ( useTexStorage && allocateMemory ) {
+// 				if ( useTexStorage && allocateMemory ) {
 
-					// TODO: Uniformly handle mipmap definitions
-					// Normal textures and compressed cube textures define base level + mips with their mipmap array
-					// Uncompressed cube textures use their mipmap array only for mips (no base level)
+// 					// TODO: Uniformly handle mipmap definitions
+// 					// Normal textures and compressed cube textures define base level + mips with their mipmap array
+// 					// Uncompressed cube textures use their mipmap array only for mips (no base level)
 
-					if ( mipmaps.length > 0 ) levels ++;
+// 					if ( mipmaps.length > 0 ) levels ++;
 
-					state.texStorage2D( 34067, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );
+// 					state.texStorage2D( 34067, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );
 
-				}
+// 				}
 
-				for ( let i = 0; i < 6; i ++ ) {
+// 				for ( let i = 0; i < 6; i ++ ) {
 
-					if ( isDataTexture ) {
+// 					if ( isDataTexture ) {
 
-						if ( useTexStorage ) {
+// 						if ( useTexStorage ) {
 
-							state.texSubImage2D( 34069 + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );
+// 							state.texSubImage2D( 34069 + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );
 
-						} else {
+// 						} else {
 
-							state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
+// 							state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
 
-						}
+// 						}
 
-						for ( let j = 0; j < mipmaps.length; j ++ ) {
+// 						for ( let j = 0; j < mipmaps.length; j ++ ) {
 
-							const mipmap = mipmaps[ j ];
-							const mipmapImage = mipmap.image[ i ].image;
+// 							const mipmap = mipmaps[ j ];
+// 							const mipmapImage = mipmap.image[ i ].image;
 
-							if ( useTexStorage ) {
+// 							if ( useTexStorage ) {
 
-								state.texSubImage2D( 34069 + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );
+// 								state.texSubImage2D( 34069 + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );
 
-							} else {
+// 							} else {
 
-								state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );
+// 								state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );
 
-							}
+// 							}
 
-						}
+// 						}
 
-					} else {
+// 					} else {
 
-						if ( useTexStorage ) {
+// 						if ( useTexStorage ) {
 
-							state.texSubImage2D( 34069 + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );
+// 							state.texSubImage2D( 34069 + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );
 
-						} else {
+// 						} else {
 
-							state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );
+// 							state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );
 
-						}
+// 						}
 
-						for ( let j = 0; j < mipmaps.length; j ++ ) {
+// 						for ( let j = 0; j < mipmaps.length; j ++ ) {
 
-							const mipmap = mipmaps[ j ];
+// 							const mipmap = mipmaps[ j ];
 
-							if ( useTexStorage ) {
+// 							if ( useTexStorage ) {
 
-								state.texSubImage2D( 34069 + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );
+// 								state.texSubImage2D( 34069 + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );
 
-							} else {
+// 							} else {
 
-								state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );
+// 								state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );
 
-							}
+// 							}
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
+// 			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
 
-				// We assume images for cube map have the same size.
-				generateMipmap( 34067 );
+// 				// We assume images for cube map have the same size.
+// 				generateMipmap( 34067 );
 
-			}
+// 			}
 
-			sourceProperties.__version = source.version;
+// 			sourceProperties.__version = source.version;
 
-			if ( texture.onUpdate ) texture.onUpdate( texture );
+// 			if ( texture.onUpdate ) texture.onUpdate( texture );
 
-		}
+// 		}
 
-		textureProperties.__version = texture.version;
+// 		textureProperties.__version = texture.version;
 
-	}
+// 	}
 
-	// Render targets
+// 	// Render targets
 
-	// Setup storage for target texture and bind it to correct framebuffer
-	function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {
+// 	// Setup storage for target texture and bind it to correct framebuffer
+// 	function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {
 
-		const glFormat = utils.convert( texture.format, texture.encoding );
-		const glType = utils.convert( texture.type );
-		const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
-		const renderTargetProperties = properties.get( renderTarget );
+// 		const glFormat = utils.convert( texture.format, texture.encoding );
+// 		const glType = utils.convert( texture.type );
+// 		const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
+// 		const renderTargetProperties = properties.get( renderTarget );
 
-		if ( ! renderTargetProperties.__hasExternalTextures ) {
+// 		if ( ! renderTargetProperties.__hasExternalTextures ) {
 
-			if ( textureTarget === 32879 || textureTarget === 35866 ) {
+// 			if ( textureTarget === 32879 || textureTarget === 35866 ) {
 
-				state.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );
+// 				state.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );
 
-			} else {
+// 			} else {
 
-				state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
+// 				state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		state.bindFramebuffer( 36160, framebuffer );
+// 		state.bindFramebuffer( 36160, framebuffer );
 
-		if ( useMultisampledRTT( renderTarget ) ) {
+// 		if ( useMultisampledRTT( renderTarget ) ) {
 
-			multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );
+// 			multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );
 
-		} else {
+// 		} else {
 
-			_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );
+// 			_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );
 
-		}
+// 		}
 
-		state.bindFramebuffer( 36160, null );
+// 		state.bindFramebuffer( 36160, null );
 
-	}
+// 	}
 
 
-	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
-	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {
+// 	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
+// 	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {
 
-		_gl.bindRenderbuffer( 36161, renderbuffer );
+// 		_gl.bindRenderbuffer( 36161, renderbuffer );
 
-		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
+// 		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
 
-			let glInternalFormat = 33189;
+// 			let glInternalFormat = 33189;
 
-			if ( isMultisample || useMultisampledRTT( renderTarget ) ) {
+// 			if ( isMultisample || useMultisampledRTT( renderTarget ) ) {
 
-				const depthTexture = renderTarget.depthTexture;
+// 				const depthTexture = renderTarget.depthTexture;
 
-				if ( depthTexture && depthTexture.isDepthTexture ) {
+// 				if ( depthTexture && depthTexture.isDepthTexture ) {
 
-					if ( depthTexture.type === FloatType ) {
+// 					if ( depthTexture.type === FloatType ) {
 
-						glInternalFormat = 36012;
+// 						glInternalFormat = 36012;
 
-					} else if ( depthTexture.type === UnsignedIntType ) {
+// 					} else if ( depthTexture.type === UnsignedIntType ) {
 
-						glInternalFormat = 33190;
+// 						glInternalFormat = 33190;
 
-					}
+// 					}
 
-				}
+// 				}
 
-				const samples = getRenderTargetSamples( renderTarget );
+// 				const samples = getRenderTargetSamples( renderTarget );
 
-				if ( useMultisampledRTT( renderTarget ) ) {
+// 				if ( useMultisampledRTT( renderTarget ) ) {
 
-					multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
+// 					multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
 
-				} else {
+// 				} else {
 
-					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
+// 					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );
+// 				_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );
 
-			}
+// 			}
 
-			_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );
+// 			_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );
 
-		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
+// 		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
 
-			const samples = getRenderTargetSamples( renderTarget );
+// 			const samples = getRenderTargetSamples( renderTarget );
 
-			if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {
+// 			if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {
 
-				_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );
+// 				_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );
 
-			} else if ( useMultisampledRTT( renderTarget ) ) {
+// 			} else if ( useMultisampledRTT( renderTarget ) ) {
 
-				multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, 35056, renderTarget.width, renderTarget.height );
+// 				multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, 35056, renderTarget.width, renderTarget.height );
 
-			} else {
+// 			} else {
 
-				_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );
+// 				_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );
 
-			}
+// 			}
 
 
-			_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );
+// 			_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );
 
-		} else {
+// 		} else {
 
-			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];
+// 			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];
 
-			for ( let i = 0; i < textures.length; i ++ ) {
+// 			for ( let i = 0; i < textures.length; i ++ ) {
 
-				const texture = textures[ i ];
+// 				const texture = textures[ i ];
 
-				const glFormat = utils.convert( texture.format, texture.encoding );
-				const glType = utils.convert( texture.type );
-				const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
-				const samples = getRenderTargetSamples( renderTarget );
+// 				const glFormat = utils.convert( texture.format, texture.encoding );
+// 				const glType = utils.convert( texture.type );
+// 				const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );
+// 				const samples = getRenderTargetSamples( renderTarget );
 
-				if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {
+// 				if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {
 
-					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
+// 					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
 
-				} else if ( useMultisampledRTT( renderTarget ) ) {
+// 				} else if ( useMultisampledRTT( renderTarget ) ) {
 
-					multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
+// 					multisampledRTTExt.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
 
-				} else {
+// 				} else {
 
-					_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );
+// 					_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		_gl.bindRenderbuffer( 36161, null );
+// 		_gl.bindRenderbuffer( 36161, null );
 
-	}
+// 	}
 
-	// Setup resources for a Depth Texture for a FBO (needs an extension)
-	function setupDepthTexture( framebuffer, renderTarget ) {
+// 	// Setup resources for a Depth Texture for a FBO (needs an extension)
+// 	function setupDepthTexture( framebuffer, renderTarget ) {
 
-		const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
-		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );
+// 		const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
+// 		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );
 
-		state.bindFramebuffer( 36160, framebuffer );
+// 		state.bindFramebuffer( 36160, framebuffer );
 
-		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {
+// 		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {
 
-			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );
+// 			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );
 
-		}
+// 		}
 
-		// upload an empty depth texture with framebuffer size
-		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
-				renderTarget.depthTexture.image.width !== renderTarget.width ||
-				renderTarget.depthTexture.image.height !== renderTarget.height ) {
+// 		// upload an empty depth texture with framebuffer size
+// 		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
+// 				renderTarget.depthTexture.image.width !== renderTarget.width ||
+// 				renderTarget.depthTexture.image.height !== renderTarget.height ) {
 
-			renderTarget.depthTexture.image.width = renderTarget.width;
-			renderTarget.depthTexture.image.height = renderTarget.height;
-			renderTarget.depthTexture.needsUpdate = true;
+// 			renderTarget.depthTexture.image.width = renderTarget.width;
+// 			renderTarget.depthTexture.image.height = renderTarget.height;
+// 			renderTarget.depthTexture.needsUpdate = true;
 
-		}
+// 		}
 
-		setTexture2D( renderTarget.depthTexture, 0 );
+// 		setTexture2D( renderTarget.depthTexture, 0 );
 
-		const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
-		const samples = getRenderTargetSamples( renderTarget );
+// 		const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
+// 		const samples = getRenderTargetSamples( renderTarget );
 
-		if ( renderTarget.depthTexture.format === DepthFormat ) {
+// 		if ( renderTarget.depthTexture.format === DepthFormat ) {
 
-			if ( useMultisampledRTT( renderTarget ) ) {
+// 			if ( useMultisampledRTT( renderTarget ) ) {
 
-				multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 36096, 3553, webglDepthTexture, 0, samples );
+// 				multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 36096, 3553, webglDepthTexture, 0, samples );
 
-			} else {
+// 			} else {
 
-				_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );
+// 				_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );
 
-			}
+// 			}
 
-		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {
+// 		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {
 
-			if ( useMultisampledRTT( renderTarget ) ) {
+// 			if ( useMultisampledRTT( renderTarget ) ) {
 
-				multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 33306, 3553, webglDepthTexture, 0, samples );
+// 				multisampledRTTExt.framebufferTexture2DMultisampleEXT( 36160, 33306, 3553, webglDepthTexture, 0, samples );
 
-			} else {
+// 			} else {
 
-				_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );
+// 				_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			throw new Error( 'Unknown depthTexture format' );
+// 			throw new Error( 'Unknown depthTexture format' );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// Setup GL resources for a non-texture depth buffer
-	function setupDepthRenderbuffer( renderTarget ) {
+// 	// Setup GL resources for a non-texture depth buffer
+// 	function setupDepthRenderbuffer( renderTarget ) {
 
-		const renderTargetProperties = properties.get( renderTarget );
-		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
+// 		const renderTargetProperties = properties.get( renderTarget );
+// 		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
 
-		if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {
+// 		if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {
 
-			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );
+// 			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );
 
-			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );
+// 			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );
 
-		} else {
+// 		} else {
 
-			if ( isCube ) {
+// 			if ( isCube ) {
 
-				renderTargetProperties.__webglDepthbuffer = [];
+// 				renderTargetProperties.__webglDepthbuffer = [];
 
-				for ( let i = 0; i < 6; i ++ ) {
+// 				for ( let i = 0; i < 6; i ++ ) {
 
-					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
-					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
-					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );
+// 					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
+// 					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
+// 					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
-				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
-				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );
+// 				state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
+// 				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
+// 				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		state.bindFramebuffer( 36160, null );
+// 		state.bindFramebuffer( 36160, null );
 
-	}
+// 	}
 
-	// rebind framebuffer with external textures
-	function rebindTextures( renderTarget, colorTexture, depthTexture ) {
+// 	// rebind framebuffer with external textures
+// 	function rebindTextures( renderTarget, colorTexture, depthTexture ) {
 
-		const renderTargetProperties = properties.get( renderTarget );
+// 		const renderTargetProperties = properties.get( renderTarget );
 
-		if ( colorTexture !== undefined ) {
+// 		if ( colorTexture !== undefined ) {
 
-			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553 );
+// 			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553 );
 
-		}
+// 		}
 
-		if ( depthTexture !== undefined ) {
+// 		if ( depthTexture !== undefined ) {
 
-			setupDepthRenderbuffer( renderTarget );
+// 			setupDepthRenderbuffer( renderTarget );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// Set up GL resources for the render target
-	function setupRenderTarget( renderTarget ) {
+// 	// Set up GL resources for the render target
+// 	function setupRenderTarget( renderTarget ) {
 
-		const texture = renderTarget.texture;
+// 		const texture = renderTarget.texture;
 
-		const renderTargetProperties = properties.get( renderTarget );
-		const textureProperties = properties.get( texture );
+// 		const renderTargetProperties = properties.get( renderTarget );
+// 		const textureProperties = properties.get( texture );
 
-		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
+// 		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
 
-		if ( renderTarget.isWebGLMultipleRenderTargets !== true ) {
+// 		if ( renderTarget.isWebGLMultipleRenderTargets !== true ) {
 
-			if ( textureProperties.__webglTexture === undefined ) {
+// 			if ( textureProperties.__webglTexture === undefined ) {
 
-				textureProperties.__webglTexture = _gl.createTexture();
+// 				textureProperties.__webglTexture = _gl.createTexture();
 
-			}
+// 			}
 
-			textureProperties.__version = texture.version;
-			info.memory.textures ++;
+// 			textureProperties.__version = texture.version;
+// 			info.memory.textures ++;
 
-		}
+// 		}
 
-		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
-		const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );
-		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;
+// 		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
+// 		const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );
+// 		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;
 
-		// Setup framebuffer
+// 		// Setup framebuffer
 
-		if ( isCube ) {
+// 		if ( isCube ) {
 
-			renderTargetProperties.__webglFramebuffer = [];
+// 			renderTargetProperties.__webglFramebuffer = [];
 
-			for ( let i = 0; i < 6; i ++ ) {
+// 			for ( let i = 0; i < 6; i ++ ) {
 
-				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
+// 				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
+// 			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
 
-			if ( isMultipleRenderTargets ) {
+// 			if ( isMultipleRenderTargets ) {
 
-				if ( capabilities.drawBuffers ) {
+// 				if ( capabilities.drawBuffers ) {
 
-					const textures = renderTarget.texture;
+// 					const textures = renderTarget.texture;
 
-					for ( let i = 0, il = textures.length; i < il; i ++ ) {
+// 					for ( let i = 0, il = textures.length; i < il; i ++ ) {
 
-						const attachmentProperties = properties.get( textures[ i ] );
+// 						const attachmentProperties = properties.get( textures[ i ] );
 
-						if ( attachmentProperties.__webglTexture === undefined ) {
+// 						if ( attachmentProperties.__webglTexture === undefined ) {
 
-							attachmentProperties.__webglTexture = _gl.createTexture();
+// 							attachmentProperties.__webglTexture = _gl.createTexture();
 
-							info.memory.textures ++;
+// 							info.memory.textures ++;
 
-						}
+// 						}
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					console.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );
+// 					console.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {
+// 			if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {
 
-				const textures = isMultipleRenderTargets ? texture : [ texture ];
+// 				const textures = isMultipleRenderTargets ? texture : [ texture ];
 
-				renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
-				renderTargetProperties.__webglColorRenderbuffer = [];
+// 				renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
+// 				renderTargetProperties.__webglColorRenderbuffer = [];
 
-				state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
+// 				state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
 
-				for ( let i = 0; i < textures.length; i ++ ) {
+// 				for ( let i = 0; i < textures.length; i ++ ) {
 
-					const texture = textures[ i ];
-					renderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();
+// 					const texture = textures[ i ];
+// 					renderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();
 
-					_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );
+// 					_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );
 
-					const glFormat = utils.convert( texture.format, texture.encoding );
-					const glType = utils.convert( texture.type );
-					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true );
-					const samples = getRenderTargetSamples( renderTarget );
-					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
+// 					const glFormat = utils.convert( texture.format, texture.encoding );
+// 					const glType = utils.convert( texture.type );
+// 					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding, renderTarget.isXRRenderTarget === true );
+// 					const samples = getRenderTargetSamples( renderTarget );
+// 					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
 
-					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );
+// 					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );
 
-				}
+// 				}
 
-				_gl.bindRenderbuffer( 36161, null );
+// 				_gl.bindRenderbuffer( 36161, null );
 
-				if ( renderTarget.depthBuffer ) {
+// 				if ( renderTarget.depthBuffer ) {
 
-					renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
-					setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );
+// 					renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
+// 					setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );
 
-				}
+// 				}
 
-				state.bindFramebuffer( 36160, null );
+// 				state.bindFramebuffer( 36160, null );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// Setup color buffer
+// 		// Setup color buffer
 
-		if ( isCube ) {
+// 		if ( isCube ) {
 
-			state.bindTexture( 34067, textureProperties.__webglTexture );
-			setTextureParameters( 34067, texture, supportsMips );
+// 			state.bindTexture( 34067, textureProperties.__webglTexture );
+// 			setTextureParameters( 34067, texture, supportsMips );
 
-			for ( let i = 0; i < 6; i ++ ) {
+// 			for ( let i = 0; i < 6; i ++ ) {
 
-				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );
+// 				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );
 
-			}
+// 			}
 
-			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
+// 			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
 
-				generateMipmap( 34067 );
+// 				generateMipmap( 34067 );
 
-			}
+// 			}
 
-			state.unbindTexture();
+// 			state.unbindTexture();
 
-		} else if ( isMultipleRenderTargets ) {
+// 		} else if ( isMultipleRenderTargets ) {
 
-			const textures = renderTarget.texture;
+// 			const textures = renderTarget.texture;
 
-			for ( let i = 0, il = textures.length; i < il; i ++ ) {
+// 			for ( let i = 0, il = textures.length; i < il; i ++ ) {
 
-				const attachment = textures[ i ];
-				const attachmentProperties = properties.get( attachment );
+// 				const attachment = textures[ i ];
+// 				const attachmentProperties = properties.get( attachment );
 
-				state.bindTexture( 3553, attachmentProperties.__webglTexture );
-				setTextureParameters( 3553, attachment, supportsMips );
-				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );
+// 				state.bindTexture( 3553, attachmentProperties.__webglTexture );
+// 				setTextureParameters( 3553, attachment, supportsMips );
+// 				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );
 
-				if ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {
+// 				if ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {
 
-					generateMipmap( 3553 );
+// 					generateMipmap( 3553 );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			state.unbindTexture();
+// 			state.unbindTexture();
 
-		} else {
+// 		} else {
 
-			let glTextureType = 3553;
+// 			let glTextureType = 3553;
 
-			if ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {
+// 			if ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {
 
-				if ( isWebGL2 ) {
+// 				if ( isWebGL2 ) {
 
-					glTextureType = renderTarget.isWebGL3DRenderTarget ? 32879 : 35866;
+// 					glTextureType = renderTarget.isWebGL3DRenderTarget ? 32879 : 35866;
 
-				} else {
+// 				} else {
 
-					console.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );
+// 					console.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			state.bindTexture( glTextureType, textureProperties.__webglTexture );
-			setTextureParameters( glTextureType, texture, supportsMips );
-			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );
+// 			state.bindTexture( glTextureType, textureProperties.__webglTexture );
+// 			setTextureParameters( glTextureType, texture, supportsMips );
+// 			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );
 
-			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
+// 			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
 
-				generateMipmap( glTextureType );
+// 				generateMipmap( glTextureType );
 
-			}
+// 			}
 
-			state.unbindTexture();
+// 			state.unbindTexture();
 
-		}
+// 		}
 
-		// Setup depth and stencil buffers
+// 		// Setup depth and stencil buffers
 
-		if ( renderTarget.depthBuffer ) {
+// 		if ( renderTarget.depthBuffer ) {
 
-			setupDepthRenderbuffer( renderTarget );
+// 			setupDepthRenderbuffer( renderTarget );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function updateRenderTargetMipmap( renderTarget ) {
+// 	function updateRenderTargetMipmap( renderTarget ) {
 
-		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;
+// 		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;
 
-		const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];
+// 		const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];
 
-		for ( let i = 0, il = textures.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = textures.length; i < il; i ++ ) {
 
-			const texture = textures[ i ];
+// 			const texture = textures[ i ];
 
-			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
+// 			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
 
-				const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
-				const webglTexture = properties.get( texture ).__webglTexture;
+// 				const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
+// 				const webglTexture = properties.get( texture ).__webglTexture;
 
-				state.bindTexture( target, webglTexture );
-				generateMipmap( target );
-				state.unbindTexture();
+// 				state.bindTexture( target, webglTexture );
+// 				generateMipmap( target );
+// 				state.unbindTexture();
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function updateMultisampleRenderTarget( renderTarget ) {
+// 	function updateMultisampleRenderTarget( renderTarget ) {
 
-		if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {
+// 		if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {
 
-			const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];
-			const width = renderTarget.width;
-			const height = renderTarget.height;
-			let mask = 16384;
-			const invalidationArray = [];
-			const depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;
-			const renderTargetProperties = properties.get( renderTarget );
-			const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );
+// 			const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];
+// 			const width = renderTarget.width;
+// 			const height = renderTarget.height;
+// 			let mask = 16384;
+// 			const invalidationArray = [];
+// 			const depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;
+// 			const renderTargetProperties = properties.get( renderTarget );
+// 			const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );
 
-			// If MRT we need to remove FBO attachments
-			if ( isMultipleRenderTargets ) {
+// 			// If MRT we need to remove FBO attachments
+// 			if ( isMultipleRenderTargets ) {
 
-				for ( let i = 0; i < textures.length; i ++ ) {
+// 				for ( let i = 0; i < textures.length; i ++ ) {
 
-					state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
-					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, null );
+// 					state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
+// 					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, null );
 
-					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
-					_gl.framebufferTexture2D( 36009, 36064 + i, 3553, null, 0 );
+// 					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
+// 					_gl.framebufferTexture2D( 36009, 36064 + i, 3553, null, 0 );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			state.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
-			state.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );
+// 			state.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
+// 			state.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );
 
-			for ( let i = 0; i < textures.length; i ++ ) {
+// 			for ( let i = 0; i < textures.length; i ++ ) {
 
-				invalidationArray.push( 36064 + i );
+// 				invalidationArray.push( 36064 + i );
 
-				if ( renderTarget.depthBuffer ) {
+// 				if ( renderTarget.depthBuffer ) {
 
-					invalidationArray.push( depthStyle );
+// 					invalidationArray.push( depthStyle );
 
-				}
+// 				}
 
-				const ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;
+// 				const ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;
 
-				if ( ignoreDepthValues === false ) {
+// 				if ( ignoreDepthValues === false ) {
 
-					if ( renderTarget.depthBuffer ) mask |= 256;
-					if ( renderTarget.stencilBuffer ) mask |= 1024;
+// 					if ( renderTarget.depthBuffer ) mask |= 256;
+// 					if ( renderTarget.stencilBuffer ) mask |= 1024;
 
-				}
+// 				}
 
-				if ( isMultipleRenderTargets ) {
+// 				if ( isMultipleRenderTargets ) {
 
-					_gl.framebufferRenderbuffer( 36008, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );
+// 					_gl.framebufferRenderbuffer( 36008, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );
 
-				}
+// 				}
 
-				if ( ignoreDepthValues === true ) {
+// 				if ( ignoreDepthValues === true ) {
 
-					_gl.invalidateFramebuffer( 36008, [ depthStyle ] );
-					_gl.invalidateFramebuffer( 36009, [ depthStyle ] );
+// 					_gl.invalidateFramebuffer( 36008, [ depthStyle ] );
+// 					_gl.invalidateFramebuffer( 36009, [ depthStyle ] );
 
-				}
+// 				}
 
-				if ( isMultipleRenderTargets ) {
+// 				if ( isMultipleRenderTargets ) {
 
-					const webglTexture = properties.get( textures[ i ] ).__webglTexture;
-					_gl.framebufferTexture2D( 36009, 36064, 3553, webglTexture, 0 );
+// 					const webglTexture = properties.get( textures[ i ] ).__webglTexture;
+// 					_gl.framebufferTexture2D( 36009, 36064, 3553, webglTexture, 0 );
 
-				}
+// 				}
 
-				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );
+// 				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );
 
-				if ( supportsInvalidateFramebuffer ) {
+// 				if ( supportsInvalidateFramebuffer ) {
 
-					_gl.invalidateFramebuffer( 36008, invalidationArray );
+// 					_gl.invalidateFramebuffer( 36008, invalidationArray );
 
-				}
+// 				}
 
 
-			}
+// 			}
 
-			state.bindFramebuffer( 36008, null );
-			state.bindFramebuffer( 36009, null );
+// 			state.bindFramebuffer( 36008, null );
+// 			state.bindFramebuffer( 36009, null );
 
-			// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
-			if ( isMultipleRenderTargets ) {
+// 			// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
+// 			if ( isMultipleRenderTargets ) {
 
-				for ( let i = 0; i < textures.length; i ++ ) {
+// 				for ( let i = 0; i < textures.length; i ++ ) {
 
-					state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
-					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );
+// 					state.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
+// 					_gl.framebufferRenderbuffer( 36160, 36064 + i, 36161, renderTargetProperties.__webglColorRenderbuffer[ i ] );
 
-					const webglTexture = properties.get( textures[ i ] ).__webglTexture;
+// 					const webglTexture = properties.get( textures[ i ] ).__webglTexture;
 
-					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
-					_gl.framebufferTexture2D( 36009, 36064 + i, 3553, webglTexture, 0 );
+// 					state.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
+// 					_gl.framebufferTexture2D( 36009, 36064 + i, 3553, webglTexture, 0 );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			state.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );
+// 			state.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function getRenderTargetSamples( renderTarget ) {
+// 	function getRenderTargetSamples( renderTarget ) {
 
-		return Math.min( maxSamples, renderTarget.samples );
+// 		return Math.min( maxSamples, renderTarget.samples );
 
-	}
+// 	}
 
-	function useMultisampledRTT( renderTarget ) {
+// 	function useMultisampledRTT( renderTarget ) {
 
-		const renderTargetProperties = properties.get( renderTarget );
+// 		const renderTargetProperties = properties.get( renderTarget );
 
-		return isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;
+// 		return isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;
 
-	}
+// 	}
 
-	function updateVideoTexture( texture ) {
+// 	function updateVideoTexture( texture ) {
 
-		const frame = info.render.frame;
+// 		const frame = info.render.frame;
 
-		// Check the last frame we updated the VideoTexture
+// 		// Check the last frame we updated the VideoTexture
 
-		if ( _videoTextures.get( texture ) !== frame ) {
+// 		if ( _videoTextures.get( texture ) !== frame ) {
 
-			_videoTextures.set( texture, frame );
-			texture.update();
+// 			_videoTextures.set( texture, frame );
+// 			texture.update();
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function verifyColorSpace( texture, image ) {
+// 	function verifyColorSpace( texture, image ) {
 
-		const encoding = texture.encoding;
-		const format = texture.format;
-		const type = texture.type;
+// 		const encoding = texture.encoding;
+// 		const format = texture.format;
+// 		const type = texture.type;
 
-		if ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;
+// 		if ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;
 
-		if ( encoding !== LinearEncoding ) {
+// 		if ( encoding !== LinearEncoding ) {
 
-			// sRGB
+// 			// sRGB
 
-			if ( encoding === sRGBEncoding ) {
+// 			if ( encoding === sRGBEncoding ) {
 
-				if ( isWebGL2 === false ) {
+// 				if ( isWebGL2 === false ) {
 
-					// in WebGL 1, try to use EXT_sRGB extension and unsized formats
+// 					// in WebGL 1, try to use EXT_sRGB extension and unsized formats
 
-					if ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {
+// 					if ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {
 
-						texture.format = _SRGBAFormat;
+// 						texture.format = _SRGBAFormat;
 
-						// it's not possible to generate mips in WebGL 1 with this extension
+// 						// it's not possible to generate mips in WebGL 1 with this extension
 
-						texture.minFilter = LinearFilter;
-						texture.generateMipmaps = false;
+// 						texture.minFilter = LinearFilter;
+// 						texture.generateMipmaps = false;
 
-					} else {
+// 					} else {
 
-						// slow fallback (CPU decode)
+// 						// slow fallback (CPU decode)
 
-						image = ImageUtils.sRGBToLinear( image );
+// 						image = ImageUtils.sRGBToLinear( image );
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
+// 					// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format
 
-					if ( format !== RGBAFormat || type !== UnsignedByteType ) {
+// 					if ( format !== RGBAFormat || type !== UnsignedByteType ) {
 
-						console.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );
+// 						console.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				console.error( 'THREE.WebGLTextures: Unsupported texture encoding:', encoding );
+// 				console.error( 'THREE.WebGLTextures: Unsupported texture encoding:', encoding );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return image;
+// 		return image;
 
-	}
+// 	}
 
-	//
+// 	//
 
-	this.allocateTextureUnit = allocateTextureUnit;
-	this.resetTextureUnits = resetTextureUnits;
+// 	this.allocateTextureUnit = allocateTextureUnit;
+// 	this.resetTextureUnits = resetTextureUnits;
 
-	this.setTexture2D = setTexture2D;
-	this.setTexture2DArray = setTexture2DArray;
-	this.setTexture3D = setTexture3D;
-	this.setTextureCube = setTextureCube;
-	this.rebindTextures = rebindTextures;
-	this.setupRenderTarget = setupRenderTarget;
-	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
-	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
-	this.setupDepthRenderbuffer = setupDepthRenderbuffer;
-	this.setupFrameBufferTexture = setupFrameBufferTexture;
-	this.useMultisampledRTT = useMultisampledRTT;
+// 	this.setTexture2D = setTexture2D;
+// 	this.setTexture2DArray = setTexture2DArray;
+// 	this.setTexture3D = setTexture3D;
+// 	this.setTextureCube = setTextureCube;
+// 	this.rebindTextures = rebindTextures;
+// 	this.setupRenderTarget = setupRenderTarget;
+// 	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
+// 	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
+// 	this.setupDepthRenderbuffer = setupDepthRenderbuffer;
+// 	this.setupFrameBufferTexture = setupFrameBufferTexture;
+// 	this.useMultisampledRTT = useMultisampledRTT;
 
-}
+// }
 
-function WebGLUtils( gl, extensions, capabilities ) {
+// function WebGLUtils( gl, extensions, capabilities ) {
 
-	const isWebGL2 = capabilities.isWebGL2;
+// 	const isWebGL2 = capabilities.isWebGL2;
 
-	function convert( p, encoding = null ) {
+// 	function convert( p, encoding = null ) {
 
-		let extension;
+// 		let extension;
 
-		if ( p === UnsignedByteType ) return 5121;
-		if ( p === UnsignedShort4444Type ) return 32819;
-		if ( p === UnsignedShort5551Type ) return 32820;
+// 		if ( p === UnsignedByteType ) return 5121;
+// 		if ( p === UnsignedShort4444Type ) return 32819;
+// 		if ( p === UnsignedShort5551Type ) return 32820;
 
-		if ( p === ByteType ) return 5120;
-		if ( p === ShortType ) return 5122;
-		if ( p === UnsignedShortType ) return 5123;
-		if ( p === IntType ) return 5124;
-		if ( p === UnsignedIntType ) return 5125;
-		if ( p === FloatType ) return 5126;
+// 		if ( p === ByteType ) return 5120;
+// 		if ( p === ShortType ) return 5122;
+// 		if ( p === UnsignedShortType ) return 5123;
+// 		if ( p === IntType ) return 5124;
+// 		if ( p === UnsignedIntType ) return 5125;
+// 		if ( p === FloatType ) return 5126;
 
-		if ( p === HalfFloatType ) {
+// 		if ( p === HalfFloatType ) {
 
-			if ( isWebGL2 ) return 5131;
+// 			if ( isWebGL2 ) return 5131;
 
-			extension = extensions.get( 'OES_texture_half_float' );
+// 			extension = extensions.get( 'OES_texture_half_float' );
 
-			if ( extension !== null ) {
+// 			if ( extension !== null ) {
 
-				return extension.HALF_FLOAT_OES;
+// 				return extension.HALF_FLOAT_OES;
 
-			} else {
+// 			} else {
 
-				return null;
+// 				return null;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( p === AlphaFormat ) return 6406;
-		if ( p === RGBAFormat ) return 6408;
-		if ( p === LuminanceFormat ) return 6409;
-		if ( p === LuminanceAlphaFormat ) return 6410;
-		if ( p === DepthFormat ) return 6402;
-		if ( p === DepthStencilFormat ) return 34041;
-		if ( p === RedFormat ) return 6403;
+// 		if ( p === AlphaFormat ) return 6406;
+// 		if ( p === RGBAFormat ) return 6408;
+// 		if ( p === LuminanceFormat ) return 6409;
+// 		if ( p === LuminanceAlphaFormat ) return 6410;
+// 		if ( p === DepthFormat ) return 6402;
+// 		if ( p === DepthStencilFormat ) return 34041;
+// 		if ( p === RedFormat ) return 6403;
 
-		// @deprecated since r137
+// 		// @deprecated since r137
 
-		if ( p === RGBFormat ) {
+// 		if ( p === RGBFormat ) {
 
-			console.warn( 'THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228' );
-			return 6408;
+// 			console.warn( 'THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228' );
+// 			return 6408;
 
-		}
+// 		}
 
-		// WebGL 1 sRGB fallback
+// 		// WebGL 1 sRGB fallback
 
-		if ( p === _SRGBAFormat ) {
+// 		if ( p === _SRGBAFormat ) {
 
-			extension = extensions.get( 'EXT_sRGB' );
+// 			extension = extensions.get( 'EXT_sRGB' );
 
-			if ( extension !== null ) {
+// 			if ( extension !== null ) {
 
-				return extension.SRGB_ALPHA_EXT;
+// 				return extension.SRGB_ALPHA_EXT;
 
-			} else {
+// 			} else {
 
-				return null;
+// 				return null;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// WebGL2 formats.
+// 		// WebGL2 formats.
 
-		if ( p === RedIntegerFormat ) return 36244;
-		if ( p === RGFormat ) return 33319;
-		if ( p === RGIntegerFormat ) return 33320;
-		if ( p === RGBAIntegerFormat ) return 36249;
+// 		if ( p === RedIntegerFormat ) return 36244;
+// 		if ( p === RGFormat ) return 33319;
+// 		if ( p === RGIntegerFormat ) return 33320;
+// 		if ( p === RGBAIntegerFormat ) return 36249;
 
-		// S3TC
+// 		// S3TC
 
-		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {
+// 		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {
 
-			if ( encoding === sRGBEncoding ) {
+// 			if ( encoding === sRGBEncoding ) {
 
-				extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );
+// 				extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );
 
-				if ( extension !== null ) {
+// 				if ( extension !== null ) {
 
-					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
-					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
-					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
-					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
+// 					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
+// 					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
+// 					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
+// 					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
 
-				} else {
+// 				} else {
 
-					return null;
+// 					return null;
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
+// 				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
 
-				if ( extension !== null ) {
+// 				if ( extension !== null ) {
 
-					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
-					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
-					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
-					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
+// 					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
+// 					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
+// 					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
+// 					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
 
-				} else {
+// 				} else {
 
-					return null;
+// 					return null;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// PVRTC
+// 		// PVRTC
 
-		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {
+// 		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {
 
-			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
+// 			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
 
-			if ( extension !== null ) {
+// 			if ( extension !== null ) {
 
-				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
-				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
-				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
-				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
+// 				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
+// 				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
+// 				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
+// 				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
 
-			} else {
+// 			} else {
 
-				return null;
+// 				return null;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// ETC1
+// 		// ETC1
 
-		if ( p === RGB_ETC1_Format ) {
+// 		if ( p === RGB_ETC1_Format ) {
 
-			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );
+// 			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );
 
-			if ( extension !== null ) {
+// 			if ( extension !== null ) {
 
-				return extension.COMPRESSED_RGB_ETC1_WEBGL;
+// 				return extension.COMPRESSED_RGB_ETC1_WEBGL;
 
-			} else {
+// 			} else {
 
-				return null;
+// 				return null;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// ETC2
+// 		// ETC2
 
-		if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {
+// 		if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {
 
-			extension = extensions.get( 'WEBGL_compressed_texture_etc' );
+// 			extension = extensions.get( 'WEBGL_compressed_texture_etc' );
 
-			if ( extension !== null ) {
+// 			if ( extension !== null ) {
 
-				if ( p === RGB_ETC2_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
-				if ( p === RGBA_ETC2_EAC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
+// 				if ( p === RGB_ETC2_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
+// 				if ( p === RGBA_ETC2_EAC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
 
-			} else {
+// 			} else {
 
-				return null;
+// 				return null;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// ASTC
+// 		// ASTC
 
-		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
-			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
-			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
-			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
-			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {
+// 		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
+// 			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
+// 			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
+// 			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
+// 			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {
 
-			extension = extensions.get( 'WEBGL_compressed_texture_astc' );
+// 			extension = extensions.get( 'WEBGL_compressed_texture_astc' );
 
-			if ( extension !== null ) {
+// 			if ( extension !== null ) {
 
-				if ( p === RGBA_ASTC_4x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
-				if ( p === RGBA_ASTC_5x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
-				if ( p === RGBA_ASTC_5x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
-				if ( p === RGBA_ASTC_6x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
-				if ( p === RGBA_ASTC_6x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
-				if ( p === RGBA_ASTC_8x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
-				if ( p === RGBA_ASTC_8x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
-				if ( p === RGBA_ASTC_8x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
-				if ( p === RGBA_ASTC_10x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
-				if ( p === RGBA_ASTC_10x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
-				if ( p === RGBA_ASTC_10x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
-				if ( p === RGBA_ASTC_10x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
-				if ( p === RGBA_ASTC_12x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
-				if ( p === RGBA_ASTC_12x12_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
+// 				if ( p === RGBA_ASTC_4x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
+// 				if ( p === RGBA_ASTC_5x4_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
+// 				if ( p === RGBA_ASTC_5x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
+// 				if ( p === RGBA_ASTC_6x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
+// 				if ( p === RGBA_ASTC_6x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
+// 				if ( p === RGBA_ASTC_8x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
+// 				if ( p === RGBA_ASTC_8x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
+// 				if ( p === RGBA_ASTC_8x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
+// 				if ( p === RGBA_ASTC_10x5_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
+// 				if ( p === RGBA_ASTC_10x6_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
+// 				if ( p === RGBA_ASTC_10x8_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
+// 				if ( p === RGBA_ASTC_10x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
+// 				if ( p === RGBA_ASTC_12x10_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
+// 				if ( p === RGBA_ASTC_12x12_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
 
-			} else {
+// 			} else {
 
-				return null;
+// 				return null;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// BPTC
+// 		// BPTC
 
-		if ( p === RGBA_BPTC_Format ) {
+// 		if ( p === RGBA_BPTC_Format ) {
 
-			extension = extensions.get( 'EXT_texture_compression_bptc' );
+// 			extension = extensions.get( 'EXT_texture_compression_bptc' );
 
-			if ( extension !== null ) {
+// 			if ( extension !== null ) {
 
-				if ( p === RGBA_BPTC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
+// 				if ( p === RGBA_BPTC_Format ) return ( encoding === sRGBEncoding ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
 
-			} else {
+// 			} else {
 
-				return null;
+// 				return null;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		//
+// 		//
 
-		if ( p === UnsignedInt248Type ) {
+// 		if ( p === UnsignedInt248Type ) {
 
-			if ( isWebGL2 ) return 34042;
+// 			if ( isWebGL2 ) return 34042;
 
-			extension = extensions.get( 'WEBGL_depth_texture' );
+// 			extension = extensions.get( 'WEBGL_depth_texture' );
 
-			if ( extension !== null ) {
+// 			if ( extension !== null ) {
 
-				return extension.UNSIGNED_INT_24_8_WEBGL;
+// 				return extension.UNSIGNED_INT_24_8_WEBGL;
 
-			} else {
+// 			} else {
 
-				return null;
+// 				return null;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)
+// 		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)
 
-		return ( gl[ p ] !== undefined ) ? gl[ p ] : null;
+// 		return ( gl[ p ] !== undefined ) ? gl[ p ] : null;
 
-	}
+// 	}
 
-	return { convert: convert };
+// 	return { convert: convert };
 
-}
+// }
 
-class ArrayCamera extends PerspectiveCamera {
+// class ArrayCamera extends PerspectiveCamera {
 
-	constructor( array = [] ) {
+// 	constructor( array = [] ) {
 
-		super();
+// 		super();
 
-		this.isArrayCamera = true;
+// 		this.isArrayCamera = true;
 
-		this.cameras = array;
+// 		this.cameras = array;
 
-	}
+// 	}
 
-}
+// }
 
-class Group extends Object3D {
+// class Group extends Object3D {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isGroup = true;
+// 		this.isGroup = true;
 
-		this.type = 'Group';
+// 		this.type = 'Group';
 
-	}
+// 	}
 
-}
+// }
 
-const _moveEvent = { type: 'move' };
+// const _moveEvent = { type: 'move' };
 
-class WebXRController {
+// class WebXRController {
 
-	constructor() {
+// 	constructor() {
 
-		this._targetRay = null;
-		this._grip = null;
-		this._hand = null;
+// 		this._targetRay = null;
+// 		this._grip = null;
+// 		this._hand = null;
 
-	}
+// 	}
 
-	getHandSpace() {
+// 	getHandSpace() {
 
-		if ( this._hand === null ) {
+// 		if ( this._hand === null ) {
 
-			this._hand = new Group();
-			this._hand.matrixAutoUpdate = false;
-			this._hand.visible = false;
+// 			this._hand = new Group();
+// 			this._hand.matrixAutoUpdate = false;
+// 			this._hand.visible = false;
 
-			this._hand.joints = {};
-			this._hand.inputState = { pinching: false };
+// 			this._hand.joints = {};
+// 			this._hand.inputState = { pinching: false };
 
-		}
+// 		}
 
-		return this._hand;
+// 		return this._hand;
 
-	}
+// 	}
 
-	getTargetRaySpace() {
+// 	getTargetRaySpace() {
 
-		if ( this._targetRay === null ) {
+// 		if ( this._targetRay === null ) {
 
-			this._targetRay = new Group();
-			this._targetRay.matrixAutoUpdate = false;
-			this._targetRay.visible = false;
-			this._targetRay.hasLinearVelocity = false;
-			this._targetRay.linearVelocity = new Vector3();
-			this._targetRay.hasAngularVelocity = false;
-			this._targetRay.angularVelocity = new Vector3();
+// 			this._targetRay = new Group();
+// 			this._targetRay.matrixAutoUpdate = false;
+// 			this._targetRay.visible = false;
+// 			this._targetRay.hasLinearVelocity = false;
+// 			this._targetRay.linearVelocity = new Vector3();
+// 			this._targetRay.hasAngularVelocity = false;
+// 			this._targetRay.angularVelocity = new Vector3();
 
-		}
+// 		}
 
-		return this._targetRay;
+// 		return this._targetRay;
 
-	}
+// 	}
 
-	getGripSpace() {
+// 	getGripSpace() {
 
-		if ( this._grip === null ) {
+// 		if ( this._grip === null ) {
 
-			this._grip = new Group();
-			this._grip.matrixAutoUpdate = false;
-			this._grip.visible = false;
-			this._grip.hasLinearVelocity = false;
-			this._grip.linearVelocity = new Vector3();
-			this._grip.hasAngularVelocity = false;
-			this._grip.angularVelocity = new Vector3();
+// 			this._grip = new Group();
+// 			this._grip.matrixAutoUpdate = false;
+// 			this._grip.visible = false;
+// 			this._grip.hasLinearVelocity = false;
+// 			this._grip.linearVelocity = new Vector3();
+// 			this._grip.hasAngularVelocity = false;
+// 			this._grip.angularVelocity = new Vector3();
 
-		}
+// 		}
 
-		return this._grip;
+// 		return this._grip;
 
-	}
+// 	}
 
-	dispatchEvent( event ) {
+// 	dispatchEvent( event ) {
 
-		if ( this._targetRay !== null ) {
+// 		if ( this._targetRay !== null ) {
 
-			this._targetRay.dispatchEvent( event );
+// 			this._targetRay.dispatchEvent( event );
 
-		}
+// 		}
 
-		if ( this._grip !== null ) {
+// 		if ( this._grip !== null ) {
 
-			this._grip.dispatchEvent( event );
+// 			this._grip.dispatchEvent( event );
 
-		}
+// 		}
 
-		if ( this._hand !== null ) {
+// 		if ( this._hand !== null ) {
 
-			this._hand.dispatchEvent( event );
+// 			this._hand.dispatchEvent( event );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	disconnect( inputSource ) {
+// 	disconnect( inputSource ) {
 
-		this.dispatchEvent( { type: 'disconnected', data: inputSource } );
+// 		this.dispatchEvent( { type: 'disconnected', data: inputSource } );
 
-		if ( this._targetRay !== null ) {
+// 		if ( this._targetRay !== null ) {
 
-			this._targetRay.visible = false;
+// 			this._targetRay.visible = false;
 
-		}
+// 		}
 
-		if ( this._grip !== null ) {
+// 		if ( this._grip !== null ) {
 
-			this._grip.visible = false;
+// 			this._grip.visible = false;
 
-		}
+// 		}
 
-		if ( this._hand !== null ) {
+// 		if ( this._hand !== null ) {
 
-			this._hand.visible = false;
+// 			this._hand.visible = false;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	update( inputSource, frame, referenceSpace ) {
+// 	update( inputSource, frame, referenceSpace ) {
 
-		let inputPose = null;
-		let gripPose = null;
-		let handPose = null;
+// 		let inputPose = null;
+// 		let gripPose = null;
+// 		let handPose = null;
 
-		const targetRay = this._targetRay;
-		const grip = this._grip;
-		const hand = this._hand;
+// 		const targetRay = this._targetRay;
+// 		const grip = this._grip;
+// 		const hand = this._hand;
 
-		if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {
+// 		if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {
 
-			if ( hand && inputSource.hand ) {
+// 			if ( hand && inputSource.hand ) {
 
-				handPose = true;
+// 				handPose = true;
 
-				for ( const inputjoint of inputSource.hand.values() ) {
+// 				for ( const inputjoint of inputSource.hand.values() ) {
 
-					// Update the joints groups with the XRJoint poses
-					const jointPose = frame.getJointPose( inputjoint, referenceSpace );
+// 					// Update the joints groups with the XRJoint poses
+// 					const jointPose = frame.getJointPose( inputjoint, referenceSpace );
 
-					if ( hand.joints[ inputjoint.jointName ] === undefined ) {
+// 					if ( hand.joints[ inputjoint.jointName ] === undefined ) {
 
-						// The transform of this joint will be updated with the joint pose on each frame
-						const joint = new Group();
-						joint.matrixAutoUpdate = false;
-						joint.visible = false;
-						hand.joints[ inputjoint.jointName ] = joint;
-						// ??
-						hand.add( joint );
+// 						// The transform of this joint will be updated with the joint pose on each frame
+// 						const joint = new Group();
+// 						joint.matrixAutoUpdate = false;
+// 						joint.visible = false;
+// 						hand.joints[ inputjoint.jointName ] = joint;
+// 						// ??
+// 						hand.add( joint );
 
-					}
+// 					}
 
-					const joint = hand.joints[ inputjoint.jointName ];
+// 					const joint = hand.joints[ inputjoint.jointName ];
 
-					if ( jointPose !== null ) {
+// 					if ( jointPose !== null ) {
 
-						joint.matrix.fromArray( jointPose.transform.matrix );
-						joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
-						joint.jointRadius = jointPose.radius;
+// 						joint.matrix.fromArray( jointPose.transform.matrix );
+// 						joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
+// 						joint.jointRadius = jointPose.radius;
 
-					}
+// 					}
 
-					joint.visible = jointPose !== null;
+// 					joint.visible = jointPose !== null;
 
-				}
+// 				}
 
-				// Custom events
+// 				// Custom events
 
-				// Check pinchz
-				const indexTip = hand.joints[ 'index-finger-tip' ];
-				const thumbTip = hand.joints[ 'thumb-tip' ];
-				const distance = indexTip.position.distanceTo( thumbTip.position );
+// 				// Check pinchz
+// 				const indexTip = hand.joints[ 'index-finger-tip' ];
+// 				const thumbTip = hand.joints[ 'thumb-tip' ];
+// 				const distance = indexTip.position.distanceTo( thumbTip.position );
 
-				const distanceToPinch = 0.02;
-				const threshold = 0.005;
+// 				const distanceToPinch = 0.02;
+// 				const threshold = 0.005;
 
-				if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {
+// 				if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {
 
-					hand.inputState.pinching = false;
-					this.dispatchEvent( {
-						type: 'pinchend',
-						handedness: inputSource.handedness,
-						target: this
-					} );
+// 					hand.inputState.pinching = false;
+// 					this.dispatchEvent( {
+// 						type: 'pinchend',
+// 						handedness: inputSource.handedness,
+// 						target: this
+// 					} );
 
-				} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {
+// 				} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {
 
-					hand.inputState.pinching = true;
-					this.dispatchEvent( {
-						type: 'pinchstart',
-						handedness: inputSource.handedness,
-						target: this
-					} );
+// 					hand.inputState.pinching = true;
+// 					this.dispatchEvent( {
+// 						type: 'pinchstart',
+// 						handedness: inputSource.handedness,
+// 						target: this
+// 					} );
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				if ( grip !== null && inputSource.gripSpace ) {
+// 				if ( grip !== null && inputSource.gripSpace ) {
 
-					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );
+// 					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );
 
-					if ( gripPose !== null ) {
+// 					if ( gripPose !== null ) {
 
-						grip.matrix.fromArray( gripPose.transform.matrix );
-						grip.matrix.decompose( grip.position, grip.rotation, grip.scale );
+// 						grip.matrix.fromArray( gripPose.transform.matrix );
+// 						grip.matrix.decompose( grip.position, grip.rotation, grip.scale );
 
-						if ( gripPose.linearVelocity ) {
+// 						if ( gripPose.linearVelocity ) {
 
-							grip.hasLinearVelocity = true;
-							grip.linearVelocity.copy( gripPose.linearVelocity );
+// 							grip.hasLinearVelocity = true;
+// 							grip.linearVelocity.copy( gripPose.linearVelocity );
 
-						} else {
+// 						} else {
 
-							grip.hasLinearVelocity = false;
+// 							grip.hasLinearVelocity = false;
 
-						}
+// 						}
 
-						if ( gripPose.angularVelocity ) {
+// 						if ( gripPose.angularVelocity ) {
 
-							grip.hasAngularVelocity = true;
-							grip.angularVelocity.copy( gripPose.angularVelocity );
+// 							grip.hasAngularVelocity = true;
+// 							grip.angularVelocity.copy( gripPose.angularVelocity );
 
-						} else {
+// 						} else {
 
-							grip.hasAngularVelocity = false;
+// 							grip.hasAngularVelocity = false;
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( targetRay !== null ) {
+// 			if ( targetRay !== null ) {
 
-				inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );
+// 				inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );
 
-				// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
-				if ( inputPose === null && gripPose !== null ) {
+// 				// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
+// 				if ( inputPose === null && gripPose !== null ) {
 
-					inputPose = gripPose;
+// 					inputPose = gripPose;
 
-				}
+// 				}
 
-				if ( inputPose !== null ) {
+// 				if ( inputPose !== null ) {
 
-					targetRay.matrix.fromArray( inputPose.transform.matrix );
-					targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );
+// 					targetRay.matrix.fromArray( inputPose.transform.matrix );
+// 					targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );
 
-					if ( inputPose.linearVelocity ) {
+// 					if ( inputPose.linearVelocity ) {
 
-						targetRay.hasLinearVelocity = true;
-						targetRay.linearVelocity.copy( inputPose.linearVelocity );
+// 						targetRay.hasLinearVelocity = true;
+// 						targetRay.linearVelocity.copy( inputPose.linearVelocity );
 
-					} else {
+// 					} else {
 
-						targetRay.hasLinearVelocity = false;
+// 						targetRay.hasLinearVelocity = false;
 
-					}
+// 					}
 
-					if ( inputPose.angularVelocity ) {
+// 					if ( inputPose.angularVelocity ) {
 
-						targetRay.hasAngularVelocity = true;
-						targetRay.angularVelocity.copy( inputPose.angularVelocity );
+// 						targetRay.hasAngularVelocity = true;
+// 						targetRay.angularVelocity.copy( inputPose.angularVelocity );
 
-					} else {
+// 					} else {
 
-						targetRay.hasAngularVelocity = false;
+// 						targetRay.hasAngularVelocity = false;
 
-					}
+// 					}
 
-					this.dispatchEvent( _moveEvent );
+// 					this.dispatchEvent( _moveEvent );
 
-				}
+// 				}
 
-			}
+// 			}
 
 
-		}
+// 		}
 
-		if ( targetRay !== null ) {
+// 		if ( targetRay !== null ) {
 
-			targetRay.visible = ( inputPose !== null );
+// 			targetRay.visible = ( inputPose !== null );
 
-		}
+// 		}
 
-		if ( grip !== null ) {
+// 		if ( grip !== null ) {
 
-			grip.visible = ( gripPose !== null );
+// 			grip.visible = ( gripPose !== null );
 
-		}
+// 		}
 
-		if ( hand !== null ) {
+// 		if ( hand !== null ) {
 
-			hand.visible = ( handPose !== null );
+// 			hand.visible = ( handPose !== null );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class DepthTexture extends Texture {
+// class DepthTexture extends Texture {
 
-	constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {
+// 	constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {
 
-		format = format !== undefined ? format : DepthFormat;
+// 		format = format !== undefined ? format : DepthFormat;
 
-		if ( format !== DepthFormat && format !== DepthStencilFormat ) {
+// 		if ( format !== DepthFormat && format !== DepthStencilFormat ) {
 
-			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );
+// 			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );
 
-		}
+// 		}
 
-		if ( type === undefined && format === DepthFormat ) type = UnsignedIntType;
-		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;
+// 		if ( type === undefined && format === DepthFormat ) type = UnsignedIntType;
+// 		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;
 
-		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
+// 		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
 
-		this.isDepthTexture = true;
+// 		this.isDepthTexture = true;
 
-		this.image = { width: width, height: height };
+// 		this.image = { width: width, height: height };
 
-		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
-		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
+// 		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
+// 		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
 
-		this.flipY = false;
-		this.generateMipmaps = false;
+// 		this.flipY = false;
+// 		this.generateMipmaps = false;
 
-	}
+// 	}
 
 
-}
+// }
 
-class WebXRManager extends EventDispatcher {
+// class WebXRManager extends EventDispatcher {
 
-	constructor( renderer, gl ) {
+// 	constructor( renderer, gl ) {
 
-		super();
+// 		super();
 
-		const scope = this;
+// 		const scope = this;
 
-		let session = null;
-		let framebufferScaleFactor = 1.0;
+// 		let session = null;
+// 		let framebufferScaleFactor = 1.0;
 
-		let referenceSpace = null;
-		let referenceSpaceType = 'local-floor';
-		let customReferenceSpace = null;
+// 		let referenceSpace = null;
+// 		let referenceSpaceType = 'local-floor';
+// 		let customReferenceSpace = null;
 
-		let pose = null;
-		let glBinding = null;
-		let glProjLayer = null;
-		let glBaseLayer = null;
-		let xrFrame = null;
-		const attributes = gl.getContextAttributes();
-		let initialRenderTarget = null;
-		let newRenderTarget = null;
+// 		let pose = null;
+// 		let glBinding = null;
+// 		let glProjLayer = null;
+// 		let glBaseLayer = null;
+// 		let xrFrame = null;
+// 		const attributes = gl.getContextAttributes();
+// 		let initialRenderTarget = null;
+// 		let newRenderTarget = null;
 
-		const controllers = [];
-		const controllerInputSources = [];
+// 		const controllers = [];
+// 		const controllerInputSources = [];
 
-		//
+// 		//
 
-		const cameraL = new PerspectiveCamera();
-		cameraL.layers.enable( 1 );
-		cameraL.viewport = new Vector4();
+// 		const cameraL = new PerspectiveCamera();
+// 		cameraL.layers.enable( 1 );
+// 		cameraL.viewport = new Vector4();
 
-		const cameraR = new PerspectiveCamera();
-		cameraR.layers.enable( 2 );
-		cameraR.viewport = new Vector4();
+// 		const cameraR = new PerspectiveCamera();
+// 		cameraR.layers.enable( 2 );
+// 		cameraR.viewport = new Vector4();
 
-		const cameras = [ cameraL, cameraR ];
+// 		const cameras = [ cameraL, cameraR ];
 
-		const cameraVR = new ArrayCamera();
-		cameraVR.layers.enable( 1 );
-		cameraVR.layers.enable( 2 );
+// 		const cameraVR = new ArrayCamera();
+// 		cameraVR.layers.enable( 1 );
+// 		cameraVR.layers.enable( 2 );
 
-		let _currentDepthNear = null;
-		let _currentDepthFar = null;
+// 		let _currentDepthNear = null;
+// 		let _currentDepthFar = null;
 
-		//
+// 		//
 
-		this.cameraAutoUpdate = true;
-		this.enabled = false;
+// 		this.cameraAutoUpdate = true;
+// 		this.enabled = false;
 
-		this.isPresenting = false;
+// 		this.isPresenting = false;
 
-		this.getController = function ( index ) {
+// 		this.getController = function ( index ) {
 
-			let controller = controllers[ index ];
+// 			let controller = controllers[ index ];
 
-			if ( controller === undefined ) {
+// 			if ( controller === undefined ) {
 
-				controller = new WebXRController();
-				controllers[ index ] = controller;
+// 				controller = new WebXRController();
+// 				controllers[ index ] = controller;
 
-			}
+// 			}
 
-			return controller.getTargetRaySpace();
+// 			return controller.getTargetRaySpace();
 
-		};
+// 		};
 
-		this.getControllerGrip = function ( index ) {
+// 		this.getControllerGrip = function ( index ) {
 
-			let controller = controllers[ index ];
+// 			let controller = controllers[ index ];
 
-			if ( controller === undefined ) {
+// 			if ( controller === undefined ) {
 
-				controller = new WebXRController();
-				controllers[ index ] = controller;
+// 				controller = new WebXRController();
+// 				controllers[ index ] = controller;
 
-			}
+// 			}
 
-			return controller.getGripSpace();
+// 			return controller.getGripSpace();
 
-		};
+// 		};
 
-		this.getHand = function ( index ) {
+// 		this.getHand = function ( index ) {
 
-			let controller = controllers[ index ];
+// 			let controller = controllers[ index ];
 
-			if ( controller === undefined ) {
+// 			if ( controller === undefined ) {
 
-				controller = new WebXRController();
-				controllers[ index ] = controller;
+// 				controller = new WebXRController();
+// 				controllers[ index ] = controller;
 
-			}
+// 			}
 
-			return controller.getHandSpace();
+// 			return controller.getHandSpace();
 
-		};
+// 		};
 
-		//
+// 		//
 
-		function onSessionEvent( event ) {
+// 		function onSessionEvent( event ) {
 
-			const controllerIndex = controllerInputSources.indexOf( event.inputSource );
+// 			const controllerIndex = controllerInputSources.indexOf( event.inputSource );
 
-			if ( controllerIndex === - 1 ) {
+// 			if ( controllerIndex === - 1 ) {
 
-				return;
+// 				return;
 
-			}
+// 			}
 
-			const controller = controllers[ controllerIndex ];
+// 			const controller = controllers[ controllerIndex ];
 
-			if ( controller !== undefined ) {
+// 			if ( controller !== undefined ) {
 
-				controller.dispatchEvent( { type: event.type, data: event.inputSource } );
+// 				controller.dispatchEvent( { type: event.type, data: event.inputSource } );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		function onSessionEnd() {
+// 		function onSessionEnd() {
 
-			session.removeEventListener( 'select', onSessionEvent );
-			session.removeEventListener( 'selectstart', onSessionEvent );
-			session.removeEventListener( 'selectend', onSessionEvent );
-			session.removeEventListener( 'squeeze', onSessionEvent );
-			session.removeEventListener( 'squeezestart', onSessionEvent );
-			session.removeEventListener( 'squeezeend', onSessionEvent );
-			session.removeEventListener( 'end', onSessionEnd );
-			session.removeEventListener( 'inputsourceschange', onInputSourcesChange );
+// 			session.removeEventListener( 'select', onSessionEvent );
+// 			session.removeEventListener( 'selectstart', onSessionEvent );
+// 			session.removeEventListener( 'selectend', onSessionEvent );
+// 			session.removeEventListener( 'squeeze', onSessionEvent );
+// 			session.removeEventListener( 'squeezestart', onSessionEvent );
+// 			session.removeEventListener( 'squeezeend', onSessionEvent );
+// 			session.removeEventListener( 'end', onSessionEnd );
+// 			session.removeEventListener( 'inputsourceschange', onInputSourcesChange );
 
-			for ( let i = 0; i < controllers.length; i ++ ) {
+// 			for ( let i = 0; i < controllers.length; i ++ ) {
 
-				const inputSource = controllerInputSources[ i ];
+// 				const inputSource = controllerInputSources[ i ];
 
-				if ( inputSource === null ) continue;
+// 				if ( inputSource === null ) continue;
 
-				controllerInputSources[ i ] = null;
+// 				controllerInputSources[ i ] = null;
 
-				controllers[ i ].disconnect( inputSource );
+// 				controllers[ i ].disconnect( inputSource );
 
-			}
+// 			}
 
-			_currentDepthNear = null;
-			_currentDepthFar = null;
+// 			_currentDepthNear = null;
+// 			_currentDepthFar = null;
 
-			// restore framebuffer/rendering state
+// 			// restore framebuffer/rendering state
 
-			renderer.setRenderTarget( initialRenderTarget );
+// 			renderer.setRenderTarget( initialRenderTarget );
 
-			glBaseLayer = null;
-			glProjLayer = null;
-			glBinding = null;
-			session = null;
-			newRenderTarget = null;
+// 			glBaseLayer = null;
+// 			glProjLayer = null;
+// 			glBinding = null;
+// 			session = null;
+// 			newRenderTarget = null;
 
-			//
+// 			//
 
-			animation.stop();
+// 			animation.stop();
 
-			scope.isPresenting = false;
+// 			scope.isPresenting = false;
 
-			scope.dispatchEvent( { type: 'sessionend' } );
+// 			scope.dispatchEvent( { type: 'sessionend' } );
 
-		}
+// 		}
 
-		this.setFramebufferScaleFactor = function ( value ) {
+// 		this.setFramebufferScaleFactor = function ( value ) {
 
-			framebufferScaleFactor = value;
+// 			framebufferScaleFactor = value;
 
-			if ( scope.isPresenting === true ) {
+// 			if ( scope.isPresenting === true ) {
 
-				console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );
+// 				console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );
 
-			}
+// 			}
 
-		};
+// 		};
 
-		this.setReferenceSpaceType = function ( value ) {
+// 		this.setReferenceSpaceType = function ( value ) {
 
-			referenceSpaceType = value;
+// 			referenceSpaceType = value;
 
-			if ( scope.isPresenting === true ) {
+// 			if ( scope.isPresenting === true ) {
 
-				console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );
+// 				console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );
 
-			}
+// 			}
 
-		};
+// 		};
 
-		this.getReferenceSpace = function () {
+// 		this.getReferenceSpace = function () {
 
-			return customReferenceSpace || referenceSpace;
+// 			return customReferenceSpace || referenceSpace;
 
-		};
+// 		};
 
-		this.setReferenceSpace = function ( space ) {
+// 		this.setReferenceSpace = function ( space ) {
 
-			customReferenceSpace = space;
+// 			customReferenceSpace = space;
 
-		};
+// 		};
 
-		this.getBaseLayer = function () {
+// 		this.getBaseLayer = function () {
 
-			return glProjLayer !== null ? glProjLayer : glBaseLayer;
+// 			return glProjLayer !== null ? glProjLayer : glBaseLayer;
 
-		};
+// 		};
 
-		this.getBinding = function () {
+// 		this.getBinding = function () {
 
-			return glBinding;
+// 			return glBinding;
 
-		};
+// 		};
 
-		this.getFrame = function () {
+// 		this.getFrame = function () {
 
-			return xrFrame;
+// 			return xrFrame;
 
-		};
+// 		};
 
-		this.getSession = function () {
+// 		this.getSession = function () {
 
-			return session;
+// 			return session;
 
-		};
+// 		};
 
-		this.setSession = async function ( value ) {
+// 		this.setSession = async function ( value ) {
 
-			session = value;
+// 			session = value;
 
-			if ( session !== null ) {
+// 			if ( session !== null ) {
 
-				initialRenderTarget = renderer.getRenderTarget();
+// 				initialRenderTarget = renderer.getRenderTarget();
 
-				session.addEventListener( 'select', onSessionEvent );
-				session.addEventListener( 'selectstart', onSessionEvent );
-				session.addEventListener( 'selectend', onSessionEvent );
-				session.addEventListener( 'squeeze', onSessionEvent );
-				session.addEventListener( 'squeezestart', onSessionEvent );
-				session.addEventListener( 'squeezeend', onSessionEvent );
-				session.addEventListener( 'end', onSessionEnd );
-				session.addEventListener( 'inputsourceschange', onInputSourcesChange );
+// 				session.addEventListener( 'select', onSessionEvent );
+// 				session.addEventListener( 'selectstart', onSessionEvent );
+// 				session.addEventListener( 'selectend', onSessionEvent );
+// 				session.addEventListener( 'squeeze', onSessionEvent );
+// 				session.addEventListener( 'squeezestart', onSessionEvent );
+// 				session.addEventListener( 'squeezeend', onSessionEvent );
+// 				session.addEventListener( 'end', onSessionEnd );
+// 				session.addEventListener( 'inputsourceschange', onInputSourcesChange );
 
-				if ( attributes.xrCompatible !== true ) {
+// 				if ( attributes.xrCompatible !== true ) {
 
-					await gl.makeXRCompatible();
+// 					await gl.makeXRCompatible();
 
-				}
+// 				}
 
-				if ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {
+// 				if ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {
 
-					const layerInit = {
-						antialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,
-						alpha: attributes.alpha,
-						depth: attributes.depth,
-						stencil: attributes.stencil,
-						framebufferScaleFactor: framebufferScaleFactor
-					};
+// 					const layerInit = {
+// 						antialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,
+// 						alpha: attributes.alpha,
+// 						depth: attributes.depth,
+// 						stencil: attributes.stencil,
+// 						framebufferScaleFactor: framebufferScaleFactor
+// 					};
 
-					glBaseLayer = new XRWebGLLayer( session, gl, layerInit );
+// 					glBaseLayer = new XRWebGLLayer( session, gl, layerInit );
 
-					session.updateRenderState( { baseLayer: glBaseLayer } );
+// 					session.updateRenderState( { baseLayer: glBaseLayer } );
 
-					newRenderTarget = new WebGLRenderTarget(
-						glBaseLayer.framebufferWidth,
-						glBaseLayer.framebufferHeight,
-						{
-							format: RGBAFormat,
-							type: UnsignedByteType,
-							encoding: renderer.outputEncoding,
-							stencilBuffer: attributes.stencil
-						}
-					);
+// 					newRenderTarget = new WebGLRenderTarget(
+// 						glBaseLayer.framebufferWidth,
+// 						glBaseLayer.framebufferHeight,
+// 						{
+// 							format: RGBAFormat,
+// 							type: UnsignedByteType,
+// 							encoding: renderer.outputEncoding,
+// 							stencilBuffer: attributes.stencil
+// 						}
+// 					);
 
-				} else {
+// 				} else {
 
-					let depthFormat = null;
-					let depthType = null;
-					let glDepthFormat = null;
+// 					let depthFormat = null;
+// 					let depthType = null;
+// 					let glDepthFormat = null;
 
-					if ( attributes.depth ) {
+// 					if ( attributes.depth ) {
 
-						glDepthFormat = attributes.stencil ? 35056 : 33190;
-						depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
-						depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
+// 						glDepthFormat = attributes.stencil ? 35056 : 33190;
+// 						depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
+// 						depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
 
-					}
+// 					}
 
-					const projectionlayerInit = {
-						colorFormat: 32856,
-						depthFormat: glDepthFormat,
-						scaleFactor: framebufferScaleFactor
-					};
+// 					const projectionlayerInit = {
+// 						colorFormat: 32856,
+// 						depthFormat: glDepthFormat,
+// 						scaleFactor: framebufferScaleFactor
+// 					};
 
-					glBinding = new XRWebGLBinding( session, gl );
+// 					glBinding = new XRWebGLBinding( session, gl );
 
-					glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );
+// 					glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );
 
-					session.updateRenderState( { layers: [ glProjLayer ] } );
+// 					session.updateRenderState( { layers: [ glProjLayer ] } );
 
-					newRenderTarget = new WebGLRenderTarget(
-						glProjLayer.textureWidth,
-						glProjLayer.textureHeight,
-						{
-							format: RGBAFormat,
-							type: UnsignedByteType,
-							depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),
-							stencilBuffer: attributes.stencil,
-							encoding: renderer.outputEncoding,
-							samples: attributes.antialias ? 4 : 0
-						} );
+// 					newRenderTarget = new WebGLRenderTarget(
+// 						glProjLayer.textureWidth,
+// 						glProjLayer.textureHeight,
+// 						{
+// 							format: RGBAFormat,
+// 							type: UnsignedByteType,
+// 							depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),
+// 							stencilBuffer: attributes.stencil,
+// 							encoding: renderer.outputEncoding,
+// 							samples: attributes.antialias ? 4 : 0
+// 						} );
 
-					const renderTargetProperties = renderer.properties.get( newRenderTarget );
-					renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
+// 					const renderTargetProperties = renderer.properties.get( newRenderTarget );
+// 					renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
 
-				}
+// 				}
 
-				newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
+// 				newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278
 
-				// Set foveation to maximum.
-				this.setFoveation( 1.0 );
+// 				// Set foveation to maximum.
+// 				this.setFoveation( 1.0 );
 
-				customReferenceSpace = null;
-				referenceSpace = await session.requestReferenceSpace( referenceSpaceType );
+// 				customReferenceSpace = null;
+// 				referenceSpace = await session.requestReferenceSpace( referenceSpaceType );
 
-				animation.setContext( session );
-				animation.start();
+// 				animation.setContext( session );
+// 				animation.start();
 
-				scope.isPresenting = true;
+// 				scope.isPresenting = true;
 
-				scope.dispatchEvent( { type: 'sessionstart' } );
+// 				scope.dispatchEvent( { type: 'sessionstart' } );
 
-			}
+// 			}
 
-		};
+// 		};
 
-		function onInputSourcesChange( event ) {
+// 		function onInputSourcesChange( event ) {
 
-			// Notify disconnected
+// 			// Notify disconnected
 
-			for ( let i = 0; i < event.removed.length; i ++ ) {
+// 			for ( let i = 0; i < event.removed.length; i ++ ) {
 
-				const inputSource = event.removed[ i ];
-				const index = controllerInputSources.indexOf( inputSource );
+// 				const inputSource = event.removed[ i ];
+// 				const index = controllerInputSources.indexOf( inputSource );
 
-				if ( index >= 0 ) {
+// 				if ( index >= 0 ) {
 
-					controllerInputSources[ index ] = null;
-					controllers[ index ].dispatchEvent( { type: 'disconnected', data: inputSource } );
+// 					controllerInputSources[ index ] = null;
+// 					controllers[ index ].dispatchEvent( { type: 'disconnected', data: inputSource } );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// Notify connected
+// 			// Notify connected
 
-			for ( let i = 0; i < event.added.length; i ++ ) {
+// 			for ( let i = 0; i < event.added.length; i ++ ) {
 
-				const inputSource = event.added[ i ];
+// 				const inputSource = event.added[ i ];
 
-				let controllerIndex = controllerInputSources.indexOf( inputSource );
+// 				let controllerIndex = controllerInputSources.indexOf( inputSource );
 
-				if ( controllerIndex === - 1 ) {
+// 				if ( controllerIndex === - 1 ) {
 
-					// Assign input source a controller that currently has no input source
+// 					// Assign input source a controller that currently has no input source
 
-					for ( let i = 0; i < controllers.length; i ++ ) {
+// 					for ( let i = 0; i < controllers.length; i ++ ) {
 
-						if ( i >= controllerInputSources.length ) {
+// 						if ( i >= controllerInputSources.length ) {
 
-							controllerInputSources.push( inputSource );
-							controllerIndex = i;
-							break;
+// 							controllerInputSources.push( inputSource );
+// 							controllerIndex = i;
+// 							break;
 
-						} else if ( controllerInputSources[ i ] === null ) {
+// 						} else if ( controllerInputSources[ i ] === null ) {
 
-							controllerInputSources[ i ] = inputSource;
-							controllerIndex = i;
-							break;
+// 							controllerInputSources[ i ] = inputSource;
+// 							controllerIndex = i;
+// 							break;
 
-						}
+// 						}
 
-					}
+// 					}
 
-					// If all controllers do currently receive input we ignore new ones
+// 					// If all controllers do currently receive input we ignore new ones
 
-					if ( controllerIndex === - 1 ) break;
+// 					if ( controllerIndex === - 1 ) break;
 
-				}
+// 				}
 
-				const controller = controllers[ controllerIndex ];
+// 				const controller = controllers[ controllerIndex ];
 
-				if ( controller ) {
+// 				if ( controller ) {
 
-					controller.dispatchEvent( { type: 'connected', data: inputSource } );
+// 					controller.dispatchEvent( { type: 'connected', data: inputSource } );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		//
+// 		//
 
-		const cameraLPos = new Vector3();
-		const cameraRPos = new Vector3();
+// 		const cameraLPos = new Vector3();
+// 		const cameraRPos = new Vector3();
 
-		/**
-		 * Assumes 2 cameras that are parallel and share an X-axis, and that
-		 * the cameras' projection and world matrices have already been set.
-		 * And that near and far planes are identical for both cameras.
-		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
-		 */
-		function setProjectionFromUnion( camera, cameraL, cameraR ) {
+// 		/**
+// 		 * Assumes 2 cameras that are parallel and share an X-axis, and that
+// 		 * the cameras' projection and world matrices have already been set.
+// 		 * And that near and far planes are identical for both cameras.
+// 		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
+// 		 */
+// 		function setProjectionFromUnion( camera, cameraL, cameraR ) {
 
-			cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
-			cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );
+// 			cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
+// 			cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );
 
-			const ipd = cameraLPos.distanceTo( cameraRPos );
+// 			const ipd = cameraLPos.distanceTo( cameraRPos );
 
-			const projL = cameraL.projectionMatrix.elements;
-			const projR = cameraR.projectionMatrix.elements;
+// 			const projL = cameraL.projectionMatrix.elements;
+// 			const projR = cameraR.projectionMatrix.elements;
 
-			// VR systems will have identical far and near planes, and
-			// most likely identical top and bottom frustum extents.
-			// Use the left camera for these values.
-			const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
-			const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
-			const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
-			const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];
+// 			// VR systems will have identical far and near planes, and
+// 			// most likely identical top and bottom frustum extents.
+// 			// Use the left camera for these values.
+// 			const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
+// 			const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
+// 			const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
+// 			const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];
 
-			const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
-			const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
-			const left = near * leftFov;
-			const right = near * rightFov;
+// 			const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
+// 			const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
+// 			const left = near * leftFov;
+// 			const right = near * rightFov;
 
-			// Calculate the new camera's position offset from the
-			// left camera. xOffset should be roughly half `ipd`.
-			const zOffset = ipd / ( - leftFov + rightFov );
-			const xOffset = zOffset * - leftFov;
+// 			// Calculate the new camera's position offset from the
+// 			// left camera. xOffset should be roughly half `ipd`.
+// 			const zOffset = ipd / ( - leftFov + rightFov );
+// 			const xOffset = zOffset * - leftFov;
 
-			// TODO: Better way to apply this offset?
-			cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
-			camera.translateX( xOffset );
-			camera.translateZ( zOffset );
-			camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
-			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();
+// 			// TODO: Better way to apply this offset?
+// 			cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
+// 			camera.translateX( xOffset );
+// 			camera.translateZ( zOffset );
+// 			camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
+// 			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();
 
-			// Find the union of the frustum values of the cameras and scale
-			// the values so that the near plane's position does not change in world space,
-			// although must now be relative to the new union camera.
-			const near2 = near + zOffset;
-			const far2 = far + zOffset;
-			const left2 = left - xOffset;
-			const right2 = right + ( ipd - xOffset );
-			const top2 = topFov * far / far2 * near2;
-			const bottom2 = bottomFov * far / far2 * near2;
+// 			// Find the union of the frustum values of the cameras and scale
+// 			// the values so that the near plane's position does not change in world space,
+// 			// although must now be relative to the new union camera.
+// 			const near2 = near + zOffset;
+// 			const far2 = far + zOffset;
+// 			const left2 = left - xOffset;
+// 			const right2 = right + ( ipd - xOffset );
+// 			const top2 = topFov * far / far2 * near2;
+// 			const bottom2 = bottomFov * far / far2 * near2;
 
-			camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
+// 			camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
 
-		}
+// 		}
 
-		function updateCamera( camera, parent ) {
+// 		function updateCamera( camera, parent ) {
 
-			if ( parent === null ) {
+// 			if ( parent === null ) {
 
-				camera.matrixWorld.copy( camera.matrix );
+// 				camera.matrixWorld.copy( camera.matrix );
 
-			} else {
+// 			} else {
 
-				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );
+// 				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );
 
-			}
+// 			}
 
-			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();
+// 			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();
 
-		}
+// 		}
 
-		this.updateCamera = function ( camera ) {
+// 		this.updateCamera = function ( camera ) {
 
-			if ( session === null ) return;
+// 			if ( session === null ) return;
 
-			cameraVR.near = cameraR.near = cameraL.near = camera.near;
-			cameraVR.far = cameraR.far = cameraL.far = camera.far;
+// 			cameraVR.near = cameraR.near = cameraL.near = camera.near;
+// 			cameraVR.far = cameraR.far = cameraL.far = camera.far;
 
-			if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {
+// 			if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {
 
-				// Note that the new renderState won't apply until the next frame. See #18320
+// 				// Note that the new renderState won't apply until the next frame. See #18320
 
-				session.updateRenderState( {
-					depthNear: cameraVR.near,
-					depthFar: cameraVR.far
-				} );
+// 				session.updateRenderState( {
+// 					depthNear: cameraVR.near,
+// 					depthFar: cameraVR.far
+// 				} );
 
-				_currentDepthNear = cameraVR.near;
-				_currentDepthFar = cameraVR.far;
+// 				_currentDepthNear = cameraVR.near;
+// 				_currentDepthFar = cameraVR.far;
 
-			}
+// 			}
 
-			const parent = camera.parent;
-			const cameras = cameraVR.cameras;
+// 			const parent = camera.parent;
+// 			const cameras = cameraVR.cameras;
 
-			updateCamera( cameraVR, parent );
+// 			updateCamera( cameraVR, parent );
 
-			for ( let i = 0; i < cameras.length; i ++ ) {
+// 			for ( let i = 0; i < cameras.length; i ++ ) {
 
-				updateCamera( cameras[ i ], parent );
+// 				updateCamera( cameras[ i ], parent );
 
-			}
+// 			}
 
-			cameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );
+// 			cameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );
 
-			// update user camera and its children
+// 			// update user camera and its children
 
-			camera.matrix.copy( cameraVR.matrix );
-			camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
+// 			camera.matrix.copy( cameraVR.matrix );
+// 			camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
 
-			const children = camera.children;
+// 			const children = camera.children;
 
-			for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-				children[ i ].updateMatrixWorld( true );
+// 				children[ i ].updateMatrixWorld( true );
 
-			}
+// 			}
 
-			// update projection matrix for proper view frustum culling
+// 			// update projection matrix for proper view frustum culling
 
-			if ( cameras.length === 2 ) {
+// 			if ( cameras.length === 2 ) {
 
-				setProjectionFromUnion( cameraVR, cameraL, cameraR );
+// 				setProjectionFromUnion( cameraVR, cameraL, cameraR );
 
-			} else {
+// 			} else {
 
-				// assume single camera setup (AR)
+// 				// assume single camera setup (AR)
 
-				cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );
+// 				cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );
 
-			}
+// 			}
 
-		};
+// 		};
 
-		this.getCamera = function () {
+// 		this.getCamera = function () {
 
-			return cameraVR;
+// 			return cameraVR;
 
-		};
+// 		};
 
-		this.getFoveation = function () {
+// 		this.getFoveation = function () {
 
-			if ( glProjLayer !== null ) {
+// 			if ( glProjLayer !== null ) {
 
-				return glProjLayer.fixedFoveation;
+// 				return glProjLayer.fixedFoveation;
 
-			}
+// 			}
 
-			if ( glBaseLayer !== null ) {
+// 			if ( glBaseLayer !== null ) {
 
-				return glBaseLayer.fixedFoveation;
+// 				return glBaseLayer.fixedFoveation;
 
-			}
+// 			}
 
-			return undefined;
+// 			return undefined;
 
-		};
+// 		};
 
-		this.setFoveation = function ( foveation ) {
+// 		this.setFoveation = function ( foveation ) {
 
-			// 0 = no foveation = full resolution
-			// 1 = maximum foveation = the edges render at lower resolution
+// 			// 0 = no foveation = full resolution
+// 			// 1 = maximum foveation = the edges render at lower resolution
 
-			if ( glProjLayer !== null ) {
+// 			if ( glProjLayer !== null ) {
 
-				glProjLayer.fixedFoveation = foveation;
+// 				glProjLayer.fixedFoveation = foveation;
 
-			}
+// 			}
 
-			if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {
+// 			if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {
 
-				glBaseLayer.fixedFoveation = foveation;
+// 				glBaseLayer.fixedFoveation = foveation;
 
-			}
+// 			}
 
-		};
+// 		};
 
-		// Animation Loop
+// 		// Animation Loop
 
-		let onAnimationFrameCallback = null;
+// 		let onAnimationFrameCallback = null;
 
-		function onAnimationFrame( time, frame ) {
+// 		function onAnimationFrame( time, frame ) {
 
-			pose = frame.getViewerPose( customReferenceSpace || referenceSpace );
-			xrFrame = frame;
+// 			pose = frame.getViewerPose( customReferenceSpace || referenceSpace );
+// 			xrFrame = frame;
 
-			if ( pose !== null ) {
+// 			if ( pose !== null ) {
 
-				const views = pose.views;
+// 				const views = pose.views;
 
-				if ( glBaseLayer !== null ) {
+// 				if ( glBaseLayer !== null ) {
 
-					renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );
-					renderer.setRenderTarget( newRenderTarget );
+// 					renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );
+// 					renderer.setRenderTarget( newRenderTarget );
 
-				}
+// 				}
 
-				let cameraVRNeedsUpdate = false;
+// 				let cameraVRNeedsUpdate = false;
 
-				// check if it's necessary to rebuild cameraVR's camera list
+// 				// check if it's necessary to rebuild cameraVR's camera list
 
-				if ( views.length !== cameraVR.cameras.length ) {
+// 				if ( views.length !== cameraVR.cameras.length ) {
 
-					cameraVR.cameras.length = 0;
-					cameraVRNeedsUpdate = true;
+// 					cameraVR.cameras.length = 0;
+// 					cameraVRNeedsUpdate = true;
 
-				}
+// 				}
 
-				for ( let i = 0; i < views.length; i ++ ) {
+// 				for ( let i = 0; i < views.length; i ++ ) {
 
-					const view = views[ i ];
+// 					const view = views[ i ];
 
-					let viewport = null;
+// 					let viewport = null;
 
-					if ( glBaseLayer !== null ) {
+// 					if ( glBaseLayer !== null ) {
 
-						viewport = glBaseLayer.getViewport( view );
+// 						viewport = glBaseLayer.getViewport( view );
 
-					} else {
+// 					} else {
 
-						const glSubImage = glBinding.getViewSubImage( glProjLayer, view );
-						viewport = glSubImage.viewport;
+// 						const glSubImage = glBinding.getViewSubImage( glProjLayer, view );
+// 						viewport = glSubImage.viewport;
 
-						// For side-by-side projection, we only produce a single texture for both eyes.
-						if ( i === 0 ) {
+// 						// For side-by-side projection, we only produce a single texture for both eyes.
+// 						if ( i === 0 ) {
 
-							renderer.setRenderTargetTextures(
-								newRenderTarget,
-								glSubImage.colorTexture,
-								glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );
+// 							renderer.setRenderTargetTextures(
+// 								newRenderTarget,
+// 								glSubImage.colorTexture,
+// 								glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );
 
-							renderer.setRenderTarget( newRenderTarget );
+// 							renderer.setRenderTarget( newRenderTarget );
 
-						}
+// 						}
 
-					}
+// 					}
 
-					let camera = cameras[ i ];
+// 					let camera = cameras[ i ];
 
-					if ( camera === undefined ) {
+// 					if ( camera === undefined ) {
 
-						camera = new PerspectiveCamera();
-						camera.layers.enable( i );
-						camera.viewport = new Vector4();
-						cameras[ i ] = camera;
+// 						camera = new PerspectiveCamera();
+// 						camera.layers.enable( i );
+// 						camera.viewport = new Vector4();
+// 						cameras[ i ] = camera;
 
-					}
+// 					}
 
-					camera.matrix.fromArray( view.transform.matrix );
-					camera.projectionMatrix.fromArray( view.projectionMatrix );
-					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );
+// 					camera.matrix.fromArray( view.transform.matrix );
+// 					camera.projectionMatrix.fromArray( view.projectionMatrix );
+// 					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );
 
-					if ( i === 0 ) {
+// 					if ( i === 0 ) {
 
-						cameraVR.matrix.copy( camera.matrix );
+// 						cameraVR.matrix.copy( camera.matrix );
 
-					}
+// 					}
 
-					if ( cameraVRNeedsUpdate === true ) {
+// 					if ( cameraVRNeedsUpdate === true ) {
 
-						cameraVR.cameras.push( camera );
+// 						cameraVR.cameras.push( camera );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			//
+// 			//
 
-			for ( let i = 0; i < controllers.length; i ++ ) {
+// 			for ( let i = 0; i < controllers.length; i ++ ) {
 
-				const inputSource = controllerInputSources[ i ];
-				const controller = controllers[ i ];
+// 				const inputSource = controllerInputSources[ i ];
+// 				const controller = controllers[ i ];
 
-				if ( inputSource !== null && controller !== undefined ) {
+// 				if ( inputSource !== null && controller !== undefined ) {
 
-					controller.update( inputSource, frame, customReferenceSpace || referenceSpace );
+// 					controller.update( inputSource, frame, customReferenceSpace || referenceSpace );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );
+// 			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );
 
-			xrFrame = null;
+// 			xrFrame = null;
 
-		}
+// 		}
 
-		const animation = new WebGLAnimation();
+// 		const animation = new WebGLAnimation();
 
-		animation.setAnimationLoop( onAnimationFrame );
+// 		animation.setAnimationLoop( onAnimationFrame );
 
-		this.setAnimationLoop = function ( callback ) {
+// 		this.setAnimationLoop = function ( callback ) {
 
-			onAnimationFrameCallback = callback;
+// 			onAnimationFrameCallback = callback;
 
-		};
+// 		};
 
-		this.dispose = function () {};
+// 		this.dispose = function () {};
 
-	}
+// 	}
 
-}
+// }
 
-function WebGLMaterials( renderer, properties ) {
+// function WebGLMaterials( renderer, properties ) {
 
-	function refreshFogUniforms( uniforms, fog ) {
+// 	function refreshFogUniforms( uniforms, fog ) {
 
-		uniforms.fogColor.value.copy( fog.color );
+// 		uniforms.fogColor.value.copy( fog.color );
 
-		if ( fog.isFog ) {
+// 		if ( fog.isFog ) {
 
-			uniforms.fogNear.value = fog.near;
-			uniforms.fogFar.value = fog.far;
+// 			uniforms.fogNear.value = fog.near;
+// 			uniforms.fogFar.value = fog.far;
 
-		} else if ( fog.isFogExp2 ) {
+// 		} else if ( fog.isFogExp2 ) {
 
-			uniforms.fogDensity.value = fog.density;
+// 			uniforms.fogDensity.value = fog.density;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {
+// 	function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {
 
-		if ( material.isMeshBasicMaterial ) {
+// 		if ( material.isMeshBasicMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
 
-		} else if ( material.isMeshLambertMaterial ) {
+// 		} else if ( material.isMeshLambertMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
 
-		} else if ( material.isMeshToonMaterial ) {
+// 		} else if ( material.isMeshToonMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
-			refreshUniformsToon( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsToon( uniforms, material );
 
-		} else if ( material.isMeshPhongMaterial ) {
+// 		} else if ( material.isMeshPhongMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
-			refreshUniformsPhong( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsPhong( uniforms, material );
 
-		} else if ( material.isMeshStandardMaterial ) {
+// 		} else if ( material.isMeshStandardMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
-			refreshUniformsStandard( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsStandard( uniforms, material );
 
-			if ( material.isMeshPhysicalMaterial ) {
+// 			if ( material.isMeshPhysicalMaterial ) {
 
-				refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );
+// 				refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );
 
-			}
+// 			}
 
-		} else if ( material.isMeshMatcapMaterial ) {
+// 		} else if ( material.isMeshMatcapMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
-			refreshUniformsMatcap( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsMatcap( uniforms, material );
 
-		} else if ( material.isMeshDepthMaterial ) {
+// 		} else if ( material.isMeshDepthMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
 
-		} else if ( material.isMeshDistanceMaterial ) {
+// 		} else if ( material.isMeshDistanceMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
-			refreshUniformsDistance( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsDistance( uniforms, material );
 
-		} else if ( material.isMeshNormalMaterial ) {
+// 		} else if ( material.isMeshNormalMaterial ) {
 
-			refreshUniformsCommon( uniforms, material );
+// 			refreshUniformsCommon( uniforms, material );
 
-		} else if ( material.isLineBasicMaterial ) {
+// 		} else if ( material.isLineBasicMaterial ) {
 
-			refreshUniformsLine( uniforms, material );
+// 			refreshUniformsLine( uniforms, material );
 
-			if ( material.isLineDashedMaterial ) {
+// 			if ( material.isLineDashedMaterial ) {
 
-				refreshUniformsDash( uniforms, material );
+// 				refreshUniformsDash( uniforms, material );
 
-			}
+// 			}
 
-		} else if ( material.isPointsMaterial ) {
+// 		} else if ( material.isPointsMaterial ) {
 
-			refreshUniformsPoints( uniforms, material, pixelRatio, height );
+// 			refreshUniformsPoints( uniforms, material, pixelRatio, height );
 
-		} else if ( material.isSpriteMaterial ) {
+// 		} else if ( material.isSpriteMaterial ) {
 
-			refreshUniformsSprites( uniforms, material );
+// 			refreshUniformsSprites( uniforms, material );
 
-		} else if ( material.isShadowMaterial ) {
+// 		} else if ( material.isShadowMaterial ) {
 
-			uniforms.color.value.copy( material.color );
-			uniforms.opacity.value = material.opacity;
+// 			uniforms.color.value.copy( material.color );
+// 			uniforms.opacity.value = material.opacity;
 
-		} else if ( material.isShaderMaterial ) {
+// 		} else if ( material.isShaderMaterial ) {
 
-			material.uniformsNeedUpdate = false; // #15581
+// 			material.uniformsNeedUpdate = false; // #15581
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshUniformsCommon( uniforms, material ) {
+// 	function refreshUniformsCommon( uniforms, material ) {
 
-		uniforms.opacity.value = material.opacity;
+// 		uniforms.opacity.value = material.opacity;
 
-		if ( material.color ) {
+// 		if ( material.color ) {
 
-			uniforms.diffuse.value.copy( material.color );
+// 			uniforms.diffuse.value.copy( material.color );
 
-		}
+// 		}
 
-		if ( material.emissive ) {
+// 		if ( material.emissive ) {
 
-			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
+// 			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
 
-		}
+// 		}
 
-		if ( material.map ) {
+// 		if ( material.map ) {
 
-			uniforms.map.value = material.map;
+// 			uniforms.map.value = material.map;
 
-		}
+// 		}
 
-		if ( material.alphaMap ) {
+// 		if ( material.alphaMap ) {
 
-			uniforms.alphaMap.value = material.alphaMap;
+// 			uniforms.alphaMap.value = material.alphaMap;
 
-		}
+// 		}
 
-		if ( material.bumpMap ) {
+// 		if ( material.bumpMap ) {
 
-			uniforms.bumpMap.value = material.bumpMap;
-			uniforms.bumpScale.value = material.bumpScale;
-			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
+// 			uniforms.bumpMap.value = material.bumpMap;
+// 			uniforms.bumpScale.value = material.bumpScale;
+// 			if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
 
-		}
+// 		}
 
-		if ( material.displacementMap ) {
+// 		if ( material.displacementMap ) {
 
-			uniforms.displacementMap.value = material.displacementMap;
-			uniforms.displacementScale.value = material.displacementScale;
-			uniforms.displacementBias.value = material.displacementBias;
+// 			uniforms.displacementMap.value = material.displacementMap;
+// 			uniforms.displacementScale.value = material.displacementScale;
+// 			uniforms.displacementBias.value = material.displacementBias;
 
-		}
+// 		}
 
-		if ( material.emissiveMap ) {
+// 		if ( material.emissiveMap ) {
 
-			uniforms.emissiveMap.value = material.emissiveMap;
+// 			uniforms.emissiveMap.value = material.emissiveMap;
 
-		}
+// 		}
 
-		if ( material.normalMap ) {
+// 		if ( material.normalMap ) {
 
-			uniforms.normalMap.value = material.normalMap;
-			uniforms.normalScale.value.copy( material.normalScale );
-			if ( material.side === BackSide ) uniforms.normalScale.value.negate();
+// 			uniforms.normalMap.value = material.normalMap;
+// 			uniforms.normalScale.value.copy( material.normalScale );
+// 			if ( material.side === BackSide ) uniforms.normalScale.value.negate();
 
-		}
+// 		}
 
-		if ( material.specularMap ) {
+// 		if ( material.specularMap ) {
 
-			uniforms.specularMap.value = material.specularMap;
+// 			uniforms.specularMap.value = material.specularMap;
 
-		}
+// 		}
 
-		if ( material.alphaTest > 0 ) {
+// 		if ( material.alphaTest > 0 ) {
 
-			uniforms.alphaTest.value = material.alphaTest;
+// 			uniforms.alphaTest.value = material.alphaTest;
 
-		}
+// 		}
 
-		const envMap = properties.get( material ).envMap;
+// 		const envMap = properties.get( material ).envMap;
 
-		if ( envMap ) {
+// 		if ( envMap ) {
 
-			uniforms.envMap.value = envMap;
+// 			uniforms.envMap.value = envMap;
 
-			uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;
+// 			uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;
 
-			uniforms.reflectivity.value = material.reflectivity;
-			uniforms.ior.value = material.ior;
-			uniforms.refractionRatio.value = material.refractionRatio;
+// 			uniforms.reflectivity.value = material.reflectivity;
+// 			uniforms.ior.value = material.ior;
+// 			uniforms.refractionRatio.value = material.refractionRatio;
 
-		}
+// 		}
 
-		if ( material.lightMap ) {
+// 		if ( material.lightMap ) {
 
-			uniforms.lightMap.value = material.lightMap;
+// 			uniforms.lightMap.value = material.lightMap;
 
-			// artist-friendly light intensity scaling factor
-			const scaleFactor = ( renderer.physicallyCorrectLights !== true ) ? Math.PI : 1;
+// 			// artist-friendly light intensity scaling factor
+// 			const scaleFactor = ( renderer.physicallyCorrectLights !== true ) ? Math.PI : 1;
 
-			uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
+// 			uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
 
-		}
+// 		}
 
-		if ( material.aoMap ) {
+// 		if ( material.aoMap ) {
 
-			uniforms.aoMap.value = material.aoMap;
-			uniforms.aoMapIntensity.value = material.aoMapIntensity;
+// 			uniforms.aoMap.value = material.aoMap;
+// 			uniforms.aoMapIntensity.value = material.aoMapIntensity;
 
-		}
+// 		}
 
-		// uv repeat and offset setting priorities
-		// 1. color map
-		// 2. specular map
-		// 3. displacementMap map
-		// 4. normal map
-		// 5. bump map
-		// 6. roughnessMap map
-		// 7. metalnessMap map
-		// 8. alphaMap map
-		// 9. emissiveMap map
-		// 10. clearcoat map
-		// 11. clearcoat normal map
-		// 12. clearcoat roughnessMap map
-		// 13. iridescence map
-		// 14. iridescence thickness map
-		// 15. specular intensity map
-		// 16. specular tint map
-		// 17. transmission map
-		// 18. thickness map
+// 		// uv repeat and offset setting priorities
+// 		// 1. color map
+// 		// 2. specular map
+// 		// 3. displacementMap map
+// 		// 4. normal map
+// 		// 5. bump map
+// 		// 6. roughnessMap map
+// 		// 7. metalnessMap map
+// 		// 8. alphaMap map
+// 		// 9. emissiveMap map
+// 		// 10. clearcoat map
+// 		// 11. clearcoat normal map
+// 		// 12. clearcoat roughnessMap map
+// 		// 13. iridescence map
+// 		// 14. iridescence thickness map
+// 		// 15. specular intensity map
+// 		// 16. specular tint map
+// 		// 17. transmission map
+// 		// 18. thickness map
 
-		let uvScaleMap;
+// 		let uvScaleMap;
 
-		if ( material.map ) {
+// 		if ( material.map ) {
 
-			uvScaleMap = material.map;
+// 			uvScaleMap = material.map;
 
-		} else if ( material.specularMap ) {
+// 		} else if ( material.specularMap ) {
 
-			uvScaleMap = material.specularMap;
+// 			uvScaleMap = material.specularMap;
 
-		} else if ( material.displacementMap ) {
+// 		} else if ( material.displacementMap ) {
 
-			uvScaleMap = material.displacementMap;
+// 			uvScaleMap = material.displacementMap;
 
-		} else if ( material.normalMap ) {
+// 		} else if ( material.normalMap ) {
 
-			uvScaleMap = material.normalMap;
+// 			uvScaleMap = material.normalMap;
 
-		} else if ( material.bumpMap ) {
+// 		} else if ( material.bumpMap ) {
 
-			uvScaleMap = material.bumpMap;
+// 			uvScaleMap = material.bumpMap;
 
-		} else if ( material.roughnessMap ) {
+// 		} else if ( material.roughnessMap ) {
 
-			uvScaleMap = material.roughnessMap;
+// 			uvScaleMap = material.roughnessMap;
 
-		} else if ( material.metalnessMap ) {
+// 		} else if ( material.metalnessMap ) {
 
-			uvScaleMap = material.metalnessMap;
+// 			uvScaleMap = material.metalnessMap;
 
-		} else if ( material.alphaMap ) {
+// 		} else if ( material.alphaMap ) {
 
-			uvScaleMap = material.alphaMap;
+// 			uvScaleMap = material.alphaMap;
 
-		} else if ( material.emissiveMap ) {
+// 		} else if ( material.emissiveMap ) {
 
-			uvScaleMap = material.emissiveMap;
+// 			uvScaleMap = material.emissiveMap;
 
-		} else if ( material.clearcoatMap ) {
+// 		} else if ( material.clearcoatMap ) {
 
-			uvScaleMap = material.clearcoatMap;
+// 			uvScaleMap = material.clearcoatMap;
 
-		} else if ( material.clearcoatNormalMap ) {
+// 		} else if ( material.clearcoatNormalMap ) {
 
-			uvScaleMap = material.clearcoatNormalMap;
+// 			uvScaleMap = material.clearcoatNormalMap;
 
-		} else if ( material.clearcoatRoughnessMap ) {
+// 		} else if ( material.clearcoatRoughnessMap ) {
 
-			uvScaleMap = material.clearcoatRoughnessMap;
+// 			uvScaleMap = material.clearcoatRoughnessMap;
 
-		} else if ( material.iridescenceMap ) {
+// 		} else if ( material.iridescenceMap ) {
 
-			uvScaleMap = material.iridescenceMap;
+// 			uvScaleMap = material.iridescenceMap;
 
-		} else if ( material.iridescenceThicknessMap ) {
+// 		} else if ( material.iridescenceThicknessMap ) {
 
-			uvScaleMap = material.iridescenceThicknessMap;
+// 			uvScaleMap = material.iridescenceThicknessMap;
 
-		} else if ( material.specularIntensityMap ) {
+// 		} else if ( material.specularIntensityMap ) {
 
-			uvScaleMap = material.specularIntensityMap;
+// 			uvScaleMap = material.specularIntensityMap;
 
-		} else if ( material.specularColorMap ) {
+// 		} else if ( material.specularColorMap ) {
 
-			uvScaleMap = material.specularColorMap;
+// 			uvScaleMap = material.specularColorMap;
 
-		} else if ( material.transmissionMap ) {
+// 		} else if ( material.transmissionMap ) {
 
-			uvScaleMap = material.transmissionMap;
+// 			uvScaleMap = material.transmissionMap;
 
-		} else if ( material.thicknessMap ) {
+// 		} else if ( material.thicknessMap ) {
 
-			uvScaleMap = material.thicknessMap;
+// 			uvScaleMap = material.thicknessMap;
 
-		} else if ( material.sheenColorMap ) {
+// 		} else if ( material.sheenColorMap ) {
 
-			uvScaleMap = material.sheenColorMap;
+// 			uvScaleMap = material.sheenColorMap;
 
-		} else if ( material.sheenRoughnessMap ) {
+// 		} else if ( material.sheenRoughnessMap ) {
 
-			uvScaleMap = material.sheenRoughnessMap;
+// 			uvScaleMap = material.sheenRoughnessMap;
 
-		}
+// 		}
 
-		if ( uvScaleMap !== undefined ) {
+// 		if ( uvScaleMap !== undefined ) {
 
-			// backwards compatibility
-			if ( uvScaleMap.isWebGLRenderTarget ) {
+// 			// backwards compatibility
+// 			if ( uvScaleMap.isWebGLRenderTarget ) {
 
-				uvScaleMap = uvScaleMap.texture;
+// 				uvScaleMap = uvScaleMap.texture;
 
-			}
+// 			}
 
-			if ( uvScaleMap.matrixAutoUpdate === true ) {
+// 			if ( uvScaleMap.matrixAutoUpdate === true ) {
 
-				uvScaleMap.updateMatrix();
+// 				uvScaleMap.updateMatrix();
 
-			}
+// 			}
 
-			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
+// 			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
 
-		}
+// 		}
 
-		// uv repeat and offset setting priorities for uv2
-		// 1. ao map
-		// 2. light map
+// 		// uv repeat and offset setting priorities for uv2
+// 		// 1. ao map
+// 		// 2. light map
 
-		let uv2ScaleMap;
+// 		let uv2ScaleMap;
 
-		if ( material.aoMap ) {
+// 		if ( material.aoMap ) {
 
-			uv2ScaleMap = material.aoMap;
+// 			uv2ScaleMap = material.aoMap;
 
-		} else if ( material.lightMap ) {
+// 		} else if ( material.lightMap ) {
 
-			uv2ScaleMap = material.lightMap;
+// 			uv2ScaleMap = material.lightMap;
 
-		}
+// 		}
 
-		if ( uv2ScaleMap !== undefined ) {
+// 		if ( uv2ScaleMap !== undefined ) {
 
-			// backwards compatibility
-			if ( uv2ScaleMap.isWebGLRenderTarget ) {
+// 			// backwards compatibility
+// 			if ( uv2ScaleMap.isWebGLRenderTarget ) {
 
-				uv2ScaleMap = uv2ScaleMap.texture;
+// 				uv2ScaleMap = uv2ScaleMap.texture;
 
-			}
+// 			}
 
-			if ( uv2ScaleMap.matrixAutoUpdate === true ) {
+// 			if ( uv2ScaleMap.matrixAutoUpdate === true ) {
 
-				uv2ScaleMap.updateMatrix();
+// 				uv2ScaleMap.updateMatrix();
 
-			}
+// 			}
 
-			uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );
+// 			uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshUniformsLine( uniforms, material ) {
+// 	function refreshUniformsLine( uniforms, material ) {
 
-		uniforms.diffuse.value.copy( material.color );
-		uniforms.opacity.value = material.opacity;
+// 		uniforms.diffuse.value.copy( material.color );
+// 		uniforms.opacity.value = material.opacity;
 
-	}
+// 	}
 
-	function refreshUniformsDash( uniforms, material ) {
+// 	function refreshUniformsDash( uniforms, material ) {
 
-		uniforms.dashSize.value = material.dashSize;
-		uniforms.totalSize.value = material.dashSize + material.gapSize;
-		uniforms.scale.value = material.scale;
+// 		uniforms.dashSize.value = material.dashSize;
+// 		uniforms.totalSize.value = material.dashSize + material.gapSize;
+// 		uniforms.scale.value = material.scale;
 
-	}
+// 	}
 
-	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {
+// 	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {
 
-		uniforms.diffuse.value.copy( material.color );
-		uniforms.opacity.value = material.opacity;
-		uniforms.size.value = material.size * pixelRatio;
-		uniforms.scale.value = height * 0.5;
+// 		uniforms.diffuse.value.copy( material.color );
+// 		uniforms.opacity.value = material.opacity;
+// 		uniforms.size.value = material.size * pixelRatio;
+// 		uniforms.scale.value = height * 0.5;
 
-		if ( material.map ) {
+// 		if ( material.map ) {
 
-			uniforms.map.value = material.map;
+// 			uniforms.map.value = material.map;
 
-		}
+// 		}
 
-		if ( material.alphaMap ) {
+// 		if ( material.alphaMap ) {
 
-			uniforms.alphaMap.value = material.alphaMap;
+// 			uniforms.alphaMap.value = material.alphaMap;
 
-		}
+// 		}
 
-		if ( material.alphaTest > 0 ) {
+// 		if ( material.alphaTest > 0 ) {
 
-			uniforms.alphaTest.value = material.alphaTest;
+// 			uniforms.alphaTest.value = material.alphaTest;
 
-		}
+// 		}
 
-		// uv repeat and offset setting priorities
-		// 1. color map
-		// 2. alpha map
+// 		// uv repeat and offset setting priorities
+// 		// 1. color map
+// 		// 2. alpha map
 
-		let uvScaleMap;
+// 		let uvScaleMap;
 
-		if ( material.map ) {
+// 		if ( material.map ) {
 
-			uvScaleMap = material.map;
+// 			uvScaleMap = material.map;
 
-		} else if ( material.alphaMap ) {
+// 		} else if ( material.alphaMap ) {
 
-			uvScaleMap = material.alphaMap;
+// 			uvScaleMap = material.alphaMap;
 
-		}
+// 		}
 
-		if ( uvScaleMap !== undefined ) {
+// 		if ( uvScaleMap !== undefined ) {
 
-			if ( uvScaleMap.matrixAutoUpdate === true ) {
+// 			if ( uvScaleMap.matrixAutoUpdate === true ) {
 
-				uvScaleMap.updateMatrix();
+// 				uvScaleMap.updateMatrix();
 
-			}
+// 			}
 
-			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
+// 			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshUniformsSprites( uniforms, material ) {
+// 	function refreshUniformsSprites( uniforms, material ) {
 
-		uniforms.diffuse.value.copy( material.color );
-		uniforms.opacity.value = material.opacity;
-		uniforms.rotation.value = material.rotation;
+// 		uniforms.diffuse.value.copy( material.color );
+// 		uniforms.opacity.value = material.opacity;
+// 		uniforms.rotation.value = material.rotation;
 
-		if ( material.map ) {
+// 		if ( material.map ) {
 
-			uniforms.map.value = material.map;
+// 			uniforms.map.value = material.map;
 
-		}
+// 		}
 
-		if ( material.alphaMap ) {
+// 		if ( material.alphaMap ) {
 
-			uniforms.alphaMap.value = material.alphaMap;
+// 			uniforms.alphaMap.value = material.alphaMap;
 
-		}
+// 		}
 
-		if ( material.alphaTest > 0 ) {
+// 		if ( material.alphaTest > 0 ) {
 
-			uniforms.alphaTest.value = material.alphaTest;
+// 			uniforms.alphaTest.value = material.alphaTest;
 
-		}
+// 		}
 
-		// uv repeat and offset setting priorities
-		// 1. color map
-		// 2. alpha map
+// 		// uv repeat and offset setting priorities
+// 		// 1. color map
+// 		// 2. alpha map
 
-		let uvScaleMap;
+// 		let uvScaleMap;
 
-		if ( material.map ) {
+// 		if ( material.map ) {
 
-			uvScaleMap = material.map;
+// 			uvScaleMap = material.map;
 
-		} else if ( material.alphaMap ) {
+// 		} else if ( material.alphaMap ) {
 
-			uvScaleMap = material.alphaMap;
+// 			uvScaleMap = material.alphaMap;
 
-		}
+// 		}
 
-		if ( uvScaleMap !== undefined ) {
+// 		if ( uvScaleMap !== undefined ) {
 
-			if ( uvScaleMap.matrixAutoUpdate === true ) {
+// 			if ( uvScaleMap.matrixAutoUpdate === true ) {
 
-				uvScaleMap.updateMatrix();
+// 				uvScaleMap.updateMatrix();
 
-			}
+// 			}
 
-			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
+// 			uniforms.uvTransform.value.copy( uvScaleMap.matrix );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshUniformsPhong( uniforms, material ) {
+// 	function refreshUniformsPhong( uniforms, material ) {
 
-		uniforms.specular.value.copy( material.specular );
-		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
+// 		uniforms.specular.value.copy( material.specular );
+// 		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
 
-	}
+// 	}
 
-	function refreshUniformsToon( uniforms, material ) {
+// 	function refreshUniformsToon( uniforms, material ) {
 
-		if ( material.gradientMap ) {
+// 		if ( material.gradientMap ) {
 
-			uniforms.gradientMap.value = material.gradientMap;
+// 			uniforms.gradientMap.value = material.gradientMap;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshUniformsStandard( uniforms, material ) {
+// 	function refreshUniformsStandard( uniforms, material ) {
 
-		uniforms.roughness.value = material.roughness;
-		uniforms.metalness.value = material.metalness;
+// 		uniforms.roughness.value = material.roughness;
+// 		uniforms.metalness.value = material.metalness;
 
-		if ( material.roughnessMap ) {
+// 		if ( material.roughnessMap ) {
 
-			uniforms.roughnessMap.value = material.roughnessMap;
+// 			uniforms.roughnessMap.value = material.roughnessMap;
 
-		}
+// 		}
 
-		if ( material.metalnessMap ) {
+// 		if ( material.metalnessMap ) {
 
-			uniforms.metalnessMap.value = material.metalnessMap;
+// 			uniforms.metalnessMap.value = material.metalnessMap;
 
-		}
+// 		}
 
-		const envMap = properties.get( material ).envMap;
+// 		const envMap = properties.get( material ).envMap;
 
-		if ( envMap ) {
+// 		if ( envMap ) {
 
-			//uniforms.envMap.value = material.envMap; // part of uniforms common
-			uniforms.envMapIntensity.value = material.envMapIntensity;
+// 			//uniforms.envMap.value = material.envMap; // part of uniforms common
+// 			uniforms.envMapIntensity.value = material.envMapIntensity;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {
+// 	function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {
 
-		uniforms.ior.value = material.ior; // also part of uniforms common
+// 		uniforms.ior.value = material.ior; // also part of uniforms common
 
-		if ( material.sheen > 0 ) {
+// 		if ( material.sheen > 0 ) {
 
-			uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );
+// 			uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );
 
-			uniforms.sheenRoughness.value = material.sheenRoughness;
+// 			uniforms.sheenRoughness.value = material.sheenRoughness;
 
-			if ( material.sheenColorMap ) {
+// 			if ( material.sheenColorMap ) {
 
-				uniforms.sheenColorMap.value = material.sheenColorMap;
+// 				uniforms.sheenColorMap.value = material.sheenColorMap;
 
-			}
+// 			}
 
-			if ( material.sheenRoughnessMap ) {
+// 			if ( material.sheenRoughnessMap ) {
 
-				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
+// 				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( material.clearcoat > 0 ) {
+// 		if ( material.clearcoat > 0 ) {
 
-			uniforms.clearcoat.value = material.clearcoat;
-			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
+// 			uniforms.clearcoat.value = material.clearcoat;
+// 			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
 
-			if ( material.clearcoatMap ) {
+// 			if ( material.clearcoatMap ) {
 
-				uniforms.clearcoatMap.value = material.clearcoatMap;
+// 				uniforms.clearcoatMap.value = material.clearcoatMap;
 
-			}
+// 			}
 
-			if ( material.clearcoatRoughnessMap ) {
+// 			if ( material.clearcoatRoughnessMap ) {
 
-				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
+// 				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
 
-			}
+// 			}
 
-			if ( material.clearcoatNormalMap ) {
+// 			if ( material.clearcoatNormalMap ) {
 
-				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
-				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
+// 				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
+// 				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
 
-				if ( material.side === BackSide ) {
+// 				if ( material.side === BackSide ) {
 
-					uniforms.clearcoatNormalScale.value.negate();
+// 					uniforms.clearcoatNormalScale.value.negate();
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( material.iridescence > 0 ) {
+// 		if ( material.iridescence > 0 ) {
 
-			uniforms.iridescence.value = material.iridescence;
-			uniforms.iridescenceIOR.value = material.iridescenceIOR;
-			uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];
-			uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];
+// 			uniforms.iridescence.value = material.iridescence;
+// 			uniforms.iridescenceIOR.value = material.iridescenceIOR;
+// 			uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];
+// 			uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];
 
-			if ( material.iridescenceMap ) {
+// 			if ( material.iridescenceMap ) {
 
-				uniforms.iridescenceMap.value = material.iridescenceMap;
+// 				uniforms.iridescenceMap.value = material.iridescenceMap;
 
-			}
+// 			}
 
-			if ( material.iridescenceThicknessMap ) {
+// 			if ( material.iridescenceThicknessMap ) {
 
-				uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
+// 				uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( material.transmission > 0 ) {
+// 		if ( material.transmission > 0 ) {
 
-			uniforms.transmission.value = material.transmission;
-			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
-			uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );
+// 			uniforms.transmission.value = material.transmission;
+// 			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
+// 			uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );
 
-			if ( material.transmissionMap ) {
+// 			if ( material.transmissionMap ) {
 
-				uniforms.transmissionMap.value = material.transmissionMap;
+// 				uniforms.transmissionMap.value = material.transmissionMap;
 
-			}
+// 			}
 
-			uniforms.thickness.value = material.thickness;
+// 			uniforms.thickness.value = material.thickness;
 
-			if ( material.thicknessMap ) {
+// 			if ( material.thicknessMap ) {
 
-				uniforms.thicknessMap.value = material.thicknessMap;
+// 				uniforms.thicknessMap.value = material.thicknessMap;
 
-			}
+// 			}
 
-			uniforms.attenuationDistance.value = material.attenuationDistance;
-			uniforms.attenuationColor.value.copy( material.attenuationColor );
+// 			uniforms.attenuationDistance.value = material.attenuationDistance;
+// 			uniforms.attenuationColor.value.copy( material.attenuationColor );
 
-		}
+// 		}
 
-		uniforms.specularIntensity.value = material.specularIntensity;
-		uniforms.specularColor.value.copy( material.specularColor );
+// 		uniforms.specularIntensity.value = material.specularIntensity;
+// 		uniforms.specularColor.value.copy( material.specularColor );
 
-		if ( material.specularIntensityMap ) {
+// 		if ( material.specularIntensityMap ) {
 
-			uniforms.specularIntensityMap.value = material.specularIntensityMap;
+// 			uniforms.specularIntensityMap.value = material.specularIntensityMap;
 
-		}
+// 		}
 
-		if ( material.specularColorMap ) {
+// 		if ( material.specularColorMap ) {
 
-			uniforms.specularColorMap.value = material.specularColorMap;
+// 			uniforms.specularColorMap.value = material.specularColorMap;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshUniformsMatcap( uniforms, material ) {
+// 	function refreshUniformsMatcap( uniforms, material ) {
 
-		if ( material.matcap ) {
+// 		if ( material.matcap ) {
 
-			uniforms.matcap.value = material.matcap;
+// 			uniforms.matcap.value = material.matcap;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function refreshUniformsDistance( uniforms, material ) {
+// 	function refreshUniformsDistance( uniforms, material ) {
 
-		uniforms.referencePosition.value.copy( material.referencePosition );
-		uniforms.nearDistance.value = material.nearDistance;
-		uniforms.farDistance.value = material.farDistance;
+// 		uniforms.referencePosition.value.copy( material.referencePosition );
+// 		uniforms.nearDistance.value = material.nearDistance;
+// 		uniforms.farDistance.value = material.farDistance;
 
-	}
+// 	}
 
-	return {
-		refreshFogUniforms: refreshFogUniforms,
-		refreshMaterialUniforms: refreshMaterialUniforms
-	};
+// 	return {
+// 		refreshFogUniforms: refreshFogUniforms,
+// 		refreshMaterialUniforms: refreshMaterialUniforms
+// 	};
 
-}
+// }
 
-function WebGLUniformsGroups( gl, info, capabilities, state ) {
+// function WebGLUniformsGroups( gl, info, capabilities, state ) {
 
-	let buffers = {};
-	let updateList = {};
-	let allocatedBindingPoints = [];
+// 	let buffers = {};
+// 	let updateList = {};
+// 	let allocatedBindingPoints = [];
 
-	const maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( 35375 ) : 0; // binding points are global whereas block indices are per shader program
+// 	const maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( 35375 ) : 0; // binding points are global whereas block indices are per shader program
 
-	function bind( uniformsGroup, program ) {
+// 	function bind( uniformsGroup, program ) {
 
-		const webglProgram = program.program;
-		state.uniformBlockBinding( uniformsGroup, webglProgram );
+// 		const webglProgram = program.program;
+// 		state.uniformBlockBinding( uniformsGroup, webglProgram );
 
-	}
+// 	}
 
-	function update( uniformsGroup, program ) {
+// 	function update( uniformsGroup, program ) {
 
-		let buffer = buffers[ uniformsGroup.id ];
+// 		let buffer = buffers[ uniformsGroup.id ];
 
-		if ( buffer === undefined ) {
+// 		if ( buffer === undefined ) {
 
-			prepareUniformsGroup( uniformsGroup );
+// 			prepareUniformsGroup( uniformsGroup );
 
-			buffer = createBuffer( uniformsGroup );
-			buffers[ uniformsGroup.id ] = buffer;
+// 			buffer = createBuffer( uniformsGroup );
+// 			buffers[ uniformsGroup.id ] = buffer;
 
-			uniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );
+// 			uniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );
 
-		}
+// 		}
 
-		// ensure to update the binding points/block indices mapping for this program
+// 		// ensure to update the binding points/block indices mapping for this program
 
-		const webglProgram = program.program;
-		state.updateUBOMapping( uniformsGroup, webglProgram );
+// 		const webglProgram = program.program;
+// 		state.updateUBOMapping( uniformsGroup, webglProgram );
 
-		// update UBO once per frame
+// 		// update UBO once per frame
 
-		const frame = info.render.frame;
+// 		const frame = info.render.frame;
 
-		if ( updateList[ uniformsGroup.id ] !== frame ) {
+// 		if ( updateList[ uniformsGroup.id ] !== frame ) {
 
-			updateBufferData( uniformsGroup );
+// 			updateBufferData( uniformsGroup );
 
-			updateList[ uniformsGroup.id ] = frame;
+// 			updateList[ uniformsGroup.id ] = frame;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function createBuffer( uniformsGroup ) {
+// 	function createBuffer( uniformsGroup ) {
 
-		// the setup of an UBO is independent of a particular shader program but global
+// 		// the setup of an UBO is independent of a particular shader program but global
 
-		const bindingPointIndex = allocateBindingPointIndex();
-		uniformsGroup.__bindingPointIndex = bindingPointIndex;
+// 		const bindingPointIndex = allocateBindingPointIndex();
+// 		uniformsGroup.__bindingPointIndex = bindingPointIndex;
 
-		const buffer = gl.createBuffer();
-		const size = uniformsGroup.__size;
-		const usage = uniformsGroup.usage;
+// 		const buffer = gl.createBuffer();
+// 		const size = uniformsGroup.__size;
+// 		const usage = uniformsGroup.usage;
 
-		gl.bindBuffer( 35345, buffer );
-		gl.bufferData( 35345, size, usage );
-		gl.bindBuffer( 35345, null );
-		gl.bindBufferBase( 35345, bindingPointIndex, buffer );
+// 		gl.bindBuffer( 35345, buffer );
+// 		gl.bufferData( 35345, size, usage );
+// 		gl.bindBuffer( 35345, null );
+// 		gl.bindBufferBase( 35345, bindingPointIndex, buffer );
 
-		return buffer;
+// 		return buffer;
 
-	}
+// 	}
 
-	function allocateBindingPointIndex() {
+// 	function allocateBindingPointIndex() {
 
-		for ( let i = 0; i < maxBindingPoints; i ++ ) {
+// 		for ( let i = 0; i < maxBindingPoints; i ++ ) {
 
-			if ( allocatedBindingPoints.indexOf( i ) === - 1 ) {
+// 			if ( allocatedBindingPoints.indexOf( i ) === - 1 ) {
 
-				allocatedBindingPoints.push( i );
-				return i;
+// 				allocatedBindingPoints.push( i );
+// 				return i;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		console.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );
+// 		console.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );
 
-		return 0;
+// 		return 0;
 
-	}
+// 	}
 
-	function updateBufferData( uniformsGroup ) {
+// 	function updateBufferData( uniformsGroup ) {
 
-		const buffer = buffers[ uniformsGroup.id ];
-		const uniforms = uniformsGroup.uniforms;
-		const cache = uniformsGroup.__cache;
+// 		const buffer = buffers[ uniformsGroup.id ];
+// 		const uniforms = uniformsGroup.uniforms;
+// 		const cache = uniformsGroup.__cache;
 
-		gl.bindBuffer( 35345, buffer );
+// 		gl.bindBuffer( 35345, buffer );
 
-		for ( let i = 0, il = uniforms.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = uniforms.length; i < il; i ++ ) {
 
-			const uniform = uniforms[ i ];
+// 			const uniform = uniforms[ i ];
 
-			// partly update the buffer if necessary
+// 			// partly update the buffer if necessary
 
-			if ( hasUniformChanged( uniform, i, cache ) === true ) {
+// 			if ( hasUniformChanged( uniform, i, cache ) === true ) {
 
-				const value = uniform.value;
-				const offset = uniform.__offset;
+// 				const value = uniform.value;
+// 				const offset = uniform.__offset;
 
-				if ( typeof value === 'number' ) {
+// 				if ( typeof value === 'number' ) {
 
-					uniform.__data[ 0 ] = value;
-					gl.bufferSubData( 35345, offset, uniform.__data );
+// 					uniform.__data[ 0 ] = value;
+// 					gl.bufferSubData( 35345, offset, uniform.__data );
 
-				} else {
+// 				} else {
 
-					if ( uniform.value.isMatrix3 ) {
+// 					if ( uniform.value.isMatrix3 ) {
 
-						// manually converting 3x3 to 3x4
+// 						// manually converting 3x3 to 3x4
 
-						uniform.__data[ 0 ] = uniform.value.elements[ 0 ];
-						uniform.__data[ 1 ] = uniform.value.elements[ 1 ];
-						uniform.__data[ 2 ] = uniform.value.elements[ 2 ];
-						uniform.__data[ 3 ] = uniform.value.elements[ 0 ];
-						uniform.__data[ 4 ] = uniform.value.elements[ 3 ];
-						uniform.__data[ 5 ] = uniform.value.elements[ 4 ];
-						uniform.__data[ 6 ] = uniform.value.elements[ 5 ];
-						uniform.__data[ 7 ] = uniform.value.elements[ 0 ];
-						uniform.__data[ 8 ] = uniform.value.elements[ 6 ];
-						uniform.__data[ 9 ] = uniform.value.elements[ 7 ];
-						uniform.__data[ 10 ] = uniform.value.elements[ 8 ];
-						uniform.__data[ 11 ] = uniform.value.elements[ 0 ];
+// 						uniform.__data[ 0 ] = uniform.value.elements[ 0 ];
+// 						uniform.__data[ 1 ] = uniform.value.elements[ 1 ];
+// 						uniform.__data[ 2 ] = uniform.value.elements[ 2 ];
+// 						uniform.__data[ 3 ] = uniform.value.elements[ 0 ];
+// 						uniform.__data[ 4 ] = uniform.value.elements[ 3 ];
+// 						uniform.__data[ 5 ] = uniform.value.elements[ 4 ];
+// 						uniform.__data[ 6 ] = uniform.value.elements[ 5 ];
+// 						uniform.__data[ 7 ] = uniform.value.elements[ 0 ];
+// 						uniform.__data[ 8 ] = uniform.value.elements[ 6 ];
+// 						uniform.__data[ 9 ] = uniform.value.elements[ 7 ];
+// 						uniform.__data[ 10 ] = uniform.value.elements[ 8 ];
+// 						uniform.__data[ 11 ] = uniform.value.elements[ 0 ];
 
-					} else {
+// 					} else {
 
-						value.toArray( uniform.__data );
+// 						value.toArray( uniform.__data );
 
-					}
+// 					}
 
-					gl.bufferSubData( 35345, offset, uniform.__data );
+// 					gl.bufferSubData( 35345, offset, uniform.__data );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		gl.bindBuffer( 35345, null );
+// 		gl.bindBuffer( 35345, null );
 
-	}
+// 	}
 
-	function hasUniformChanged( uniform, index, cache ) {
+// 	function hasUniformChanged( uniform, index, cache ) {
 
-		const value = uniform.value;
+// 		const value = uniform.value;
 
-		if ( cache[ index ] === undefined ) {
+// 		if ( cache[ index ] === undefined ) {
 
-			// cache entry does not exist so far
+// 			// cache entry does not exist so far
 
-			if ( typeof value === 'number' ) {
+// 			if ( typeof value === 'number' ) {
 
-				cache[ index ] = value;
+// 				cache[ index ] = value;
 
-			} else {
+// 			} else {
 
-				cache[ index ] = value.clone();
+// 				cache[ index ] = value.clone();
 
-			}
+// 			}
 
-			return true;
+// 			return true;
 
-		} else {
+// 		} else {
 
-			// compare current value with cached entry
+// 			// compare current value with cached entry
 
-			if ( typeof value === 'number' ) {
+// 			if ( typeof value === 'number' ) {
 
-				if ( cache[ index ] !== value ) {
+// 				if ( cache[ index ] !== value ) {
 
-					cache[ index ] = value;
-					return true;
+// 					cache[ index ] = value;
+// 					return true;
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				const cachedObject = cache[ index ];
+// 				const cachedObject = cache[ index ];
 
-				if ( cachedObject.equals( value ) === false ) {
+// 				if ( cachedObject.equals( value ) === false ) {
 
-					cachedObject.copy( value );
-					return true;
+// 					cachedObject.copy( value );
+// 					return true;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return false;
+// 		return false;
 
-	}
+// 	}
 
-	function prepareUniformsGroup( uniformsGroup ) {
+// 	function prepareUniformsGroup( uniformsGroup ) {
 
-		// determine total buffer size according to the STD140 layout
-		// Hint: STD140 is the only supported layout in WebGL 2
+// 		// determine total buffer size according to the STD140 layout
+// 		// Hint: STD140 is the only supported layout in WebGL 2
 
-		const uniforms = uniformsGroup.uniforms;
+// 		const uniforms = uniformsGroup.uniforms;
 
-		let offset = 0; // global buffer offset in bytes
-		const chunkSize = 16; // size of a chunk in bytes
-		let chunkOffset = 0; // offset within a single chunk in bytes
+// 		let offset = 0; // global buffer offset in bytes
+// 		const chunkSize = 16; // size of a chunk in bytes
+// 		let chunkOffset = 0; // offset within a single chunk in bytes
 
-		for ( let i = 0, l = uniforms.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = uniforms.length; i < l; i ++ ) {
 
-			const uniform = uniforms[ i ];
-			const info = getUniformSize( uniform );
+// 			const uniform = uniforms[ i ];
+// 			const info = getUniformSize( uniform );
 
-			// the following two properties will be used for partial buffer updates
+// 			// the following two properties will be used for partial buffer updates
 
-			uniform.__data = new Float32Array( info.storage / Float32Array.BYTES_PER_ELEMENT );
-			uniform.__offset = offset;
+// 			uniform.__data = new Float32Array( info.storage / Float32Array.BYTES_PER_ELEMENT );
+// 			uniform.__offset = offset;
 
-			//
+// 			//
 
-			if ( i > 0 ) {
+// 			if ( i > 0 ) {
 
-				chunkOffset = offset % chunkSize;
+// 				chunkOffset = offset % chunkSize;
 
-				const remainingSizeInChunk = chunkSize - chunkOffset;
+// 				const remainingSizeInChunk = chunkSize - chunkOffset;
 
-				// check for chunk overflow
+// 				// check for chunk overflow
 
-				if ( chunkOffset !== 0 && ( remainingSizeInChunk - info.boundary ) < 0 ) {
+// 				if ( chunkOffset !== 0 && ( remainingSizeInChunk - info.boundary ) < 0 ) {
 
-					// add padding and adjust offset
+// 					// add padding and adjust offset
 
-					offset += ( chunkSize - chunkOffset );
-					uniform.__offset = offset;
+// 					offset += ( chunkSize - chunkOffset );
+// 					uniform.__offset = offset;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			offset += info.storage;
+// 			offset += info.storage;
 
-		}
+// 		}
 
-		// ensure correct final padding
+// 		// ensure correct final padding
 
-		chunkOffset = offset % chunkSize;
+// 		chunkOffset = offset % chunkSize;
 
-		if ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );
+// 		if ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );
 
-		//
+// 		//
 
-		uniformsGroup.__size = offset;
-		uniformsGroup.__cache = {};
+// 		uniformsGroup.__size = offset;
+// 		uniformsGroup.__cache = {};
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	function getUniformSize( uniform ) {
+// 	function getUniformSize( uniform ) {
 
-		const value = uniform.value;
+// 		const value = uniform.value;
 
-		const info = {
-			boundary: 0, // bytes
-			storage: 0 // bytes
-		};
+// 		const info = {
+// 			boundary: 0, // bytes
+// 			storage: 0 // bytes
+// 		};
 
-		// determine sizes according to STD140
+// 		// determine sizes according to STD140
 
-		if ( typeof value === 'number' ) {
+// 		if ( typeof value === 'number' ) {
 
-			// float/int
+// 			// float/int
 
-			info.boundary = 4;
-			info.storage = 4;
+// 			info.boundary = 4;
+// 			info.storage = 4;
 
-		} else if ( value.isVector2 ) {
+// 		} else if ( value.isVector2 ) {
 
-			// vec2
+// 			// vec2
 
-			info.boundary = 8;
-			info.storage = 8;
+// 			info.boundary = 8;
+// 			info.storage = 8;
 
-		} else if ( value.isVector3 || value.isColor ) {
+// 		} else if ( value.isVector3 || value.isColor ) {
 
-			// vec3
+// 			// vec3
 
-			info.boundary = 16;
-			info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes
+// 			info.boundary = 16;
+// 			info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes
 
-		} else if ( value.isVector4 ) {
+// 		} else if ( value.isVector4 ) {
 
-			// vec4
+// 			// vec4
 
-			info.boundary = 16;
-			info.storage = 16;
+// 			info.boundary = 16;
+// 			info.storage = 16;
 
-		} else if ( value.isMatrix3 ) {
+// 		} else if ( value.isMatrix3 ) {
 
-			// mat3 (in STD140 a 3x3 matrix is represented as 3x4)
+// 			// mat3 (in STD140 a 3x3 matrix is represented as 3x4)
 
-			info.boundary = 48;
-			info.storage = 48;
+// 			info.boundary = 48;
+// 			info.storage = 48;
 
-		} else if ( value.isMatrix4 ) {
+// 		} else if ( value.isMatrix4 ) {
 
-			// mat4
+// 			// mat4
 
-			info.boundary = 64;
-			info.storage = 64;
+// 			info.boundary = 64;
+// 			info.storage = 64;
 
-		} else if ( value.isTexture ) {
+// 		} else if ( value.isTexture ) {
 
-			console.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );
+// 			console.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );
 
-		} else {
+// 		} else {
 
-			console.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );
+// 			console.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );
 
-		}
+// 		}
 
-		return info;
+// 		return info;
 
-	}
+// 	}
 
-	function onUniformsGroupsDispose( event ) {
+// 	function onUniformsGroupsDispose( event ) {
 
-		const uniformsGroup = event.target;
+// 		const uniformsGroup = event.target;
 
-		uniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );
+// 		uniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );
 
-		const index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );
-		allocatedBindingPoints.splice( index, 1 );
+// 		const index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );
+// 		allocatedBindingPoints.splice( index, 1 );
 
-		gl.deleteBuffer( buffers[ uniformsGroup.id ] );
+// 		gl.deleteBuffer( buffers[ uniformsGroup.id ] );
 
-		delete buffers[ uniformsGroup.id ];
-		delete updateList[ uniformsGroup.id ];
+// 		delete buffers[ uniformsGroup.id ];
+// 		delete updateList[ uniformsGroup.id ];
 
-	}
+// 	}
 
-	function dispose() {
+// 	function dispose() {
 
-		for ( const id in buffers ) {
+// 		for ( const id in buffers ) {
 
-			gl.deleteBuffer( buffers[ id ] );
+// 			gl.deleteBuffer( buffers[ id ] );
 
-		}
+// 		}
 
-		allocatedBindingPoints = [];
-		buffers = {};
-		updateList = {};
+// 		allocatedBindingPoints = [];
+// 		buffers = {};
+// 		updateList = {};
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		bind: bind,
-		update: update,
+// 		bind: bind,
+// 		update: update,
 
-		dispose: dispose
+// 		dispose: dispose
 
-	};
+// 	};
 
-}
+// }
 
-function createCanvasElement() {
+// function createCanvasElement() {
 
-	const canvas = createElementNS( 'canvas' );
-	canvas.style.display = 'block';
-	return canvas;
+// 	const canvas = createElementNS( 'canvas' );
+// 	canvas.style.display = 'block';
+// 	return canvas;
 
-}
+// }
 
-function WebGLRenderer( parameters = {} ) {
+// function WebGLRenderer( parameters = {} ) {
 
-	this.isWebGLRenderer = true;
+// 	this.isWebGLRenderer = true;
 
-	const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
-		_context = parameters.context !== undefined ? parameters.context : null,
+// 	const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),
+// 		_context = parameters.context !== undefined ? parameters.context : null,
 
-		_depth = parameters.depth !== undefined ? parameters.depth : true,
-		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
-		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
-		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
-		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
-		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
-		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
+// 		_depth = parameters.depth !== undefined ? parameters.depth : true,
+// 		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
+// 		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
+// 		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
+// 		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
+// 		_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
+// 		_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
 
-	let _alpha;
+// 	let _alpha;
 
-	if ( _context !== null ) {
+// 	if ( _context !== null ) {
 
-		_alpha = _context.getContextAttributes().alpha;
+// 		_alpha = _context.getContextAttributes().alpha;
 
-	} else {
+// 	} else {
 
-		_alpha = parameters.alpha !== undefined ? parameters.alpha : false;
+// 		_alpha = parameters.alpha !== undefined ? parameters.alpha : false;
 
-	}
+// 	}
 
-	let currentRenderList = null;
-	let currentRenderState = null;
+// 	let currentRenderList = null;
+// 	let currentRenderState = null;
 
-	// render() can be called from within a callback triggered by another render.
-	// We track this so that the nested render call gets its list and state isolated from the parent render call.
+// 	// render() can be called from within a callback triggered by another render.
+// 	// We track this so that the nested render call gets its list and state isolated from the parent render call.
 
-	const renderListStack = [];
-	const renderStateStack = [];
+// 	const renderListStack = [];
+// 	const renderStateStack = [];
 
-	// public properties
+// 	// public properties
 
-	this.domElement = _canvas;
+// 	this.domElement = _canvas;
 
-	// Debug configuration container
-	this.debug = {
+// 	// Debug configuration container
+// 	this.debug = {
 
-		/**
-		 * Enables error checking and reporting when shader programs are being compiled
-		 * @type {boolean}
-		 */
-		checkShaderErrors: true
-	};
+// 		/**
+// 		 * Enables error checking and reporting when shader programs are being compiled
+// 		 * @type {boolean}
+// 		 */
+// 		checkShaderErrors: true
+// 	};
 
-	// clearing
+// 	// clearing
 
-	this.autoClear = true;
-	this.autoClearColor = true;
-	this.autoClearDepth = true;
-	this.autoClearStencil = true;
+// 	this.autoClear = true;
+// 	this.autoClearColor = true;
+// 	this.autoClearDepth = true;
+// 	this.autoClearStencil = true;
 
-	// scene graph
+// 	// scene graph
 
-	this.sortObjects = true;
+// 	this.sortObjects = true;
 
-	// user-defined clipping
+// 	// user-defined clipping
 
-	this.clippingPlanes = [];
-	this.localClippingEnabled = false;
+// 	this.clippingPlanes = [];
+// 	this.localClippingEnabled = false;
 
-	// physically based shading
+// 	// physically based shading
 
-	this.outputEncoding = LinearEncoding;
+// 	this.outputEncoding = LinearEncoding;
 
-	// physical lights
+// 	// physical lights
 
-	this.physicallyCorrectLights = false;
+// 	this.physicallyCorrectLights = false;
 
-	// tone mapping
+// 	// tone mapping
 
-	this.toneMapping = NoToneMapping;
-	this.toneMappingExposure = 1.0;
+// 	this.toneMapping = NoToneMapping;
+// 	this.toneMappingExposure = 1.0;
 
-	//
+// 	//
 
-	Object.defineProperties( this, {
+// 	Object.defineProperties( this, {
 
-		// @deprecated since r136, 0e21088102b4de7e0a0a33140620b7a3424b9e6d
+// 		// @deprecated since r136, 0e21088102b4de7e0a0a33140620b7a3424b9e6d
 
-		gammaFactor: {
-			get: function () {
+// 		gammaFactor: {
+// 			get: function () {
 
-				console.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );
-				return 2;
+// 				console.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );
+// 				return 2;
 
-			},
-			set: function () {
+// 			},
+// 			set: function () {
 
-				console.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );
+// 				console.warn( 'THREE.WebGLRenderer: .gammaFactor has been removed.' );
 
-			}
-		}
+// 			}
+// 		}
 
-	} );
+// 	} );
 
-	// internal properties
+// 	// internal properties
 
-	const _this = this;
+// 	const _this = this;
 
-	let _isContextLost = false;
+// 	let _isContextLost = false;
 
-	// internal state cache
+// 	// internal state cache
 
-	let _currentActiveCubeFace = 0;
-	let _currentActiveMipmapLevel = 0;
-	let _currentRenderTarget = null;
-	let _currentMaterialId = - 1;
+// 	let _currentActiveCubeFace = 0;
+// 	let _currentActiveMipmapLevel = 0;
+// 	let _currentRenderTarget = null;
+// 	let _currentMaterialId = - 1;
 
-	let _currentCamera = null;
+// 	let _currentCamera = null;
 
-	const _currentViewport = new Vector4();
-	const _currentScissor = new Vector4();
-	let _currentScissorTest = null;
+// 	const _currentViewport = new Vector4();
+// 	const _currentScissor = new Vector4();
+// 	let _currentScissorTest = null;
 
-	//
+// 	//
 
-	let _width = _canvas.width;
-	let _height = _canvas.height;
+// 	let _width = _canvas.width;
+// 	let _height = _canvas.height;
 
-	let _pixelRatio = 1;
-	let _opaqueSort = null;
-	let _transparentSort = null;
+// 	let _pixelRatio = 1;
+// 	let _opaqueSort = null;
+// 	let _transparentSort = null;
 
-	const _viewport = new Vector4( 0, 0, _width, _height );
-	const _scissor = new Vector4( 0, 0, _width, _height );
-	let _scissorTest = false;
+// 	const _viewport = new Vector4( 0, 0, _width, _height );
+// 	const _scissor = new Vector4( 0, 0, _width, _height );
+// 	let _scissorTest = false;
 
-	// frustum
+// 	// frustum
 
-	const _frustum = new Frustum();
+// 	const _frustum = new Frustum();
 
-	// clipping
+// 	// clipping
 
-	let _clippingEnabled = false;
-	let _localClippingEnabled = false;
+// 	let _clippingEnabled = false;
+// 	let _localClippingEnabled = false;
 
-	// transmission
+// 	// transmission
 
-	let _transmissionRenderTarget = null;
+// 	let _transmissionRenderTarget = null;
 
-	// camera matrices cache
+// 	// camera matrices cache
 
-	const _projScreenMatrix = new Matrix4();
+// 	const _projScreenMatrix = new Matrix4();
 
-	const _vector2 = new Vector2();
-	const _vector3 = new Vector3();
+// 	const _vector2 = new Vector2();
+// 	const _vector3 = new Vector3();
 
-	const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
+// 	const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
 
-	function getTargetPixelRatio() {
+// 	function getTargetPixelRatio() {
 
-		return _currentRenderTarget === null ? _pixelRatio : 1;
+// 		return _currentRenderTarget === null ? _pixelRatio : 1;
 
-	}
+// 	}
 
-	// initialize
+// 	// initialize
 
-	let _gl = _context;
+// 	let _gl = _context;
 
-	function getContext( contextNames, contextAttributes ) {
+// 	function getContext( contextNames, contextAttributes ) {
 
-		for ( let i = 0; i < contextNames.length; i ++ ) {
+// 		for ( let i = 0; i < contextNames.length; i ++ ) {
 
-			const contextName = contextNames[ i ];
-			const context = _canvas.getContext( contextName, contextAttributes );
-			if ( context !== null ) return context;
+// 			const contextName = contextNames[ i ];
+// 			const context = _canvas.getContext( contextName, contextAttributes );
+// 			if ( context !== null ) return context;
 
-		}
+// 		}
 
-		return null;
+// 		return null;
 
-	}
+// 	}
 
-	try {
+// 	try {
 
-		const contextAttributes = {
-			alpha: true,
-			depth: _depth,
-			stencil: _stencil,
-			antialias: _antialias,
-			premultipliedAlpha: _premultipliedAlpha,
-			preserveDrawingBuffer: _preserveDrawingBuffer,
-			powerPreference: _powerPreference,
-			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
-		};
+// 		const contextAttributes = {
+// 			alpha: true,
+// 			depth: _depth,
+// 			stencil: _stencil,
+// 			antialias: _antialias,
+// 			premultipliedAlpha: _premultipliedAlpha,
+// 			preserveDrawingBuffer: _preserveDrawingBuffer,
+// 			powerPreference: _powerPreference,
+// 			failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
+// 		};
 
-		// OffscreenCanvas does not have setAttribute, see #22811
-		if ( 'setAttribute' in _canvas ) _canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );
+// 		// OffscreenCanvas does not have setAttribute, see #22811
+// 		if ( 'setAttribute' in _canvas ) _canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );
 
-		// event listeners must be registered before WebGL context is created, see #12753
-		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
-		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
-		_canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );
+// 		// event listeners must be registered before WebGL context is created, see #12753
+// 		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
+// 		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
+// 		_canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );
 
-		if ( _gl === null ) {
+// 		if ( _gl === null ) {
 
-			const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];
+// 			const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];
 
-			if ( _this.isWebGL1Renderer === true ) {
+// 			if ( _this.isWebGL1Renderer === true ) {
 
-				contextNames.shift();
+// 				contextNames.shift();
 
-			}
+// 			}
 
-			_gl = getContext( contextNames, contextAttributes );
+// 			_gl = getContext( contextNames, contextAttributes );
 
-			if ( _gl === null ) {
+// 			if ( _gl === null ) {
 
-				if ( getContext( contextNames ) ) {
+// 				if ( getContext( contextNames ) ) {
 
-					throw new Error( 'Error creating WebGL context with your selected attributes.' );
+// 					throw new Error( 'Error creating WebGL context with your selected attributes.' );
 
-				} else {
+// 				} else {
 
-					throw new Error( 'Error creating WebGL context.' );
+// 					throw new Error( 'Error creating WebGL context.' );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// Some experimental-webgl implementations do not have getShaderPrecisionFormat
+// 		// Some experimental-webgl implementations do not have getShaderPrecisionFormat
 
-		if ( _gl.getShaderPrecisionFormat === undefined ) {
+// 		if ( _gl.getShaderPrecisionFormat === undefined ) {
 
-			_gl.getShaderPrecisionFormat = function () {
+// 			_gl.getShaderPrecisionFormat = function () {
 
-				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };
+// 				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };
 
-			};
+// 			};
 
-		}
+// 		}
 
-	} catch ( error ) {
+// 	} catch ( error ) {
 
-		console.error( 'THREE.WebGLRenderer: ' + error.message );
-		throw error;
+// 		console.error( 'THREE.WebGLRenderer: ' + error.message );
+// 		throw error;
 
-	}
+// 	}
 
-	let extensions, capabilities, state, info;
-	let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
-	let programCache, materials, renderLists, renderStates, clipping, shadowMap;
+// 	let extensions, capabilities, state, info;
+// 	let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
+// 	let programCache, materials, renderLists, renderStates, clipping, shadowMap;
 
-	let background, morphtargets, bufferRenderer, indexedBufferRenderer;
+// 	let background, morphtargets, bufferRenderer, indexedBufferRenderer;
 
-	let utils, bindingStates, uniformsGroups;
+// 	let utils, bindingStates, uniformsGroups;
 
-	function initGLContext() {
+// 	function initGLContext() {
 
-		extensions = new WebGLExtensions( _gl );
+// 		extensions = new WebGLExtensions( _gl );
 
-		capabilities = new WebGLCapabilities( _gl, extensions, parameters );
+// 		capabilities = new WebGLCapabilities( _gl, extensions, parameters );
 
-		extensions.init( capabilities );
+// 		extensions.init( capabilities );
 
-		utils = new WebGLUtils( _gl, extensions, capabilities );
+// 		utils = new WebGLUtils( _gl, extensions, capabilities );
 
-		state = new WebGLState( _gl, extensions, capabilities );
+// 		state = new WebGLState( _gl, extensions, capabilities );
 
-		info = new WebGLInfo();
-		properties = new WebGLProperties();
-		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
-		cubemaps = new WebGLCubeMaps( _this );
-		cubeuvmaps = new WebGLCubeUVMaps( _this );
-		attributes = new WebGLAttributes( _gl, capabilities );
-		bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
-		geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
-		objects = new WebGLObjects( _gl, geometries, attributes, info );
-		morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
-		clipping = new WebGLClipping( properties );
-		programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
-		materials = new WebGLMaterials( _this, properties );
-		renderLists = new WebGLRenderLists();
-		renderStates = new WebGLRenderStates( extensions, capabilities );
-		background = new WebGLBackground( _this, cubemaps, state, objects, _alpha, _premultipliedAlpha );
-		shadowMap = new WebGLShadowMap( _this, objects, capabilities );
-		uniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );
+// 		info = new WebGLInfo();
+// 		properties = new WebGLProperties();
+// 		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
+// 		cubemaps = new WebGLCubeMaps( _this );
+// 		cubeuvmaps = new WebGLCubeUVMaps( _this );
+// 		attributes = new WebGLAttributes( _gl, capabilities );
+// 		bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
+// 		geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
+// 		objects = new WebGLObjects( _gl, geometries, attributes, info );
+// 		morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
+// 		clipping = new WebGLClipping( properties );
+// 		programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
+// 		materials = new WebGLMaterials( _this, properties );
+// 		renderLists = new WebGLRenderLists();
+// 		renderStates = new WebGLRenderStates( extensions, capabilities );
+// 		background = new WebGLBackground( _this, cubemaps, state, objects, _alpha, _premultipliedAlpha );
+// 		shadowMap = new WebGLShadowMap( _this, objects, capabilities );
+// 		uniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );
 
-		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
-		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );
+// 		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
+// 		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );
 
-		info.programs = programCache.programs;
+// 		info.programs = programCache.programs;
 
-		_this.capabilities = capabilities;
-		_this.extensions = extensions;
-		_this.properties = properties;
-		_this.renderLists = renderLists;
-		_this.shadowMap = shadowMap;
-		_this.state = state;
-		_this.info = info;
+// 		_this.capabilities = capabilities;
+// 		_this.extensions = extensions;
+// 		_this.properties = properties;
+// 		_this.renderLists = renderLists;
+// 		_this.shadowMap = shadowMap;
+// 		_this.state = state;
+// 		_this.info = info;
 
-	}
+// 	}
 
-	initGLContext();
+// 	initGLContext();
 
-	// xr
+// 	// xr
 
-	const xr = new WebXRManager( _this, _gl );
+// 	const xr = new WebXRManager( _this, _gl );
 
-	this.xr = xr;
+// 	this.xr = xr;
 
-	// API
+// 	// API
 
-	this.getContext = function () {
+// 	this.getContext = function () {
 
-		return _gl;
+// 		return _gl;
 
-	};
+// 	};
 
-	this.getContextAttributes = function () {
+// 	this.getContextAttributes = function () {
 
-		return _gl.getContextAttributes();
+// 		return _gl.getContextAttributes();
 
-	};
+// 	};
 
-	this.forceContextLoss = function () {
+// 	this.forceContextLoss = function () {
 
-		const extension = extensions.get( 'WEBGL_lose_context' );
-		if ( extension ) extension.loseContext();
+// 		const extension = extensions.get( 'WEBGL_lose_context' );
+// 		if ( extension ) extension.loseContext();
 
-	};
+// 	};
 
-	this.forceContextRestore = function () {
+// 	this.forceContextRestore = function () {
 
-		const extension = extensions.get( 'WEBGL_lose_context' );
-		if ( extension ) extension.restoreContext();
+// 		const extension = extensions.get( 'WEBGL_lose_context' );
+// 		if ( extension ) extension.restoreContext();
 
-	};
+// 	};
 
-	this.getPixelRatio = function () {
+// 	this.getPixelRatio = function () {
 
-		return _pixelRatio;
+// 		return _pixelRatio;
 
-	};
+// 	};
 
-	this.setPixelRatio = function ( value ) {
+// 	this.setPixelRatio = function ( value ) {
 
-		if ( value === undefined ) return;
+// 		if ( value === undefined ) return;
 
-		_pixelRatio = value;
+// 		_pixelRatio = value;
 
-		this.setSize( _width, _height, false );
+// 		this.setSize( _width, _height, false );
 
-	};
+// 	};
 
-	this.getSize = function ( target ) {
+// 	this.getSize = function ( target ) {
 
-		return target.set( _width, _height );
+// 		return target.set( _width, _height );
 
-	};
+// 	};
 
-	this.setSize = function ( width, height, updateStyle ) {
+// 	this.setSize = function ( width, height, updateStyle ) {
 
-		if ( xr.isPresenting ) {
+// 		if ( xr.isPresenting ) {
 
-			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
-			return;
+// 			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
+// 			return;
 
-		}
+// 		}
 
-		_width = width;
-		_height = height;
+// 		_width = width;
+// 		_height = height;
 
-		_canvas.width = Math.floor( width * _pixelRatio );
-		_canvas.height = Math.floor( height * _pixelRatio );
+// 		_canvas.width = Math.floor( width * _pixelRatio );
+// 		_canvas.height = Math.floor( height * _pixelRatio );
 
-		if ( updateStyle !== false ) {
+// 		if ( updateStyle !== false ) {
 
-			_canvas.style.width = width + 'px';
-			_canvas.style.height = height + 'px';
+// 			_canvas.style.width = width + 'px';
+// 			_canvas.style.height = height + 'px';
 
-		}
+// 		}
 
-		this.setViewport( 0, 0, width, height );
+// 		this.setViewport( 0, 0, width, height );
 
-	};
+// 	};
 
-	this.getDrawingBufferSize = function ( target ) {
+// 	this.getDrawingBufferSize = function ( target ) {
 
-		return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();
+// 		return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();
 
-	};
+// 	};
 
-	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {
+// 	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {
 
-		_width = width;
-		_height = height;
+// 		_width = width;
+// 		_height = height;
 
-		_pixelRatio = pixelRatio;
+// 		_pixelRatio = pixelRatio;
 
-		_canvas.width = Math.floor( width * pixelRatio );
-		_canvas.height = Math.floor( height * pixelRatio );
+// 		_canvas.width = Math.floor( width * pixelRatio );
+// 		_canvas.height = Math.floor( height * pixelRatio );
 
-		this.setViewport( 0, 0, width, height );
+// 		this.setViewport( 0, 0, width, height );
 
-	};
+// 	};
 
-	this.getCurrentViewport = function ( target ) {
+// 	this.getCurrentViewport = function ( target ) {
 
-		return target.copy( _currentViewport );
+// 		return target.copy( _currentViewport );
 
-	};
+// 	};
 
-	this.getViewport = function ( target ) {
+// 	this.getViewport = function ( target ) {
 
-		return target.copy( _viewport );
+// 		return target.copy( _viewport );
 
-	};
+// 	};
 
-	this.setViewport = function ( x, y, width, height ) {
+// 	this.setViewport = function ( x, y, width, height ) {
 
-		if ( x.isVector4 ) {
+// 		if ( x.isVector4 ) {
 
-			_viewport.set( x.x, x.y, x.z, x.w );
+// 			_viewport.set( x.x, x.y, x.z, x.w );
 
-		} else {
+// 		} else {
 
-			_viewport.set( x, y, width, height );
+// 			_viewport.set( x, y, width, height );
 
-		}
+// 		}
 
-		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );
+// 		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );
 
-	};
+// 	};
 
-	this.getScissor = function ( target ) {
+// 	this.getScissor = function ( target ) {
 
-		return target.copy( _scissor );
+// 		return target.copy( _scissor );
 
-	};
+// 	};
 
-	this.setScissor = function ( x, y, width, height ) {
+// 	this.setScissor = function ( x, y, width, height ) {
 
-		if ( x.isVector4 ) {
+// 		if ( x.isVector4 ) {
 
-			_scissor.set( x.x, x.y, x.z, x.w );
+// 			_scissor.set( x.x, x.y, x.z, x.w );
 
-		} else {
+// 		} else {
 
-			_scissor.set( x, y, width, height );
+// 			_scissor.set( x, y, width, height );
 
-		}
+// 		}
 
-		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
+// 		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
 
-	};
+// 	};
 
-	this.getScissorTest = function () {
+// 	this.getScissorTest = function () {
 
-		return _scissorTest;
+// 		return _scissorTest;
 
-	};
+// 	};
 
-	this.setScissorTest = function ( boolean ) {
+// 	this.setScissorTest = function ( boolean ) {
 
-		state.setScissorTest( _scissorTest = boolean );
+// 		state.setScissorTest( _scissorTest = boolean );
 
-	};
+// 	};
 
-	this.setOpaqueSort = function ( method ) {
+// 	this.setOpaqueSort = function ( method ) {
 
-		_opaqueSort = method;
+// 		_opaqueSort = method;
 
-	};
+// 	};
 
-	this.setTransparentSort = function ( method ) {
+// 	this.setTransparentSort = function ( method ) {
 
-		_transparentSort = method;
+// 		_transparentSort = method;
 
-	};
+// 	};
 
-	// Clearing
+// 	// Clearing
 
-	this.getClearColor = function ( target ) {
+// 	this.getClearColor = function ( target ) {
 
-		return target.copy( background.getClearColor() );
+// 		return target.copy( background.getClearColor() );
 
-	};
+// 	};
 
-	this.setClearColor = function () {
+// 	this.setClearColor = function () {
 
-		background.setClearColor.apply( background, arguments );
+// 		background.setClearColor.apply( background, arguments );
 
-	};
+// 	};
 
-	this.getClearAlpha = function () {
+// 	this.getClearAlpha = function () {
 
-		return background.getClearAlpha();
+// 		return background.getClearAlpha();
 
-	};
+// 	};
 
-	this.setClearAlpha = function () {
+// 	this.setClearAlpha = function () {
 
-		background.setClearAlpha.apply( background, arguments );
+// 		background.setClearAlpha.apply( background, arguments );
 
-	};
+// 	};
 
-	this.clear = function ( color = true, depth = true, stencil = true ) {
+// 	this.clear = function ( color = true, depth = true, stencil = true ) {
 
-		let bits = 0;
+// 		let bits = 0;
 
-		if ( color ) bits |= 16384;
-		if ( depth ) bits |= 256;
-		if ( stencil ) bits |= 1024;
+// 		if ( color ) bits |= 16384;
+// 		if ( depth ) bits |= 256;
+// 		if ( stencil ) bits |= 1024;
 
-		_gl.clear( bits );
+// 		_gl.clear( bits );
 
-	};
+// 	};
 
-	this.clearColor = function () {
+// 	this.clearColor = function () {
 
-		this.clear( true, false, false );
+// 		this.clear( true, false, false );
 
-	};
+// 	};
 
-	this.clearDepth = function () {
+// 	this.clearDepth = function () {
 
-		this.clear( false, true, false );
+// 		this.clear( false, true, false );
 
-	};
+// 	};
 
-	this.clearStencil = function () {
+// 	this.clearStencil = function () {
 
-		this.clear( false, false, true );
+// 		this.clear( false, false, true );
 
-	};
+// 	};
 
-	//
+// 	//
 
-	this.dispose = function () {
+// 	this.dispose = function () {
 
-		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
-		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
-		_canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );
+// 		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
+// 		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
+// 		_canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );
 
-		renderLists.dispose();
-		renderStates.dispose();
-		properties.dispose();
-		cubemaps.dispose();
-		cubeuvmaps.dispose();
-		objects.dispose();
-		bindingStates.dispose();
-		uniformsGroups.dispose();
-		programCache.dispose();
+// 		renderLists.dispose();
+// 		renderStates.dispose();
+// 		properties.dispose();
+// 		cubemaps.dispose();
+// 		cubeuvmaps.dispose();
+// 		objects.dispose();
+// 		bindingStates.dispose();
+// 		uniformsGroups.dispose();
+// 		programCache.dispose();
 
-		xr.dispose();
+// 		xr.dispose();
 
-		xr.removeEventListener( 'sessionstart', onXRSessionStart );
-		xr.removeEventListener( 'sessionend', onXRSessionEnd );
+// 		xr.removeEventListener( 'sessionstart', onXRSessionStart );
+// 		xr.removeEventListener( 'sessionend', onXRSessionEnd );
 
-		if ( _transmissionRenderTarget ) {
+// 		if ( _transmissionRenderTarget ) {
 
-			_transmissionRenderTarget.dispose();
-			_transmissionRenderTarget = null;
+// 			_transmissionRenderTarget.dispose();
+// 			_transmissionRenderTarget = null;
 
-		}
+// 		}
 
-		animation.stop();
+// 		animation.stop();
 
-	};
+// 	};
 
-	// Events
+// 	// Events
 
-	function onContextLost( event ) {
+// 	function onContextLost( event ) {
 
-		event.preventDefault();
+// 		event.preventDefault();
 
-		console.log( 'THREE.WebGLRenderer: Context Lost.' );
+// 		console.log( 'THREE.WebGLRenderer: Context Lost.' );
 
-		_isContextLost = true;
+// 		_isContextLost = true;
 
-	}
+// 	}
 
-	function onContextRestore( /* event */ ) {
+// 	function onContextRestore( /* event */ ) {
 
-		console.log( 'THREE.WebGLRenderer: Context Restored.' );
+// 		console.log( 'THREE.WebGLRenderer: Context Restored.' );
 
-		_isContextLost = false;
+// 		_isContextLost = false;
 
-		const infoAutoReset = info.autoReset;
-		const shadowMapEnabled = shadowMap.enabled;
-		const shadowMapAutoUpdate = shadowMap.autoUpdate;
-		const shadowMapNeedsUpdate = shadowMap.needsUpdate;
-		const shadowMapType = shadowMap.type;
+// 		const infoAutoReset = info.autoReset;
+// 		const shadowMapEnabled = shadowMap.enabled;
+// 		const shadowMapAutoUpdate = shadowMap.autoUpdate;
+// 		const shadowMapNeedsUpdate = shadowMap.needsUpdate;
+// 		const shadowMapType = shadowMap.type;
 
-		initGLContext();
+// 		initGLContext();
 
-		info.autoReset = infoAutoReset;
-		shadowMap.enabled = shadowMapEnabled;
-		shadowMap.autoUpdate = shadowMapAutoUpdate;
-		shadowMap.needsUpdate = shadowMapNeedsUpdate;
-		shadowMap.type = shadowMapType;
+// 		info.autoReset = infoAutoReset;
+// 		shadowMap.enabled = shadowMapEnabled;
+// 		shadowMap.autoUpdate = shadowMapAutoUpdate;
+// 		shadowMap.needsUpdate = shadowMapNeedsUpdate;
+// 		shadowMap.type = shadowMapType;
 
-	}
+// 	}
 
-	function onContextCreationError( event ) {
+// 	function onContextCreationError( event ) {
 
-		console.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );
+// 		console.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );
 
-	}
+// 	}
 
-	function onMaterialDispose( event ) {
+// 	function onMaterialDispose( event ) {
 
-		const material = event.target;
+// 		const material = event.target;
 
-		material.removeEventListener( 'dispose', onMaterialDispose );
+// 		material.removeEventListener( 'dispose', onMaterialDispose );
 
-		deallocateMaterial( material );
+// 		deallocateMaterial( material );
 
-	}
+// 	}
 
-	// Buffer deallocation
+// 	// Buffer deallocation
 
-	function deallocateMaterial( material ) {
+// 	function deallocateMaterial( material ) {
 
-		releaseMaterialProgramReferences( material );
+// 		releaseMaterialProgramReferences( material );
 
-		properties.remove( material );
+// 		properties.remove( material );
 
-	}
+// 	}
 
 
-	function releaseMaterialProgramReferences( material ) {
+// 	function releaseMaterialProgramReferences( material ) {
 
-		const programs = properties.get( material ).programs;
+// 		const programs = properties.get( material ).programs;
 
-		if ( programs !== undefined ) {
+// 		if ( programs !== undefined ) {
 
-			programs.forEach( function ( program ) {
+// 			programs.forEach( function ( program ) {
 
-				programCache.releaseProgram( program );
+// 				programCache.releaseProgram( program );
 
-			} );
+// 			} );
 
-			if ( material.isShaderMaterial ) {
+// 			if ( material.isShaderMaterial ) {
 
-				programCache.releaseShaderCache( material );
+// 				programCache.releaseShaderCache( material );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// Buffer rendering
+// 	// Buffer rendering
 
-	this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {
+// 	this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {
 
-		if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
+// 		if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
 
-		const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );
+// 		const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );
 
-		const program = setProgram( camera, scene, geometry, material, object );
+// 		const program = setProgram( camera, scene, geometry, material, object );
 
-		state.setMaterial( material, frontFaceCW );
+// 		state.setMaterial( material, frontFaceCW );
 
-		//
+// 		//
 
-		let index = geometry.index;
-		const position = geometry.attributes.position;
+// 		let index = geometry.index;
+// 		const position = geometry.attributes.position;
 
-		//
+// 		//
 
-		if ( index === null ) {
+// 		if ( index === null ) {
 
-			if ( position === undefined || position.count === 0 ) return;
+// 			if ( position === undefined || position.count === 0 ) return;
 
-		} else if ( index.count === 0 ) {
+// 		} else if ( index.count === 0 ) {
 
-			return;
+// 			return;
 
-		}
+// 		}
 
-		//
+// 		//
 
-		let rangeFactor = 1;
+// 		let rangeFactor = 1;
 
-		if ( material.wireframe === true ) {
+// 		if ( material.wireframe === true ) {
 
-			index = geometries.getWireframeAttribute( geometry );
-			rangeFactor = 2;
+// 			index = geometries.getWireframeAttribute( geometry );
+// 			rangeFactor = 2;
 
-		}
+// 		}
 
-		bindingStates.setup( object, material, program, geometry, index );
+// 		bindingStates.setup( object, material, program, geometry, index );
 
-		let attribute;
-		let renderer = bufferRenderer;
+// 		let attribute;
+// 		let renderer = bufferRenderer;
 
-		if ( index !== null ) {
+// 		if ( index !== null ) {
 
-			attribute = attributes.get( index );
+// 			attribute = attributes.get( index );
 
-			renderer = indexedBufferRenderer;
-			renderer.setIndex( attribute );
+// 			renderer = indexedBufferRenderer;
+// 			renderer.setIndex( attribute );
 
-		}
+// 		}
 
-		//
+// 		//
 
-		const dataCount = ( index !== null ) ? index.count : position.count;
+// 		const dataCount = ( index !== null ) ? index.count : position.count;
 
-		const rangeStart = geometry.drawRange.start * rangeFactor;
-		const rangeCount = geometry.drawRange.count * rangeFactor;
+// 		const rangeStart = geometry.drawRange.start * rangeFactor;
+// 		const rangeCount = geometry.drawRange.count * rangeFactor;
 
-		const groupStart = group !== null ? group.start * rangeFactor : 0;
-		const groupCount = group !== null ? group.count * rangeFactor : Infinity;
+// 		const groupStart = group !== null ? group.start * rangeFactor : 0;
+// 		const groupCount = group !== null ? group.count * rangeFactor : Infinity;
 
-		const drawStart = Math.max( rangeStart, groupStart );
-		const drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
+// 		const drawStart = Math.max( rangeStart, groupStart );
+// 		const drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
 
-		const drawCount = Math.max( 0, drawEnd - drawStart + 1 );
+// 		const drawCount = Math.max( 0, drawEnd - drawStart + 1 );
 
-		if ( drawCount === 0 ) return;
+// 		if ( drawCount === 0 ) return;
 
-		//
+// 		//
 
-		if ( object.isMesh ) {
+// 		if ( object.isMesh ) {
 
-			if ( material.wireframe === true ) {
+// 			if ( material.wireframe === true ) {
 
-				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
-				renderer.setMode( 1 );
+// 				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
+// 				renderer.setMode( 1 );
 
-			} else {
+// 			} else {
 
-				renderer.setMode( 4 );
+// 				renderer.setMode( 4 );
 
-			}
+// 			}
 
-		} else if ( object.isLine ) {
+// 		} else if ( object.isLine ) {
 
-			let lineWidth = material.linewidth;
+// 			let lineWidth = material.linewidth;
 
-			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material
+// 			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material
 
-			state.setLineWidth( lineWidth * getTargetPixelRatio() );
+// 			state.setLineWidth( lineWidth * getTargetPixelRatio() );
 
-			if ( object.isLineSegments ) {
+// 			if ( object.isLineSegments ) {
 
-				renderer.setMode( 1 );
+// 				renderer.setMode( 1 );
 
-			} else if ( object.isLineLoop ) {
+// 			} else if ( object.isLineLoop ) {
 
-				renderer.setMode( 2 );
+// 				renderer.setMode( 2 );
 
-			} else {
+// 			} else {
 
-				renderer.setMode( 3 );
+// 				renderer.setMode( 3 );
 
-			}
+// 			}
 
-		} else if ( object.isPoints ) {
+// 		} else if ( object.isPoints ) {
 
-			renderer.setMode( 0 );
+// 			renderer.setMode( 0 );
 
-		} else if ( object.isSprite ) {
+// 		} else if ( object.isSprite ) {
 
-			renderer.setMode( 4 );
+// 			renderer.setMode( 4 );
 
-		}
+// 		}
 
-		if ( object.isInstancedMesh ) {
+// 		if ( object.isInstancedMesh ) {
 
-			renderer.renderInstances( drawStart, drawCount, object.count );
+// 			renderer.renderInstances( drawStart, drawCount, object.count );
 
-		} else if ( geometry.isInstancedBufferGeometry ) {
+// 		} else if ( geometry.isInstancedBufferGeometry ) {
 
-			const instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );
+// 			const instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );
 
-			renderer.renderInstances( drawStart, drawCount, instanceCount );
+// 			renderer.renderInstances( drawStart, drawCount, instanceCount );
 
-		} else {
+// 		} else {
 
-			renderer.render( drawStart, drawCount );
+// 			renderer.render( drawStart, drawCount );
 
-		}
+// 		}
 
-	};
+// 	};
 
-	// Compile
+// 	// Compile
 
-	this.compile = function ( scene, camera ) {
+// 	this.compile = function ( scene, camera ) {
 
-		function prepare( material, scene, object ) {
+// 		function prepare( material, scene, object ) {
 
-			if ( material.transparent === true && material.side === DoubleSide ) {
+// 			if ( material.transparent === true && material.side === DoubleSide ) {
 
-				material.side = BackSide;
-				material.needsUpdate = true;
-				getProgram( material, scene, object );
+// 				material.side = BackSide;
+// 				material.needsUpdate = true;
+// 				getProgram( material, scene, object );
 
-				material.side = FrontSide;
-				material.needsUpdate = true;
-				getProgram( material, scene, object );
+// 				material.side = FrontSide;
+// 				material.needsUpdate = true;
+// 				getProgram( material, scene, object );
 
-				material.side = DoubleSide;
+// 				material.side = DoubleSide;
 
-			} else {
+// 			} else {
 
-				getProgram( material, scene, object );
+// 				getProgram( material, scene, object );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		currentRenderState = renderStates.get( scene );
-		currentRenderState.init();
+// 		currentRenderState = renderStates.get( scene );
+// 		currentRenderState.init();
 
-		renderStateStack.push( currentRenderState );
+// 		renderStateStack.push( currentRenderState );
 
-		scene.traverseVisible( function ( object ) {
+// 		scene.traverseVisible( function ( object ) {
 
-			if ( object.isLight && object.layers.test( camera.layers ) ) {
+// 			if ( object.isLight && object.layers.test( camera.layers ) ) {
 
-				currentRenderState.pushLight( object );
+// 				currentRenderState.pushLight( object );
 
-				if ( object.castShadow ) {
+// 				if ( object.castShadow ) {
 
-					currentRenderState.pushShadow( object );
+// 					currentRenderState.pushShadow( object );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} );
+// 		} );
 
-		currentRenderState.setupLights( _this.physicallyCorrectLights );
+// 		currentRenderState.setupLights( _this.physicallyCorrectLights );
 
-		scene.traverse( function ( object ) {
+// 		scene.traverse( function ( object ) {
 
-			const material = object.material;
+// 			const material = object.material;
 
-			if ( material ) {
+// 			if ( material ) {
 
-				if ( Array.isArray( material ) ) {
+// 				if ( Array.isArray( material ) ) {
 
-					for ( let i = 0; i < material.length; i ++ ) {
+// 					for ( let i = 0; i < material.length; i ++ ) {
 
-						const material2 = material[ i ];
+// 						const material2 = material[ i ];
 
-						prepare( material2, scene, object );
+// 						prepare( material2, scene, object );
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					prepare( material, scene, object );
+// 					prepare( material, scene, object );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} );
+// 		} );
 
-		renderStateStack.pop();
-		currentRenderState = null;
+// 		renderStateStack.pop();
+// 		currentRenderState = null;
 
-	};
+// 	};
 
-	// Animation Loop
+// 	// Animation Loop
 
-	let onAnimationFrameCallback = null;
+// 	let onAnimationFrameCallback = null;
 
-	function onAnimationFrame( time ) {
+// 	function onAnimationFrame( time ) {
 
-		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );
+// 		if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );
 
-	}
+// 	}
 
-	function onXRSessionStart() {
+// 	function onXRSessionStart() {
 
-		animation.stop();
+// 		animation.stop();
 
-	}
+// 	}
 
-	function onXRSessionEnd() {
+// 	function onXRSessionEnd() {
 
-		animation.start();
+// 		animation.start();
 
-	}
+// 	}
 
-	const animation = new WebGLAnimation();
-	animation.setAnimationLoop( onAnimationFrame );
+// 	const animation = new WebGLAnimation();
+// 	animation.setAnimationLoop( onAnimationFrame );
 
-	if ( typeof self !== 'undefined' ) animation.setContext( self );
+// 	if ( typeof self !== 'undefined' ) animation.setContext( self );
 
-	this.setAnimationLoop = function ( callback ) {
+// 	this.setAnimationLoop = function ( callback ) {
 
-		onAnimationFrameCallback = callback;
-		xr.setAnimationLoop( callback );
+// 		onAnimationFrameCallback = callback;
+// 		xr.setAnimationLoop( callback );
 
-		( callback === null ) ? animation.stop() : animation.start();
+// 		( callback === null ) ? animation.stop() : animation.start();
 
-	};
+// 	};
 
-	xr.addEventListener( 'sessionstart', onXRSessionStart );
-	xr.addEventListener( 'sessionend', onXRSessionEnd );
+// 	xr.addEventListener( 'sessionstart', onXRSessionStart );
+// 	xr.addEventListener( 'sessionend', onXRSessionEnd );
 
-	// Rendering
+// 	// Rendering
 
-	this.render = function ( scene, camera ) {
+// 	this.render = function ( scene, camera ) {
 
-		if ( camera !== undefined && camera.isCamera !== true ) {
+// 		if ( camera !== undefined && camera.isCamera !== true ) {
 
-			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
-			return;
+// 			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
+// 			return;
 
-		}
+// 		}
 
-		if ( _isContextLost === true ) return;
+// 		if ( _isContextLost === true ) return;
 
-		// update scene graph
+// 		// update scene graph
 
-		if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();
+// 		if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();
 
-		// update camera matrices and frustum
+// 		// update camera matrices and frustum
 
-		if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();
+// 		if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();
 
-		if ( xr.enabled === true && xr.isPresenting === true ) {
+// 		if ( xr.enabled === true && xr.isPresenting === true ) {
 
-			if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );
+// 			if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );
 
-			camera = xr.getCamera(); // use XR camera for rendering
+// 			camera = xr.getCamera(); // use XR camera for rendering
 
-		}
+// 		}
 
-		//
-		if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );
+// 		//
+// 		if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );
 
-		currentRenderState = renderStates.get( scene, renderStateStack.length );
-		currentRenderState.init();
+// 		currentRenderState = renderStates.get( scene, renderStateStack.length );
+// 		currentRenderState.init();
 
-		renderStateStack.push( currentRenderState );
+// 		renderStateStack.push( currentRenderState );
 
-		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
-		_frustum.setFromProjectionMatrix( _projScreenMatrix );
+// 		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
+// 		_frustum.setFromProjectionMatrix( _projScreenMatrix );
 
-		_localClippingEnabled = this.localClippingEnabled;
-		_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );
+// 		_localClippingEnabled = this.localClippingEnabled;
+// 		_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );
 
-		currentRenderList = renderLists.get( scene, renderListStack.length );
-		currentRenderList.init();
+// 		currentRenderList = renderLists.get( scene, renderListStack.length );
+// 		currentRenderList.init();
 
-		renderListStack.push( currentRenderList );
+// 		renderListStack.push( currentRenderList );
 
-		projectObject( scene, camera, 0, _this.sortObjects );
+// 		projectObject( scene, camera, 0, _this.sortObjects );
 
-		currentRenderList.finish();
+// 		currentRenderList.finish();
 
-		if ( _this.sortObjects === true ) {
+// 		if ( _this.sortObjects === true ) {
 
-			currentRenderList.sort( _opaqueSort, _transparentSort );
+// 			currentRenderList.sort( _opaqueSort, _transparentSort );
 
-		}
+// 		}
 
-		//
+// 		//
 
-		if ( _clippingEnabled === true ) clipping.beginShadows();
+// 		if ( _clippingEnabled === true ) clipping.beginShadows();
 
-		const shadowsArray = currentRenderState.state.shadowsArray;
+// 		const shadowsArray = currentRenderState.state.shadowsArray;
 
-		shadowMap.render( shadowsArray, scene, camera );
+// 		shadowMap.render( shadowsArray, scene, camera );
 
-		if ( _clippingEnabled === true ) clipping.endShadows();
+// 		if ( _clippingEnabled === true ) clipping.endShadows();
 
-		//
+// 		//
 
-		if ( this.info.autoReset === true ) this.info.reset();
+// 		if ( this.info.autoReset === true ) this.info.reset();
 
-		//
+// 		//
 
-		background.render( currentRenderList, scene );
+// 		background.render( currentRenderList, scene );
 
-		// render scene
+// 		// render scene
 
-		currentRenderState.setupLights( _this.physicallyCorrectLights );
+// 		currentRenderState.setupLights( _this.physicallyCorrectLights );
 
-		if ( camera.isArrayCamera ) {
+// 		if ( camera.isArrayCamera ) {
 
-			const cameras = camera.cameras;
+// 			const cameras = camera.cameras;
 
-			for ( let i = 0, l = cameras.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = cameras.length; i < l; i ++ ) {
 
-				const camera2 = cameras[ i ];
+// 				const camera2 = cameras[ i ];
 
-				renderScene( currentRenderList, scene, camera2, camera2.viewport );
+// 				renderScene( currentRenderList, scene, camera2, camera2.viewport );
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			renderScene( currentRenderList, scene, camera );
+// 			renderScene( currentRenderList, scene, camera );
 
-		}
+// 		}
 
-		//
+// 		//
 
-		if ( _currentRenderTarget !== null ) {
+// 		if ( _currentRenderTarget !== null ) {
 
-			// resolve multisample renderbuffers to a single-sample texture if necessary
+// 			// resolve multisample renderbuffers to a single-sample texture if necessary
 
-			textures.updateMultisampleRenderTarget( _currentRenderTarget );
+// 			textures.updateMultisampleRenderTarget( _currentRenderTarget );
 
-			// Generate mipmap if we're using any kind of mipmap filtering
+// 			// Generate mipmap if we're using any kind of mipmap filtering
 
-			textures.updateRenderTargetMipmap( _currentRenderTarget );
+// 			textures.updateRenderTargetMipmap( _currentRenderTarget );
 
-		}
+// 		}
 
-		//
+// 		//
 
-		if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );
+// 		if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );
 
-		// _gl.finish();
+// 		// _gl.finish();
 
-		bindingStates.resetDefaultState();
-		_currentMaterialId = - 1;
-		_currentCamera = null;
+// 		bindingStates.resetDefaultState();
+// 		_currentMaterialId = - 1;
+// 		_currentCamera = null;
 
-		renderStateStack.pop();
+// 		renderStateStack.pop();
 
-		if ( renderStateStack.length > 0 ) {
+// 		if ( renderStateStack.length > 0 ) {
 
-			currentRenderState = renderStateStack[ renderStateStack.length - 1 ];
+// 			currentRenderState = renderStateStack[ renderStateStack.length - 1 ];
 
-		} else {
+// 		} else {
 
-			currentRenderState = null;
+// 			currentRenderState = null;
 
-		}
+// 		}
 
-		renderListStack.pop();
+// 		renderListStack.pop();
 
-		if ( renderListStack.length > 0 ) {
+// 		if ( renderListStack.length > 0 ) {
 
-			currentRenderList = renderListStack[ renderListStack.length - 1 ];
+// 			currentRenderList = renderListStack[ renderListStack.length - 1 ];
 
-		} else {
+// 		} else {
 
-			currentRenderList = null;
+// 			currentRenderList = null;
 
-		}
+// 		}
 
-	};
+// 	};
 
-	function projectObject( object, camera, groupOrder, sortObjects ) {
+// 	function projectObject( object, camera, groupOrder, sortObjects ) {
 
-		if ( object.visible === false ) return;
+// 		if ( object.visible === false ) return;
 
-		const visible = object.layers.test( camera.layers );
+// 		const visible = object.layers.test( camera.layers );
 
-		if ( visible ) {
+// 		if ( visible ) {
 
-			if ( object.isGroup ) {
+// 			if ( object.isGroup ) {
 
-				groupOrder = object.renderOrder;
+// 				groupOrder = object.renderOrder;
 
-			} else if ( object.isLOD ) {
+// 			} else if ( object.isLOD ) {
 
-				if ( object.autoUpdate === true ) object.update( camera );
+// 				if ( object.autoUpdate === true ) object.update( camera );
 
-			} else if ( object.isLight ) {
+// 			} else if ( object.isLight ) {
 
-				currentRenderState.pushLight( object );
+// 				currentRenderState.pushLight( object );
 
-				if ( object.castShadow ) {
+// 				if ( object.castShadow ) {
 
-					currentRenderState.pushShadow( object );
+// 					currentRenderState.pushShadow( object );
 
-				}
+// 				}
 
-			} else if ( object.isSprite ) {
+// 			} else if ( object.isSprite ) {
 
-				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {
+// 				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {
 
-					if ( sortObjects ) {
+// 					if ( sortObjects ) {
 
-						_vector3.setFromMatrixPosition( object.matrixWorld )
-							.applyMatrix4( _projScreenMatrix );
+// 						_vector3.setFromMatrixPosition( object.matrixWorld )
+// 							.applyMatrix4( _projScreenMatrix );
 
-					}
+// 					}
 
-					const geometry = objects.update( object );
-					const material = object.material;
+// 					const geometry = objects.update( object );
+// 					const material = object.material;
 
-					if ( material.visible ) {
+// 					if ( material.visible ) {
 
-						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
+// 						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else if ( object.isMesh || object.isLine || object.isPoints ) {
+// 			} else if ( object.isMesh || object.isLine || object.isPoints ) {
 
-				if ( object.isSkinnedMesh ) {
+// 				if ( object.isSkinnedMesh ) {
 
-					// update skeleton only once in a frame
+// 					// update skeleton only once in a frame
 
-					if ( object.skeleton.frame !== info.render.frame ) {
+// 					if ( object.skeleton.frame !== info.render.frame ) {
 
-						object.skeleton.update();
-						object.skeleton.frame = info.render.frame;
+// 						object.skeleton.update();
+// 						object.skeleton.frame = info.render.frame;
 
-					}
+// 					}
 
-				}
+// 				}
 
-				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {
+// 				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {
 
-					if ( sortObjects ) {
+// 					if ( sortObjects ) {
 
-						_vector3.setFromMatrixPosition( object.matrixWorld )
-							.applyMatrix4( _projScreenMatrix );
+// 						_vector3.setFromMatrixPosition( object.matrixWorld )
+// 							.applyMatrix4( _projScreenMatrix );
 
-					}
+// 					}
 
-					const geometry = objects.update( object );
-					const material = object.material;
+// 					const geometry = objects.update( object );
+// 					const material = object.material;
 
-					if ( Array.isArray( material ) ) {
+// 					if ( Array.isArray( material ) ) {
 
-						const groups = geometry.groups;
+// 						const groups = geometry.groups;
 
-						for ( let i = 0, l = groups.length; i < l; i ++ ) {
+// 						for ( let i = 0, l = groups.length; i < l; i ++ ) {
 
-							const group = groups[ i ];
-							const groupMaterial = material[ group.materialIndex ];
+// 							const group = groups[ i ];
+// 							const groupMaterial = material[ group.materialIndex ];
 
-							if ( groupMaterial && groupMaterial.visible ) {
+// 							if ( groupMaterial && groupMaterial.visible ) {
 
-								currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );
+// 								currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );
 
-							}
+// 							}
 
-						}
+// 						}
 
-					} else if ( material.visible ) {
+// 					} else if ( material.visible ) {
 
-						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
+// 						currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const children = object.children;
+// 		const children = object.children;
 
-		for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-			projectObject( children[ i ], camera, groupOrder, sortObjects );
+// 			projectObject( children[ i ], camera, groupOrder, sortObjects );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function renderScene( currentRenderList, scene, camera, viewport ) {
+// 	function renderScene( currentRenderList, scene, camera, viewport ) {
 
-		const opaqueObjects = currentRenderList.opaque;
-		const transmissiveObjects = currentRenderList.transmissive;
-		const transparentObjects = currentRenderList.transparent;
+// 		const opaqueObjects = currentRenderList.opaque;
+// 		const transmissiveObjects = currentRenderList.transmissive;
+// 		const transparentObjects = currentRenderList.transparent;
 
-		currentRenderState.setupLightsView( camera );
+// 		currentRenderState.setupLightsView( camera );
 
-		if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );
+// 		if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );
 
-		if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );
+// 		if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );
 
-		if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
-		if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
-		if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );
+// 		if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
+// 		if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
+// 		if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );
 
-		// Ensure depth buffer writing is enabled so it can be cleared on next render
+// 		// Ensure depth buffer writing is enabled so it can be cleared on next render
 
-		state.buffers.depth.setTest( true );
-		state.buffers.depth.setMask( true );
-		state.buffers.color.setMask( true );
+// 		state.buffers.depth.setTest( true );
+// 		state.buffers.depth.setMask( true );
+// 		state.buffers.color.setMask( true );
 
-		state.setPolygonOffset( false );
+// 		state.setPolygonOffset( false );
 
-	}
+// 	}
 
-	function renderTransmissionPass( opaqueObjects, scene, camera ) {
+// 	function renderTransmissionPass( opaqueObjects, scene, camera ) {
 
-		const isWebGL2 = capabilities.isWebGL2;
+// 		const isWebGL2 = capabilities.isWebGL2;
 
-		if ( _transmissionRenderTarget === null ) {
+// 		if ( _transmissionRenderTarget === null ) {
 
-			_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {
-				generateMipmaps: true,
-				type: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,
-				minFilter: LinearMipmapLinearFilter,
-				samples: ( isWebGL2 && _antialias === true ) ? 4 : 0
-			} );
+// 			_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {
+// 				generateMipmaps: true,
+// 				type: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,
+// 				minFilter: LinearMipmapLinearFilter,
+// 				samples: ( isWebGL2 && _antialias === true ) ? 4 : 0
+// 			} );
 
-		}
+// 		}
 
-		_this.getDrawingBufferSize( _vector2 );
+// 		_this.getDrawingBufferSize( _vector2 );
 
-		if ( isWebGL2 ) {
+// 		if ( isWebGL2 ) {
 
-			_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );
+// 			_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );
 
-		} else {
+// 		} else {
 
-			_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );
+// 			_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );
 
-		}
+// 		}
 
-		//
+// 		//
 
-		const currentRenderTarget = _this.getRenderTarget();
-		_this.setRenderTarget( _transmissionRenderTarget );
-		_this.clear();
+// 		const currentRenderTarget = _this.getRenderTarget();
+// 		_this.setRenderTarget( _transmissionRenderTarget );
+// 		_this.clear();
 
-		// Turn off the features which can affect the frag color for opaque objects pass.
-		// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
-		const currentToneMapping = _this.toneMapping;
-		_this.toneMapping = NoToneMapping;
+// 		// Turn off the features which can affect the frag color for opaque objects pass.
+// 		// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
+// 		const currentToneMapping = _this.toneMapping;
+// 		_this.toneMapping = NoToneMapping;
 
-		renderObjects( opaqueObjects, scene, camera );
+// 		renderObjects( opaqueObjects, scene, camera );
 
-		_this.toneMapping = currentToneMapping;
+// 		_this.toneMapping = currentToneMapping;
 
-		textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
-		textures.updateRenderTargetMipmap( _transmissionRenderTarget );
+// 		textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
+// 		textures.updateRenderTargetMipmap( _transmissionRenderTarget );
 
-		_this.setRenderTarget( currentRenderTarget );
+// 		_this.setRenderTarget( currentRenderTarget );
 
-	}
+// 	}
 
-	function renderObjects( renderList, scene, camera ) {
+// 	function renderObjects( renderList, scene, camera ) {
 
-		const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
+// 		const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
 
-		for ( let i = 0, l = renderList.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = renderList.length; i < l; i ++ ) {
 
-			const renderItem = renderList[ i ];
+// 			const renderItem = renderList[ i ];
 
-			const object = renderItem.object;
-			const geometry = renderItem.geometry;
-			const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
-			const group = renderItem.group;
+// 			const object = renderItem.object;
+// 			const geometry = renderItem.geometry;
+// 			const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
+// 			const group = renderItem.group;
 
-			if ( object.layers.test( camera.layers ) ) {
+// 			if ( object.layers.test( camera.layers ) ) {
 
-				renderObject( object, scene, camera, geometry, material, group );
+// 				renderObject( object, scene, camera, geometry, material, group );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	function renderObject( object, scene, camera, geometry, material, group ) {
+// 	function renderObject( object, scene, camera, geometry, material, group ) {
 
-		object.onBeforeRender( _this, scene, camera, geometry, material, group );
+// 		object.onBeforeRender( _this, scene, camera, geometry, material, group );
 
-		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
-		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
+// 		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
+// 		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
 
-		material.onBeforeRender( _this, scene, camera, geometry, object, group );
+// 		material.onBeforeRender( _this, scene, camera, geometry, object, group );
 
-		if ( material.transparent === true && material.side === DoubleSide ) {
+// 		if ( material.transparent === true && material.side === DoubleSide ) {
 
-			material.side = BackSide;
-			material.needsUpdate = true;
-			_this.renderBufferDirect( camera, scene, geometry, material, object, group );
+// 			material.side = BackSide;
+// 			material.needsUpdate = true;
+// 			_this.renderBufferDirect( camera, scene, geometry, material, object, group );
 
-			material.side = FrontSide;
-			material.needsUpdate = true;
-			_this.renderBufferDirect( camera, scene, geometry, material, object, group );
+// 			material.side = FrontSide;
+// 			material.needsUpdate = true;
+// 			_this.renderBufferDirect( camera, scene, geometry, material, object, group );
 
-			material.side = DoubleSide;
+// 			material.side = DoubleSide;
 
-		} else {
+// 		} else {
 
-			_this.renderBufferDirect( camera, scene, geometry, material, object, group );
+// 			_this.renderBufferDirect( camera, scene, geometry, material, object, group );
 
-		}
+// 		}
 
-		object.onAfterRender( _this, scene, camera, geometry, material, group );
+// 		object.onAfterRender( _this, scene, camera, geometry, material, group );
 
-	}
+// 	}
 
-	function getProgram( material, scene, object ) {
+// 	function getProgram( material, scene, object ) {
 
-		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
+// 		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
 
-		const materialProperties = properties.get( material );
+// 		const materialProperties = properties.get( material );
 
-		const lights = currentRenderState.state.lights;
-		const shadowsArray = currentRenderState.state.shadowsArray;
+// 		const lights = currentRenderState.state.lights;
+// 		const shadowsArray = currentRenderState.state.shadowsArray;
 
-		const lightsStateVersion = lights.state.version;
+// 		const lightsStateVersion = lights.state.version;
 
-		const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
-		const programCacheKey = programCache.getProgramCacheKey( parameters );
+// 		const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
+// 		const programCacheKey = programCache.getProgramCacheKey( parameters );
 
-		let programs = materialProperties.programs;
+// 		let programs = materialProperties.programs;
 
-		// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
+// 		// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
 
-		materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
-		materialProperties.fog = scene.fog;
-		materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );
+// 		materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
+// 		materialProperties.fog = scene.fog;
+// 		materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );
 
-		if ( programs === undefined ) {
+// 		if ( programs === undefined ) {
 
-			// new material
+// 			// new material
 
-			material.addEventListener( 'dispose', onMaterialDispose );
+// 			material.addEventListener( 'dispose', onMaterialDispose );
 
-			programs = new Map();
-			materialProperties.programs = programs;
+// 			programs = new Map();
+// 			materialProperties.programs = programs;
 
-		}
+// 		}
 
-		let program = programs.get( programCacheKey );
+// 		let program = programs.get( programCacheKey );
 
-		if ( program !== undefined ) {
+// 		if ( program !== undefined ) {
 
-			// early out if program and light state is identical
+// 			// early out if program and light state is identical
 
-			if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {
+// 			if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {
 
-				updateCommonMaterialProperties( material, parameters );
+// 				updateCommonMaterialProperties( material, parameters );
 
-				return program;
+// 				return program;
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			parameters.uniforms = programCache.getUniforms( material );
+// 			parameters.uniforms = programCache.getUniforms( material );
 
-			material.onBuild( object, parameters, _this );
+// 			material.onBuild( object, parameters, _this );
 
-			material.onBeforeCompile( parameters, _this );
+// 			material.onBeforeCompile( parameters, _this );
 
-			program = programCache.acquireProgram( parameters, programCacheKey );
-			programs.set( programCacheKey, program );
+// 			program = programCache.acquireProgram( parameters, programCacheKey );
+// 			programs.set( programCacheKey, program );
 
-			materialProperties.uniforms = parameters.uniforms;
+// 			materialProperties.uniforms = parameters.uniforms;
 
-		}
+// 		}
 
-		const uniforms = materialProperties.uniforms;
+// 		const uniforms = materialProperties.uniforms;
 
-		if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {
+// 		if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {
 
-			uniforms.clippingPlanes = clipping.uniform;
+// 			uniforms.clippingPlanes = clipping.uniform;
 
-		}
+// 		}
 
-		updateCommonMaterialProperties( material, parameters );
+// 		updateCommonMaterialProperties( material, parameters );
 
-		// store the light setup it was created for
+// 		// store the light setup it was created for
 
-		materialProperties.needsLights = materialNeedsLights( material );
-		materialProperties.lightsStateVersion = lightsStateVersion;
+// 		materialProperties.needsLights = materialNeedsLights( material );
+// 		materialProperties.lightsStateVersion = lightsStateVersion;
 
-		if ( materialProperties.needsLights ) {
+// 		if ( materialProperties.needsLights ) {
 
-			// wire up the material to this renderer's lighting state
+// 			// wire up the material to this renderer's lighting state
 
-			uniforms.ambientLightColor.value = lights.state.ambient;
-			uniforms.lightProbe.value = lights.state.probe;
-			uniforms.directionalLights.value = lights.state.directional;
-			uniforms.directionalLightShadows.value = lights.state.directionalShadow;
-			uniforms.spotLights.value = lights.state.spot;
-			uniforms.spotLightShadows.value = lights.state.spotShadow;
-			uniforms.rectAreaLights.value = lights.state.rectArea;
-			uniforms.ltc_1.value = lights.state.rectAreaLTC1;
-			uniforms.ltc_2.value = lights.state.rectAreaLTC2;
-			uniforms.pointLights.value = lights.state.point;
-			uniforms.pointLightShadows.value = lights.state.pointShadow;
-			uniforms.hemisphereLights.value = lights.state.hemi;
+// 			uniforms.ambientLightColor.value = lights.state.ambient;
+// 			uniforms.lightProbe.value = lights.state.probe;
+// 			uniforms.directionalLights.value = lights.state.directional;
+// 			uniforms.directionalLightShadows.value = lights.state.directionalShadow;
+// 			uniforms.spotLights.value = lights.state.spot;
+// 			uniforms.spotLightShadows.value = lights.state.spotShadow;
+// 			uniforms.rectAreaLights.value = lights.state.rectArea;
+// 			uniforms.ltc_1.value = lights.state.rectAreaLTC1;
+// 			uniforms.ltc_2.value = lights.state.rectAreaLTC2;
+// 			uniforms.pointLights.value = lights.state.point;
+// 			uniforms.pointLightShadows.value = lights.state.pointShadow;
+// 			uniforms.hemisphereLights.value = lights.state.hemi;
 
-			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
-			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
-			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
-			uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
-			uniforms.spotLightMap.value = lights.state.spotLightMap;
-			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
-			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
-			// TODO (abelnation): add area lights shadow info to uniforms
+// 			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
+// 			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
+// 			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
+// 			uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
+// 			uniforms.spotLightMap.value = lights.state.spotLightMap;
+// 			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
+// 			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
+// 			// TODO (abelnation): add area lights shadow info to uniforms
 
-		}
+// 		}
 
-		const progUniforms = program.getUniforms();
-		const uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );
+// 		const progUniforms = program.getUniforms();
+// 		const uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );
 
-		materialProperties.currentProgram = program;
-		materialProperties.uniformsList = uniformsList;
+// 		materialProperties.currentProgram = program;
+// 		materialProperties.uniformsList = uniformsList;
 
-		return program;
+// 		return program;
 
-	}
+// 	}
 
-	function updateCommonMaterialProperties( material, parameters ) {
+// 	function updateCommonMaterialProperties( material, parameters ) {
 
-		const materialProperties = properties.get( material );
+// 		const materialProperties = properties.get( material );
 
-		materialProperties.outputEncoding = parameters.outputEncoding;
-		materialProperties.instancing = parameters.instancing;
-		materialProperties.skinning = parameters.skinning;
-		materialProperties.morphTargets = parameters.morphTargets;
-		materialProperties.morphNormals = parameters.morphNormals;
-		materialProperties.morphColors = parameters.morphColors;
-		materialProperties.morphTargetsCount = parameters.morphTargetsCount;
-		materialProperties.numClippingPlanes = parameters.numClippingPlanes;
-		materialProperties.numIntersection = parameters.numClipIntersection;
-		materialProperties.vertexAlphas = parameters.vertexAlphas;
-		materialProperties.vertexTangents = parameters.vertexTangents;
-		materialProperties.toneMapping = parameters.toneMapping;
+// 		materialProperties.outputEncoding = parameters.outputEncoding;
+// 		materialProperties.instancing = parameters.instancing;
+// 		materialProperties.skinning = parameters.skinning;
+// 		materialProperties.morphTargets = parameters.morphTargets;
+// 		materialProperties.morphNormals = parameters.morphNormals;
+// 		materialProperties.morphColors = parameters.morphColors;
+// 		materialProperties.morphTargetsCount = parameters.morphTargetsCount;
+// 		materialProperties.numClippingPlanes = parameters.numClippingPlanes;
+// 		materialProperties.numIntersection = parameters.numClipIntersection;
+// 		materialProperties.vertexAlphas = parameters.vertexAlphas;
+// 		materialProperties.vertexTangents = parameters.vertexTangents;
+// 		materialProperties.toneMapping = parameters.toneMapping;
 
-	}
+// 	}
 
-	function setProgram( camera, scene, geometry, material, object ) {
+// 	function setProgram( camera, scene, geometry, material, object ) {
 
-		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
+// 		if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
 
-		textures.resetTextureUnits();
+// 		textures.resetTextureUnits();
 
-		const fog = scene.fog;
-		const environment = material.isMeshStandardMaterial ? scene.environment : null;
-		const encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding );
-		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
-		const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
-		const vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;
-		const morphTargets = !! geometry.morphAttributes.position;
-		const morphNormals = !! geometry.morphAttributes.normal;
-		const morphColors = !! geometry.morphAttributes.color;
-		const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;
+// 		const fog = scene.fog;
+// 		const environment = material.isMeshStandardMaterial ? scene.environment : null;
+// 		const encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.encoding : LinearEncoding );
+// 		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
+// 		const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
+// 		const vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;
+// 		const morphTargets = !! geometry.morphAttributes.position;
+// 		const morphNormals = !! geometry.morphAttributes.normal;
+// 		const morphColors = !! geometry.morphAttributes.color;
+// 		const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;
 
-		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
-		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;
+// 		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
+// 		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;
 
-		const materialProperties = properties.get( material );
-		const lights = currentRenderState.state.lights;
+// 		const materialProperties = properties.get( material );
+// 		const lights = currentRenderState.state.lights;
 
-		if ( _clippingEnabled === true ) {
+// 		if ( _clippingEnabled === true ) {
 
-			if ( _localClippingEnabled === true || camera !== _currentCamera ) {
+// 			if ( _localClippingEnabled === true || camera !== _currentCamera ) {
 
-				const useCache =
-					camera === _currentCamera &&
-					material.id === _currentMaterialId;
+// 				const useCache =
+// 					camera === _currentCamera &&
+// 					material.id === _currentMaterialId;
 
-				// we might want to call this function with some ClippingGroup
-				// object instead of the material, once it becomes feasible
-				// (#8465, #8379)
-				clipping.setState( material, camera, useCache );
+// 				// we might want to call this function with some ClippingGroup
+// 				// object instead of the material, once it becomes feasible
+// 				// (#8465, #8379)
+// 				clipping.setState( material, camera, useCache );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		//
+// 		//
 
-		let needsProgramChange = false;
+// 		let needsProgramChange = false;
 
-		if ( material.version === materialProperties.__version ) {
+// 		if ( material.version === materialProperties.__version ) {
 
-			if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {
+// 			if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.outputEncoding !== encoding ) {
+// 			} else if ( materialProperties.outputEncoding !== encoding ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {
+// 			} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {
+// 			} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {
+// 			} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {
+// 			} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.envMap !== envMap ) {
+// 			} else if ( materialProperties.envMap !== envMap ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( material.fog === true && materialProperties.fog !== fog ) {
+// 			} else if ( material.fog === true && materialProperties.fog !== fog ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.numClippingPlanes !== undefined &&
-				( materialProperties.numClippingPlanes !== clipping.numPlanes ||
-				materialProperties.numIntersection !== clipping.numIntersection ) ) {
+// 			} else if ( materialProperties.numClippingPlanes !== undefined &&
+// 				( materialProperties.numClippingPlanes !== clipping.numPlanes ||
+// 				materialProperties.numIntersection !== clipping.numIntersection ) ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {
+// 			} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.vertexTangents !== vertexTangents ) {
+// 			} else if ( materialProperties.vertexTangents !== vertexTangents ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.morphTargets !== morphTargets ) {
+// 			} else if ( materialProperties.morphTargets !== morphTargets ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.morphNormals !== morphNormals ) {
+// 			} else if ( materialProperties.morphNormals !== morphNormals ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.morphColors !== morphColors ) {
+// 			} else if ( materialProperties.morphColors !== morphColors ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( materialProperties.toneMapping !== toneMapping ) {
+// 			} else if ( materialProperties.toneMapping !== toneMapping ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {
+// 			} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {
 
-				needsProgramChange = true;
+// 				needsProgramChange = true;
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			needsProgramChange = true;
-			materialProperties.__version = material.version;
+// 			needsProgramChange = true;
+// 			materialProperties.__version = material.version;
 
-		}
+// 		}
 
-		//
+// 		//
 
-		let program = materialProperties.currentProgram;
+// 		let program = materialProperties.currentProgram;
 
-		if ( needsProgramChange === true ) {
+// 		if ( needsProgramChange === true ) {
 
-			program = getProgram( material, scene, object );
+// 			program = getProgram( material, scene, object );
 
-		}
+// 		}
 
-		let refreshProgram = false;
-		let refreshMaterial = false;
-		let refreshLights = false;
+// 		let refreshProgram = false;
+// 		let refreshMaterial = false;
+// 		let refreshLights = false;
 
-		const p_uniforms = program.getUniforms(),
-			m_uniforms = materialProperties.uniforms;
+// 		const p_uniforms = program.getUniforms(),
+// 			m_uniforms = materialProperties.uniforms;
 
-		if ( state.useProgram( program.program ) ) {
+// 		if ( state.useProgram( program.program ) ) {
 
-			refreshProgram = true;
-			refreshMaterial = true;
-			refreshLights = true;
+// 			refreshProgram = true;
+// 			refreshMaterial = true;
+// 			refreshLights = true;
 
-		}
+// 		}
 
-		if ( material.id !== _currentMaterialId ) {
+// 		if ( material.id !== _currentMaterialId ) {
 
-			_currentMaterialId = material.id;
+// 			_currentMaterialId = material.id;
 
-			refreshMaterial = true;
+// 			refreshMaterial = true;
 
-		}
+// 		}
 
-		if ( refreshProgram || _currentCamera !== camera ) {
+// 		if ( refreshProgram || _currentCamera !== camera ) {
 
-			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
+// 			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
 
-			if ( capabilities.logarithmicDepthBuffer ) {
+// 			if ( capabilities.logarithmicDepthBuffer ) {
 
-				p_uniforms.setValue( _gl, 'logDepthBufFC',
-					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
+// 				p_uniforms.setValue( _gl, 'logDepthBufFC',
+// 					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
 
-			}
+// 			}
 
-			if ( _currentCamera !== camera ) {
+// 			if ( _currentCamera !== camera ) {
 
-				_currentCamera = camera;
+// 				_currentCamera = camera;
 
-				// lighting uniforms depend on the camera so enforce an update
-				// now, in case this material supports lights - or later, when
-				// the next material that does gets activated:
+// 				// lighting uniforms depend on the camera so enforce an update
+// 				// now, in case this material supports lights - or later, when
+// 				// the next material that does gets activated:
 
-				refreshMaterial = true;		// set to true on material change
-				refreshLights = true;		// remains set until update done
+// 				refreshMaterial = true;		// set to true on material change
+// 				refreshLights = true;		// remains set until update done
 
-			}
+// 			}
 
-			// load material specific uniforms
-			// (shader material also gets them for the sake of genericity)
+// 			// load material specific uniforms
+// 			// (shader material also gets them for the sake of genericity)
 
-			if ( material.isShaderMaterial ||
-				material.isMeshPhongMaterial ||
-				material.isMeshToonMaterial ||
-				material.isMeshStandardMaterial ||
-				material.envMap ) {
+// 			if ( material.isShaderMaterial ||
+// 				material.isMeshPhongMaterial ||
+// 				material.isMeshToonMaterial ||
+// 				material.isMeshStandardMaterial ||
+// 				material.envMap ) {
 
-				const uCamPos = p_uniforms.map.cameraPosition;
+// 				const uCamPos = p_uniforms.map.cameraPosition;
 
-				if ( uCamPos !== undefined ) {
+// 				if ( uCamPos !== undefined ) {
 
-					uCamPos.setValue( _gl,
-						_vector3.setFromMatrixPosition( camera.matrixWorld ) );
+// 					uCamPos.setValue( _gl,
+// 						_vector3.setFromMatrixPosition( camera.matrixWorld ) );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( material.isMeshPhongMaterial ||
-				material.isMeshToonMaterial ||
-				material.isMeshLambertMaterial ||
-				material.isMeshBasicMaterial ||
-				material.isMeshStandardMaterial ||
-				material.isShaderMaterial ) {
+// 			if ( material.isMeshPhongMaterial ||
+// 				material.isMeshToonMaterial ||
+// 				material.isMeshLambertMaterial ||
+// 				material.isMeshBasicMaterial ||
+// 				material.isMeshStandardMaterial ||
+// 				material.isShaderMaterial ) {
 
-				p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );
+// 				p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );
 
-			}
+// 			}
 
-			if ( material.isMeshPhongMaterial ||
-				material.isMeshToonMaterial ||
-				material.isMeshLambertMaterial ||
-				material.isMeshBasicMaterial ||
-				material.isMeshStandardMaterial ||
-				material.isShaderMaterial ||
-				material.isShadowMaterial ||
-				object.isSkinnedMesh ) {
+// 			if ( material.isMeshPhongMaterial ||
+// 				material.isMeshToonMaterial ||
+// 				material.isMeshLambertMaterial ||
+// 				material.isMeshBasicMaterial ||
+// 				material.isMeshStandardMaterial ||
+// 				material.isShaderMaterial ||
+// 				material.isShadowMaterial ||
+// 				object.isSkinnedMesh ) {
 
-				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );
+// 				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// skinning and morph target uniforms must be set even if material didn't change
-		// auto-setting of texture unit for bone and morph texture must go before other textures
-		// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
+// 		// skinning and morph target uniforms must be set even if material didn't change
+// 		// auto-setting of texture unit for bone and morph texture must go before other textures
+// 		// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
 
-		if ( object.isSkinnedMesh ) {
+// 		if ( object.isSkinnedMesh ) {
 
-			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
-			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );
+// 			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
+// 			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );
 
-			const skeleton = object.skeleton;
+// 			const skeleton = object.skeleton;
 
-			if ( skeleton ) {
+// 			if ( skeleton ) {
 
-				if ( capabilities.floatVertexTextures ) {
+// 				if ( capabilities.floatVertexTextures ) {
 
-					if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();
+// 					if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();
 
-					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
-					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );
+// 					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
+// 					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );
 
-				} else {
+// 				} else {
 
-					console.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );
+// 					console.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const morphAttributes = geometry.morphAttributes;
+// 		const morphAttributes = geometry.morphAttributes;
 
-		if ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {
+// 		if ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {
 
-			morphtargets.update( object, geometry, material, program );
+// 			morphtargets.update( object, geometry, material, program );
 
-		}
+// 		}
 
-		if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {
+// 		if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {
 
-			materialProperties.receiveShadow = object.receiveShadow;
-			p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );
+// 			materialProperties.receiveShadow = object.receiveShadow;
+// 			p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );
 
-		}
+// 		}
 
-		// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512
+// 		// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512
 
-		if ( material.isMeshGouraudMaterial && material.envMap !== null ) {
+// 		if ( material.isMeshGouraudMaterial && material.envMap !== null ) {
 
-			m_uniforms.envMap.value = envMap;
+// 			m_uniforms.envMap.value = envMap;
 
-			m_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;
+// 			m_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;
 
-		}
+// 		}
 
-		if ( refreshMaterial ) {
+// 		if ( refreshMaterial ) {
 
-			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
+// 			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
 
-			if ( materialProperties.needsLights ) {
+// 			if ( materialProperties.needsLights ) {
 
-				// the current material requires lighting info
+// 				// the current material requires lighting info
 
-				// note: all lighting uniforms are always set correctly
-				// they simply reference the renderer's state for their
-				// values
-				//
-				// use the current material's .needsUpdate flags to set
-				// the GL state when required
+// 				// note: all lighting uniforms are always set correctly
+// 				// they simply reference the renderer's state for their
+// 				// values
+// 				//
+// 				// use the current material's .needsUpdate flags to set
+// 				// the GL state when required
 
-				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );
+// 				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );
 
-			}
+// 			}
 
-			// refresh uniforms common to several materials
+// 			// refresh uniforms common to several materials
 
-			if ( fog && material.fog === true ) {
+// 			if ( fog && material.fog === true ) {
 
-				materials.refreshFogUniforms( m_uniforms, fog );
+// 				materials.refreshFogUniforms( m_uniforms, fog );
 
-			}
+// 			}
 
-			materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );
+// 			materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );
 
-			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
+// 			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
 
-		}
+// 		}
 
-		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {
+// 		if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {
 
-			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
-			material.uniformsNeedUpdate = false;
+// 			WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
+// 			material.uniformsNeedUpdate = false;
 
-		}
+// 		}
 
-		if ( material.isSpriteMaterial ) {
+// 		if ( material.isSpriteMaterial ) {
 
-			p_uniforms.setValue( _gl, 'center', object.center );
+// 			p_uniforms.setValue( _gl, 'center', object.center );
 
-		}
+// 		}
 
-		// common matrices
+// 		// common matrices
 
-		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
-		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
-		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );
+// 		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
+// 		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
+// 		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );
 
-		// UBOs
+// 		// UBOs
 
-		if ( material.isShaderMaterial || material.isRawShaderMaterial ) {
+// 		if ( material.isShaderMaterial || material.isRawShaderMaterial ) {
 
-			const groups = material.uniformsGroups;
+// 			const groups = material.uniformsGroups;
 
-			for ( let i = 0, l = groups.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = groups.length; i < l; i ++ ) {
 
-				if ( capabilities.isWebGL2 ) {
+// 				if ( capabilities.isWebGL2 ) {
 
-					const group = groups[ i ];
+// 					const group = groups[ i ];
 
-					uniformsGroups.update( group, program );
-					uniformsGroups.bind( group, program );
+// 					uniformsGroups.update( group, program );
+// 					uniformsGroups.bind( group, program );
 
-				} else {
+// 				} else {
 
-					console.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );
+// 					console.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return program;
+// 		return program;
 
-	}
+// 	}
 
-	// If uniforms are marked as clean, they don't need to be loaded to the GPU.
+// 	// If uniforms are marked as clean, they don't need to be loaded to the GPU.
 
-	function markUniformsLightsNeedsUpdate( uniforms, value ) {
+// 	function markUniformsLightsNeedsUpdate( uniforms, value ) {
 
-		uniforms.ambientLightColor.needsUpdate = value;
-		uniforms.lightProbe.needsUpdate = value;
+// 		uniforms.ambientLightColor.needsUpdate = value;
+// 		uniforms.lightProbe.needsUpdate = value;
 
-		uniforms.directionalLights.needsUpdate = value;
-		uniforms.directionalLightShadows.needsUpdate = value;
-		uniforms.pointLights.needsUpdate = value;
-		uniforms.pointLightShadows.needsUpdate = value;
-		uniforms.spotLights.needsUpdate = value;
-		uniforms.spotLightShadows.needsUpdate = value;
-		uniforms.rectAreaLights.needsUpdate = value;
-		uniforms.hemisphereLights.needsUpdate = value;
+// 		uniforms.directionalLights.needsUpdate = value;
+// 		uniforms.directionalLightShadows.needsUpdate = value;
+// 		uniforms.pointLights.needsUpdate = value;
+// 		uniforms.pointLightShadows.needsUpdate = value;
+// 		uniforms.spotLights.needsUpdate = value;
+// 		uniforms.spotLightShadows.needsUpdate = value;
+// 		uniforms.rectAreaLights.needsUpdate = value;
+// 		uniforms.hemisphereLights.needsUpdate = value;
 
-	}
+// 	}
 
-	function materialNeedsLights( material ) {
+// 	function materialNeedsLights( material ) {
 
-		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
-			material.isMeshStandardMaterial || material.isShadowMaterial ||
-			( material.isShaderMaterial && material.lights === true );
+// 		return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
+// 			material.isMeshStandardMaterial || material.isShadowMaterial ||
+// 			( material.isShaderMaterial && material.lights === true );
 
-	}
+// 	}
 
-	this.getActiveCubeFace = function () {
+// 	this.getActiveCubeFace = function () {
 
-		return _currentActiveCubeFace;
+// 		return _currentActiveCubeFace;
 
-	};
+// 	};
 
-	this.getActiveMipmapLevel = function () {
+// 	this.getActiveMipmapLevel = function () {
 
-		return _currentActiveMipmapLevel;
+// 		return _currentActiveMipmapLevel;
 
-	};
+// 	};
 
-	this.getRenderTarget = function () {
+// 	this.getRenderTarget = function () {
 
-		return _currentRenderTarget;
+// 		return _currentRenderTarget;
 
-	};
+// 	};
 
-	this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {
+// 	this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {
 
-		properties.get( renderTarget.texture ).__webglTexture = colorTexture;
-		properties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;
+// 		properties.get( renderTarget.texture ).__webglTexture = colorTexture;
+// 		properties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;
 
-		const renderTargetProperties = properties.get( renderTarget );
-		renderTargetProperties.__hasExternalTextures = true;
+// 		const renderTargetProperties = properties.get( renderTarget );
+// 		renderTargetProperties.__hasExternalTextures = true;
 
-		if ( renderTargetProperties.__hasExternalTextures ) {
+// 		if ( renderTargetProperties.__hasExternalTextures ) {
 
-			renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;
+// 			renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;
 
-			if ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {
+// 			if ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {
 
-				// The multisample_render_to_texture extension doesn't work properly if there
-				// are midframe flushes and an external depth buffer. Disable use of the extension.
-				if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {
+// 				// The multisample_render_to_texture extension doesn't work properly if there
+// 				// are midframe flushes and an external depth buffer. Disable use of the extension.
+// 				if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {
 
-					console.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );
-					renderTargetProperties.__useRenderToTexture = false;
+// 					console.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );
+// 					renderTargetProperties.__useRenderToTexture = false;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	};
+// 	};
 
-	this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {
+// 	this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {
 
-		const renderTargetProperties = properties.get( renderTarget );
-		renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
-		renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
+// 		const renderTargetProperties = properties.get( renderTarget );
+// 		renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
+// 		renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
 
-	};
+// 	};
 
-	this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {
+// 	this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {
 
-		_currentRenderTarget = renderTarget;
-		_currentActiveCubeFace = activeCubeFace;
-		_currentActiveMipmapLevel = activeMipmapLevel;
+// 		_currentRenderTarget = renderTarget;
+// 		_currentActiveCubeFace = activeCubeFace;
+// 		_currentActiveMipmapLevel = activeMipmapLevel;
 
-		let useDefaultFramebuffer = true;
+// 		let useDefaultFramebuffer = true;
 
-		if ( renderTarget ) {
+// 		if ( renderTarget ) {
 
-			const renderTargetProperties = properties.get( renderTarget );
+// 			const renderTargetProperties = properties.get( renderTarget );
 
-			if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {
+// 			if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {
 
-				// We need to make sure to rebind the framebuffer.
-				state.bindFramebuffer( 36160, null );
-				useDefaultFramebuffer = false;
+// 				// We need to make sure to rebind the framebuffer.
+// 				state.bindFramebuffer( 36160, null );
+// 				useDefaultFramebuffer = false;
 
-			} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {
+// 			} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {
 
-				textures.setupRenderTarget( renderTarget );
+// 				textures.setupRenderTarget( renderTarget );
 
-			} else if ( renderTargetProperties.__hasExternalTextures ) {
+// 			} else if ( renderTargetProperties.__hasExternalTextures ) {
 
-				// Color and depth texture must be rebound in order for the swapchain to update.
-				textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );
+// 				// Color and depth texture must be rebound in order for the swapchain to update.
+// 				textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		let framebuffer = null;
-		let isCube = false;
-		let isRenderTarget3D = false;
+// 		let framebuffer = null;
+// 		let isCube = false;
+// 		let isRenderTarget3D = false;
 
-		if ( renderTarget ) {
+// 		if ( renderTarget ) {
 
-			const texture = renderTarget.texture;
+// 			const texture = renderTarget.texture;
 
-			if ( texture.isData3DTexture || texture.isDataArrayTexture ) {
+// 			if ( texture.isData3DTexture || texture.isDataArrayTexture ) {
 
-				isRenderTarget3D = true;
+// 				isRenderTarget3D = true;
 
-			}
+// 			}
 
-			const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;
+// 			const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;
 
-			if ( renderTarget.isWebGLCubeRenderTarget ) {
+// 			if ( renderTarget.isWebGLCubeRenderTarget ) {
 
-				framebuffer = __webglFramebuffer[ activeCubeFace ];
-				isCube = true;
+// 				framebuffer = __webglFramebuffer[ activeCubeFace ];
+// 				isCube = true;
 
-			} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {
+// 			} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {
 
-				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;
+// 				framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;
 
-			} else {
+// 			} else {
 
-				framebuffer = __webglFramebuffer;
+// 				framebuffer = __webglFramebuffer;
 
-			}
+// 			}
 
-			_currentViewport.copy( renderTarget.viewport );
-			_currentScissor.copy( renderTarget.scissor );
-			_currentScissorTest = renderTarget.scissorTest;
+// 			_currentViewport.copy( renderTarget.viewport );
+// 			_currentScissor.copy( renderTarget.scissor );
+// 			_currentScissorTest = renderTarget.scissorTest;
 
-		} else {
+// 		} else {
 
-			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
-			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
-			_currentScissorTest = _scissorTest;
+// 			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
+// 			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
+// 			_currentScissorTest = _scissorTest;
 
-		}
+// 		}
 
-		const framebufferBound = state.bindFramebuffer( 36160, framebuffer );
+// 		const framebufferBound = state.bindFramebuffer( 36160, framebuffer );
 
-		if ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {
+// 		if ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {
 
-			state.drawBuffers( renderTarget, framebuffer );
+// 			state.drawBuffers( renderTarget, framebuffer );
 
-		}
+// 		}
 
-		state.viewport( _currentViewport );
-		state.scissor( _currentScissor );
-		state.setScissorTest( _currentScissorTest );
+// 		state.viewport( _currentViewport );
+// 		state.scissor( _currentScissor );
+// 		state.setScissorTest( _currentScissorTest );
 
-		if ( isCube ) {
+// 		if ( isCube ) {
 
-			const textureProperties = properties.get( renderTarget.texture );
-			_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );
+// 			const textureProperties = properties.get( renderTarget.texture );
+// 			_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );
 
-		} else if ( isRenderTarget3D ) {
+// 		} else if ( isRenderTarget3D ) {
 
-			const textureProperties = properties.get( renderTarget.texture );
-			const layer = activeCubeFace || 0;
-			_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );
+// 			const textureProperties = properties.get( renderTarget.texture );
+// 			const layer = activeCubeFace || 0;
+// 			_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );
 
-		}
+// 		}
 
-		_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings
+// 		_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings
 
-	};
+// 	};
 
-	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {
+// 	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {
 
-		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {
+// 		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {
 
-			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
-			return;
+// 			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
+// 			return;
 
-		}
+// 		}
 
-		let framebuffer = properties.get( renderTarget ).__webglFramebuffer;
+// 		let framebuffer = properties.get( renderTarget ).__webglFramebuffer;
 
-		if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {
+// 		if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {
 
-			framebuffer = framebuffer[ activeCubeFaceIndex ];
+// 			framebuffer = framebuffer[ activeCubeFaceIndex ];
 
-		}
+// 		}
 
-		if ( framebuffer ) {
+// 		if ( framebuffer ) {
 
-			state.bindFramebuffer( 36160, framebuffer );
+// 			state.bindFramebuffer( 36160, framebuffer );
 
-			try {
+// 			try {
 
-				const texture = renderTarget.texture;
-				const textureFormat = texture.format;
-				const textureType = texture.type;
+// 				const texture = renderTarget.texture;
+// 				const textureFormat = texture.format;
+// 				const textureType = texture.type;
 
-				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {
+// 				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {
 
-					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
-					return;
+// 					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
+// 					return;
 
-				}
+// 				}
 
-				const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );
+// 				const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );
 
-				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)
-					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
-					! halfFloatSupportedByExt ) {
+// 				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)
+// 					! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
+// 					! halfFloatSupportedByExt ) {
 
-					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
-					return;
+// 					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
+// 					return;
 
-				}
+// 				}
 
-				// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
+// 				// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
 
-				if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {
+// 				if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {
 
-					_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );
+// 					_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );
 
-				}
+// 				}
 
-			} finally {
+// 			} finally {
 
-				// restore framebuffer of current render target if necessary
+// 				// restore framebuffer of current render target if necessary
 
-				const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
-				state.bindFramebuffer( 36160, framebuffer );
+// 				const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
+// 				state.bindFramebuffer( 36160, framebuffer );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	};
+// 	};
 
-	this.copyFramebufferToTexture = function ( position, texture, level = 0 ) {
+// 	this.copyFramebufferToTexture = function ( position, texture, level = 0 ) {
 
-		const levelScale = Math.pow( 2, - level );
-		const width = Math.floor( texture.image.width * levelScale );
-		const height = Math.floor( texture.image.height * levelScale );
+// 		const levelScale = Math.pow( 2, - level );
+// 		const width = Math.floor( texture.image.width * levelScale );
+// 		const height = Math.floor( texture.image.height * levelScale );
 
-		textures.setTexture2D( texture, 0 );
+// 		textures.setTexture2D( texture, 0 );
 
-		_gl.copyTexSubImage2D( 3553, level, 0, 0, position.x, position.y, width, height );
+// 		_gl.copyTexSubImage2D( 3553, level, 0, 0, position.x, position.y, width, height );
 
-		state.unbindTexture();
+// 		state.unbindTexture();
 
-	};
+// 	};
 
-	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {
+// 	this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {
 
-		const width = srcTexture.image.width;
-		const height = srcTexture.image.height;
-		const glFormat = utils.convert( dstTexture.format );
-		const glType = utils.convert( dstTexture.type );
+// 		const width = srcTexture.image.width;
+// 		const height = srcTexture.image.height;
+// 		const glFormat = utils.convert( dstTexture.format );
+// 		const glType = utils.convert( dstTexture.type );
 
-		textures.setTexture2D( dstTexture, 0 );
+// 		textures.setTexture2D( dstTexture, 0 );
 
-		// As another texture upload may have changed pixelStorei
-		// parameters, make sure they are correct for the dstTexture
-		_gl.pixelStorei( 37440, dstTexture.flipY );
-		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
-		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );
+// 		// As another texture upload may have changed pixelStorei
+// 		// parameters, make sure they are correct for the dstTexture
+// 		_gl.pixelStorei( 37440, dstTexture.flipY );
+// 		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
+// 		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );
 
-		if ( srcTexture.isDataTexture ) {
+// 		if ( srcTexture.isDataTexture ) {
 
-			_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );
+// 			_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );
 
-		} else {
+// 		} else {
 
-			if ( srcTexture.isCompressedTexture ) {
+// 			if ( srcTexture.isCompressedTexture ) {
 
-				_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );
+// 				_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );
 
-			} else {
+// 			} else {
 
-				_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );
+// 				_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// Generate mipmaps only when copying level 0
-		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );
+// 		// Generate mipmaps only when copying level 0
+// 		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );
 
-		state.unbindTexture();
+// 		state.unbindTexture();
 
-	};
+// 	};
 
-	this.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {
+// 	this.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {
 
-		if ( _this.isWebGL1Renderer ) {
+// 		if ( _this.isWebGL1Renderer ) {
 
-			console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );
-			return;
+// 			console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );
+// 			return;
 
-		}
+// 		}
 
-		const width = sourceBox.max.x - sourceBox.min.x + 1;
-		const height = sourceBox.max.y - sourceBox.min.y + 1;
-		const depth = sourceBox.max.z - sourceBox.min.z + 1;
-		const glFormat = utils.convert( dstTexture.format );
-		const glType = utils.convert( dstTexture.type );
-		let glTarget;
+// 		const width = sourceBox.max.x - sourceBox.min.x + 1;
+// 		const height = sourceBox.max.y - sourceBox.min.y + 1;
+// 		const depth = sourceBox.max.z - sourceBox.min.z + 1;
+// 		const glFormat = utils.convert( dstTexture.format );
+// 		const glType = utils.convert( dstTexture.type );
+// 		let glTarget;
 
-		if ( dstTexture.isData3DTexture ) {
+// 		if ( dstTexture.isData3DTexture ) {
 
-			textures.setTexture3D( dstTexture, 0 );
-			glTarget = 32879;
+// 			textures.setTexture3D( dstTexture, 0 );
+// 			glTarget = 32879;
 
-		} else if ( dstTexture.isDataArrayTexture ) {
+// 		} else if ( dstTexture.isDataArrayTexture ) {
 
-			textures.setTexture2DArray( dstTexture, 0 );
-			glTarget = 35866;
+// 			textures.setTexture2DArray( dstTexture, 0 );
+// 			glTarget = 35866;
 
-		} else {
+// 		} else {
 
-			console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );
-			return;
+// 			console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );
+// 			return;
 
-		}
+// 		}
 
-		_gl.pixelStorei( 37440, dstTexture.flipY );
-		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
-		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );
+// 		_gl.pixelStorei( 37440, dstTexture.flipY );
+// 		_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );
+// 		_gl.pixelStorei( 3317, dstTexture.unpackAlignment );
 
-		const unpackRowLen = _gl.getParameter( 3314 );
-		const unpackImageHeight = _gl.getParameter( 32878 );
-		const unpackSkipPixels = _gl.getParameter( 3316 );
-		const unpackSkipRows = _gl.getParameter( 3315 );
-		const unpackSkipImages = _gl.getParameter( 32877 );
+// 		const unpackRowLen = _gl.getParameter( 3314 );
+// 		const unpackImageHeight = _gl.getParameter( 32878 );
+// 		const unpackSkipPixels = _gl.getParameter( 3316 );
+// 		const unpackSkipRows = _gl.getParameter( 3315 );
+// 		const unpackSkipImages = _gl.getParameter( 32877 );
 
-		const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;
+// 		const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;
 
-		_gl.pixelStorei( 3314, image.width );
-		_gl.pixelStorei( 32878, image.height );
-		_gl.pixelStorei( 3316, sourceBox.min.x );
-		_gl.pixelStorei( 3315, sourceBox.min.y );
-		_gl.pixelStorei( 32877, sourceBox.min.z );
+// 		_gl.pixelStorei( 3314, image.width );
+// 		_gl.pixelStorei( 32878, image.height );
+// 		_gl.pixelStorei( 3316, sourceBox.min.x );
+// 		_gl.pixelStorei( 3315, sourceBox.min.y );
+// 		_gl.pixelStorei( 32877, sourceBox.min.z );
 
-		if ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {
+// 		if ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {
 
-			_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );
+// 			_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );
 
-		} else {
+// 		} else {
 
-			if ( srcTexture.isCompressedTexture ) {
+// 			if ( srcTexture.isCompressedTexture ) {
 
-				console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );
-				_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );
+// 				console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );
+// 				_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );
 
-			} else {
+// 			} else {
 
-				_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );
+// 				_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		_gl.pixelStorei( 3314, unpackRowLen );
-		_gl.pixelStorei( 32878, unpackImageHeight );
-		_gl.pixelStorei( 3316, unpackSkipPixels );
-		_gl.pixelStorei( 3315, unpackSkipRows );
-		_gl.pixelStorei( 32877, unpackSkipImages );
+// 		_gl.pixelStorei( 3314, unpackRowLen );
+// 		_gl.pixelStorei( 32878, unpackImageHeight );
+// 		_gl.pixelStorei( 3316, unpackSkipPixels );
+// 		_gl.pixelStorei( 3315, unpackSkipRows );
+// 		_gl.pixelStorei( 32877, unpackSkipImages );
 
-		// Generate mipmaps only when copying level 0
-		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );
+// 		// Generate mipmaps only when copying level 0
+// 		if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );
 
-		state.unbindTexture();
+// 		state.unbindTexture();
 
-	};
+// 	};
 
-	this.initTexture = function ( texture ) {
+// 	this.initTexture = function ( texture ) {
 
-		if ( texture.isCubeTexture ) {
+// 		if ( texture.isCubeTexture ) {
 
-			textures.setTextureCube( texture, 0 );
+// 			textures.setTextureCube( texture, 0 );
 
-		} else if ( texture.isData3DTexture ) {
+// 		} else if ( texture.isData3DTexture ) {
 
-			textures.setTexture3D( texture, 0 );
+// 			textures.setTexture3D( texture, 0 );
 
-		} else if ( texture.isDataArrayTexture ) {
+// 		} else if ( texture.isDataArrayTexture ) {
 
-			textures.setTexture2DArray( texture, 0 );
+// 			textures.setTexture2DArray( texture, 0 );
 
-		} else {
+// 		} else {
 
-			textures.setTexture2D( texture, 0 );
+// 			textures.setTexture2D( texture, 0 );
 
-		}
+// 		}
 
-		state.unbindTexture();
+// 		state.unbindTexture();
 
-	};
+// 	};
 
-	this.resetState = function () {
+// 	this.resetState = function () {
 
-		_currentActiveCubeFace = 0;
-		_currentActiveMipmapLevel = 0;
-		_currentRenderTarget = null;
+// 		_currentActiveCubeFace = 0;
+// 		_currentActiveMipmapLevel = 0;
+// 		_currentRenderTarget = null;
 
-		state.reset();
-		bindingStates.reset();
+// 		state.reset();
+// 		bindingStates.reset();
 
-	};
+// 	};
 
-	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
+// 	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
 
-		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );
+// 		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );
 
-	}
+// 	}
 
-}
+// }
 
-class WebGL1Renderer extends WebGLRenderer {}
+// class WebGL1Renderer extends WebGLRenderer {}
 
-WebGL1Renderer.prototype.isWebGL1Renderer = true;
+// WebGL1Renderer.prototype.isWebGL1Renderer = true;
 
-class FogExp2 {
+// class FogExp2 {
 
-	constructor( color, density = 0.00025 ) {
+// 	constructor( color, density = 0.00025 ) {
 
-		this.isFogExp2 = true;
+// 		this.isFogExp2 = true;
 
-		this.name = '';
+// 		this.name = '';
 
-		this.color = new Color( color );
-		this.density = density;
+// 		this.color = new Color( color );
+// 		this.density = density;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new FogExp2( this.color, this.density );
+// 		return new FogExp2( this.color, this.density );
 
-	}
+// 	}
 
-	toJSON( /* meta */ ) {
+// 	toJSON( /* meta */ ) {
 
-		return {
-			type: 'FogExp2',
-			color: this.color.getHex(),
-			density: this.density
-		};
+// 		return {
+// 			type: 'FogExp2',
+// 			color: this.color.getHex(),
+// 			density: this.density
+// 		};
 
-	}
+// 	}
 
-}
+// }
 
-class Fog {
+// class Fog {
 
-	constructor( color, near = 1, far = 1000 ) {
+// 	constructor( color, near = 1, far = 1000 ) {
 
-		this.isFog = true;
+// 		this.isFog = true;
 
-		this.name = '';
+// 		this.name = '';
 
-		this.color = new Color( color );
+// 		this.color = new Color( color );
 
-		this.near = near;
-		this.far = far;
+// 		this.near = near;
+// 		this.far = far;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new Fog( this.color, this.near, this.far );
+// 		return new Fog( this.color, this.near, this.far );
 
-	}
+// 	}
 
-	toJSON( /* meta */ ) {
+// 	toJSON( /* meta */ ) {
 
-		return {
-			type: 'Fog',
-			color: this.color.getHex(),
-			near: this.near,
-			far: this.far
-		};
+// 		return {
+// 			type: 'Fog',
+// 			color: this.color.getHex(),
+// 			near: this.near,
+// 			far: this.far
+// 		};
 
-	}
+// 	}
 
-}
+// }
 
-class Scene extends Object3D {
+// class Scene extends Object3D {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isScene = true;
+// 		this.isScene = true;
 
-		this.type = 'Scene';
+// 		this.type = 'Scene';
 
-		this.background = null;
-		this.environment = null;
-		this.fog = null;
+// 		this.background = null;
+// 		this.environment = null;
+// 		this.fog = null;
 
-		this.overrideMaterial = null;
+// 		this.overrideMaterial = null;
 
-		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
+// 		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
 
-			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );
+// 			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		if ( source.background !== null ) this.background = source.background.clone();
-		if ( source.environment !== null ) this.environment = source.environment.clone();
-		if ( source.fog !== null ) this.fog = source.fog.clone();
+// 		if ( source.background !== null ) this.background = source.background.clone();
+// 		if ( source.environment !== null ) this.environment = source.environment.clone();
+// 		if ( source.fog !== null ) this.fog = source.fog.clone();
 
-		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();
+// 		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();
 
-		this.matrixAutoUpdate = source.matrixAutoUpdate;
+// 		this.matrixAutoUpdate = source.matrixAutoUpdate;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const data = super.toJSON( meta );
+// 		const data = super.toJSON( meta );
 
-		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
+// 		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	// @deprecated
+// 	// @deprecated
 
-	get autoUpdate() {
+// 	get autoUpdate() {
 
-		console.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );
-		return this.matrixWorldAutoUpdate;
+// 		console.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );
+// 		return this.matrixWorldAutoUpdate;
 
-	}
+// 	}
 
-	set autoUpdate( value ) {
+// 	set autoUpdate( value ) {
 
-		console.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );
-		this.matrixWorldAutoUpdate = value;
+// 		console.warn( 'THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144.' );
+// 		this.matrixWorldAutoUpdate = value;
 
-	}
+// 	}
 
-}
+// }
 
-class InterleavedBuffer {
+// class InterleavedBuffer {
 
-	constructor( array, stride ) {
+// 	constructor( array, stride ) {
 
-		this.isInterleavedBuffer = true;
+// 		this.isInterleavedBuffer = true;
 
-		this.array = array;
-		this.stride = stride;
-		this.count = array !== undefined ? array.length / stride : 0;
+// 		this.array = array;
+// 		this.stride = stride;
+// 		this.count = array !== undefined ? array.length / stride : 0;
 
-		this.usage = StaticDrawUsage;
-		this.updateRange = { offset: 0, count: - 1 };
+// 		this.usage = StaticDrawUsage;
+// 		this.updateRange = { offset: 0, count: - 1 };
 
-		this.version = 0;
+// 		this.version = 0;
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-	}
+// 	}
 
-	onUploadCallback() {}
+// 	onUploadCallback() {}
 
-	set needsUpdate( value ) {
+// 	set needsUpdate( value ) {
 
-		if ( value === true ) this.version ++;
+// 		if ( value === true ) this.version ++;
 
-	}
+// 	}
 
-	setUsage( value ) {
+// 	setUsage( value ) {
 
-		this.usage = value;
+// 		this.usage = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.array = new source.array.constructor( source.array );
-		this.count = source.count;
-		this.stride = source.stride;
-		this.usage = source.usage;
+// 		this.array = new source.array.constructor( source.array );
+// 		this.count = source.count;
+// 		this.stride = source.stride;
+// 		this.usage = source.usage;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copyAt( index1, attribute, index2 ) {
+// 	copyAt( index1, attribute, index2 ) {
 
-		index1 *= this.stride;
-		index2 *= attribute.stride;
+// 		index1 *= this.stride;
+// 		index2 *= attribute.stride;
 
-		for ( let i = 0, l = this.stride; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.stride; i < l; i ++ ) {
 
-			this.array[ index1 + i ] = attribute.array[ index2 + i ];
+// 			this.array[ index1 + i ] = attribute.array[ index2 + i ];
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	set( value, offset = 0 ) {
+// 	set( value, offset = 0 ) {
 
-		this.array.set( value, offset );
+// 		this.array.set( value, offset );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone( data ) {
+// 	clone( data ) {
 
-		if ( data.arrayBuffers === undefined ) {
+// 		if ( data.arrayBuffers === undefined ) {
 
-			data.arrayBuffers = {};
+// 			data.arrayBuffers = {};
 
-		}
+// 		}
 
-		if ( this.array.buffer._uuid === undefined ) {
+// 		if ( this.array.buffer._uuid === undefined ) {
 
-			this.array.buffer._uuid = generateUUID();
+// 			this.array.buffer._uuid = generateUUID();
 
-		}
+// 		}
 
-		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {
+// 		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {
 
-			data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;
+// 			data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;
 
-		}
+// 		}
 
-		const array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );
+// 		const array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );
 
-		const ib = new this.constructor( array, this.stride );
-		ib.setUsage( this.usage );
+// 		const ib = new this.constructor( array, this.stride );
+// 		ib.setUsage( this.usage );
 
-		return ib;
+// 		return ib;
 
-	}
+// 	}
 
-	onUpload( callback ) {
+// 	onUpload( callback ) {
 
-		this.onUploadCallback = callback;
+// 		this.onUploadCallback = callback;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON( data ) {
+// 	toJSON( data ) {
 
-		if ( data.arrayBuffers === undefined ) {
+// 		if ( data.arrayBuffers === undefined ) {
 
-			data.arrayBuffers = {};
+// 			data.arrayBuffers = {};
 
-		}
+// 		}
 
-		// generate UUID for array buffer if necessary
+// 		// generate UUID for array buffer if necessary
 
-		if ( this.array.buffer._uuid === undefined ) {
+// 		if ( this.array.buffer._uuid === undefined ) {
 
-			this.array.buffer._uuid = generateUUID();
+// 			this.array.buffer._uuid = generateUUID();
 
-		}
+// 		}
 
-		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {
+// 		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {
 
-			data.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );
+// 			data.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );
 
-		}
+// 		}
 
-		//
+// 		//
 
-		return {
-			uuid: this.uuid,
-			buffer: this.array.buffer._uuid,
-			type: this.array.constructor.name,
-			stride: this.stride
-		};
+// 		return {
+// 			uuid: this.uuid,
+// 			buffer: this.array.buffer._uuid,
+// 			type: this.array.constructor.name,
+// 			stride: this.stride
+// 		};
 
-	}
+// 	}
 
-}
+// }
 
-const _vector$6 = /*@__PURE__*/ new Vector3();
+// const _vector$6 = /*@__PURE__*/ new Vector3();
 
-class InterleavedBufferAttribute {
+// class InterleavedBufferAttribute {
 
-	constructor( interleavedBuffer, itemSize, offset, normalized = false ) {
+// 	constructor( interleavedBuffer, itemSize, offset, normalized = false ) {
 
-		this.isInterleavedBufferAttribute = true;
+// 		this.isInterleavedBufferAttribute = true;
 
-		this.name = '';
+// 		this.name = '';
 
-		this.data = interleavedBuffer;
-		this.itemSize = itemSize;
-		this.offset = offset;
+// 		this.data = interleavedBuffer;
+// 		this.itemSize = itemSize;
+// 		this.offset = offset;
 
-		this.normalized = normalized === true;
+// 		this.normalized = normalized === true;
 
-	}
+// 	}
 
-	get count() {
+// 	get count() {
 
-		return this.data.count;
+// 		return this.data.count;
 
-	}
+// 	}
 
-	get array() {
+// 	get array() {
 
-		return this.data.array;
+// 		return this.data.array;
 
-	}
+// 	}
 
-	set needsUpdate( value ) {
+// 	set needsUpdate( value ) {
 
-		this.data.needsUpdate = value;
+// 		this.data.needsUpdate = value;
 
-	}
+// 	}
 
-	applyMatrix4( m ) {
+// 	applyMatrix4( m ) {
 
-		for ( let i = 0, l = this.data.count; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.data.count; i < l; i ++ ) {
 
-			_vector$6.fromBufferAttribute( this, i );
+// 			_vector$6.fromBufferAttribute( this, i );
 
-			_vector$6.applyMatrix4( m );
+// 			_vector$6.applyMatrix4( m );
 
-			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );
+// 			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	applyNormalMatrix( m ) {
+// 	applyNormalMatrix( m ) {
 
-		for ( let i = 0, l = this.count; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.count; i < l; i ++ ) {
 
-			_vector$6.fromBufferAttribute( this, i );
+// 			_vector$6.fromBufferAttribute( this, i );
 
-			_vector$6.applyNormalMatrix( m );
+// 			_vector$6.applyNormalMatrix( m );
 
-			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );
+// 			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	transformDirection( m ) {
+// 	transformDirection( m ) {
 
-		for ( let i = 0, l = this.count; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.count; i < l; i ++ ) {
 
-			_vector$6.fromBufferAttribute( this, i );
+// 			_vector$6.fromBufferAttribute( this, i );
 
-			_vector$6.transformDirection( m );
+// 			_vector$6.transformDirection( m );
 
-			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );
+// 			this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setX( index, x ) {
+// 	setX( index, x ) {
 
-		if ( this.normalized ) x = normalize( x, this.array );
+// 		if ( this.normalized ) x = normalize( x, this.array );
 
-		this.data.array[ index * this.data.stride + this.offset ] = x;
+// 		this.data.array[ index * this.data.stride + this.offset ] = x;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setY( index, y ) {
+// 	setY( index, y ) {
 
-		if ( this.normalized ) y = normalize( y, this.array );
+// 		if ( this.normalized ) y = normalize( y, this.array );
 
-		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
+// 		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setZ( index, z ) {
+// 	setZ( index, z ) {
 
-		if ( this.normalized ) z = normalize( z, this.array );
+// 		if ( this.normalized ) z = normalize( z, this.array );
 
-		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
+// 		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setW( index, w ) {
+// 	setW( index, w ) {
 
-		if ( this.normalized ) w = normalize( w, this.array );
+// 		if ( this.normalized ) w = normalize( w, this.array );
 
-		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
+// 		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getX( index ) {
+// 	getX( index ) {
 
-		let x = this.data.array[ index * this.data.stride + this.offset ];
+// 		let x = this.data.array[ index * this.data.stride + this.offset ];
 
-		if ( this.normalized ) x = denormalize( x, this.array );
+// 		if ( this.normalized ) x = denormalize( x, this.array );
 
-		return x;
+// 		return x;
 
-	}
+// 	}
 
-	getY( index ) {
+// 	getY( index ) {
 
-		let y = this.data.array[ index * this.data.stride + this.offset + 1 ];
+// 		let y = this.data.array[ index * this.data.stride + this.offset + 1 ];
 
-		if ( this.normalized ) y = denormalize( y, this.array );
+// 		if ( this.normalized ) y = denormalize( y, this.array );
 
-		return y;
+// 		return y;
 
-	}
+// 	}
 
-	getZ( index ) {
+// 	getZ( index ) {
 
-		let z = this.data.array[ index * this.data.stride + this.offset + 2 ];
+// 		let z = this.data.array[ index * this.data.stride + this.offset + 2 ];
 
-		if ( this.normalized ) z = denormalize( z, this.array );
+// 		if ( this.normalized ) z = denormalize( z, this.array );
 
-		return z;
+// 		return z;
 
-	}
+// 	}
 
-	getW( index ) {
+// 	getW( index ) {
 
-		let w = this.data.array[ index * this.data.stride + this.offset + 3 ];
+// 		let w = this.data.array[ index * this.data.stride + this.offset + 3 ];
 
-		if ( this.normalized ) w = denormalize( w, this.array );
+// 		if ( this.normalized ) w = denormalize( w, this.array );
 
-		return w;
+// 		return w;
 
-	}
+// 	}
 
-	setXY( index, x, y ) {
+// 	setXY( index, x, y ) {
 
-		index = index * this.data.stride + this.offset;
+// 		index = index * this.data.stride + this.offset;
 
-		if ( this.normalized ) {
+// 		if ( this.normalized ) {
 
-			x = normalize( x, this.array );
-			y = normalize( y, this.array );
+// 			x = normalize( x, this.array );
+// 			y = normalize( y, this.array );
 
-		}
+// 		}
 
-		this.data.array[ index + 0 ] = x;
-		this.data.array[ index + 1 ] = y;
+// 		this.data.array[ index + 0 ] = x;
+// 		this.data.array[ index + 1 ] = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setXYZ( index, x, y, z ) {
+// 	setXYZ( index, x, y, z ) {
 
-		index = index * this.data.stride + this.offset;
+// 		index = index * this.data.stride + this.offset;
 
-		if ( this.normalized ) {
+// 		if ( this.normalized ) {
 
-			x = normalize( x, this.array );
-			y = normalize( y, this.array );
-			z = normalize( z, this.array );
+// 			x = normalize( x, this.array );
+// 			y = normalize( y, this.array );
+// 			z = normalize( z, this.array );
 
-		}
+// 		}
 
-		this.data.array[ index + 0 ] = x;
-		this.data.array[ index + 1 ] = y;
-		this.data.array[ index + 2 ] = z;
+// 		this.data.array[ index + 0 ] = x;
+// 		this.data.array[ index + 1 ] = y;
+// 		this.data.array[ index + 2 ] = z;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setXYZW( index, x, y, z, w ) {
+// 	setXYZW( index, x, y, z, w ) {
 
-		index = index * this.data.stride + this.offset;
+// 		index = index * this.data.stride + this.offset;
 
-		if ( this.normalized ) {
+// 		if ( this.normalized ) {
 
-			x = normalize( x, this.array );
-			y = normalize( y, this.array );
-			z = normalize( z, this.array );
-			w = normalize( w, this.array );
+// 			x = normalize( x, this.array );
+// 			y = normalize( y, this.array );
+// 			z = normalize( z, this.array );
+// 			w = normalize( w, this.array );
 
-		}
+// 		}
 
-		this.data.array[ index + 0 ] = x;
-		this.data.array[ index + 1 ] = y;
-		this.data.array[ index + 2 ] = z;
-		this.data.array[ index + 3 ] = w;
+// 		this.data.array[ index + 0 ] = x;
+// 		this.data.array[ index + 1 ] = y;
+// 		this.data.array[ index + 2 ] = z;
+// 		this.data.array[ index + 3 ] = w;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone( data ) {
+// 	clone( data ) {
 
-		if ( data === undefined ) {
+// 		if ( data === undefined ) {
 
-			console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will deinterleave buffer data.' );
+// 			console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will deinterleave buffer data.' );
 
-			const array = [];
+// 			const array = [];
 
-			for ( let i = 0; i < this.count; i ++ ) {
+// 			for ( let i = 0; i < this.count; i ++ ) {
 
-				const index = i * this.data.stride + this.offset;
+// 				const index = i * this.data.stride + this.offset;
 
-				for ( let j = 0; j < this.itemSize; j ++ ) {
+// 				for ( let j = 0; j < this.itemSize; j ++ ) {
 
-					array.push( this.data.array[ index + j ] );
+// 					array.push( this.data.array[ index + j ] );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );
+// 			return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );
 
-		} else {
+// 		} else {
 
-			if ( data.interleavedBuffers === undefined ) {
+// 			if ( data.interleavedBuffers === undefined ) {
 
-				data.interleavedBuffers = {};
+// 				data.interleavedBuffers = {};
 
-			}
+// 			}
 
-			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {
+// 			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {
 
-				data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );
+// 				data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );
 
-			}
+// 			}
 
-			return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );
+// 			return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	toJSON( data ) {
+// 	toJSON( data ) {
 
-		if ( data === undefined ) {
+// 		if ( data === undefined ) {
 
-			console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will deinterleave buffer data.' );
+// 			console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will deinterleave buffer data.' );
 
-			const array = [];
+// 			const array = [];
 
-			for ( let i = 0; i < this.count; i ++ ) {
+// 			for ( let i = 0; i < this.count; i ++ ) {
 
-				const index = i * this.data.stride + this.offset;
+// 				const index = i * this.data.stride + this.offset;
 
-				for ( let j = 0; j < this.itemSize; j ++ ) {
+// 				for ( let j = 0; j < this.itemSize; j ++ ) {
 
-					array.push( this.data.array[ index + j ] );
+// 					array.push( this.data.array[ index + j ] );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// deinterleave data and save it as an ordinary buffer attribute for now
+// 			// deinterleave data and save it as an ordinary buffer attribute for now
 
-			return {
-				itemSize: this.itemSize,
-				type: this.array.constructor.name,
-				array: array,
-				normalized: this.normalized
-			};
+// 			return {
+// 				itemSize: this.itemSize,
+// 				type: this.array.constructor.name,
+// 				array: array,
+// 				normalized: this.normalized
+// 			};
 
-		} else {
+// 		} else {
 
-			// save as true interleaved attribtue
+// 			// save as true interleaved attribtue
 
-			if ( data.interleavedBuffers === undefined ) {
+// 			if ( data.interleavedBuffers === undefined ) {
 
-				data.interleavedBuffers = {};
+// 				data.interleavedBuffers = {};
 
-			}
+// 			}
 
-			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {
+// 			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {
 
-				data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );
+// 				data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );
 
-			}
+// 			}
 
-			return {
-				isInterleavedBufferAttribute: true,
-				itemSize: this.itemSize,
-				data: this.data.uuid,
-				offset: this.offset,
-				normalized: this.normalized
-			};
+// 			return {
+// 				isInterleavedBufferAttribute: true,
+// 				itemSize: this.itemSize,
+// 				data: this.data.uuid,
+// 				offset: this.offset,
+// 				normalized: this.normalized
+// 			};
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-class SpriteMaterial extends Material {
+// class SpriteMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isSpriteMaterial = true;
+// 		this.isSpriteMaterial = true;
 
-		this.type = 'SpriteMaterial';
+// 		this.type = 'SpriteMaterial';
 
-		this.color = new Color( 0xffffff );
+// 		this.color = new Color( 0xffffff );
 
-		this.map = null;
+// 		this.map = null;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.rotation = 0;
+// 		this.rotation = 0;
 
-		this.sizeAttenuation = true;
+// 		this.sizeAttenuation = true;
 
-		this.transparent = true;
+// 		this.transparent = true;
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.color.copy( source.color );
+// 		this.color.copy( source.color );
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.rotation = source.rotation;
+// 		this.rotation = source.rotation;
 
-		this.sizeAttenuation = source.sizeAttenuation;
+// 		this.sizeAttenuation = source.sizeAttenuation;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-let _geometry;
+// let _geometry;
 
-const _intersectPoint = /*@__PURE__*/ new Vector3();
-const _worldScale = /*@__PURE__*/ new Vector3();
-const _mvPosition = /*@__PURE__*/ new Vector3();
+// const _intersectPoint = /*@__PURE__*/ new Vector3();
+// const _worldScale = /*@__PURE__*/ new Vector3();
+// const _mvPosition = /*@__PURE__*/ new Vector3();
 
-const _alignedPosition = /*@__PURE__*/ new Vector2();
-const _rotatedPosition = /*@__PURE__*/ new Vector2();
-const _viewWorldMatrix = /*@__PURE__*/ new Matrix4();
+// const _alignedPosition = /*@__PURE__*/ new Vector2();
+// const _rotatedPosition = /*@__PURE__*/ new Vector2();
+// const _viewWorldMatrix = /*@__PURE__*/ new Matrix4();
 
-const _vA = /*@__PURE__*/ new Vector3();
-const _vB = /*@__PURE__*/ new Vector3();
-const _vC = /*@__PURE__*/ new Vector3();
+// const _vA = /*@__PURE__*/ new Vector3();
+// const _vB = /*@__PURE__*/ new Vector3();
+// const _vC = /*@__PURE__*/ new Vector3();
 
-const _uvA = /*@__PURE__*/ new Vector2();
-const _uvB = /*@__PURE__*/ new Vector2();
-const _uvC = /*@__PURE__*/ new Vector2();
+// const _uvA = /*@__PURE__*/ new Vector2();
+// const _uvB = /*@__PURE__*/ new Vector2();
+// const _uvC = /*@__PURE__*/ new Vector2();
 
-class Sprite extends Object3D {
+// class Sprite extends Object3D {
 
-	constructor( material ) {
+// 	constructor( material ) {
 
-		super();
+// 		super();
 
-		this.isSprite = true;
+// 		this.isSprite = true;
 
-		this.type = 'Sprite';
+// 		this.type = 'Sprite';
 
-		if ( _geometry === undefined ) {
+// 		if ( _geometry === undefined ) {
 
-			_geometry = new BufferGeometry();
+// 			_geometry = new BufferGeometry();
 
-			const float32Array = new Float32Array( [
-				- 0.5, - 0.5, 0, 0, 0,
-				0.5, - 0.5, 0, 1, 0,
-				0.5, 0.5, 0, 1, 1,
-				- 0.5, 0.5, 0, 0, 1
-			] );
+// 			const float32Array = new Float32Array( [
+// 				- 0.5, - 0.5, 0, 0, 0,
+// 				0.5, - 0.5, 0, 1, 0,
+// 				0.5, 0.5, 0, 1, 1,
+// 				- 0.5, 0.5, 0, 0, 1
+// 			] );
 
-			const interleavedBuffer = new InterleavedBuffer( float32Array, 5 );
+// 			const interleavedBuffer = new InterleavedBuffer( float32Array, 5 );
 
-			_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
-			_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
-			_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );
+// 			_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
+// 			_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
+// 			_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );
 
-		}
+// 		}
 
-		this.geometry = _geometry;
-		this.material = ( material !== undefined ) ? material : new SpriteMaterial();
+// 		this.geometry = _geometry;
+// 		this.material = ( material !== undefined ) ? material : new SpriteMaterial();
 
-		this.center = new Vector2( 0.5, 0.5 );
+// 		this.center = new Vector2( 0.5, 0.5 );
 
-	}
+// 	}
 
-	raycast( raycaster, intersects ) {
+// 	raycast( raycaster, intersects ) {
 
-		if ( raycaster.camera === null ) {
+// 		if ( raycaster.camera === null ) {
 
-			console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );
+// 			console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );
 
-		}
+// 		}
 
-		_worldScale.setFromMatrixScale( this.matrixWorld );
+// 		_worldScale.setFromMatrixScale( this.matrixWorld );
 
-		_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
-		this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );
+// 		_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
+// 		this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );
 
-		_mvPosition.setFromMatrixPosition( this.modelViewMatrix );
+// 		_mvPosition.setFromMatrixPosition( this.modelViewMatrix );
 
-		if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {
+// 		if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {
 
-			_worldScale.multiplyScalar( - _mvPosition.z );
+// 			_worldScale.multiplyScalar( - _mvPosition.z );
 
-		}
+// 		}
 
-		const rotation = this.material.rotation;
-		let sin, cos;
+// 		const rotation = this.material.rotation;
+// 		let sin, cos;
 
-		if ( rotation !== 0 ) {
+// 		if ( rotation !== 0 ) {
 
-			cos = Math.cos( rotation );
-			sin = Math.sin( rotation );
+// 			cos = Math.cos( rotation );
+// 			sin = Math.sin( rotation );
 
-		}
+// 		}
 
-		const center = this.center;
+// 		const center = this.center;
 
-		transformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
-		transformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
-		transformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
+// 		transformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
+// 		transformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
+// 		transformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
 
-		_uvA.set( 0, 0 );
-		_uvB.set( 1, 0 );
-		_uvC.set( 1, 1 );
+// 		_uvA.set( 0, 0 );
+// 		_uvB.set( 1, 0 );
+// 		_uvC.set( 1, 1 );
 
-		// check first triangle
-		let intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );
+// 		// check first triangle
+// 		let intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );
 
-		if ( intersect === null ) {
+// 		if ( intersect === null ) {
 
-			// check second triangle
-			transformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
-			_uvB.set( 0, 1 );
+// 			// check second triangle
+// 			transformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
+// 			_uvB.set( 0, 1 );
 
-			intersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );
-			if ( intersect === null ) {
+// 			intersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );
+// 			if ( intersect === null ) {
 
-				return;
+// 				return;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const distance = raycaster.ray.origin.distanceTo( _intersectPoint );
+// 		const distance = raycaster.ray.origin.distanceTo( _intersectPoint );
 
-		if ( distance < raycaster.near || distance > raycaster.far ) return;
+// 		if ( distance < raycaster.near || distance > raycaster.far ) return;
 
-		intersects.push( {
+// 		intersects.push( {
 
-			distance: distance,
-			point: _intersectPoint.clone(),
-			uv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),
-			face: null,
-			object: this
+// 			distance: distance,
+// 			point: _intersectPoint.clone(),
+// 			uv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),
+// 			face: null,
+// 			object: this
 
-		} );
+// 		} );
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		if ( source.center !== undefined ) this.center.copy( source.center );
+// 		if ( source.center !== undefined ) this.center.copy( source.center );
 
-		this.material = source.material;
+// 		this.material = source.material;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {
+// function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {
 
-	// compute position in camera space
-	_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );
+// 	// compute position in camera space
+// 	_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );
 
-	// to check if rotation is not zero
-	if ( sin !== undefined ) {
+// 	// to check if rotation is not zero
+// 	if ( sin !== undefined ) {
 
-		_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
-		_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );
+// 		_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
+// 		_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );
 
-	} else {
+// 	} else {
 
-		_rotatedPosition.copy( _alignedPosition );
+// 		_rotatedPosition.copy( _alignedPosition );
 
-	}
+// 	}
 
 
-	vertexPosition.copy( mvPosition );
-	vertexPosition.x += _rotatedPosition.x;
-	vertexPosition.y += _rotatedPosition.y;
+// 	vertexPosition.copy( mvPosition );
+// 	vertexPosition.x += _rotatedPosition.x;
+// 	vertexPosition.y += _rotatedPosition.y;
 
-	// transform to world space
-	vertexPosition.applyMatrix4( _viewWorldMatrix );
+// 	// transform to world space
+// 	vertexPosition.applyMatrix4( _viewWorldMatrix );
 
-}
+// }
 
-const _v1$2 = /*@__PURE__*/ new Vector3();
-const _v2$1 = /*@__PURE__*/ new Vector3();
+// const _v1$2 = /*@__PURE__*/ new Vector3();
+// const _v2$1 = /*@__PURE__*/ new Vector3();
 
-class LOD extends Object3D {
+// class LOD extends Object3D {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this._currentLevel = 0;
+// 		this._currentLevel = 0;
 
-		this.type = 'LOD';
+// 		this.type = 'LOD';
 
-		Object.defineProperties( this, {
-			levels: {
-				enumerable: true,
-				value: []
-			},
-			isLOD: {
-				value: true,
-			}
-		} );
+// 		Object.defineProperties( this, {
+// 			levels: {
+// 				enumerable: true,
+// 				value: []
+// 			},
+// 			isLOD: {
+// 				value: true,
+// 			}
+// 		} );
 
-		this.autoUpdate = true;
+// 		this.autoUpdate = true;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source, false );
+// 		super.copy( source, false );
 
-		const levels = source.levels;
+// 		const levels = source.levels;
 
-		for ( let i = 0, l = levels.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = levels.length; i < l; i ++ ) {
 
-			const level = levels[ i ];
+// 			const level = levels[ i ];
 
-			this.addLevel( level.object.clone(), level.distance );
+// 			this.addLevel( level.object.clone(), level.distance );
 
-		}
+// 		}
 
-		this.autoUpdate = source.autoUpdate;
+// 		this.autoUpdate = source.autoUpdate;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addLevel( object, distance = 0 ) {
+// 	addLevel( object, distance = 0 ) {
 
-		distance = Math.abs( distance );
+// 		distance = Math.abs( distance );
 
-		const levels = this.levels;
+// 		const levels = this.levels;
 
-		let l;
+// 		let l;
 
-		for ( l = 0; l < levels.length; l ++ ) {
+// 		for ( l = 0; l < levels.length; l ++ ) {
 
-			if ( distance < levels[ l ].distance ) {
+// 			if ( distance < levels[ l ].distance ) {
 
-				break;
+// 				break;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		levels.splice( l, 0, { distance: distance, object: object } );
+// 		levels.splice( l, 0, { distance: distance, object: object } );
 
-		this.add( object );
+// 		this.add( object );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getCurrentLevel() {
+// 	getCurrentLevel() {
 
-		return this._currentLevel;
+// 		return this._currentLevel;
 
-	}
+// 	}
 
-	getObjectForDistance( distance ) {
+// 	getObjectForDistance( distance ) {
 
-		const levels = this.levels;
+// 		const levels = this.levels;
 
-		if ( levels.length > 0 ) {
+// 		if ( levels.length > 0 ) {
 
-			let i, l;
+// 			let i, l;
 
-			for ( i = 1, l = levels.length; i < l; i ++ ) {
+// 			for ( i = 1, l = levels.length; i < l; i ++ ) {
 
-				if ( distance < levels[ i ].distance ) {
+// 				if ( distance < levels[ i ].distance ) {
 
-					break;
+// 					break;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			return levels[ i - 1 ].object;
+// 			return levels[ i - 1 ].object;
 
-		}
+// 		}
 
-		return null;
+// 		return null;
 
-	}
+// 	}
 
-	raycast( raycaster, intersects ) {
+// 	raycast( raycaster, intersects ) {
 
-		const levels = this.levels;
+// 		const levels = this.levels;
 
-		if ( levels.length > 0 ) {
+// 		if ( levels.length > 0 ) {
 
-			_v1$2.setFromMatrixPosition( this.matrixWorld );
+// 			_v1$2.setFromMatrixPosition( this.matrixWorld );
 
-			const distance = raycaster.ray.origin.distanceTo( _v1$2 );
+// 			const distance = raycaster.ray.origin.distanceTo( _v1$2 );
 
-			this.getObjectForDistance( distance ).raycast( raycaster, intersects );
+// 			this.getObjectForDistance( distance ).raycast( raycaster, intersects );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	update( camera ) {
+// 	update( camera ) {
 
-		const levels = this.levels;
+// 		const levels = this.levels;
 
-		if ( levels.length > 1 ) {
+// 		if ( levels.length > 1 ) {
 
-			_v1$2.setFromMatrixPosition( camera.matrixWorld );
-			_v2$1.setFromMatrixPosition( this.matrixWorld );
+// 			_v1$2.setFromMatrixPosition( camera.matrixWorld );
+// 			_v2$1.setFromMatrixPosition( this.matrixWorld );
 
-			const distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;
+// 			const distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;
 
-			levels[ 0 ].object.visible = true;
+// 			levels[ 0 ].object.visible = true;
 
-			let i, l;
+// 			let i, l;
 
-			for ( i = 1, l = levels.length; i < l; i ++ ) {
+// 			for ( i = 1, l = levels.length; i < l; i ++ ) {
 
-				if ( distance >= levels[ i ].distance ) {
+// 				if ( distance >= levels[ i ].distance ) {
 
-					levels[ i - 1 ].object.visible = false;
-					levels[ i ].object.visible = true;
+// 					levels[ i - 1 ].object.visible = false;
+// 					levels[ i ].object.visible = true;
 
-				} else {
+// 				} else {
 
-					break;
+// 					break;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			this._currentLevel = i - 1;
+// 			this._currentLevel = i - 1;
 
-			for ( ; i < l; i ++ ) {
+// 			for ( ; i < l; i ++ ) {
 
-				levels[ i ].object.visible = false;
+// 				levels[ i ].object.visible = false;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const data = super.toJSON( meta );
+// 		const data = super.toJSON( meta );
 
-		if ( this.autoUpdate === false ) data.object.autoUpdate = false;
+// 		if ( this.autoUpdate === false ) data.object.autoUpdate = false;
 
-		data.object.levels = [];
+// 		data.object.levels = [];
 
-		const levels = this.levels;
+// 		const levels = this.levels;
 
-		for ( let i = 0, l = levels.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = levels.length; i < l; i ++ ) {
 
-			const level = levels[ i ];
+// 			const level = levels[ i ];
 
-			data.object.levels.push( {
-				object: level.object.uuid,
-				distance: level.distance
-			} );
+// 			data.object.levels.push( {
+// 				object: level.object.uuid,
+// 				distance: level.distance
+// 			} );
 
-		}
+// 		}
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-const _basePosition = /*@__PURE__*/ new Vector3();
+// const _basePosition = /*@__PURE__*/ new Vector3();
 
-const _skinIndex = /*@__PURE__*/ new Vector4();
-const _skinWeight = /*@__PURE__*/ new Vector4();
+// const _skinIndex = /*@__PURE__*/ new Vector4();
+// const _skinWeight = /*@__PURE__*/ new Vector4();
 
-const _vector$5 = /*@__PURE__*/ new Vector3();
-const _matrix = /*@__PURE__*/ new Matrix4();
+// const _vector$5 = /*@__PURE__*/ new Vector3();
+// const _matrix = /*@__PURE__*/ new Matrix4();
 
-class SkinnedMesh extends Mesh {
+// class SkinnedMesh extends Mesh {
 
-	constructor( geometry, material ) {
+// 	constructor( geometry, material ) {
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.isSkinnedMesh = true;
+// 		this.isSkinnedMesh = true;
 
-		this.type = 'SkinnedMesh';
+// 		this.type = 'SkinnedMesh';
 
-		this.bindMode = 'attached';
-		this.bindMatrix = new Matrix4();
-		this.bindMatrixInverse = new Matrix4();
+// 		this.bindMode = 'attached';
+// 		this.bindMatrix = new Matrix4();
+// 		this.bindMatrixInverse = new Matrix4();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.bindMode = source.bindMode;
-		this.bindMatrix.copy( source.bindMatrix );
-		this.bindMatrixInverse.copy( source.bindMatrixInverse );
+// 		this.bindMode = source.bindMode;
+// 		this.bindMatrix.copy( source.bindMatrix );
+// 		this.bindMatrixInverse.copy( source.bindMatrixInverse );
 
-		this.skeleton = source.skeleton;
+// 		this.skeleton = source.skeleton;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	bind( skeleton, bindMatrix ) {
+// 	bind( skeleton, bindMatrix ) {
 
-		this.skeleton = skeleton;
+// 		this.skeleton = skeleton;
 
-		if ( bindMatrix === undefined ) {
+// 		if ( bindMatrix === undefined ) {
 
-			this.updateMatrixWorld( true );
+// 			this.updateMatrixWorld( true );
 
-			this.skeleton.calculateInverses();
+// 			this.skeleton.calculateInverses();
 
-			bindMatrix = this.matrixWorld;
+// 			bindMatrix = this.matrixWorld;
 
-		}
+// 		}
 
-		this.bindMatrix.copy( bindMatrix );
-		this.bindMatrixInverse.copy( bindMatrix ).invert();
+// 		this.bindMatrix.copy( bindMatrix );
+// 		this.bindMatrixInverse.copy( bindMatrix ).invert();
 
-	}
+// 	}
 
-	pose() {
+// 	pose() {
 
-		this.skeleton.pose();
+// 		this.skeleton.pose();
 
-	}
+// 	}
 
-	normalizeSkinWeights() {
+// 	normalizeSkinWeights() {
 
-		const vector = new Vector4();
+// 		const vector = new Vector4();
 
-		const skinWeight = this.geometry.attributes.skinWeight;
+// 		const skinWeight = this.geometry.attributes.skinWeight;
 
-		for ( let i = 0, l = skinWeight.count; i < l; i ++ ) {
+// 		for ( let i = 0, l = skinWeight.count; i < l; i ++ ) {
 
-			vector.fromBufferAttribute( skinWeight, i );
+// 			vector.fromBufferAttribute( skinWeight, i );
 
-			const scale = 1.0 / vector.manhattanLength();
+// 			const scale = 1.0 / vector.manhattanLength();
 
-			if ( scale !== Infinity ) {
+// 			if ( scale !== Infinity ) {
 
-				vector.multiplyScalar( scale );
+// 				vector.multiplyScalar( scale );
 
-			} else {
+// 			} else {
 
-				vector.set( 1, 0, 0, 0 ); // do something reasonable
+// 				vector.set( 1, 0, 0, 0 ); // do something reasonable
 
-			}
+// 			}
 
-			skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );
+// 			skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	updateMatrixWorld( force ) {
+// 	updateMatrixWorld( force ) {
 
-		super.updateMatrixWorld( force );
+// 		super.updateMatrixWorld( force );
 
-		if ( this.bindMode === 'attached' ) {
+// 		if ( this.bindMode === 'attached' ) {
 
-			this.bindMatrixInverse.copy( this.matrixWorld ).invert();
+// 			this.bindMatrixInverse.copy( this.matrixWorld ).invert();
 
-		} else if ( this.bindMode === 'detached' ) {
+// 		} else if ( this.bindMode === 'detached' ) {
 
-			this.bindMatrixInverse.copy( this.bindMatrix ).invert();
+// 			this.bindMatrixInverse.copy( this.bindMatrix ).invert();
 
-		} else {
+// 		} else {
 
-			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );
+// 			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	boneTransform( index, target ) {
+// 	boneTransform( index, target ) {
 
-		const skeleton = this.skeleton;
-		const geometry = this.geometry;
+// 		const skeleton = this.skeleton;
+// 		const geometry = this.geometry;
 
-		_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );
-		_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );
+// 		_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );
+// 		_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );
 
-		_basePosition.copy( target ).applyMatrix4( this.bindMatrix );
+// 		_basePosition.copy( target ).applyMatrix4( this.bindMatrix );
 
-		target.set( 0, 0, 0 );
+// 		target.set( 0, 0, 0 );
 
-		for ( let i = 0; i < 4; i ++ ) {
+// 		for ( let i = 0; i < 4; i ++ ) {
 
-			const weight = _skinWeight.getComponent( i );
+// 			const weight = _skinWeight.getComponent( i );
 
-			if ( weight !== 0 ) {
+// 			if ( weight !== 0 ) {
 
-				const boneIndex = _skinIndex.getComponent( i );
+// 				const boneIndex = _skinIndex.getComponent( i );
 
-				_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );
+// 				_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );
 
-				target.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );
+// 				target.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return target.applyMatrix4( this.bindMatrixInverse );
+// 		return target.applyMatrix4( this.bindMatrixInverse );
 
-	}
+// 	}
 
-}
+// }
 
-class Bone extends Object3D {
+// class Bone extends Object3D {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isBone = true;
+// 		this.isBone = true;
 
-		this.type = 'Bone';
+// 		this.type = 'Bone';
 
-	}
+// 	}
 
-}
+// }
 
-class DataTexture extends Texture {
+// class DataTexture extends Texture {
 
-	constructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {
+// 	constructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {
 
-		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
+// 		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
 
-		this.isDataTexture = true;
+// 		this.isDataTexture = true;
 
-		this.image = { data: data, width: width, height: height };
+// 		this.image = { data: data, width: width, height: height };
 
-		this.generateMipmaps = false;
-		this.flipY = false;
-		this.unpackAlignment = 1;
+// 		this.generateMipmaps = false;
+// 		this.flipY = false;
+// 		this.unpackAlignment = 1;
 
-	}
+// 	}
 
-}
+// }
 
-const _offsetMatrix = /*@__PURE__*/ new Matrix4();
-const _identityMatrix = /*@__PURE__*/ new Matrix4();
+// const _offsetMatrix = /*@__PURE__*/ new Matrix4();
+// const _identityMatrix = /*@__PURE__*/ new Matrix4();
 
-class Skeleton {
+// class Skeleton {
 
-	constructor( bones = [], boneInverses = [] ) {
+// 	constructor( bones = [], boneInverses = [] ) {
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		this.bones = bones.slice( 0 );
-		this.boneInverses = boneInverses;
-		this.boneMatrices = null;
+// 		this.bones = bones.slice( 0 );
+// 		this.boneInverses = boneInverses;
+// 		this.boneMatrices = null;
 
-		this.boneTexture = null;
-		this.boneTextureSize = 0;
+// 		this.boneTexture = null;
+// 		this.boneTextureSize = 0;
 
-		this.frame = - 1;
+// 		this.frame = - 1;
 
-		this.init();
+// 		this.init();
 
-	}
+// 	}
 
-	init() {
+// 	init() {
 
-		const bones = this.bones;
-		const boneInverses = this.boneInverses;
+// 		const bones = this.bones;
+// 		const boneInverses = this.boneInverses;
 
-		this.boneMatrices = new Float32Array( bones.length * 16 );
+// 		this.boneMatrices = new Float32Array( bones.length * 16 );
 
-		// calculate inverse bone matrices if necessary
+// 		// calculate inverse bone matrices if necessary
 
-		if ( boneInverses.length === 0 ) {
+// 		if ( boneInverses.length === 0 ) {
 
-			this.calculateInverses();
+// 			this.calculateInverses();
 
-		} else {
+// 		} else {
 
-			// handle special case
+// 			// handle special case
 
-			if ( bones.length !== boneInverses.length ) {
+// 			if ( bones.length !== boneInverses.length ) {
 
-				console.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );
+// 				console.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );
 
-				this.boneInverses = [];
+// 				this.boneInverses = [];
 
-				for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
 
-					this.boneInverses.push( new Matrix4() );
+// 					this.boneInverses.push( new Matrix4() );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	calculateInverses() {
+// 	calculateInverses() {
 
-		this.boneInverses.length = 0;
+// 		this.boneInverses.length = 0;
 
-		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
 
-			const inverse = new Matrix4();
+// 			const inverse = new Matrix4();
 
-			if ( this.bones[ i ] ) {
+// 			if ( this.bones[ i ] ) {
 
-				inverse.copy( this.bones[ i ].matrixWorld ).invert();
+// 				inverse.copy( this.bones[ i ].matrixWorld ).invert();
 
-			}
+// 			}
 
-			this.boneInverses.push( inverse );
+// 			this.boneInverses.push( inverse );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	pose() {
+// 	pose() {
 
-		// recover the bind-time world matrices
+// 		// recover the bind-time world matrices
 
-		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
 
-			const bone = this.bones[ i ];
+// 			const bone = this.bones[ i ];
 
-			if ( bone ) {
+// 			if ( bone ) {
 
-				bone.matrixWorld.copy( this.boneInverses[ i ] ).invert();
+// 				bone.matrixWorld.copy( this.boneInverses[ i ] ).invert();
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// compute the local matrices, positions, rotations and scales
+// 		// compute the local matrices, positions, rotations and scales
 
-		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
 
-			const bone = this.bones[ i ];
+// 			const bone = this.bones[ i ];
 
-			if ( bone ) {
+// 			if ( bone ) {
 
-				if ( bone.parent && bone.parent.isBone ) {
+// 				if ( bone.parent && bone.parent.isBone ) {
 
-					bone.matrix.copy( bone.parent.matrixWorld ).invert();
-					bone.matrix.multiply( bone.matrixWorld );
+// 					bone.matrix.copy( bone.parent.matrixWorld ).invert();
+// 					bone.matrix.multiply( bone.matrixWorld );
 
-				} else {
+// 				} else {
 
-					bone.matrix.copy( bone.matrixWorld );
+// 					bone.matrix.copy( bone.matrixWorld );
 
-				}
+// 				}
 
-				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
+// 				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	update() {
+// 	update() {
 
-		const bones = this.bones;
-		const boneInverses = this.boneInverses;
-		const boneMatrices = this.boneMatrices;
-		const boneTexture = this.boneTexture;
+// 		const bones = this.bones;
+// 		const boneInverses = this.boneInverses;
+// 		const boneMatrices = this.boneMatrices;
+// 		const boneTexture = this.boneTexture;
 
-		// flatten bone matrices to array
+// 		// flatten bone matrices to array
 
-		for ( let i = 0, il = bones.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = bones.length; i < il; i ++ ) {
 
-			// compute the offset between the current and the original transform
+// 			// compute the offset between the current and the original transform
 
-			const matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;
+// 			const matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;
 
-			_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
-			_offsetMatrix.toArray( boneMatrices, i * 16 );
+// 			_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
+// 			_offsetMatrix.toArray( boneMatrices, i * 16 );
 
-		}
+// 		}
 
-		if ( boneTexture !== null ) {
+// 		if ( boneTexture !== null ) {
 
-			boneTexture.needsUpdate = true;
+// 			boneTexture.needsUpdate = true;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new Skeleton( this.bones, this.boneInverses );
+// 		return new Skeleton( this.bones, this.boneInverses );
 
-	}
+// 	}
 
-	computeBoneTexture() {
+// 	computeBoneTexture() {
 
-		// layout (1 matrix = 4 pixels)
-		//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
-		//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
-		//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
-		//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
-		//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
+// 		// layout (1 matrix = 4 pixels)
+// 		//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
+// 		//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
+// 		//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
+// 		//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
+// 		//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
 
-		let size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
-		size = ceilPowerOfTwo( size );
-		size = Math.max( size, 4 );
+// 		let size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
+// 		size = ceilPowerOfTwo( size );
+// 		size = Math.max( size, 4 );
 
-		const boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
-		boneMatrices.set( this.boneMatrices ); // copy current values
+// 		const boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
+// 		boneMatrices.set( this.boneMatrices ); // copy current values
 
-		const boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
-		boneTexture.needsUpdate = true;
+// 		const boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
+// 		boneTexture.needsUpdate = true;
 
-		this.boneMatrices = boneMatrices;
-		this.boneTexture = boneTexture;
-		this.boneTextureSize = size;
+// 		this.boneMatrices = boneMatrices;
+// 		this.boneTexture = boneTexture;
+// 		this.boneTextureSize = size;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getBoneByName( name ) {
+// 	getBoneByName( name ) {
 
-		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = this.bones.length; i < il; i ++ ) {
 
-			const bone = this.bones[ i ];
+// 			const bone = this.bones[ i ];
 
-			if ( bone.name === name ) {
+// 			if ( bone.name === name ) {
 
-				return bone;
+// 				return bone;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return undefined;
+// 		return undefined;
 
-	}
+// 	}
 
-	dispose( ) {
+// 	dispose( ) {
 
-		if ( this.boneTexture !== null ) {
+// 		if ( this.boneTexture !== null ) {
 
-			this.boneTexture.dispose();
+// 			this.boneTexture.dispose();
 
-			this.boneTexture = null;
+// 			this.boneTexture = null;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	fromJSON( json, bones ) {
+// 	fromJSON( json, bones ) {
 
-		this.uuid = json.uuid;
+// 		this.uuid = json.uuid;
 
-		for ( let i = 0, l = json.bones.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = json.bones.length; i < l; i ++ ) {
 
-			const uuid = json.bones[ i ];
-			let bone = bones[ uuid ];
+// 			const uuid = json.bones[ i ];
+// 			let bone = bones[ uuid ];
 
-			if ( bone === undefined ) {
+// 			if ( bone === undefined ) {
 
-				console.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );
-				bone = new Bone();
+// 				console.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );
+// 				bone = new Bone();
 
-			}
+// 			}
 
-			this.bones.push( bone );
-			this.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );
+// 			this.bones.push( bone );
+// 			this.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );
 
-		}
+// 		}
 
-		this.init();
+// 		this.init();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = {
-			metadata: {
-				version: 4.5,
-				type: 'Skeleton',
-				generator: 'Skeleton.toJSON'
-			},
-			bones: [],
-			boneInverses: []
-		};
+// 		const data = {
+// 			metadata: {
+// 				version: 4.5,
+// 				type: 'Skeleton',
+// 				generator: 'Skeleton.toJSON'
+// 			},
+// 			bones: [],
+// 			boneInverses: []
+// 		};
 
-		data.uuid = this.uuid;
+// 		data.uuid = this.uuid;
 
-		const bones = this.bones;
-		const boneInverses = this.boneInverses;
+// 		const bones = this.bones;
+// 		const boneInverses = this.boneInverses;
 
-		for ( let i = 0, l = bones.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = bones.length; i < l; i ++ ) {
 
-			const bone = bones[ i ];
-			data.bones.push( bone.uuid );
+// 			const bone = bones[ i ];
+// 			data.bones.push( bone.uuid );
 
-			const boneInverse = boneInverses[ i ];
-			data.boneInverses.push( boneInverse.toArray() );
+// 			const boneInverse = boneInverses[ i ];
+// 			data.boneInverses.push( boneInverse.toArray() );
 
-		}
+// 		}
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-class InstancedBufferAttribute extends BufferAttribute {
+// class InstancedBufferAttribute extends BufferAttribute {
 
-	constructor( array, itemSize, normalized, meshPerAttribute = 1 ) {
+// 	constructor( array, itemSize, normalized, meshPerAttribute = 1 ) {
 
-		super( array, itemSize, normalized );
+// 		super( array, itemSize, normalized );
 
-		this.isInstancedBufferAttribute = true;
+// 		this.isInstancedBufferAttribute = true;
 
-		this.meshPerAttribute = meshPerAttribute;
+// 		this.meshPerAttribute = meshPerAttribute;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.meshPerAttribute = source.meshPerAttribute;
+// 		this.meshPerAttribute = source.meshPerAttribute;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.meshPerAttribute = this.meshPerAttribute;
+// 		data.meshPerAttribute = this.meshPerAttribute;
 
-		data.isInstancedBufferAttribute = true;
+// 		data.isInstancedBufferAttribute = true;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-const _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();
-const _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();
+// const _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();
+// const _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();
 
-const _instanceIntersects = [];
+// const _instanceIntersects = [];
 
-const _mesh = /*@__PURE__*/ new Mesh();
+// const _mesh = /*@__PURE__*/ new Mesh();
 
-class InstancedMesh extends Mesh {
+// class InstancedMesh extends Mesh {
 
-	constructor( geometry, material, count ) {
+// 	constructor( geometry, material, count ) {
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.isInstancedMesh = true;
+// 		this.isInstancedMesh = true;
 
-		this.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );
-		this.instanceColor = null;
+// 		this.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );
+// 		this.instanceColor = null;
 
-		this.count = count;
+// 		this.count = count;
 
-		this.frustumCulled = false;
+// 		this.frustumCulled = false;
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.instanceMatrix.copy( source.instanceMatrix );
+// 		this.instanceMatrix.copy( source.instanceMatrix );
 
-		if ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();
+// 		if ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();
 
-		this.count = source.count;
+// 		this.count = source.count;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getColorAt( index, color ) {
+// 	getColorAt( index, color ) {
 
-		color.fromArray( this.instanceColor.array, index * 3 );
+// 		color.fromArray( this.instanceColor.array, index * 3 );
 
-	}
+// 	}
 
-	getMatrixAt( index, matrix ) {
+// 	getMatrixAt( index, matrix ) {
 
-		matrix.fromArray( this.instanceMatrix.array, index * 16 );
+// 		matrix.fromArray( this.instanceMatrix.array, index * 16 );
 
-	}
+// 	}
 
-	raycast( raycaster, intersects ) {
+// 	raycast( raycaster, intersects ) {
 
-		const matrixWorld = this.matrixWorld;
-		const raycastTimes = this.count;
+// 		const matrixWorld = this.matrixWorld;
+// 		const raycastTimes = this.count;
 
-		_mesh.geometry = this.geometry;
-		_mesh.material = this.material;
+// 		_mesh.geometry = this.geometry;
+// 		_mesh.material = this.material;
 
-		if ( _mesh.material === undefined ) return;
+// 		if ( _mesh.material === undefined ) return;
 
-		for ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {
+// 		for ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {
 
-			// calculate the world matrix for each instance
+// 			// calculate the world matrix for each instance
 
-			this.getMatrixAt( instanceId, _instanceLocalMatrix );
+// 			this.getMatrixAt( instanceId, _instanceLocalMatrix );
 
-			_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );
+// 			_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );
 
-			// the mesh represents this single instance
+// 			// the mesh represents this single instance
 
-			_mesh.matrixWorld = _instanceWorldMatrix;
+// 			_mesh.matrixWorld = _instanceWorldMatrix;
 
-			_mesh.raycast( raycaster, _instanceIntersects );
+// 			_mesh.raycast( raycaster, _instanceIntersects );
 
-			// process the result of raycast
+// 			// process the result of raycast
 
-			for ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {
 
-				const intersect = _instanceIntersects[ i ];
-				intersect.instanceId = instanceId;
-				intersect.object = this;
-				intersects.push( intersect );
+// 				const intersect = _instanceIntersects[ i ];
+// 				intersect.instanceId = instanceId;
+// 				intersect.object = this;
+// 				intersects.push( intersect );
 
-			}
+// 			}
 
-			_instanceIntersects.length = 0;
+// 			_instanceIntersects.length = 0;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	setColorAt( index, color ) {
+// 	setColorAt( index, color ) {
 
-		if ( this.instanceColor === null ) {
+// 		if ( this.instanceColor === null ) {
 
-			this.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );
+// 			this.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );
 
-		}
+// 		}
 
-		color.toArray( this.instanceColor.array, index * 3 );
+// 		color.toArray( this.instanceColor.array, index * 3 );
 
-	}
+// 	}
 
-	setMatrixAt( index, matrix ) {
+// 	setMatrixAt( index, matrix ) {
 
-		matrix.toArray( this.instanceMatrix.array, index * 16 );
+// 		matrix.toArray( this.instanceMatrix.array, index * 16 );
 
-	}
+// 	}
 
-	updateMorphTargets() {
+// 	updateMorphTargets() {
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.dispatchEvent( { type: 'dispose' } );
+// 		this.dispatchEvent( { type: 'dispose' } );
 
-	}
+// 	}
 
-}
+// }
 
-class LineBasicMaterial extends Material {
+// class LineBasicMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isLineBasicMaterial = true;
+// 		this.isLineBasicMaterial = true;
 
-		this.type = 'LineBasicMaterial';
+// 		this.type = 'LineBasicMaterial';
 
-		this.color = new Color( 0xffffff );
+// 		this.color = new Color( 0xffffff );
 
-		this.linewidth = 1;
-		this.linecap = 'round';
-		this.linejoin = 'round';
+// 		this.linewidth = 1;
+// 		this.linecap = 'round';
+// 		this.linejoin = 'round';
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.color.copy( source.color );
+// 		this.color.copy( source.color );
 
-		this.linewidth = source.linewidth;
-		this.linecap = source.linecap;
-		this.linejoin = source.linejoin;
+// 		this.linewidth = source.linewidth;
+// 		this.linecap = source.linecap;
+// 		this.linejoin = source.linejoin;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const _start$1 = /*@__PURE__*/ new Vector3();
-const _end$1 = /*@__PURE__*/ new Vector3();
-const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();
-const _ray$1 = /*@__PURE__*/ new Ray();
-const _sphere$1 = /*@__PURE__*/ new Sphere();
+// const _start$1 = /*@__PURE__*/ new Vector3();
+// const _end$1 = /*@__PURE__*/ new Vector3();
+// const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();
+// const _ray$1 = /*@__PURE__*/ new Ray();
+// const _sphere$1 = /*@__PURE__*/ new Sphere();
 
-class Line extends Object3D {
+// class Line extends Object3D {
 
-	constructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {
+// 	constructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {
 
-		super();
+// 		super();
 
-		this.isLine = true;
+// 		this.isLine = true;
 
-		this.type = 'Line';
+// 		this.type = 'Line';
 
-		this.geometry = geometry;
-		this.material = material;
+// 		this.geometry = geometry;
+// 		this.material = material;
 
-		this.updateMorphTargets();
+// 		this.updateMorphTargets();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.material = source.material;
-		this.geometry = source.geometry;
+// 		this.material = source.material;
+// 		this.geometry = source.geometry;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	computeLineDistances() {
+// 	computeLineDistances() {
 
-		const geometry = this.geometry;
+// 		const geometry = this.geometry;
 
-		// we assume non-indexed geometry
+// 		// we assume non-indexed geometry
 
-		if ( geometry.index === null ) {
+// 		if ( geometry.index === null ) {
 
-			const positionAttribute = geometry.attributes.position;
-			const lineDistances = [ 0 ];
+// 			const positionAttribute = geometry.attributes.position;
+// 			const lineDistances = [ 0 ];
 
-			for ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {
+// 			for ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {
 
-				_start$1.fromBufferAttribute( positionAttribute, i - 1 );
-				_end$1.fromBufferAttribute( positionAttribute, i );
+// 				_start$1.fromBufferAttribute( positionAttribute, i - 1 );
+// 				_end$1.fromBufferAttribute( positionAttribute, i );
 
-				lineDistances[ i ] = lineDistances[ i - 1 ];
-				lineDistances[ i ] += _start$1.distanceTo( _end$1 );
+// 				lineDistances[ i ] = lineDistances[ i - 1 ];
+// 				lineDistances[ i ] += _start$1.distanceTo( _end$1 );
 
-			}
+// 			}
 
-			geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
+// 			geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
 
-		} else {
+// 		} else {
 
-			console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
+// 			console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	raycast( raycaster, intersects ) {
+// 	raycast( raycaster, intersects ) {
 
-		const geometry = this.geometry;
-		const matrixWorld = this.matrixWorld;
-		const threshold = raycaster.params.Line.threshold;
-		const drawRange = geometry.drawRange;
+// 		const geometry = this.geometry;
+// 		const matrixWorld = this.matrixWorld;
+// 		const threshold = raycaster.params.Line.threshold;
+// 		const drawRange = geometry.drawRange;
 
-		// Checking boundingSphere distance to ray
+// 		// Checking boundingSphere distance to ray
 
-		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
+// 		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
 
-		_sphere$1.copy( geometry.boundingSphere );
-		_sphere$1.applyMatrix4( matrixWorld );
-		_sphere$1.radius += threshold;
+// 		_sphere$1.copy( geometry.boundingSphere );
+// 		_sphere$1.applyMatrix4( matrixWorld );
+// 		_sphere$1.radius += threshold;
 
-		if ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;
+// 		if ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;
 
-		//
+// 		//
 
-		_inverseMatrix$1.copy( matrixWorld ).invert();
-		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );
+// 		_inverseMatrix$1.copy( matrixWorld ).invert();
+// 		_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );
 
-		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
-		const localThresholdSq = localThreshold * localThreshold;
+// 		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
+// 		const localThresholdSq = localThreshold * localThreshold;
 
-		const vStart = new Vector3();
-		const vEnd = new Vector3();
-		const interSegment = new Vector3();
-		const interRay = new Vector3();
-		const step = this.isLineSegments ? 2 : 1;
+// 		const vStart = new Vector3();
+// 		const vEnd = new Vector3();
+// 		const interSegment = new Vector3();
+// 		const interRay = new Vector3();
+// 		const step = this.isLineSegments ? 2 : 1;
 
-		const index = geometry.index;
-		const attributes = geometry.attributes;
-		const positionAttribute = attributes.position;
+// 		const index = geometry.index;
+// 		const attributes = geometry.attributes;
+// 		const positionAttribute = attributes.position;
 
-		if ( index !== null ) {
+// 		if ( index !== null ) {
 
-			const start = Math.max( 0, drawRange.start );
-			const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
+// 			const start = Math.max( 0, drawRange.start );
+// 			const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
 
-			for ( let i = start, l = end - 1; i < l; i += step ) {
+// 			for ( let i = start, l = end - 1; i < l; i += step ) {
 
-				const a = index.getX( i );
-				const b = index.getX( i + 1 );
+// 				const a = index.getX( i );
+// 				const b = index.getX( i + 1 );
 
-				vStart.fromBufferAttribute( positionAttribute, a );
-				vEnd.fromBufferAttribute( positionAttribute, b );
+// 				vStart.fromBufferAttribute( positionAttribute, a );
+// 				vEnd.fromBufferAttribute( positionAttribute, b );
 
-				const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
+// 				const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
 
-				if ( distSq > localThresholdSq ) continue;
+// 				if ( distSq > localThresholdSq ) continue;
 
-				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
+// 				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
 
-				const distance = raycaster.ray.origin.distanceTo( interRay );
+// 				const distance = raycaster.ray.origin.distanceTo( interRay );
 
-				if ( distance < raycaster.near || distance > raycaster.far ) continue;
+// 				if ( distance < raycaster.near || distance > raycaster.far ) continue;
 
-				intersects.push( {
+// 				intersects.push( {
 
-					distance: distance,
-					// What do we want? intersection point on the ray or on the segment??
-					// point: raycaster.ray.at( distance ),
-					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
-					index: i,
-					face: null,
-					faceIndex: null,
-					object: this
+// 					distance: distance,
+// 					// What do we want? intersection point on the ray or on the segment??
+// 					// point: raycaster.ray.at( distance ),
+// 					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
+// 					index: i,
+// 					face: null,
+// 					faceIndex: null,
+// 					object: this
 
-				} );
+// 				} );
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			const start = Math.max( 0, drawRange.start );
-			const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );
+// 			const start = Math.max( 0, drawRange.start );
+// 			const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );
 
-			for ( let i = start, l = end - 1; i < l; i += step ) {
+// 			for ( let i = start, l = end - 1; i < l; i += step ) {
 
-				vStart.fromBufferAttribute( positionAttribute, i );
-				vEnd.fromBufferAttribute( positionAttribute, i + 1 );
+// 				vStart.fromBufferAttribute( positionAttribute, i );
+// 				vEnd.fromBufferAttribute( positionAttribute, i + 1 );
 
-				const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
+// 				const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
 
-				if ( distSq > localThresholdSq ) continue;
+// 				if ( distSq > localThresholdSq ) continue;
 
-				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
+// 				interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
 
-				const distance = raycaster.ray.origin.distanceTo( interRay );
+// 				const distance = raycaster.ray.origin.distanceTo( interRay );
 
-				if ( distance < raycaster.near || distance > raycaster.far ) continue;
+// 				if ( distance < raycaster.near || distance > raycaster.far ) continue;
 
-				intersects.push( {
+// 				intersects.push( {
 
-					distance: distance,
-					// What do we want? intersection point on the ray or on the segment??
-					// point: raycaster.ray.at( distance ),
-					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
-					index: i,
-					face: null,
-					faceIndex: null,
-					object: this
+// 					distance: distance,
+// 					// What do we want? intersection point on the ray or on the segment??
+// 					// point: raycaster.ray.at( distance ),
+// 					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
+// 					index: i,
+// 					face: null,
+// 					faceIndex: null,
+// 					object: this
 
-				} );
+// 				} );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	updateMorphTargets() {
+// 	updateMorphTargets() {
 
-		const geometry = this.geometry;
+// 		const geometry = this.geometry;
 
-		const morphAttributes = geometry.morphAttributes;
-		const keys = Object.keys( morphAttributes );
+// 		const morphAttributes = geometry.morphAttributes;
+// 		const keys = Object.keys( morphAttributes );
 
-		if ( keys.length > 0 ) {
+// 		if ( keys.length > 0 ) {
 
-			const morphAttribute = morphAttributes[ keys[ 0 ] ];
+// 			const morphAttribute = morphAttributes[ keys[ 0 ] ];
 
-			if ( morphAttribute !== undefined ) {
+// 			if ( morphAttribute !== undefined ) {
 
-				this.morphTargetInfluences = [];
-				this.morphTargetDictionary = {};
+// 				this.morphTargetInfluences = [];
+// 				this.morphTargetDictionary = {};
 
-				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
+// 				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
 
-					const name = morphAttribute[ m ].name || String( m );
+// 					const name = morphAttribute[ m ].name || String( m );
 
-					this.morphTargetInfluences.push( 0 );
-					this.morphTargetDictionary[ name ] = m;
+// 					this.morphTargetInfluences.push( 0 );
+// 					this.morphTargetDictionary[ name ] = m;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-const _start = /*@__PURE__*/ new Vector3();
-const _end = /*@__PURE__*/ new Vector3();
+// const _start = /*@__PURE__*/ new Vector3();
+// const _end = /*@__PURE__*/ new Vector3();
 
-class LineSegments extends Line {
+// class LineSegments extends Line {
 
-	constructor( geometry, material ) {
+// 	constructor( geometry, material ) {
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.isLineSegments = true;
+// 		this.isLineSegments = true;
 
-		this.type = 'LineSegments';
+// 		this.type = 'LineSegments';
 
-	}
+// 	}
 
-	computeLineDistances() {
+// 	computeLineDistances() {
 
-		const geometry = this.geometry;
+// 		const geometry = this.geometry;
 
-		// we assume non-indexed geometry
+// 		// we assume non-indexed geometry
 
-		if ( geometry.index === null ) {
+// 		if ( geometry.index === null ) {
 
-			const positionAttribute = geometry.attributes.position;
-			const lineDistances = [];
+// 			const positionAttribute = geometry.attributes.position;
+// 			const lineDistances = [];
 
-			for ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {
+// 			for ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {
 
-				_start.fromBufferAttribute( positionAttribute, i );
-				_end.fromBufferAttribute( positionAttribute, i + 1 );
+// 				_start.fromBufferAttribute( positionAttribute, i );
+// 				_end.fromBufferAttribute( positionAttribute, i + 1 );
 
-				lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
-				lineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );
+// 				lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
+// 				lineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );
 
-			}
+// 			}
 
-			geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
+// 			geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
 
-		} else {
+// 		} else {
 
-			console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
+// 			console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class LineLoop extends Line {
+// class LineLoop extends Line {
 
-	constructor( geometry, material ) {
+// 	constructor( geometry, material ) {
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.isLineLoop = true;
+// 		this.isLineLoop = true;
 
-		this.type = 'LineLoop';
+// 		this.type = 'LineLoop';
 
-	}
+// 	}
 
-}
+// }
 
-class PointsMaterial extends Material {
+// class PointsMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isPointsMaterial = true;
+// 		this.isPointsMaterial = true;
 
-		this.type = 'PointsMaterial';
+// 		this.type = 'PointsMaterial';
 
-		this.color = new Color( 0xffffff );
+// 		this.color = new Color( 0xffffff );
 
-		this.map = null;
+// 		this.map = null;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.size = 1;
-		this.sizeAttenuation = true;
+// 		this.size = 1;
+// 		this.sizeAttenuation = true;
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.color.copy( source.color );
+// 		this.color.copy( source.color );
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.size = source.size;
-		this.sizeAttenuation = source.sizeAttenuation;
+// 		this.size = source.size;
+// 		this.sizeAttenuation = source.sizeAttenuation;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const _inverseMatrix = /*@__PURE__*/ new Matrix4();
-const _ray = /*@__PURE__*/ new Ray();
-const _sphere = /*@__PURE__*/ new Sphere();
-const _position$2 = /*@__PURE__*/ new Vector3();
+// const _inverseMatrix = /*@__PURE__*/ new Matrix4();
+// const _ray = /*@__PURE__*/ new Ray();
+// const _sphere = /*@__PURE__*/ new Sphere();
+// const _position$2 = /*@__PURE__*/ new Vector3();
 
-class Points extends Object3D {
+// class Points extends Object3D {
 
-	constructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {
+// 	constructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {
 
-		super();
+// 		super();
 
-		this.isPoints = true;
+// 		this.isPoints = true;
 
-		this.type = 'Points';
+// 		this.type = 'Points';
 
-		this.geometry = geometry;
-		this.material = material;
+// 		this.geometry = geometry;
+// 		this.material = material;
 
-		this.updateMorphTargets();
+// 		this.updateMorphTargets();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.material = source.material;
-		this.geometry = source.geometry;
+// 		this.material = source.material;
+// 		this.geometry = source.geometry;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	raycast( raycaster, intersects ) {
+// 	raycast( raycaster, intersects ) {
 
-		const geometry = this.geometry;
-		const matrixWorld = this.matrixWorld;
-		const threshold = raycaster.params.Points.threshold;
-		const drawRange = geometry.drawRange;
+// 		const geometry = this.geometry;
+// 		const matrixWorld = this.matrixWorld;
+// 		const threshold = raycaster.params.Points.threshold;
+// 		const drawRange = geometry.drawRange;
 
-		// Checking boundingSphere distance to ray
+// 		// Checking boundingSphere distance to ray
 
-		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
+// 		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
 
-		_sphere.copy( geometry.boundingSphere );
-		_sphere.applyMatrix4( matrixWorld );
-		_sphere.radius += threshold;
+// 		_sphere.copy( geometry.boundingSphere );
+// 		_sphere.applyMatrix4( matrixWorld );
+// 		_sphere.radius += threshold;
 
-		if ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;
+// 		if ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;
 
-		//
+// 		//
 
-		_inverseMatrix.copy( matrixWorld ).invert();
-		_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );
+// 		_inverseMatrix.copy( matrixWorld ).invert();
+// 		_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );
 
-		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
-		const localThresholdSq = localThreshold * localThreshold;
+// 		const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
+// 		const localThresholdSq = localThreshold * localThreshold;
 
-		const index = geometry.index;
-		const attributes = geometry.attributes;
-		const positionAttribute = attributes.position;
+// 		const index = geometry.index;
+// 		const attributes = geometry.attributes;
+// 		const positionAttribute = attributes.position;
 
-		if ( index !== null ) {
+// 		if ( index !== null ) {
 
-			const start = Math.max( 0, drawRange.start );
-			const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
+// 			const start = Math.max( 0, drawRange.start );
+// 			const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
 
-			for ( let i = start, il = end; i < il; i ++ ) {
+// 			for ( let i = start, il = end; i < il; i ++ ) {
 
-				const a = index.getX( i );
+// 				const a = index.getX( i );
 
-				_position$2.fromBufferAttribute( positionAttribute, a );
+// 				_position$2.fromBufferAttribute( positionAttribute, a );
 
-				testPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );
+// 				testPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			const start = Math.max( 0, drawRange.start );
-			const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );
+// 			const start = Math.max( 0, drawRange.start );
+// 			const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );
 
-			for ( let i = start, l = end; i < l; i ++ ) {
+// 			for ( let i = start, l = end; i < l; i ++ ) {
 
-				_position$2.fromBufferAttribute( positionAttribute, i );
+// 				_position$2.fromBufferAttribute( positionAttribute, i );
 
-				testPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );
+// 				testPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	updateMorphTargets() {
+// 	updateMorphTargets() {
 
-		const geometry = this.geometry;
+// 		const geometry = this.geometry;
 
-		const morphAttributes = geometry.morphAttributes;
-		const keys = Object.keys( morphAttributes );
+// 		const morphAttributes = geometry.morphAttributes;
+// 		const keys = Object.keys( morphAttributes );
 
-		if ( keys.length > 0 ) {
+// 		if ( keys.length > 0 ) {
 
-			const morphAttribute = morphAttributes[ keys[ 0 ] ];
+// 			const morphAttribute = morphAttributes[ keys[ 0 ] ];
 
-			if ( morphAttribute !== undefined ) {
+// 			if ( morphAttribute !== undefined ) {
 
-				this.morphTargetInfluences = [];
-				this.morphTargetDictionary = {};
+// 				this.morphTargetInfluences = [];
+// 				this.morphTargetDictionary = {};
 
-				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
+// 				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
 
-					const name = morphAttribute[ m ].name || String( m );
+// 					const name = morphAttribute[ m ].name || String( m );
 
-					this.morphTargetInfluences.push( 0 );
-					this.morphTargetDictionary[ name ] = m;
+// 					this.morphTargetInfluences.push( 0 );
+// 					this.morphTargetDictionary[ name ] = m;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {
+// function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {
 
-	const rayPointDistanceSq = _ray.distanceSqToPoint( point );
+// 	const rayPointDistanceSq = _ray.distanceSqToPoint( point );
 
-	if ( rayPointDistanceSq < localThresholdSq ) {
+// 	if ( rayPointDistanceSq < localThresholdSq ) {
 
-		const intersectPoint = new Vector3();
+// 		const intersectPoint = new Vector3();
 
-		_ray.closestPointToPoint( point, intersectPoint );
-		intersectPoint.applyMatrix4( matrixWorld );
+// 		_ray.closestPointToPoint( point, intersectPoint );
+// 		intersectPoint.applyMatrix4( matrixWorld );
 
-		const distance = raycaster.ray.origin.distanceTo( intersectPoint );
+// 		const distance = raycaster.ray.origin.distanceTo( intersectPoint );
 
-		if ( distance < raycaster.near || distance > raycaster.far ) return;
+// 		if ( distance < raycaster.near || distance > raycaster.far ) return;
 
-		intersects.push( {
+// 		intersects.push( {
 
-			distance: distance,
-			distanceToRay: Math.sqrt( rayPointDistanceSq ),
-			point: intersectPoint,
-			index: index,
-			face: null,
-			object: object
+// 			distance: distance,
+// 			distanceToRay: Math.sqrt( rayPointDistanceSq ),
+// 			point: intersectPoint,
+// 			index: index,
+// 			face: null,
+// 			object: object
 
-		} );
+// 		} );
 
-	}
+// 	}
 
-}
+// }
 
-class VideoTexture extends Texture {
+// class VideoTexture extends Texture {
 
-	constructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
+// 	constructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
 
-		super( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
+// 		super( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
 
-		this.isVideoTexture = true;
+// 		this.isVideoTexture = true;
 
-		this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
-		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
+// 		this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
+// 		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
 
-		this.generateMipmaps = false;
+// 		this.generateMipmaps = false;
 
-		const scope = this;
+// 		const scope = this;
 
-		function updateVideo() {
+// 		function updateVideo() {
 
-			scope.needsUpdate = true;
-			video.requestVideoFrameCallback( updateVideo );
+// 			scope.needsUpdate = true;
+// 			video.requestVideoFrameCallback( updateVideo );
 
-		}
+// 		}
 
-		if ( 'requestVideoFrameCallback' in video ) {
+// 		if ( 'requestVideoFrameCallback' in video ) {
 
-			video.requestVideoFrameCallback( updateVideo );
+// 			video.requestVideoFrameCallback( updateVideo );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor( this.image ).copy( this );
+// 		return new this.constructor( this.image ).copy( this );
 
-	}
+// 	}
 
-	update() {
+// 	update() {
 
-		const video = this.image;
-		const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;
+// 		const video = this.image;
+// 		const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;
 
-		if ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {
+// 		if ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {
 
-			this.needsUpdate = true;
+// 			this.needsUpdate = true;
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-class FramebufferTexture extends Texture {
+// class FramebufferTexture extends Texture {
 
-	constructor( width, height, format ) {
+// 	constructor( width, height, format ) {
 
-		super( { width, height } );
+// 		super( { width, height } );
 
-		this.isFramebufferTexture = true;
+// 		this.isFramebufferTexture = true;
 
-		this.format = format;
+// 		this.format = format;
 
-		this.magFilter = NearestFilter;
-		this.minFilter = NearestFilter;
+// 		this.magFilter = NearestFilter;
+// 		this.minFilter = NearestFilter;
 
-		this.generateMipmaps = false;
+// 		this.generateMipmaps = false;
 
-		this.needsUpdate = true;
+// 		this.needsUpdate = true;
 
-	}
+// 	}
 
-}
+// }
 
-class CompressedTexture extends Texture {
+// class CompressedTexture extends Texture {
 
-	constructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
+// 	constructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
 
-		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
+// 		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
 
-		this.isCompressedTexture = true;
+// 		this.isCompressedTexture = true;
 
-		this.image = { width: width, height: height };
-		this.mipmaps = mipmaps;
+// 		this.image = { width: width, height: height };
+// 		this.mipmaps = mipmaps;
 
-		// no flipping for cube textures
-		// (also flipping doesn't work for compressed textures )
+// 		// no flipping for cube textures
+// 		// (also flipping doesn't work for compressed textures )
 
-		this.flipY = false;
+// 		this.flipY = false;
 
-		// can't generate mipmaps for compressed textures
-		// mips must be embedded in DDS files
+// 		// can't generate mipmaps for compressed textures
+// 		// mips must be embedded in DDS files
 
-		this.generateMipmaps = false;
+// 		this.generateMipmaps = false;
 
-	}
+// 	}
 
-}
+// }
 
-class CanvasTexture extends Texture {
+// class CanvasTexture extends Texture {
 
-	constructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
+// 	constructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
 
-		super( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
+// 		super( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
 
-		this.isCanvasTexture = true;
+// 		this.isCanvasTexture = true;
 
-		this.needsUpdate = true;
+// 		this.needsUpdate = true;
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Extensible curve object.
- *
- * Some common of curve methods:
- * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
- * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
- * .getPoints(), .getSpacedPoints()
- * .getLength()
- * .updateArcLengths()
- *
- * This following curves inherit from THREE.Curve:
- *
- * -- 2D curves --
- * THREE.ArcCurve
- * THREE.CubicBezierCurve
- * THREE.EllipseCurve
- * THREE.LineCurve
- * THREE.QuadraticBezierCurve
- * THREE.SplineCurve
- *
- * -- 3D curves --
- * THREE.CatmullRomCurve3
- * THREE.CubicBezierCurve3
- * THREE.LineCurve3
- * THREE.QuadraticBezierCurve3
- *
- * A series of curves can be represented as a THREE.CurvePath.
- *
- **/
+// /**
+//  * Extensible curve object.
+//  *
+//  * Some common of curve methods:
+//  * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
+//  * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
+//  * .getPoints(), .getSpacedPoints()
+//  * .getLength()
+//  * .updateArcLengths()
+//  *
+//  * This following curves inherit from THREE.Curve:
+//  *
+//  * -- 2D curves --
+//  * THREE.ArcCurve
+//  * THREE.CubicBezierCurve
+//  * THREE.EllipseCurve
+//  * THREE.LineCurve
+//  * THREE.QuadraticBezierCurve
+//  * THREE.SplineCurve
+//  *
+//  * -- 3D curves --
+//  * THREE.CatmullRomCurve3
+//  * THREE.CubicBezierCurve3
+//  * THREE.LineCurve3
+//  * THREE.QuadraticBezierCurve3
+//  *
+//  * A series of curves can be represented as a THREE.CurvePath.
+//  *
+//  **/
 
-class Curve {
+// class Curve {
 
-	constructor() {
+// 	constructor() {
 
-		this.type = 'Curve';
+// 		this.type = 'Curve';
 
-		this.arcLengthDivisions = 200;
+// 		this.arcLengthDivisions = 200;
 
-	}
+// 	}
 
-	// Virtual base class method to overwrite and implement in subclasses
-	//	- t [0 .. 1]
+// 	// Virtual base class method to overwrite and implement in subclasses
+// 	//	- t [0 .. 1]
 
-	getPoint( /* t, optionalTarget */ ) {
+// 	getPoint( /* t, optionalTarget */ ) {
 
-		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
-		return null;
+// 		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
+// 		return null;
 
-	}
+// 	}
 
-	// Get point at relative position in curve according to arc length
-	// - u [0 .. 1]
+// 	// Get point at relative position in curve according to arc length
+// 	// - u [0 .. 1]
 
-	getPointAt( u, optionalTarget ) {
+// 	getPointAt( u, optionalTarget ) {
 
-		const t = this.getUtoTmapping( u );
-		return this.getPoint( t, optionalTarget );
+// 		const t = this.getUtoTmapping( u );
+// 		return this.getPoint( t, optionalTarget );
 
-	}
+// 	}
 
-	// Get sequence of points using getPoint( t )
+// 	// Get sequence of points using getPoint( t )
 
-	getPoints( divisions = 5 ) {
+// 	getPoints( divisions = 5 ) {
 
-		const points = [];
+// 		const points = [];
 
-		for ( let d = 0; d <= divisions; d ++ ) {
+// 		for ( let d = 0; d <= divisions; d ++ ) {
 
-			points.push( this.getPoint( d / divisions ) );
+// 			points.push( this.getPoint( d / divisions ) );
 
-		}
+// 		}
 
-		return points;
+// 		return points;
 
-	}
+// 	}
 
-	// Get sequence of points using getPointAt( u )
+// 	// Get sequence of points using getPointAt( u )
 
-	getSpacedPoints( divisions = 5 ) {
+// 	getSpacedPoints( divisions = 5 ) {
 
-		const points = [];
+// 		const points = [];
 
-		for ( let d = 0; d <= divisions; d ++ ) {
+// 		for ( let d = 0; d <= divisions; d ++ ) {
 
-			points.push( this.getPointAt( d / divisions ) );
+// 			points.push( this.getPointAt( d / divisions ) );
 
-		}
+// 		}
 
-		return points;
+// 		return points;
 
-	}
+// 	}
 
-	// Get total curve arc length
+// 	// Get total curve arc length
 
-	getLength() {
+// 	getLength() {
 
-		const lengths = this.getLengths();
-		return lengths[ lengths.length - 1 ];
+// 		const lengths = this.getLengths();
+// 		return lengths[ lengths.length - 1 ];
 
-	}
+// 	}
 
-	// Get list of cumulative segment lengths
+// 	// Get list of cumulative segment lengths
 
-	getLengths( divisions = this.arcLengthDivisions ) {
+// 	getLengths( divisions = this.arcLengthDivisions ) {
 
-		if ( this.cacheArcLengths &&
-			( this.cacheArcLengths.length === divisions + 1 ) &&
-			! this.needsUpdate ) {
+// 		if ( this.cacheArcLengths &&
+// 			( this.cacheArcLengths.length === divisions + 1 ) &&
+// 			! this.needsUpdate ) {
 
-			return this.cacheArcLengths;
+// 			return this.cacheArcLengths;
 
-		}
+// 		}
 
-		this.needsUpdate = false;
+// 		this.needsUpdate = false;
 
-		const cache = [];
-		let current, last = this.getPoint( 0 );
-		let sum = 0;
+// 		const cache = [];
+// 		let current, last = this.getPoint( 0 );
+// 		let sum = 0;
 
-		cache.push( 0 );
+// 		cache.push( 0 );
 
-		for ( let p = 1; p <= divisions; p ++ ) {
+// 		for ( let p = 1; p <= divisions; p ++ ) {
 
-			current = this.getPoint( p / divisions );
-			sum += current.distanceTo( last );
-			cache.push( sum );
-			last = current;
+// 			current = this.getPoint( p / divisions );
+// 			sum += current.distanceTo( last );
+// 			cache.push( sum );
+// 			last = current;
 
-		}
+// 		}
 
-		this.cacheArcLengths = cache;
+// 		this.cacheArcLengths = cache;
 
-		return cache; // { sums: cache, sum: sum }; Sum is in the last element.
+// 		return cache; // { sums: cache, sum: sum }; Sum is in the last element.
 
-	}
+// 	}
 
-	updateArcLengths() {
+// 	updateArcLengths() {
 
-		this.needsUpdate = true;
-		this.getLengths();
+// 		this.needsUpdate = true;
+// 		this.getLengths();
 
-	}
+// 	}
 
-	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
+// 	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
 
-	getUtoTmapping( u, distance ) {
+// 	getUtoTmapping( u, distance ) {
 
-		const arcLengths = this.getLengths();
+// 		const arcLengths = this.getLengths();
 
-		let i = 0;
-		const il = arcLengths.length;
+// 		let i = 0;
+// 		const il = arcLengths.length;
 
-		let targetArcLength; // The targeted u distance value to get
+// 		let targetArcLength; // The targeted u distance value to get
 
-		if ( distance ) {
+// 		if ( distance ) {
 
-			targetArcLength = distance;
+// 			targetArcLength = distance;
 
-		} else {
+// 		} else {
 
-			targetArcLength = u * arcLengths[ il - 1 ];
+// 			targetArcLength = u * arcLengths[ il - 1 ];
 
-		}
+// 		}
 
-		// binary search for the index with largest value smaller than target u distance
+// 		// binary search for the index with largest value smaller than target u distance
 
-		let low = 0, high = il - 1, comparison;
+// 		let low = 0, high = il - 1, comparison;
 
-		while ( low <= high ) {
+// 		while ( low <= high ) {
 
-			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
+// 			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
 
-			comparison = arcLengths[ i ] - targetArcLength;
+// 			comparison = arcLengths[ i ] - targetArcLength;
 
-			if ( comparison < 0 ) {
+// 			if ( comparison < 0 ) {
 
-				low = i + 1;
+// 				low = i + 1;
 
-			} else if ( comparison > 0 ) {
+// 			} else if ( comparison > 0 ) {
 
-				high = i - 1;
+// 				high = i - 1;
 
-			} else {
+// 			} else {
 
-				high = i;
-				break;
+// 				high = i;
+// 				break;
 
-				// DONE
+// 				// DONE
 
-			}
+// 			}
 
-		}
+// 		}
 
-		i = high;
+// 		i = high;
 
-		if ( arcLengths[ i ] === targetArcLength ) {
+// 		if ( arcLengths[ i ] === targetArcLength ) {
 
-			return i / ( il - 1 );
+// 			return i / ( il - 1 );
 
-		}
+// 		}
 
-		// we could get finer grain at lengths, or use simple interpolation between two points
+// 		// we could get finer grain at lengths, or use simple interpolation between two points
 
-		const lengthBefore = arcLengths[ i ];
-		const lengthAfter = arcLengths[ i + 1 ];
+// 		const lengthBefore = arcLengths[ i ];
+// 		const lengthAfter = arcLengths[ i + 1 ];
 
-		const segmentLength = lengthAfter - lengthBefore;
+// 		const segmentLength = lengthAfter - lengthBefore;
 
-		// determine where we are between the 'before' and 'after' points
+// 		// determine where we are between the 'before' and 'after' points
 
-		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
+// 		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
 
-		// add that fractional amount to t
+// 		// add that fractional amount to t
 
-		const t = ( i + segmentFraction ) / ( il - 1 );
+// 		const t = ( i + segmentFraction ) / ( il - 1 );
 
-		return t;
+// 		return t;
 
-	}
+// 	}
 
-	// Returns a unit vector tangent at t
-	// In case any sub curve does not implement its tangent derivation,
-	// 2 points a small delta apart will be used to find its gradient
-	// which seems to give a reasonable approximation
+// 	// Returns a unit vector tangent at t
+// 	// In case any sub curve does not implement its tangent derivation,
+// 	// 2 points a small delta apart will be used to find its gradient
+// 	// which seems to give a reasonable approximation
 
-	getTangent( t, optionalTarget ) {
+// 	getTangent( t, optionalTarget ) {
 
-		const delta = 0.0001;
-		let t1 = t - delta;
-		let t2 = t + delta;
+// 		const delta = 0.0001;
+// 		let t1 = t - delta;
+// 		let t2 = t + delta;
 
-		// Capping in case of danger
+// 		// Capping in case of danger
 
-		if ( t1 < 0 ) t1 = 0;
-		if ( t2 > 1 ) t2 = 1;
+// 		if ( t1 < 0 ) t1 = 0;
+// 		if ( t2 > 1 ) t2 = 1;
 
-		const pt1 = this.getPoint( t1 );
-		const pt2 = this.getPoint( t2 );
+// 		const pt1 = this.getPoint( t1 );
+// 		const pt2 = this.getPoint( t2 );
 
-		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );
+// 		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );
 
-		tangent.copy( pt2 ).sub( pt1 ).normalize();
+// 		tangent.copy( pt2 ).sub( pt1 ).normalize();
 
-		return tangent;
+// 		return tangent;
 
-	}
+// 	}
 
-	getTangentAt( u, optionalTarget ) {
+// 	getTangentAt( u, optionalTarget ) {
 
-		const t = this.getUtoTmapping( u );
-		return this.getTangent( t, optionalTarget );
+// 		const t = this.getUtoTmapping( u );
+// 		return this.getTangent( t, optionalTarget );
 
-	}
+// 	}
 
-	computeFrenetFrames( segments, closed ) {
+// 	computeFrenetFrames( segments, closed ) {
 
-		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
+// 		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
 
-		const normal = new Vector3();
+// 		const normal = new Vector3();
 
-		const tangents = [];
-		const normals = [];
-		const binormals = [];
+// 		const tangents = [];
+// 		const normals = [];
+// 		const binormals = [];
 
-		const vec = new Vector3();
-		const mat = new Matrix4();
+// 		const vec = new Vector3();
+// 		const mat = new Matrix4();
 
-		// compute the tangent vectors for each segment on the curve
+// 		// compute the tangent vectors for each segment on the curve
 
-		for ( let i = 0; i <= segments; i ++ ) {
+// 		for ( let i = 0; i <= segments; i ++ ) {
 
-			const u = i / segments;
+// 			const u = i / segments;
 
-			tangents[ i ] = this.getTangentAt( u, new Vector3() );
+// 			tangents[ i ] = this.getTangentAt( u, new Vector3() );
 
-		}
+// 		}
 
-		// select an initial normal vector perpendicular to the first tangent vector,
-		// and in the direction of the minimum tangent xyz component
+// 		// select an initial normal vector perpendicular to the first tangent vector,
+// 		// and in the direction of the minimum tangent xyz component
 
-		normals[ 0 ] = new Vector3();
-		binormals[ 0 ] = new Vector3();
-		let min = Number.MAX_VALUE;
-		const tx = Math.abs( tangents[ 0 ].x );
-		const ty = Math.abs( tangents[ 0 ].y );
-		const tz = Math.abs( tangents[ 0 ].z );
+// 		normals[ 0 ] = new Vector3();
+// 		binormals[ 0 ] = new Vector3();
+// 		let min = Number.MAX_VALUE;
+// 		const tx = Math.abs( tangents[ 0 ].x );
+// 		const ty = Math.abs( tangents[ 0 ].y );
+// 		const tz = Math.abs( tangents[ 0 ].z );
 
-		if ( tx <= min ) {
+// 		if ( tx <= min ) {
 
-			min = tx;
-			normal.set( 1, 0, 0 );
+// 			min = tx;
+// 			normal.set( 1, 0, 0 );
 
-		}
+// 		}
 
-		if ( ty <= min ) {
+// 		if ( ty <= min ) {
 
-			min = ty;
-			normal.set( 0, 1, 0 );
+// 			min = ty;
+// 			normal.set( 0, 1, 0 );
 
-		}
+// 		}
 
-		if ( tz <= min ) {
+// 		if ( tz <= min ) {
 
-			normal.set( 0, 0, 1 );
+// 			normal.set( 0, 0, 1 );
 
-		}
+// 		}
 
-		vec.crossVectors( tangents[ 0 ], normal ).normalize();
+// 		vec.crossVectors( tangents[ 0 ], normal ).normalize();
 
-		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
-		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
+// 		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
+// 		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
 
 
-		// compute the slowly-varying normal and binormal vectors for each segment on the curve
+// 		// compute the slowly-varying normal and binormal vectors for each segment on the curve
 
-		for ( let i = 1; i <= segments; i ++ ) {
+// 		for ( let i = 1; i <= segments; i ++ ) {
 
-			normals[ i ] = normals[ i - 1 ].clone();
+// 			normals[ i ] = normals[ i - 1 ].clone();
 
-			binormals[ i ] = binormals[ i - 1 ].clone();
+// 			binormals[ i ] = binormals[ i - 1 ].clone();
 
-			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
+// 			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
 
-			if ( vec.length() > Number.EPSILON ) {
+// 			if ( vec.length() > Number.EPSILON ) {
 
-				vec.normalize();
+// 				vec.normalize();
 
-				const theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
+// 				const theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
 
-				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
+// 				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
 
-			}
+// 			}
 
-			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
+// 			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
 
-		}
+// 		}
 
-		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
+// 		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
 
-		if ( closed === true ) {
+// 		if ( closed === true ) {
 
-			let theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
-			theta /= segments;
+// 			let theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
+// 			theta /= segments;
 
-			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {
+// 			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {
 
-				theta = - theta;
+// 				theta = - theta;
 
-			}
+// 			}
 
-			for ( let i = 1; i <= segments; i ++ ) {
+// 			for ( let i = 1; i <= segments; i ++ ) {
 
-				// twist a little...
-				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
-				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
+// 				// twist a little...
+// 				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
+// 				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return {
-			tangents: tangents,
-			normals: normals,
-			binormals: binormals
-		};
+// 		return {
+// 			tangents: tangents,
+// 			normals: normals,
+// 			binormals: binormals
+// 		};
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.arcLengthDivisions = source.arcLengthDivisions;
+// 		this.arcLengthDivisions = source.arcLengthDivisions;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = {
-			metadata: {
-				version: 4.5,
-				type: 'Curve',
-				generator: 'Curve.toJSON'
-			}
-		};
+// 		const data = {
+// 			metadata: {
+// 				version: 4.5,
+// 				type: 'Curve',
+// 				generator: 'Curve.toJSON'
+// 			}
+// 		};
 
-		data.arcLengthDivisions = this.arcLengthDivisions;
-		data.type = this.type;
+// 		data.arcLengthDivisions = this.arcLengthDivisions;
+// 		data.type = this.type;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		this.arcLengthDivisions = json.arcLengthDivisions;
+// 		this.arcLengthDivisions = json.arcLengthDivisions;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class EllipseCurve extends Curve {
+// class EllipseCurve extends Curve {
 
-	constructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {
+// 	constructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {
 
-		super();
+// 		super();
 
-		this.isEllipseCurve = true;
+// 		this.isEllipseCurve = true;
 
-		this.type = 'EllipseCurve';
+// 		this.type = 'EllipseCurve';
 
-		this.aX = aX;
-		this.aY = aY;
+// 		this.aX = aX;
+// 		this.aY = aY;
 
-		this.xRadius = xRadius;
-		this.yRadius = yRadius;
+// 		this.xRadius = xRadius;
+// 		this.yRadius = yRadius;
 
-		this.aStartAngle = aStartAngle;
-		this.aEndAngle = aEndAngle;
+// 		this.aStartAngle = aStartAngle;
+// 		this.aEndAngle = aEndAngle;
 
-		this.aClockwise = aClockwise;
+// 		this.aClockwise = aClockwise;
 
-		this.aRotation = aRotation;
+// 		this.aRotation = aRotation;
 
-	}
+// 	}
 
-	getPoint( t, optionalTarget ) {
+// 	getPoint( t, optionalTarget ) {
 
-		const point = optionalTarget || new Vector2();
+// 		const point = optionalTarget || new Vector2();
 
-		const twoPi = Math.PI * 2;
-		let deltaAngle = this.aEndAngle - this.aStartAngle;
-		const samePoints = Math.abs( deltaAngle ) < Number.EPSILON;
+// 		const twoPi = Math.PI * 2;
+// 		let deltaAngle = this.aEndAngle - this.aStartAngle;
+// 		const samePoints = Math.abs( deltaAngle ) < Number.EPSILON;
 
-		// ensures that deltaAngle is 0 .. 2 PI
-		while ( deltaAngle < 0 ) deltaAngle += twoPi;
-		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;
+// 		// ensures that deltaAngle is 0 .. 2 PI
+// 		while ( deltaAngle < 0 ) deltaAngle += twoPi;
+// 		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;
 
-		if ( deltaAngle < Number.EPSILON ) {
+// 		if ( deltaAngle < Number.EPSILON ) {
 
-			if ( samePoints ) {
+// 			if ( samePoints ) {
 
-				deltaAngle = 0;
+// 				deltaAngle = 0;
 
-			} else {
+// 			} else {
 
-				deltaAngle = twoPi;
+// 				deltaAngle = twoPi;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( this.aClockwise === true && ! samePoints ) {
+// 		if ( this.aClockwise === true && ! samePoints ) {
 
-			if ( deltaAngle === twoPi ) {
+// 			if ( deltaAngle === twoPi ) {
 
-				deltaAngle = - twoPi;
+// 				deltaAngle = - twoPi;
 
-			} else {
+// 			} else {
 
-				deltaAngle = deltaAngle - twoPi;
+// 				deltaAngle = deltaAngle - twoPi;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const angle = this.aStartAngle + t * deltaAngle;
-		let x = this.aX + this.xRadius * Math.cos( angle );
-		let y = this.aY + this.yRadius * Math.sin( angle );
+// 		const angle = this.aStartAngle + t * deltaAngle;
+// 		let x = this.aX + this.xRadius * Math.cos( angle );
+// 		let y = this.aY + this.yRadius * Math.sin( angle );
 
-		if ( this.aRotation !== 0 ) {
+// 		if ( this.aRotation !== 0 ) {
 
-			const cos = Math.cos( this.aRotation );
-			const sin = Math.sin( this.aRotation );
+// 			const cos = Math.cos( this.aRotation );
+// 			const sin = Math.sin( this.aRotation );
 
-			const tx = x - this.aX;
-			const ty = y - this.aY;
+// 			const tx = x - this.aX;
+// 			const ty = y - this.aY;
 
-			// Rotate the point about the center of the ellipse.
-			x = tx * cos - ty * sin + this.aX;
-			y = tx * sin + ty * cos + this.aY;
+// 			// Rotate the point about the center of the ellipse.
+// 			x = tx * cos - ty * sin + this.aX;
+// 			y = tx * sin + ty * cos + this.aY;
 
-		}
+// 		}
 
-		return point.set( x, y );
+// 		return point.set( x, y );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.aX = source.aX;
-		this.aY = source.aY;
+// 		this.aX = source.aX;
+// 		this.aY = source.aY;
 
-		this.xRadius = source.xRadius;
-		this.yRadius = source.yRadius;
+// 		this.xRadius = source.xRadius;
+// 		this.yRadius = source.yRadius;
 
-		this.aStartAngle = source.aStartAngle;
-		this.aEndAngle = source.aEndAngle;
+// 		this.aStartAngle = source.aStartAngle;
+// 		this.aEndAngle = source.aEndAngle;
 
-		this.aClockwise = source.aClockwise;
+// 		this.aClockwise = source.aClockwise;
 
-		this.aRotation = source.aRotation;
+// 		this.aRotation = source.aRotation;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.aX = this.aX;
-		data.aY = this.aY;
+// 		data.aX = this.aX;
+// 		data.aY = this.aY;
 
-		data.xRadius = this.xRadius;
-		data.yRadius = this.yRadius;
+// 		data.xRadius = this.xRadius;
+// 		data.yRadius = this.yRadius;
 
-		data.aStartAngle = this.aStartAngle;
-		data.aEndAngle = this.aEndAngle;
+// 		data.aStartAngle = this.aStartAngle;
+// 		data.aEndAngle = this.aEndAngle;
 
-		data.aClockwise = this.aClockwise;
+// 		data.aClockwise = this.aClockwise;
 
-		data.aRotation = this.aRotation;
+// 		data.aRotation = this.aRotation;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.aX = json.aX;
-		this.aY = json.aY;
+// 		this.aX = json.aX;
+// 		this.aY = json.aY;
 
-		this.xRadius = json.xRadius;
-		this.yRadius = json.yRadius;
+// 		this.xRadius = json.xRadius;
+// 		this.yRadius = json.yRadius;
 
-		this.aStartAngle = json.aStartAngle;
-		this.aEndAngle = json.aEndAngle;
+// 		this.aStartAngle = json.aStartAngle;
+// 		this.aEndAngle = json.aEndAngle;
 
-		this.aClockwise = json.aClockwise;
+// 		this.aClockwise = json.aClockwise;
 
-		this.aRotation = json.aRotation;
+// 		this.aRotation = json.aRotation;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class ArcCurve extends EllipseCurve {
+// class ArcCurve extends EllipseCurve {
 
-	constructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
+// 	constructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
 
-		super( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
+// 		super( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
 
-		this.isArcCurve = true;
+// 		this.isArcCurve = true;
 
-		this.type = 'ArcCurve';
+// 		this.type = 'ArcCurve';
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Centripetal CatmullRom Curve - which is useful for avoiding
- * cusps and self-intersections in non-uniform catmull rom curves.
- * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
- *
- * curve.type accepts centripetal(default), chordal and catmullrom
- * curve.tension is used for catmullrom which defaults to 0.5
- */
+// /**
+//  * Centripetal CatmullRom Curve - which is useful for avoiding
+//  * cusps and self-intersections in non-uniform catmull rom curves.
+//  * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
+//  *
+//  * curve.type accepts centripetal(default), chordal and catmullrom
+//  * curve.tension is used for catmullrom which defaults to 0.5
+//  */
 
 
-/*
-Based on an optimized c++ solution in
- - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
- - http://ideone.com/NoEbVM
+// /*
+// Based on an optimized c++ solution in
+//  - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
+//  - http://ideone.com/NoEbVM
 
-This CubicPoly class could be used for reusing some variables and calculations,
-but for three.js curve use, it could be possible inlined and flatten into a single function call
-which can be placed in CurveUtils.
-*/
+// This CubicPoly class could be used for reusing some variables and calculations,
+// but for three.js curve use, it could be possible inlined and flatten into a single function call
+// which can be placed in CurveUtils.
+// */
 
-function CubicPoly() {
+// function CubicPoly() {
 
-	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
+// 	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
 
-	/*
-	 * Compute coefficients for a cubic polynomial
-	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
-	 * such that
-	 *   p(0) = x0, p(1) = x1
-	 *  and
-	 *   p'(0) = t0, p'(1) = t1.
-	 */
-	function init( x0, x1, t0, t1 ) {
+// 	/*
+// 	 * Compute coefficients for a cubic polynomial
+// 	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
+// 	 * such that
+// 	 *   p(0) = x0, p(1) = x1
+// 	 *  and
+// 	 *   p'(0) = t0, p'(1) = t1.
+// 	 */
+// 	function init( x0, x1, t0, t1 ) {
 
-		c0 = x0;
-		c1 = t0;
-		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
-		c3 = 2 * x0 - 2 * x1 + t0 + t1;
+// 		c0 = x0;
+// 		c1 = t0;
+// 		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
+// 		c3 = 2 * x0 - 2 * x1 + t0 + t1;
 
-	}
+// 	}
 
-	return {
+// 	return {
 
-		initCatmullRom: function ( x0, x1, x2, x3, tension ) {
+// 		initCatmullRom: function ( x0, x1, x2, x3, tension ) {
 
-			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
+// 			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
 
-		},
+// 		},
 
-		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {
+// 		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {
 
-			// compute tangents when parameterized in [t1,t2]
-			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
-			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
+// 			// compute tangents when parameterized in [t1,t2]
+// 			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
+// 			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
 
-			// rescale tangents for parametrization in [0,1]
-			t1 *= dt1;
-			t2 *= dt1;
+// 			// rescale tangents for parametrization in [0,1]
+// 			t1 *= dt1;
+// 			t2 *= dt1;
 
-			init( x1, x2, t1, t2 );
+// 			init( x1, x2, t1, t2 );
 
-		},
+// 		},
 
-		calc: function ( t ) {
+// 		calc: function ( t ) {
 
-			const t2 = t * t;
-			const t3 = t2 * t;
-			return c0 + c1 * t + c2 * t2 + c3 * t3;
+// 			const t2 = t * t;
+// 			const t3 = t2 * t;
+// 			return c0 + c1 * t + c2 * t2 + c3 * t3;
 
-		}
+// 		}
 
-	};
+// 	};
 
-}
+// }
 
-//
+// //
 
-const tmp = /*@__PURE__*/ new Vector3();
-const px = /*@__PURE__*/ new CubicPoly();
-const py = /*@__PURE__*/ new CubicPoly();
-const pz = /*@__PURE__*/ new CubicPoly();
+// const tmp = /*@__PURE__*/ new Vector3();
+// const px = /*@__PURE__*/ new CubicPoly();
+// const py = /*@__PURE__*/ new CubicPoly();
+// const pz = /*@__PURE__*/ new CubicPoly();
 
-class CatmullRomCurve3 extends Curve {
+// class CatmullRomCurve3 extends Curve {
 
-	constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {
+// 	constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {
 
-		super();
+// 		super();
 
-		this.isCatmullRomCurve3 = true;
+// 		this.isCatmullRomCurve3 = true;
 
-		this.type = 'CatmullRomCurve3';
+// 		this.type = 'CatmullRomCurve3';
 
-		this.points = points;
-		this.closed = closed;
-		this.curveType = curveType;
-		this.tension = tension;
+// 		this.points = points;
+// 		this.closed = closed;
+// 		this.curveType = curveType;
+// 		this.tension = tension;
 
-	}
+// 	}
 
-	getPoint( t, optionalTarget = new Vector3() ) {
+// 	getPoint( t, optionalTarget = new Vector3() ) {
 
-		const point = optionalTarget;
+// 		const point = optionalTarget;
 
-		const points = this.points;
-		const l = points.length;
+// 		const points = this.points;
+// 		const l = points.length;
 
-		const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
-		let intPoint = Math.floor( p );
-		let weight = p - intPoint;
+// 		const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
+// 		let intPoint = Math.floor( p );
+// 		let weight = p - intPoint;
 
-		if ( this.closed ) {
+// 		if ( this.closed ) {
 
-			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;
+// 			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;
 
-		} else if ( weight === 0 && intPoint === l - 1 ) {
+// 		} else if ( weight === 0 && intPoint === l - 1 ) {
 
-			intPoint = l - 2;
-			weight = 1;
+// 			intPoint = l - 2;
+// 			weight = 1;
 
-		}
+// 		}
 
-		let p0, p3; // 4 points (p1 & p2 defined below)
+// 		let p0, p3; // 4 points (p1 & p2 defined below)
 
-		if ( this.closed || intPoint > 0 ) {
+// 		if ( this.closed || intPoint > 0 ) {
 
-			p0 = points[ ( intPoint - 1 ) % l ];
+// 			p0 = points[ ( intPoint - 1 ) % l ];
 
-		} else {
+// 		} else {
 
-			// extrapolate first point
-			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
-			p0 = tmp;
+// 			// extrapolate first point
+// 			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
+// 			p0 = tmp;
 
-		}
+// 		}
 
-		const p1 = points[ intPoint % l ];
-		const p2 = points[ ( intPoint + 1 ) % l ];
+// 		const p1 = points[ intPoint % l ];
+// 		const p2 = points[ ( intPoint + 1 ) % l ];
 
-		if ( this.closed || intPoint + 2 < l ) {
+// 		if ( this.closed || intPoint + 2 < l ) {
 
-			p3 = points[ ( intPoint + 2 ) % l ];
+// 			p3 = points[ ( intPoint + 2 ) % l ];
 
-		} else {
+// 		} else {
 
-			// extrapolate last point
-			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
-			p3 = tmp;
+// 			// extrapolate last point
+// 			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
+// 			p3 = tmp;
 
-		}
+// 		}
 
-		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {
+// 		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {
 
-			// init Centripetal / Chordal Catmull-Rom
-			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
-			let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
-			let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
-			let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
+// 			// init Centripetal / Chordal Catmull-Rom
+// 			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
+// 			let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
+// 			let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
+// 			let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
 
-			// safety check for repeated points
-			if ( dt1 < 1e-4 ) dt1 = 1.0;
-			if ( dt0 < 1e-4 ) dt0 = dt1;
-			if ( dt2 < 1e-4 ) dt2 = dt1;
+// 			// safety check for repeated points
+// 			if ( dt1 < 1e-4 ) dt1 = 1.0;
+// 			if ( dt0 < 1e-4 ) dt0 = dt1;
+// 			if ( dt2 < 1e-4 ) dt2 = dt1;
 
-			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
-			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
-			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
+// 			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
+// 			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
+// 			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
 
-		} else if ( this.curveType === 'catmullrom' ) {
+// 		} else if ( this.curveType === 'catmullrom' ) {
 
-			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
-			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
-			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );
+// 			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
+// 			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
+// 			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );
 
-		}
+// 		}
 
-		point.set(
-			px.calc( weight ),
-			py.calc( weight ),
-			pz.calc( weight )
-		);
+// 		point.set(
+// 			px.calc( weight ),
+// 			py.calc( weight ),
+// 			pz.calc( weight )
+// 		);
 
-		return point;
+// 		return point;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.points = [];
+// 		this.points = [];
 
-		for ( let i = 0, l = source.points.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = source.points.length; i < l; i ++ ) {
 
-			const point = source.points[ i ];
+// 			const point = source.points[ i ];
 
-			this.points.push( point.clone() );
+// 			this.points.push( point.clone() );
 
-		}
+// 		}
 
-		this.closed = source.closed;
-		this.curveType = source.curveType;
-		this.tension = source.tension;
+// 		this.closed = source.closed;
+// 		this.curveType = source.curveType;
+// 		this.tension = source.tension;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.points = [];
+// 		data.points = [];
 
-		for ( let i = 0, l = this.points.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.points.length; i < l; i ++ ) {
 
-			const point = this.points[ i ];
-			data.points.push( point.toArray() );
+// 			const point = this.points[ i ];
+// 			data.points.push( point.toArray() );
 
-		}
+// 		}
 
-		data.closed = this.closed;
-		data.curveType = this.curveType;
-		data.tension = this.tension;
+// 		data.closed = this.closed;
+// 		data.curveType = this.curveType;
+// 		data.tension = this.tension;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.points = [];
+// 		this.points = [];
 
-		for ( let i = 0, l = json.points.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = json.points.length; i < l; i ++ ) {
 
-			const point = json.points[ i ];
-			this.points.push( new Vector3().fromArray( point ) );
+// 			const point = json.points[ i ];
+// 			this.points.push( new Vector3().fromArray( point ) );
 
-		}
+// 		}
 
-		this.closed = json.closed;
-		this.curveType = json.curveType;
-		this.tension = json.tension;
+// 		this.closed = json.closed;
+// 		this.curveType = json.curveType;
+// 		this.tension = json.tension;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Bezier Curves formulas obtained from
- * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
- */
+// /**
+//  * Bezier Curves formulas obtained from
+//  * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
+//  */
 
-function CatmullRom( t, p0, p1, p2, p3 ) {
+// function CatmullRom( t, p0, p1, p2, p3 ) {
 
-	const v0 = ( p2 - p0 ) * 0.5;
-	const v1 = ( p3 - p1 ) * 0.5;
-	const t2 = t * t;
-	const t3 = t * t2;
-	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
+// 	const v0 = ( p2 - p0 ) * 0.5;
+// 	const v1 = ( p3 - p1 ) * 0.5;
+// 	const t2 = t * t;
+// 	const t3 = t * t2;
+// 	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
 
-}
+// }
 
-//
+// //
 
-function QuadraticBezierP0( t, p ) {
+// function QuadraticBezierP0( t, p ) {
 
-	const k = 1 - t;
-	return k * k * p;
+// 	const k = 1 - t;
+// 	return k * k * p;
 
-}
+// }
 
-function QuadraticBezierP1( t, p ) {
+// function QuadraticBezierP1( t, p ) {
 
-	return 2 * ( 1 - t ) * t * p;
+// 	return 2 * ( 1 - t ) * t * p;
 
-}
+// }
 
-function QuadraticBezierP2( t, p ) {
+// function QuadraticBezierP2( t, p ) {
 
-	return t * t * p;
+// 	return t * t * p;
 
-}
+// }
 
-function QuadraticBezier( t, p0, p1, p2 ) {
+// function QuadraticBezier( t, p0, p1, p2 ) {
 
-	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
-		QuadraticBezierP2( t, p2 );
+// 	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
+// 		QuadraticBezierP2( t, p2 );
 
-}
+// }
 
-//
+// //
 
-function CubicBezierP0( t, p ) {
+// function CubicBezierP0( t, p ) {
 
-	const k = 1 - t;
-	return k * k * k * p;
+// 	const k = 1 - t;
+// 	return k * k * k * p;
 
-}
+// }
 
-function CubicBezierP1( t, p ) {
+// function CubicBezierP1( t, p ) {
 
-	const k = 1 - t;
-	return 3 * k * k * t * p;
+// 	const k = 1 - t;
+// 	return 3 * k * k * t * p;
 
-}
+// }
 
-function CubicBezierP2( t, p ) {
+// function CubicBezierP2( t, p ) {
 
-	return 3 * ( 1 - t ) * t * t * p;
+// 	return 3 * ( 1 - t ) * t * t * p;
 
-}
+// }
 
-function CubicBezierP3( t, p ) {
+// function CubicBezierP3( t, p ) {
 
-	return t * t * t * p;
+// 	return t * t * t * p;
 
-}
+// }
 
-function CubicBezier( t, p0, p1, p2, p3 ) {
+// function CubicBezier( t, p0, p1, p2, p3 ) {
 
-	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
-		CubicBezierP3( t, p3 );
+// 	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
+// 		CubicBezierP3( t, p3 );
 
-}
+// }
 
-class CubicBezierCurve extends Curve {
+// class CubicBezierCurve extends Curve {
 
-	constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {
+// 	constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {
 
-		super();
+// 		super();
 
-		this.isCubicBezierCurve = true;
+// 		this.isCubicBezierCurve = true;
 
-		this.type = 'CubicBezierCurve';
+// 		this.type = 'CubicBezierCurve';
 
-		this.v0 = v0;
-		this.v1 = v1;
-		this.v2 = v2;
-		this.v3 = v3;
+// 		this.v0 = v0;
+// 		this.v1 = v1;
+// 		this.v2 = v2;
+// 		this.v3 = v3;
 
-	}
+// 	}
 
-	getPoint( t, optionalTarget = new Vector2() ) {
+// 	getPoint( t, optionalTarget = new Vector2() ) {
 
-		const point = optionalTarget;
+// 		const point = optionalTarget;
 
-		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
+// 		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
 
-		point.set(
-			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
-			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
-		);
+// 		point.set(
+// 			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
+// 			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
+// 		);
 
-		return point;
+// 		return point;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.v0.copy( source.v0 );
-		this.v1.copy( source.v1 );
-		this.v2.copy( source.v2 );
-		this.v3.copy( source.v3 );
+// 		this.v0.copy( source.v0 );
+// 		this.v1.copy( source.v1 );
+// 		this.v2.copy( source.v2 );
+// 		this.v3.copy( source.v3 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.v0 = this.v0.toArray();
-		data.v1 = this.v1.toArray();
-		data.v2 = this.v2.toArray();
-		data.v3 = this.v3.toArray();
+// 		data.v0 = this.v0.toArray();
+// 		data.v1 = this.v1.toArray();
+// 		data.v2 = this.v2.toArray();
+// 		data.v3 = this.v3.toArray();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.v0.fromArray( json.v0 );
-		this.v1.fromArray( json.v1 );
-		this.v2.fromArray( json.v2 );
-		this.v3.fromArray( json.v3 );
+// 		this.v0.fromArray( json.v0 );
+// 		this.v1.fromArray( json.v1 );
+// 		this.v2.fromArray( json.v2 );
+// 		this.v3.fromArray( json.v3 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class CubicBezierCurve3 extends Curve {
+// class CubicBezierCurve3 extends Curve {
 
-	constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {
+// 	constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {
 
-		super();
+// 		super();
 
-		this.isCubicBezierCurve3 = true;
+// 		this.isCubicBezierCurve3 = true;
 
-		this.type = 'CubicBezierCurve3';
+// 		this.type = 'CubicBezierCurve3';
 
-		this.v0 = v0;
-		this.v1 = v1;
-		this.v2 = v2;
-		this.v3 = v3;
+// 		this.v0 = v0;
+// 		this.v1 = v1;
+// 		this.v2 = v2;
+// 		this.v3 = v3;
 
-	}
+// 	}
 
-	getPoint( t, optionalTarget = new Vector3() ) {
+// 	getPoint( t, optionalTarget = new Vector3() ) {
 
-		const point = optionalTarget;
+// 		const point = optionalTarget;
 
-		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
+// 		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
 
-		point.set(
-			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
-			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
-			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
-		);
+// 		point.set(
+// 			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
+// 			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
+// 			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
+// 		);
 
-		return point;
+// 		return point;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.v0.copy( source.v0 );
-		this.v1.copy( source.v1 );
-		this.v2.copy( source.v2 );
-		this.v3.copy( source.v3 );
+// 		this.v0.copy( source.v0 );
+// 		this.v1.copy( source.v1 );
+// 		this.v2.copy( source.v2 );
+// 		this.v3.copy( source.v3 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.v0 = this.v0.toArray();
-		data.v1 = this.v1.toArray();
-		data.v2 = this.v2.toArray();
-		data.v3 = this.v3.toArray();
+// 		data.v0 = this.v0.toArray();
+// 		data.v1 = this.v1.toArray();
+// 		data.v2 = this.v2.toArray();
+// 		data.v3 = this.v3.toArray();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.v0.fromArray( json.v0 );
-		this.v1.fromArray( json.v1 );
-		this.v2.fromArray( json.v2 );
-		this.v3.fromArray( json.v3 );
+// 		this.v0.fromArray( json.v0 );
+// 		this.v1.fromArray( json.v1 );
+// 		this.v2.fromArray( json.v2 );
+// 		this.v3.fromArray( json.v3 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class LineCurve extends Curve {
+// class LineCurve extends Curve {
 
-	constructor( v1 = new Vector2(), v2 = new Vector2() ) {
+// 	constructor( v1 = new Vector2(), v2 = new Vector2() ) {
 
-		super();
+// 		super();
 
-		this.isLineCurve = true;
+// 		this.isLineCurve = true;
 
-		this.type = 'LineCurve';
+// 		this.type = 'LineCurve';
 
-		this.v1 = v1;
-		this.v2 = v2;
+// 		this.v1 = v1;
+// 		this.v2 = v2;
 
-	}
+// 	}
 
-	getPoint( t, optionalTarget = new Vector2() ) {
+// 	getPoint( t, optionalTarget = new Vector2() ) {
 
-		const point = optionalTarget;
+// 		const point = optionalTarget;
 
-		if ( t === 1 ) {
+// 		if ( t === 1 ) {
 
-			point.copy( this.v2 );
+// 			point.copy( this.v2 );
 
-		} else {
+// 		} else {
 
-			point.copy( this.v2 ).sub( this.v1 );
-			point.multiplyScalar( t ).add( this.v1 );
+// 			point.copy( this.v2 ).sub( this.v1 );
+// 			point.multiplyScalar( t ).add( this.v1 );
 
-		}
+// 		}
 
-		return point;
+// 		return point;
 
-	}
+// 	}
 
-	// Line curve is linear, so we can overwrite default getPointAt
-	getPointAt( u, optionalTarget ) {
+// 	// Line curve is linear, so we can overwrite default getPointAt
+// 	getPointAt( u, optionalTarget ) {
 
-		return this.getPoint( u, optionalTarget );
+// 		return this.getPoint( u, optionalTarget );
 
-	}
+// 	}
 
-	getTangent( t, optionalTarget ) {
+// 	getTangent( t, optionalTarget ) {
 
-		const tangent = optionalTarget || new Vector2();
+// 		const tangent = optionalTarget || new Vector2();
 
-		tangent.copy( this.v2 ).sub( this.v1 ).normalize();
+// 		tangent.copy( this.v2 ).sub( this.v1 ).normalize();
 
-		return tangent;
+// 		return tangent;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.v1.copy( source.v1 );
-		this.v2.copy( source.v2 );
+// 		this.v1.copy( source.v1 );
+// 		this.v2.copy( source.v2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.v1 = this.v1.toArray();
-		data.v2 = this.v2.toArray();
+// 		data.v1 = this.v1.toArray();
+// 		data.v2 = this.v2.toArray();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.v1.fromArray( json.v1 );
-		this.v2.fromArray( json.v2 );
+// 		this.v1.fromArray( json.v1 );
+// 		this.v2.fromArray( json.v2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class LineCurve3 extends Curve {
+// class LineCurve3 extends Curve {
 
-	constructor( v1 = new Vector3(), v2 = new Vector3() ) {
+// 	constructor( v1 = new Vector3(), v2 = new Vector3() ) {
 
-		super();
+// 		super();
 
-		this.isLineCurve3 = true;
+// 		this.isLineCurve3 = true;
 
-		this.type = 'LineCurve3';
+// 		this.type = 'LineCurve3';
 
-		this.v1 = v1;
-		this.v2 = v2;
+// 		this.v1 = v1;
+// 		this.v2 = v2;
 
-	}
-	getPoint( t, optionalTarget = new Vector3() ) {
+// 	}
+// 	getPoint( t, optionalTarget = new Vector3() ) {
 
-		const point = optionalTarget;
+// 		const point = optionalTarget;
 
-		if ( t === 1 ) {
+// 		if ( t === 1 ) {
 
-			point.copy( this.v2 );
+// 			point.copy( this.v2 );
 
-		} else {
+// 		} else {
 
-			point.copy( this.v2 ).sub( this.v1 );
-			point.multiplyScalar( t ).add( this.v1 );
+// 			point.copy( this.v2 ).sub( this.v1 );
+// 			point.multiplyScalar( t ).add( this.v1 );
 
-		}
+// 		}
 
-		return point;
+// 		return point;
 
-	}
-	// Line curve is linear, so we can overwrite default getPointAt
-	getPointAt( u, optionalTarget ) {
+// 	}
+// 	// Line curve is linear, so we can overwrite default getPointAt
+// 	getPointAt( u, optionalTarget ) {
 
-		return this.getPoint( u, optionalTarget );
+// 		return this.getPoint( u, optionalTarget );
 
-	}
-	copy( source ) {
+// 	}
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.v1.copy( source.v1 );
-		this.v2.copy( source.v2 );
+// 		this.v1.copy( source.v1 );
+// 		this.v2.copy( source.v2 );
 
-		return this;
+// 		return this;
 
-	}
-	toJSON() {
+// 	}
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.v1 = this.v1.toArray();
-		data.v2 = this.v2.toArray();
+// 		data.v1 = this.v1.toArray();
+// 		data.v2 = this.v2.toArray();
 
-		return data;
+// 		return data;
 
-	}
-	fromJSON( json ) {
+// 	}
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.v1.fromArray( json.v1 );
-		this.v2.fromArray( json.v2 );
+// 		this.v1.fromArray( json.v1 );
+// 		this.v2.fromArray( json.v2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class QuadraticBezierCurve extends Curve {
+// class QuadraticBezierCurve extends Curve {
 
-	constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {
+// 	constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {
 
-		super();
+// 		super();
 
-		this.isQuadraticBezierCurve = true;
+// 		this.isQuadraticBezierCurve = true;
 
-		this.type = 'QuadraticBezierCurve';
+// 		this.type = 'QuadraticBezierCurve';
 
-		this.v0 = v0;
-		this.v1 = v1;
-		this.v2 = v2;
+// 		this.v0 = v0;
+// 		this.v1 = v1;
+// 		this.v2 = v2;
 
-	}
+// 	}
 
-	getPoint( t, optionalTarget = new Vector2() ) {
+// 	getPoint( t, optionalTarget = new Vector2() ) {
 
-		const point = optionalTarget;
+// 		const point = optionalTarget;
 
-		const v0 = this.v0, v1 = this.v1, v2 = this.v2;
+// 		const v0 = this.v0, v1 = this.v1, v2 = this.v2;
 
-		point.set(
-			QuadraticBezier( t, v0.x, v1.x, v2.x ),
-			QuadraticBezier( t, v0.y, v1.y, v2.y )
-		);
+// 		point.set(
+// 			QuadraticBezier( t, v0.x, v1.x, v2.x ),
+// 			QuadraticBezier( t, v0.y, v1.y, v2.y )
+// 		);
 
-		return point;
+// 		return point;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.v0.copy( source.v0 );
-		this.v1.copy( source.v1 );
-		this.v2.copy( source.v2 );
+// 		this.v0.copy( source.v0 );
+// 		this.v1.copy( source.v1 );
+// 		this.v2.copy( source.v2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.v0 = this.v0.toArray();
-		data.v1 = this.v1.toArray();
-		data.v2 = this.v2.toArray();
+// 		data.v0 = this.v0.toArray();
+// 		data.v1 = this.v1.toArray();
+// 		data.v2 = this.v2.toArray();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.v0.fromArray( json.v0 );
-		this.v1.fromArray( json.v1 );
-		this.v2.fromArray( json.v2 );
+// 		this.v0.fromArray( json.v0 );
+// 		this.v1.fromArray( json.v1 );
+// 		this.v2.fromArray( json.v2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class QuadraticBezierCurve3 extends Curve {
+// class QuadraticBezierCurve3 extends Curve {
 
-	constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {
+// 	constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {
 
-		super();
+// 		super();
 
-		this.isQuadraticBezierCurve3 = true;
+// 		this.isQuadraticBezierCurve3 = true;
 
-		this.type = 'QuadraticBezierCurve3';
+// 		this.type = 'QuadraticBezierCurve3';
 
-		this.v0 = v0;
-		this.v1 = v1;
-		this.v2 = v2;
+// 		this.v0 = v0;
+// 		this.v1 = v1;
+// 		this.v2 = v2;
 
-	}
+// 	}
 
-	getPoint( t, optionalTarget = new Vector3() ) {
+// 	getPoint( t, optionalTarget = new Vector3() ) {
 
-		const point = optionalTarget;
+// 		const point = optionalTarget;
 
-		const v0 = this.v0, v1 = this.v1, v2 = this.v2;
+// 		const v0 = this.v0, v1 = this.v1, v2 = this.v2;
 
-		point.set(
-			QuadraticBezier( t, v0.x, v1.x, v2.x ),
-			QuadraticBezier( t, v0.y, v1.y, v2.y ),
-			QuadraticBezier( t, v0.z, v1.z, v2.z )
-		);
+// 		point.set(
+// 			QuadraticBezier( t, v0.x, v1.x, v2.x ),
+// 			QuadraticBezier( t, v0.y, v1.y, v2.y ),
+// 			QuadraticBezier( t, v0.z, v1.z, v2.z )
+// 		);
 
-		return point;
+// 		return point;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.v0.copy( source.v0 );
-		this.v1.copy( source.v1 );
-		this.v2.copy( source.v2 );
+// 		this.v0.copy( source.v0 );
+// 		this.v1.copy( source.v1 );
+// 		this.v2.copy( source.v2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.v0 = this.v0.toArray();
-		data.v1 = this.v1.toArray();
-		data.v2 = this.v2.toArray();
+// 		data.v0 = this.v0.toArray();
+// 		data.v1 = this.v1.toArray();
+// 		data.v2 = this.v2.toArray();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.v0.fromArray( json.v0 );
-		this.v1.fromArray( json.v1 );
-		this.v2.fromArray( json.v2 );
+// 		this.v0.fromArray( json.v0 );
+// 		this.v1.fromArray( json.v1 );
+// 		this.v2.fromArray( json.v2 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class SplineCurve extends Curve {
+// class SplineCurve extends Curve {
 
-	constructor( points = [] ) {
+// 	constructor( points = [] ) {
 
-		super();
+// 		super();
 
-		this.isSplineCurve = true;
+// 		this.isSplineCurve = true;
 
-		this.type = 'SplineCurve';
+// 		this.type = 'SplineCurve';
 
-		this.points = points;
+// 		this.points = points;
 
-	}
+// 	}
 
-	getPoint( t, optionalTarget = new Vector2() ) {
+// 	getPoint( t, optionalTarget = new Vector2() ) {
 
-		const point = optionalTarget;
+// 		const point = optionalTarget;
 
-		const points = this.points;
-		const p = ( points.length - 1 ) * t;
+// 		const points = this.points;
+// 		const p = ( points.length - 1 ) * t;
 
-		const intPoint = Math.floor( p );
-		const weight = p - intPoint;
+// 		const intPoint = Math.floor( p );
+// 		const weight = p - intPoint;
 
-		const p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
-		const p1 = points[ intPoint ];
-		const p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
-		const p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
+// 		const p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
+// 		const p1 = points[ intPoint ];
+// 		const p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
+// 		const p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
 
-		point.set(
-			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
-			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
-		);
+// 		point.set(
+// 			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
+// 			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
+// 		);
 
-		return point;
+// 		return point;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.points = [];
+// 		this.points = [];
 
-		for ( let i = 0, l = source.points.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = source.points.length; i < l; i ++ ) {
 
-			const point = source.points[ i ];
+// 			const point = source.points[ i ];
 
-			this.points.push( point.clone() );
+// 			this.points.push( point.clone() );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.points = [];
+// 		data.points = [];
 
-		for ( let i = 0, l = this.points.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.points.length; i < l; i ++ ) {
 
-			const point = this.points[ i ];
-			data.points.push( point.toArray() );
+// 			const point = this.points[ i ];
+// 			data.points.push( point.toArray() );
 
-		}
+// 		}
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.points = [];
+// 		this.points = [];
 
-		for ( let i = 0, l = json.points.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = json.points.length; i < l; i ++ ) {
 
-			const point = json.points[ i ];
-			this.points.push( new Vector2().fromArray( point ) );
+// 			const point = json.points[ i ];
+// 			this.points.push( new Vector2().fromArray( point ) );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-var Curves = /*#__PURE__*/Object.freeze({
-	__proto__: null,
-	ArcCurve: ArcCurve,
-	CatmullRomCurve3: CatmullRomCurve3,
-	CubicBezierCurve: CubicBezierCurve,
-	CubicBezierCurve3: CubicBezierCurve3,
-	EllipseCurve: EllipseCurve,
-	LineCurve: LineCurve,
-	LineCurve3: LineCurve3,
-	QuadraticBezierCurve: QuadraticBezierCurve,
-	QuadraticBezierCurve3: QuadraticBezierCurve3,
-	SplineCurve: SplineCurve
-});
+// var Curves = /*#__PURE__*/Object.freeze({
+// 	__proto__: null,
+// 	ArcCurve: ArcCurve,
+// 	CatmullRomCurve3: CatmullRomCurve3,
+// 	CubicBezierCurve: CubicBezierCurve,
+// 	CubicBezierCurve3: CubicBezierCurve3,
+// 	EllipseCurve: EllipseCurve,
+// 	LineCurve: LineCurve,
+// 	LineCurve3: LineCurve3,
+// 	QuadraticBezierCurve: QuadraticBezierCurve,
+// 	QuadraticBezierCurve3: QuadraticBezierCurve3,
+// 	SplineCurve: SplineCurve
+// });
 
-/**************************************************************
- *	Curved Path - a curve path is simply a array of connected
- *  curves, but retains the api of a curve
- **************************************************************/
+// /**************************************************************
+//  *	Curved Path - a curve path is simply a array of connected
+//  *  curves, but retains the api of a curve
+//  **************************************************************/
 
-class CurvePath extends Curve {
+// class CurvePath extends Curve {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.type = 'CurvePath';
+// 		this.type = 'CurvePath';
 
-		this.curves = [];
-		this.autoClose = false; // Automatically closes the path
+// 		this.curves = [];
+// 		this.autoClose = false; // Automatically closes the path
 
-	}
+// 	}
 
-	add( curve ) {
+// 	add( curve ) {
 
-		this.curves.push( curve );
+// 		this.curves.push( curve );
 
-	}
+// 	}
 
-	closePath() {
+// 	closePath() {
 
-		// Add a line curve if start and end of lines are not connected
-		const startPoint = this.curves[ 0 ].getPoint( 0 );
-		const endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
+// 		// Add a line curve if start and end of lines are not connected
+// 		const startPoint = this.curves[ 0 ].getPoint( 0 );
+// 		const endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
 
-		if ( ! startPoint.equals( endPoint ) ) {
+// 		if ( ! startPoint.equals( endPoint ) ) {
 
-			this.curves.push( new LineCurve( endPoint, startPoint ) );
+// 			this.curves.push( new LineCurve( endPoint, startPoint ) );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// To get accurate point with reference to
-	// entire path distance at time t,
-	// following has to be done:
+// 	// To get accurate point with reference to
+// 	// entire path distance at time t,
+// 	// following has to be done:
 
-	// 1. Length of each sub path have to be known
-	// 2. Locate and identify type of curve
-	// 3. Get t for the curve
-	// 4. Return curve.getPointAt(t')
+// 	// 1. Length of each sub path have to be known
+// 	// 2. Locate and identify type of curve
+// 	// 3. Get t for the curve
+// 	// 4. Return curve.getPointAt(t')
 
-	getPoint( t, optionalTarget ) {
+// 	getPoint( t, optionalTarget ) {
 
-		const d = t * this.getLength();
-		const curveLengths = this.getCurveLengths();
-		let i = 0;
+// 		const d = t * this.getLength();
+// 		const curveLengths = this.getCurveLengths();
+// 		let i = 0;
 
-		// To think about boundaries points.
+// 		// To think about boundaries points.
 
-		while ( i < curveLengths.length ) {
+// 		while ( i < curveLengths.length ) {
 
-			if ( curveLengths[ i ] >= d ) {
+// 			if ( curveLengths[ i ] >= d ) {
 
-				const diff = curveLengths[ i ] - d;
-				const curve = this.curves[ i ];
+// 				const diff = curveLengths[ i ] - d;
+// 				const curve = this.curves[ i ];
 
-				const segmentLength = curve.getLength();
-				const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
+// 				const segmentLength = curve.getLength();
+// 				const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
 
-				return curve.getPointAt( u, optionalTarget );
+// 				return curve.getPointAt( u, optionalTarget );
 
-			}
+// 			}
 
-			i ++;
+// 			i ++;
 
-		}
+// 		}
 
-		return null;
+// 		return null;
 
-		// loop where sum != 0, sum > d , sum+1 <d
+// 		// loop where sum != 0, sum > d , sum+1 <d
 
-	}
+// 	}
 
-	// We cannot use the default THREE.Curve getPoint() with getLength() because in
-	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
-	// getPoint() depends on getLength
+// 	// We cannot use the default THREE.Curve getPoint() with getLength() because in
+// 	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
+// 	// getPoint() depends on getLength
 
-	getLength() {
+// 	getLength() {
 
-		const lens = this.getCurveLengths();
-		return lens[ lens.length - 1 ];
+// 		const lens = this.getCurveLengths();
+// 		return lens[ lens.length - 1 ];
 
-	}
+// 	}
 
-	// cacheLengths must be recalculated.
-	updateArcLengths() {
+// 	// cacheLengths must be recalculated.
+// 	updateArcLengths() {
 
-		this.needsUpdate = true;
-		this.cacheLengths = null;
-		this.getCurveLengths();
+// 		this.needsUpdate = true;
+// 		this.cacheLengths = null;
+// 		this.getCurveLengths();
 
-	}
+// 	}
 
-	// Compute lengths and cache them
-	// We cannot overwrite getLengths() because UtoT mapping uses it.
+// 	// Compute lengths and cache them
+// 	// We cannot overwrite getLengths() because UtoT mapping uses it.
 
-	getCurveLengths() {
+// 	getCurveLengths() {
 
-		// We use cache values if curves and cache array are same length
+// 		// We use cache values if curves and cache array are same length
 
-		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
+// 		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
 
-			return this.cacheLengths;
+// 			return this.cacheLengths;
 
-		}
+// 		}
 
-		// Get length of sub-curve
-		// Push sums into cached array
+// 		// Get length of sub-curve
+// 		// Push sums into cached array
 
-		const lengths = [];
-		let sums = 0;
+// 		const lengths = [];
+// 		let sums = 0;
 
-		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {
 
-			sums += this.curves[ i ].getLength();
-			lengths.push( sums );
+// 			sums += this.curves[ i ].getLength();
+// 			lengths.push( sums );
 
-		}
+// 		}
 
-		this.cacheLengths = lengths;
+// 		this.cacheLengths = lengths;
 
-		return lengths;
+// 		return lengths;
 
-	}
+// 	}
 
-	getSpacedPoints( divisions = 40 ) {
+// 	getSpacedPoints( divisions = 40 ) {
 
-		const points = [];
+// 		const points = [];
 
-		for ( let i = 0; i <= divisions; i ++ ) {
+// 		for ( let i = 0; i <= divisions; i ++ ) {
 
-			points.push( this.getPoint( i / divisions ) );
+// 			points.push( this.getPoint( i / divisions ) );
 
-		}
+// 		}
 
-		if ( this.autoClose ) {
+// 		if ( this.autoClose ) {
 
-			points.push( points[ 0 ] );
+// 			points.push( points[ 0 ] );
 
-		}
+// 		}
 
-		return points;
+// 		return points;
 
-	}
+// 	}
 
-	getPoints( divisions = 12 ) {
+// 	getPoints( divisions = 12 ) {
 
-		const points = [];
-		let last;
+// 		const points = [];
+// 		let last;
 
-		for ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {
+// 		for ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {
 
-			const curve = curves[ i ];
-			const resolution = curve.isEllipseCurve ? divisions * 2
-				: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1
-					: curve.isSplineCurve ? divisions * curve.points.length
-						: divisions;
+// 			const curve = curves[ i ];
+// 			const resolution = curve.isEllipseCurve ? divisions * 2
+// 				: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1
+// 					: curve.isSplineCurve ? divisions * curve.points.length
+// 						: divisions;
 
-			const pts = curve.getPoints( resolution );
+// 			const pts = curve.getPoints( resolution );
 
-			for ( let j = 0; j < pts.length; j ++ ) {
+// 			for ( let j = 0; j < pts.length; j ++ ) {
 
-				const point = pts[ j ];
+// 				const point = pts[ j ];
 
-				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates
+// 				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates
 
-				points.push( point );
-				last = point;
+// 				points.push( point );
+// 				last = point;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {
+// 		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {
 
-			points.push( points[ 0 ] );
+// 			points.push( points[ 0 ] );
 
-		}
+// 		}
 
-		return points;
+// 		return points;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.curves = [];
+// 		this.curves = [];
 
-		for ( let i = 0, l = source.curves.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = source.curves.length; i < l; i ++ ) {
 
-			const curve = source.curves[ i ];
+// 			const curve = source.curves[ i ];
 
-			this.curves.push( curve.clone() );
+// 			this.curves.push( curve.clone() );
 
-		}
+// 		}
 
-		this.autoClose = source.autoClose;
+// 		this.autoClose = source.autoClose;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.autoClose = this.autoClose;
-		data.curves = [];
+// 		data.autoClose = this.autoClose;
+// 		data.curves = [];
 
-		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {
 
-			const curve = this.curves[ i ];
-			data.curves.push( curve.toJSON() );
+// 			const curve = this.curves[ i ];
+// 			data.curves.push( curve.toJSON() );
 
-		}
+// 		}
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.autoClose = json.autoClose;
-		this.curves = [];
+// 		this.autoClose = json.autoClose;
+// 		this.curves = [];
 
-		for ( let i = 0, l = json.curves.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = json.curves.length; i < l; i ++ ) {
 
-			const curve = json.curves[ i ];
-			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );
+// 			const curve = json.curves[ i ];
+// 			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class Path extends CurvePath {
+// class Path extends CurvePath {
 
-	constructor( points ) {
+// 	constructor( points ) {
 
-		super();
+// 		super();
 
-		this.type = 'Path';
+// 		this.type = 'Path';
 
-		this.currentPoint = new Vector2();
+// 		this.currentPoint = new Vector2();
 
-		if ( points ) {
+// 		if ( points ) {
 
-			this.setFromPoints( points );
+// 			this.setFromPoints( points );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	setFromPoints( points ) {
+// 	setFromPoints( points ) {
 
-		this.moveTo( points[ 0 ].x, points[ 0 ].y );
+// 		this.moveTo( points[ 0 ].x, points[ 0 ].y );
 
-		for ( let i = 1, l = points.length; i < l; i ++ ) {
+// 		for ( let i = 1, l = points.length; i < l; i ++ ) {
 
-			this.lineTo( points[ i ].x, points[ i ].y );
+// 			this.lineTo( points[ i ].x, points[ i ].y );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	moveTo( x, y ) {
+// 	moveTo( x, y ) {
 
-		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?
+// 		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lineTo( x, y ) {
+// 	lineTo( x, y ) {
 
-		const curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
-		this.curves.push( curve );
+// 		const curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
+// 		this.curves.push( curve );
 
-		this.currentPoint.set( x, y );
+// 		this.currentPoint.set( x, y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	quadraticCurveTo( aCPx, aCPy, aX, aY ) {
+// 	quadraticCurveTo( aCPx, aCPy, aX, aY ) {
 
-		const curve = new QuadraticBezierCurve(
-			this.currentPoint.clone(),
-			new Vector2( aCPx, aCPy ),
-			new Vector2( aX, aY )
-		);
+// 		const curve = new QuadraticBezierCurve(
+// 			this.currentPoint.clone(),
+// 			new Vector2( aCPx, aCPy ),
+// 			new Vector2( aX, aY )
+// 		);
 
-		this.curves.push( curve );
+// 		this.curves.push( curve );
 
-		this.currentPoint.set( aX, aY );
+// 		this.currentPoint.set( aX, aY );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
+// 	bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
 
-		const curve = new CubicBezierCurve(
-			this.currentPoint.clone(),
-			new Vector2( aCP1x, aCP1y ),
-			new Vector2( aCP2x, aCP2y ),
-			new Vector2( aX, aY )
-		);
+// 		const curve = new CubicBezierCurve(
+// 			this.currentPoint.clone(),
+// 			new Vector2( aCP1x, aCP1y ),
+// 			new Vector2( aCP2x, aCP2y ),
+// 			new Vector2( aX, aY )
+// 		);
 
-		this.curves.push( curve );
+// 		this.curves.push( curve );
 
-		this.currentPoint.set( aX, aY );
+// 		this.currentPoint.set( aX, aY );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	splineThru( pts /*Array of Vector*/ ) {
+// 	splineThru( pts /*Array of Vector*/ ) {
 
-		const npts = [ this.currentPoint.clone() ].concat( pts );
+// 		const npts = [ this.currentPoint.clone() ].concat( pts );
 
-		const curve = new SplineCurve( npts );
-		this.curves.push( curve );
+// 		const curve = new SplineCurve( npts );
+// 		this.curves.push( curve );
 
-		this.currentPoint.copy( pts[ pts.length - 1 ] );
+// 		this.currentPoint.copy( pts[ pts.length - 1 ] );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	arc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
+// 	arc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
 
-		const x0 = this.currentPoint.x;
-		const y0 = this.currentPoint.y;
+// 		const x0 = this.currentPoint.x;
+// 		const y0 = this.currentPoint.y;
 
-		this.absarc( aX + x0, aY + y0, aRadius,
-			aStartAngle, aEndAngle, aClockwise );
+// 		this.absarc( aX + x0, aY + y0, aRadius,
+// 			aStartAngle, aEndAngle, aClockwise );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	absarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
+// 	absarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
 
-		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
+// 		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	ellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
+// 	ellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
 
-		const x0 = this.currentPoint.x;
-		const y0 = this.currentPoint.y;
+// 		const x0 = this.currentPoint.x;
+// 		const y0 = this.currentPoint.y;
 
-		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
+// 		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	absellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
+// 	absellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
 
-		const curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
+// 		const curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
 
-		if ( this.curves.length > 0 ) {
+// 		if ( this.curves.length > 0 ) {
 
-			// if a previous curve is present, attempt to join
-			const firstPoint = curve.getPoint( 0 );
+// 			// if a previous curve is present, attempt to join
+// 			const firstPoint = curve.getPoint( 0 );
 
-			if ( ! firstPoint.equals( this.currentPoint ) ) {
+// 			if ( ! firstPoint.equals( this.currentPoint ) ) {
 
-				this.lineTo( firstPoint.x, firstPoint.y );
+// 				this.lineTo( firstPoint.x, firstPoint.y );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		this.curves.push( curve );
+// 		this.curves.push( curve );
 
-		const lastPoint = curve.getPoint( 1 );
-		this.currentPoint.copy( lastPoint );
+// 		const lastPoint = curve.getPoint( 1 );
+// 		this.currentPoint.copy( lastPoint );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.currentPoint.copy( source.currentPoint );
+// 		this.currentPoint.copy( source.currentPoint );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.currentPoint = this.currentPoint.toArray();
+// 		data.currentPoint = this.currentPoint.toArray();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.currentPoint.fromArray( json.currentPoint );
+// 		this.currentPoint.fromArray( json.currentPoint );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class LatheGeometry extends BufferGeometry {
+// class LatheGeometry extends BufferGeometry {
 
-	constructor( points = [ new Vector2( 0, - 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {
+// 	constructor( points = [ new Vector2( 0, - 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {
 
-		super();
+// 		super();
 
-		this.type = 'LatheGeometry';
+// 		this.type = 'LatheGeometry';
 
-		this.parameters = {
-			points: points,
-			segments: segments,
-			phiStart: phiStart,
-			phiLength: phiLength
-		};
+// 		this.parameters = {
+// 			points: points,
+// 			segments: segments,
+// 			phiStart: phiStart,
+// 			phiLength: phiLength
+// 		};
 
-		segments = Math.floor( segments );
+// 		segments = Math.floor( segments );
 
-		// clamp phiLength so it's in range of [ 0, 2PI ]
+// 		// clamp phiLength so it's in range of [ 0, 2PI ]
 
-		phiLength = clamp( phiLength, 0, Math.PI * 2 );
+// 		phiLength = clamp( phiLength, 0, Math.PI * 2 );
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const uvs = [];
-		const initNormals = [];
-		const normals = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const uvs = [];
+// 		const initNormals = [];
+// 		const normals = [];
 
-		// helper variables
+// 		// helper variables
 
-		const inverseSegments = 1.0 / segments;
-		const vertex = new Vector3();
-		const uv = new Vector2();
-		const normal = new Vector3();
-		const curNormal = new Vector3();
-		const prevNormal = new Vector3();
-		let dx = 0;
-		let dy = 0;
+// 		const inverseSegments = 1.0 / segments;
+// 		const vertex = new Vector3();
+// 		const uv = new Vector2();
+// 		const normal = new Vector3();
+// 		const curNormal = new Vector3();
+// 		const prevNormal = new Vector3();
+// 		let dx = 0;
+// 		let dy = 0;
 
-		// pre-compute normals for initial "meridian"
+// 		// pre-compute normals for initial "meridian"
 
-		for ( let j = 0; j <= ( points.length - 1 ); j ++ ) {
+// 		for ( let j = 0; j <= ( points.length - 1 ); j ++ ) {
 
-			switch ( j ) {
+// 			switch ( j ) {
 
-				case 0:				// special handling for 1st vertex on path
+// 				case 0:				// special handling for 1st vertex on path
 
-					dx = points[ j + 1 ].x - points[ j ].x;
-					dy = points[ j + 1 ].y - points[ j ].y;
+// 					dx = points[ j + 1 ].x - points[ j ].x;
+// 					dy = points[ j + 1 ].y - points[ j ].y;
 
-					normal.x = dy * 1.0;
-					normal.y = - dx;
-					normal.z = dy * 0.0;
+// 					normal.x = dy * 1.0;
+// 					normal.y = - dx;
+// 					normal.z = dy * 0.0;
 
-					prevNormal.copy( normal );
+// 					prevNormal.copy( normal );
 
-					normal.normalize();
+// 					normal.normalize();
 
-					initNormals.push( normal.x, normal.y, normal.z );
+// 					initNormals.push( normal.x, normal.y, normal.z );
 
-					break;
+// 					break;
 
-				case ( points.length - 1 ):	// special handling for last Vertex on path
+// 				case ( points.length - 1 ):	// special handling for last Vertex on path
 
-					initNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );
+// 					initNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );
 
-					break;
+// 					break;
 
-				default:			// default handling for all vertices in between
+// 				default:			// default handling for all vertices in between
 
-					dx = points[ j + 1 ].x - points[ j ].x;
-					dy = points[ j + 1 ].y - points[ j ].y;
+// 					dx = points[ j + 1 ].x - points[ j ].x;
+// 					dy = points[ j + 1 ].y - points[ j ].y;
 
-					normal.x = dy * 1.0;
-					normal.y = - dx;
-					normal.z = dy * 0.0;
+// 					normal.x = dy * 1.0;
+// 					normal.y = - dx;
+// 					normal.z = dy * 0.0;
 
-					curNormal.copy( normal );
+// 					curNormal.copy( normal );
 
-					normal.x += prevNormal.x;
-					normal.y += prevNormal.y;
-					normal.z += prevNormal.z;
+// 					normal.x += prevNormal.x;
+// 					normal.y += prevNormal.y;
+// 					normal.z += prevNormal.z;
 
-					normal.normalize();
+// 					normal.normalize();
 
-					initNormals.push( normal.x, normal.y, normal.z );
+// 					initNormals.push( normal.x, normal.y, normal.z );
 
-					prevNormal.copy( curNormal );
+// 					prevNormal.copy( curNormal );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// generate vertices, uvs and normals
+// 		// generate vertices, uvs and normals
 
-		for ( let i = 0; i <= segments; i ++ ) {
+// 		for ( let i = 0; i <= segments; i ++ ) {
 
-			const phi = phiStart + i * inverseSegments * phiLength;
+// 			const phi = phiStart + i * inverseSegments * phiLength;
 
-			const sin = Math.sin( phi );
-			const cos = Math.cos( phi );
+// 			const sin = Math.sin( phi );
+// 			const cos = Math.cos( phi );
 
-			for ( let j = 0; j <= ( points.length - 1 ); j ++ ) {
+// 			for ( let j = 0; j <= ( points.length - 1 ); j ++ ) {
 
-				// vertex
+// 				// vertex
 
-				vertex.x = points[ j ].x * sin;
-				vertex.y = points[ j ].y;
-				vertex.z = points[ j ].x * cos;
+// 				vertex.x = points[ j ].x * sin;
+// 				vertex.y = points[ j ].y;
+// 				vertex.z = points[ j ].x * cos;
 
-				vertices.push( vertex.x, vertex.y, vertex.z );
+// 				vertices.push( vertex.x, vertex.y, vertex.z );
 
-				// uv
+// 				// uv
 
-				uv.x = i / segments;
-				uv.y = j / ( points.length - 1 );
+// 				uv.x = i / segments;
+// 				uv.y = j / ( points.length - 1 );
 
-				uvs.push( uv.x, uv.y );
+// 				uvs.push( uv.x, uv.y );
 
-				// normal
+// 				// normal
 
-				const x = initNormals[ 3 * j + 0 ] * sin;
-				const y = initNormals[ 3 * j + 1 ];
-				const z = initNormals[ 3 * j + 0 ] * cos;
+// 				const x = initNormals[ 3 * j + 0 ] * sin;
+// 				const y = initNormals[ 3 * j + 1 ];
+// 				const z = initNormals[ 3 * j + 0 ] * cos;
 
-				normals.push( x, y, z );
+// 				normals.push( x, y, z );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// indices
+// 		// indices
 
-		for ( let i = 0; i < segments; i ++ ) {
+// 		for ( let i = 0; i < segments; i ++ ) {
 
-			for ( let j = 0; j < ( points.length - 1 ); j ++ ) {
+// 			for ( let j = 0; j < ( points.length - 1 ); j ++ ) {
 
-				const base = j + i * points.length;
+// 				const base = j + i * points.length;
 
-				const a = base;
-				const b = base + points.length;
-				const c = base + points.length + 1;
-				const d = base + 1;
+// 				const a = base;
+// 				const b = base + points.length;
+// 				const c = base + points.length + 1;
+// 				const d = base + 1;
 
-				// faces
+// 				// faces
 
-				indices.push( a, b, d );
-				indices.push( c, d, b );
+// 				indices.push( a, b, d );
+// 				indices.push( c, d, b );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );
+// 		return new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );
 
-	}
+// 	}
 
-}
+// }
 
-class CapsuleGeometry extends LatheGeometry {
+// class CapsuleGeometry extends LatheGeometry {
 
-	constructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {
+// 	constructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {
 
-		const path = new Path();
-		path.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );
-		path.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );
+// 		const path = new Path();
+// 		path.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );
+// 		path.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );
 
-		super( path.getPoints( capSegments ), radialSegments );
+// 		super( path.getPoints( capSegments ), radialSegments );
 
-		this.type = 'CapsuleGeometry';
+// 		this.type = 'CapsuleGeometry';
 
-		this.parameters = {
-			radius: radius,
-			height: length,
-			capSegments: capSegments,
-			radialSegments: radialSegments,
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			height: length,
+// 			capSegments: capSegments,
+// 			radialSegments: radialSegments,
+// 		};
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );
+// 		return new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );
 
-	}
+// 	}
 
-}
+// }
 
-class CircleGeometry extends BufferGeometry {
+// class CircleGeometry extends BufferGeometry {
 
-	constructor( radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2 ) {
+// 	constructor( radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2 ) {
 
-		super();
+// 		super();
 
-		this.type = 'CircleGeometry';
+// 		this.type = 'CircleGeometry';
 
-		this.parameters = {
-			radius: radius,
-			segments: segments,
-			thetaStart: thetaStart,
-			thetaLength: thetaLength
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			segments: segments,
+// 			thetaStart: thetaStart,
+// 			thetaLength: thetaLength
+// 		};
 
-		segments = Math.max( 3, segments );
+// 		segments = Math.max( 3, segments );
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		// helper variables
+// 		// helper variables
 
-		const vertex = new Vector3();
-		const uv = new Vector2();
+// 		const vertex = new Vector3();
+// 		const uv = new Vector2();
 
-		// center point
+// 		// center point
 
-		vertices.push( 0, 0, 0 );
-		normals.push( 0, 0, 1 );
-		uvs.push( 0.5, 0.5 );
+// 		vertices.push( 0, 0, 0 );
+// 		normals.push( 0, 0, 1 );
+// 		uvs.push( 0.5, 0.5 );
 
-		for ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {
+// 		for ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {
 
-			const segment = thetaStart + s / segments * thetaLength;
+// 			const segment = thetaStart + s / segments * thetaLength;
 
-			// vertex
+// 			// vertex
 
-			vertex.x = radius * Math.cos( segment );
-			vertex.y = radius * Math.sin( segment );
+// 			vertex.x = radius * Math.cos( segment );
+// 			vertex.y = radius * Math.sin( segment );
 
-			vertices.push( vertex.x, vertex.y, vertex.z );
+// 			vertices.push( vertex.x, vertex.y, vertex.z );
 
-			// normal
+// 			// normal
 
-			normals.push( 0, 0, 1 );
+// 			normals.push( 0, 0, 1 );
 
-			// uvs
+// 			// uvs
 
-			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
-			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;
+// 			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
+// 			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;
 
-			uvs.push( uv.x, uv.y );
+// 			uvs.push( uv.x, uv.y );
 
-		}
+// 		}
 
-		// indices
+// 		// indices
 
-		for ( let i = 1; i <= segments; i ++ ) {
+// 		for ( let i = 1; i <= segments; i ++ ) {
 
-			indices.push( i, i + 1, 0 );
+// 			indices.push( i, i + 1, 0 );
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );
+// 		return new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-class CylinderGeometry extends BufferGeometry {
+// class CylinderGeometry extends BufferGeometry {
 
-	constructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {
+// 	constructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {
 
-		super();
+// 		super();
 
-		this.type = 'CylinderGeometry';
+// 		this.type = 'CylinderGeometry';
 
-		this.parameters = {
-			radiusTop: radiusTop,
-			radiusBottom: radiusBottom,
-			height: height,
-			radialSegments: radialSegments,
-			heightSegments: heightSegments,
-			openEnded: openEnded,
-			thetaStart: thetaStart,
-			thetaLength: thetaLength
-		};
+// 		this.parameters = {
+// 			radiusTop: radiusTop,
+// 			radiusBottom: radiusBottom,
+// 			height: height,
+// 			radialSegments: radialSegments,
+// 			heightSegments: heightSegments,
+// 			openEnded: openEnded,
+// 			thetaStart: thetaStart,
+// 			thetaLength: thetaLength
+// 		};
 
-		const scope = this;
+// 		const scope = this;
 
-		radialSegments = Math.floor( radialSegments );
-		heightSegments = Math.floor( heightSegments );
+// 		radialSegments = Math.floor( radialSegments );
+// 		heightSegments = Math.floor( heightSegments );
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		// helper variables
+// 		// helper variables
 
-		let index = 0;
-		const indexArray = [];
-		const halfHeight = height / 2;
-		let groupStart = 0;
+// 		let index = 0;
+// 		const indexArray = [];
+// 		const halfHeight = height / 2;
+// 		let groupStart = 0;
 
-		// generate geometry
+// 		// generate geometry
 
-		generateTorso();
+// 		generateTorso();
 
-		if ( openEnded === false ) {
+// 		if ( openEnded === false ) {
 
-			if ( radiusTop > 0 ) generateCap( true );
-			if ( radiusBottom > 0 ) generateCap( false );
+// 			if ( radiusTop > 0 ) generateCap( true );
+// 			if ( radiusBottom > 0 ) generateCap( false );
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-		function generateTorso() {
+// 		function generateTorso() {
 
-			const normal = new Vector3();
-			const vertex = new Vector3();
+// 			const normal = new Vector3();
+// 			const vertex = new Vector3();
 
-			let groupCount = 0;
+// 			let groupCount = 0;
 
-			// this will be used to calculate the normal
-			const slope = ( radiusBottom - radiusTop ) / height;
+// 			// this will be used to calculate the normal
+// 			const slope = ( radiusBottom - radiusTop ) / height;
 
-			// generate vertices, normals and uvs
+// 			// generate vertices, normals and uvs
 
-			for ( let y = 0; y <= heightSegments; y ++ ) {
+// 			for ( let y = 0; y <= heightSegments; y ++ ) {
 
-				const indexRow = [];
+// 				const indexRow = [];
 
-				const v = y / heightSegments;
+// 				const v = y / heightSegments;
 
-				// calculate the radius of the current row
+// 				// calculate the radius of the current row
 
-				const radius = v * ( radiusBottom - radiusTop ) + radiusTop;
+// 				const radius = v * ( radiusBottom - radiusTop ) + radiusTop;
 
-				for ( let x = 0; x <= radialSegments; x ++ ) {
+// 				for ( let x = 0; x <= radialSegments; x ++ ) {
 
-					const u = x / radialSegments;
+// 					const u = x / radialSegments;
 
-					const theta = u * thetaLength + thetaStart;
+// 					const theta = u * thetaLength + thetaStart;
 
-					const sinTheta = Math.sin( theta );
-					const cosTheta = Math.cos( theta );
+// 					const sinTheta = Math.sin( theta );
+// 					const cosTheta = Math.cos( theta );
 
-					// vertex
+// 					// vertex
 
-					vertex.x = radius * sinTheta;
-					vertex.y = - v * height + halfHeight;
-					vertex.z = radius * cosTheta;
-					vertices.push( vertex.x, vertex.y, vertex.z );
+// 					vertex.x = radius * sinTheta;
+// 					vertex.y = - v * height + halfHeight;
+// 					vertex.z = radius * cosTheta;
+// 					vertices.push( vertex.x, vertex.y, vertex.z );
 
-					// normal
+// 					// normal
 
-					normal.set( sinTheta, slope, cosTheta ).normalize();
-					normals.push( normal.x, normal.y, normal.z );
+// 					normal.set( sinTheta, slope, cosTheta ).normalize();
+// 					normals.push( normal.x, normal.y, normal.z );
 
-					// uv
+// 					// uv
 
-					uvs.push( u, 1 - v );
+// 					uvs.push( u, 1 - v );
 
-					// save index of vertex in respective row
+// 					// save index of vertex in respective row
 
-					indexRow.push( index ++ );
+// 					indexRow.push( index ++ );
 
-				}
+// 				}
 
-				// now save vertices of the row in our index array
+// 				// now save vertices of the row in our index array
 
-				indexArray.push( indexRow );
+// 				indexArray.push( indexRow );
 
-			}
+// 			}
 
-			// generate indices
+// 			// generate indices
 
-			for ( let x = 0; x < radialSegments; x ++ ) {
+// 			for ( let x = 0; x < radialSegments; x ++ ) {
 
-				for ( let y = 0; y < heightSegments; y ++ ) {
+// 				for ( let y = 0; y < heightSegments; y ++ ) {
 
-					// we use the index array to access the correct indices
+// 					// we use the index array to access the correct indices
 
-					const a = indexArray[ y ][ x ];
-					const b = indexArray[ y + 1 ][ x ];
-					const c = indexArray[ y + 1 ][ x + 1 ];
-					const d = indexArray[ y ][ x + 1 ];
+// 					const a = indexArray[ y ][ x ];
+// 					const b = indexArray[ y + 1 ][ x ];
+// 					const c = indexArray[ y + 1 ][ x + 1 ];
+// 					const d = indexArray[ y ][ x + 1 ];
 
-					// faces
+// 					// faces
 
-					indices.push( a, b, d );
-					indices.push( b, c, d );
+// 					indices.push( a, b, d );
+// 					indices.push( b, c, d );
 
-					// update group counter
+// 					// update group counter
 
-					groupCount += 6;
+// 					groupCount += 6;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// add a group to the geometry. this will ensure multi material support
+// 			// add a group to the geometry. this will ensure multi material support
 
-			scope.addGroup( groupStart, groupCount, 0 );
+// 			scope.addGroup( groupStart, groupCount, 0 );
 
-			// calculate new start value for groups
+// 			// calculate new start value for groups
 
-			groupStart += groupCount;
+// 			groupStart += groupCount;
 
-		}
+// 		}
 
-		function generateCap( top ) {
+// 		function generateCap( top ) {
 
-			// save the index of the first center vertex
-			const centerIndexStart = index;
+// 			// save the index of the first center vertex
+// 			const centerIndexStart = index;
 
-			const uv = new Vector2();
-			const vertex = new Vector3();
+// 			const uv = new Vector2();
+// 			const vertex = new Vector3();
 
-			let groupCount = 0;
+// 			let groupCount = 0;
 
-			const radius = ( top === true ) ? radiusTop : radiusBottom;
-			const sign = ( top === true ) ? 1 : - 1;
+// 			const radius = ( top === true ) ? radiusTop : radiusBottom;
+// 			const sign = ( top === true ) ? 1 : - 1;
 
-			// first we generate the center vertex data of the cap.
-			// because the geometry needs one set of uvs per face,
-			// we must generate a center vertex per face/segment
+// 			// first we generate the center vertex data of the cap.
+// 			// because the geometry needs one set of uvs per face,
+// 			// we must generate a center vertex per face/segment
 
-			for ( let x = 1; x <= radialSegments; x ++ ) {
+// 			for ( let x = 1; x <= radialSegments; x ++ ) {
 
-				// vertex
+// 				// vertex
 
-				vertices.push( 0, halfHeight * sign, 0 );
+// 				vertices.push( 0, halfHeight * sign, 0 );
 
-				// normal
+// 				// normal
 
-				normals.push( 0, sign, 0 );
+// 				normals.push( 0, sign, 0 );
 
-				// uv
+// 				// uv
 
-				uvs.push( 0.5, 0.5 );
+// 				uvs.push( 0.5, 0.5 );
 
-				// increase index
+// 				// increase index
 
-				index ++;
+// 				index ++;
 
-			}
+// 			}
 
-			// save the index of the last center vertex
-			const centerIndexEnd = index;
+// 			// save the index of the last center vertex
+// 			const centerIndexEnd = index;
 
-			// now we generate the surrounding vertices, normals and uvs
+// 			// now we generate the surrounding vertices, normals and uvs
 
-			for ( let x = 0; x <= radialSegments; x ++ ) {
+// 			for ( let x = 0; x <= radialSegments; x ++ ) {
 
-				const u = x / radialSegments;
-				const theta = u * thetaLength + thetaStart;
+// 				const u = x / radialSegments;
+// 				const theta = u * thetaLength + thetaStart;
 
-				const cosTheta = Math.cos( theta );
-				const sinTheta = Math.sin( theta );
+// 				const cosTheta = Math.cos( theta );
+// 				const sinTheta = Math.sin( theta );
 
-				// vertex
+// 				// vertex
 
-				vertex.x = radius * sinTheta;
-				vertex.y = halfHeight * sign;
-				vertex.z = radius * cosTheta;
-				vertices.push( vertex.x, vertex.y, vertex.z );
+// 				vertex.x = radius * sinTheta;
+// 				vertex.y = halfHeight * sign;
+// 				vertex.z = radius * cosTheta;
+// 				vertices.push( vertex.x, vertex.y, vertex.z );
 
-				// normal
+// 				// normal
 
-				normals.push( 0, sign, 0 );
+// 				normals.push( 0, sign, 0 );
 
-				// uv
+// 				// uv
 
-				uv.x = ( cosTheta * 0.5 ) + 0.5;
-				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
-				uvs.push( uv.x, uv.y );
+// 				uv.x = ( cosTheta * 0.5 ) + 0.5;
+// 				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
+// 				uvs.push( uv.x, uv.y );
 
-				// increase index
+// 				// increase index
 
-				index ++;
+// 				index ++;
 
-			}
+// 			}
 
-			// generate indices
+// 			// generate indices
 
-			for ( let x = 0; x < radialSegments; x ++ ) {
+// 			for ( let x = 0; x < radialSegments; x ++ ) {
 
-				const c = centerIndexStart + x;
-				const i = centerIndexEnd + x;
+// 				const c = centerIndexStart + x;
+// 				const i = centerIndexEnd + x;
 
-				if ( top === true ) {
+// 				if ( top === true ) {
 
-					// face top
+// 					// face top
 
-					indices.push( i, i + 1, c );
+// 					indices.push( i, i + 1, c );
 
-				} else {
+// 				} else {
 
-					// face bottom
+// 					// face bottom
 
-					indices.push( i + 1, i, c );
+// 					indices.push( i + 1, i, c );
 
-				}
+// 				}
 
-				groupCount += 3;
+// 				groupCount += 3;
 
-			}
+// 			}
 
-			// add a group to the geometry. this will ensure multi material support
+// 			// add a group to the geometry. this will ensure multi material support
 
-			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );
+// 			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );
 
-			// calculate new start value for groups
+// 			// calculate new start value for groups
 
-			groupStart += groupCount;
+// 			groupStart += groupCount;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );
+// 		return new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-class ConeGeometry extends CylinderGeometry {
+// class ConeGeometry extends CylinderGeometry {
 
-	constructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {
+// 	constructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {
 
-		super( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
+// 		super( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
 
-		this.type = 'ConeGeometry';
+// 		this.type = 'ConeGeometry';
 
-		this.parameters = {
-			radius: radius,
-			height: height,
-			radialSegments: radialSegments,
-			heightSegments: heightSegments,
-			openEnded: openEnded,
-			thetaStart: thetaStart,
-			thetaLength: thetaLength
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			height: height,
+// 			radialSegments: radialSegments,
+// 			heightSegments: heightSegments,
+// 			openEnded: openEnded,
+// 			thetaStart: thetaStart,
+// 			thetaLength: thetaLength
+// 		};
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );
+// 		return new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-class PolyhedronGeometry extends BufferGeometry {
+// class PolyhedronGeometry extends BufferGeometry {
 
-	constructor( vertices = [], indices = [], radius = 1, detail = 0 ) {
+// 	constructor( vertices = [], indices = [], radius = 1, detail = 0 ) {
 
-		super();
+// 		super();
 
-		this.type = 'PolyhedronGeometry';
+// 		this.type = 'PolyhedronGeometry';
 
-		this.parameters = {
-			vertices: vertices,
-			indices: indices,
-			radius: radius,
-			detail: detail
-		};
+// 		this.parameters = {
+// 			vertices: vertices,
+// 			indices: indices,
+// 			radius: radius,
+// 			detail: detail
+// 		};
 
-		// default buffer data
+// 		// default buffer data
 
-		const vertexBuffer = [];
-		const uvBuffer = [];
+// 		const vertexBuffer = [];
+// 		const uvBuffer = [];
 
-		// the subdivision creates the vertex buffer data
+// 		// the subdivision creates the vertex buffer data
 
-		subdivide( detail );
+// 		subdivide( detail );
 
-		// all vertices should lie on a conceptual sphere with a given radius
+// 		// all vertices should lie on a conceptual sphere with a given radius
 
-		applyRadius( radius );
+// 		applyRadius( radius );
 
-		// finally, create the uv data
+// 		// finally, create the uv data
 
-		generateUVs();
+// 		generateUVs();
 
-		// build non-indexed geometry
+// 		// build non-indexed geometry
 
-		this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );
 
-		if ( detail === 0 ) {
+// 		if ( detail === 0 ) {
 
-			this.computeVertexNormals(); // flat normals
+// 			this.computeVertexNormals(); // flat normals
 
-		} else {
+// 		} else {
 
-			this.normalizeNormals(); // smooth normals
+// 			this.normalizeNormals(); // smooth normals
 
-		}
+// 		}
 
-		// helper functions
+// 		// helper functions
 
-		function subdivide( detail ) {
+// 		function subdivide( detail ) {
 
-			const a = new Vector3();
-			const b = new Vector3();
-			const c = new Vector3();
+// 			const a = new Vector3();
+// 			const b = new Vector3();
+// 			const c = new Vector3();
 
-			// iterate over all faces and apply a subdivison with the given detail value
+// 			// iterate over all faces and apply a subdivison with the given detail value
 
-			for ( let i = 0; i < indices.length; i += 3 ) {
+// 			for ( let i = 0; i < indices.length; i += 3 ) {
 
-				// get the vertices of the face
+// 				// get the vertices of the face
 
-				getVertexByIndex( indices[ i + 0 ], a );
-				getVertexByIndex( indices[ i + 1 ], b );
-				getVertexByIndex( indices[ i + 2 ], c );
+// 				getVertexByIndex( indices[ i + 0 ], a );
+// 				getVertexByIndex( indices[ i + 1 ], b );
+// 				getVertexByIndex( indices[ i + 2 ], c );
 
-				// perform subdivision
+// 				// perform subdivision
 
-				subdivideFace( a, b, c, detail );
+// 				subdivideFace( a, b, c, detail );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		function subdivideFace( a, b, c, detail ) {
+// 		function subdivideFace( a, b, c, detail ) {
 
-			const cols = detail + 1;
+// 			const cols = detail + 1;
 
-			// we use this multidimensional array as a data structure for creating the subdivision
+// 			// we use this multidimensional array as a data structure for creating the subdivision
 
-			const v = [];
+// 			const v = [];
 
-			// construct all of the vertices for this subdivision
+// 			// construct all of the vertices for this subdivision
 
-			for ( let i = 0; i <= cols; i ++ ) {
+// 			for ( let i = 0; i <= cols; i ++ ) {
 
-				v[ i ] = [];
+// 				v[ i ] = [];
 
-				const aj = a.clone().lerp( c, i / cols );
-				const bj = b.clone().lerp( c, i / cols );
+// 				const aj = a.clone().lerp( c, i / cols );
+// 				const bj = b.clone().lerp( c, i / cols );
 
-				const rows = cols - i;
+// 				const rows = cols - i;
 
-				for ( let j = 0; j <= rows; j ++ ) {
+// 				for ( let j = 0; j <= rows; j ++ ) {
 
-					if ( j === 0 && i === cols ) {
+// 					if ( j === 0 && i === cols ) {
 
-						v[ i ][ j ] = aj;
+// 						v[ i ][ j ] = aj;
 
-					} else {
+// 					} else {
 
-						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );
+// 						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// construct all of the faces
+// 			// construct all of the faces
 
-			for ( let i = 0; i < cols; i ++ ) {
+// 			for ( let i = 0; i < cols; i ++ ) {
 
-				for ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
+// 				for ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
 
-					const k = Math.floor( j / 2 );
+// 					const k = Math.floor( j / 2 );
 
-					if ( j % 2 === 0 ) {
+// 					if ( j % 2 === 0 ) {
 
-						pushVertex( v[ i ][ k + 1 ] );
-						pushVertex( v[ i + 1 ][ k ] );
-						pushVertex( v[ i ][ k ] );
+// 						pushVertex( v[ i ][ k + 1 ] );
+// 						pushVertex( v[ i + 1 ][ k ] );
+// 						pushVertex( v[ i ][ k ] );
 
-					} else {
+// 					} else {
 
-						pushVertex( v[ i ][ k + 1 ] );
-						pushVertex( v[ i + 1 ][ k + 1 ] );
-						pushVertex( v[ i + 1 ][ k ] );
+// 						pushVertex( v[ i ][ k + 1 ] );
+// 						pushVertex( v[ i + 1 ][ k + 1 ] );
+// 						pushVertex( v[ i + 1 ][ k ] );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		function applyRadius( radius ) {
+// 		function applyRadius( radius ) {
 
-			const vertex = new Vector3();
+// 			const vertex = new Vector3();
 
-			// iterate over the entire buffer and apply the radius to each vertex
+// 			// iterate over the entire buffer and apply the radius to each vertex
 
-			for ( let i = 0; i < vertexBuffer.length; i += 3 ) {
+// 			for ( let i = 0; i < vertexBuffer.length; i += 3 ) {
 
-				vertex.x = vertexBuffer[ i + 0 ];
-				vertex.y = vertexBuffer[ i + 1 ];
-				vertex.z = vertexBuffer[ i + 2 ];
+// 				vertex.x = vertexBuffer[ i + 0 ];
+// 				vertex.y = vertexBuffer[ i + 1 ];
+// 				vertex.z = vertexBuffer[ i + 2 ];
 
-				vertex.normalize().multiplyScalar( radius );
+// 				vertex.normalize().multiplyScalar( radius );
 
-				vertexBuffer[ i + 0 ] = vertex.x;
-				vertexBuffer[ i + 1 ] = vertex.y;
-				vertexBuffer[ i + 2 ] = vertex.z;
+// 				vertexBuffer[ i + 0 ] = vertex.x;
+// 				vertexBuffer[ i + 1 ] = vertex.y;
+// 				vertexBuffer[ i + 2 ] = vertex.z;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		function generateUVs() {
+// 		function generateUVs() {
 
-			const vertex = new Vector3();
+// 			const vertex = new Vector3();
 
-			for ( let i = 0; i < vertexBuffer.length; i += 3 ) {
+// 			for ( let i = 0; i < vertexBuffer.length; i += 3 ) {
 
-				vertex.x = vertexBuffer[ i + 0 ];
-				vertex.y = vertexBuffer[ i + 1 ];
-				vertex.z = vertexBuffer[ i + 2 ];
+// 				vertex.x = vertexBuffer[ i + 0 ];
+// 				vertex.y = vertexBuffer[ i + 1 ];
+// 				vertex.z = vertexBuffer[ i + 2 ];
 
-				const u = azimuth( vertex ) / 2 / Math.PI + 0.5;
-				const v = inclination( vertex ) / Math.PI + 0.5;
-				uvBuffer.push( u, 1 - v );
+// 				const u = azimuth( vertex ) / 2 / Math.PI + 0.5;
+// 				const v = inclination( vertex ) / Math.PI + 0.5;
+// 				uvBuffer.push( u, 1 - v );
 
-			}
+// 			}
 
-			correctUVs();
+// 			correctUVs();
 
-			correctSeam();
+// 			correctSeam();
 
-		}
+// 		}
 
-		function correctSeam() {
+// 		function correctSeam() {
 
-			// handle case when face straddles the seam, see #3269
+// 			// handle case when face straddles the seam, see #3269
 
-			for ( let i = 0; i < uvBuffer.length; i += 6 ) {
+// 			for ( let i = 0; i < uvBuffer.length; i += 6 ) {
 
-				// uv data of a single face
+// 				// uv data of a single face
 
-				const x0 = uvBuffer[ i + 0 ];
-				const x1 = uvBuffer[ i + 2 ];
-				const x2 = uvBuffer[ i + 4 ];
+// 				const x0 = uvBuffer[ i + 0 ];
+// 				const x1 = uvBuffer[ i + 2 ];
+// 				const x2 = uvBuffer[ i + 4 ];
 
-				const max = Math.max( x0, x1, x2 );
-				const min = Math.min( x0, x1, x2 );
+// 				const max = Math.max( x0, x1, x2 );
+// 				const min = Math.min( x0, x1, x2 );
 
-				// 0.9 is somewhat arbitrary
+// 				// 0.9 is somewhat arbitrary
 
-				if ( max > 0.9 && min < 0.1 ) {
+// 				if ( max > 0.9 && min < 0.1 ) {
 
-					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
-					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
-					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;
+// 					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
+// 					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
+// 					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		function pushVertex( vertex ) {
+// 		function pushVertex( vertex ) {
 
-			vertexBuffer.push( vertex.x, vertex.y, vertex.z );
+// 			vertexBuffer.push( vertex.x, vertex.y, vertex.z );
 
-		}
+// 		}
 
-		function getVertexByIndex( index, vertex ) {
+// 		function getVertexByIndex( index, vertex ) {
 
-			const stride = index * 3;
+// 			const stride = index * 3;
 
-			vertex.x = vertices[ stride + 0 ];
-			vertex.y = vertices[ stride + 1 ];
-			vertex.z = vertices[ stride + 2 ];
+// 			vertex.x = vertices[ stride + 0 ];
+// 			vertex.y = vertices[ stride + 1 ];
+// 			vertex.z = vertices[ stride + 2 ];
 
-		}
+// 		}
 
-		function correctUVs() {
+// 		function correctUVs() {
 
-			const a = new Vector3();
-			const b = new Vector3();
-			const c = new Vector3();
+// 			const a = new Vector3();
+// 			const b = new Vector3();
+// 			const c = new Vector3();
 
-			const centroid = new Vector3();
+// 			const centroid = new Vector3();
 
-			const uvA = new Vector2();
-			const uvB = new Vector2();
-			const uvC = new Vector2();
+// 			const uvA = new Vector2();
+// 			const uvB = new Vector2();
+// 			const uvC = new Vector2();
 
-			for ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {
+// 			for ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {
 
-				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
-				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
-				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );
+// 				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
+// 				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
+// 				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );
 
-				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
-				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
-				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );
+// 				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
+// 				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
+// 				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );
 
-				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );
+// 				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );
 
-				const azi = azimuth( centroid );
+// 				const azi = azimuth( centroid );
 
-				correctUV( uvA, j + 0, a, azi );
-				correctUV( uvB, j + 2, b, azi );
-				correctUV( uvC, j + 4, c, azi );
+// 				correctUV( uvA, j + 0, a, azi );
+// 				correctUV( uvB, j + 2, b, azi );
+// 				correctUV( uvC, j + 4, c, azi );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		function correctUV( uv, stride, vector, azimuth ) {
+// 		function correctUV( uv, stride, vector, azimuth ) {
 
-			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {
+// 			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {
 
-				uvBuffer[ stride ] = uv.x - 1;
+// 				uvBuffer[ stride ] = uv.x - 1;
 
-			}
+// 			}
 
-			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {
+// 			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {
 
-				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;
+// 				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// Angle around the Y axis, counter-clockwise when looking from above.
+// 		// Angle around the Y axis, counter-clockwise when looking from above.
 
-		function azimuth( vector ) {
+// 		function azimuth( vector ) {
 
-			return Math.atan2( vector.z, - vector.x );
+// 			return Math.atan2( vector.z, - vector.x );
 
-		}
+// 		}
 
 
-		// Angle above the XZ plane.
+// 		// Angle above the XZ plane.
 
-		function inclination( vector ) {
+// 		function inclination( vector ) {
 
-			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
+// 			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );
+// 		return new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );
 
-	}
+// 	}
 
-}
+// }
 
-class DodecahedronGeometry extends PolyhedronGeometry {
+// class DodecahedronGeometry extends PolyhedronGeometry {
 
-	constructor( radius = 1, detail = 0 ) {
+// 	constructor( radius = 1, detail = 0 ) {
 
-		const t = ( 1 + Math.sqrt( 5 ) ) / 2;
-		const r = 1 / t;
+// 		const t = ( 1 + Math.sqrt( 5 ) ) / 2;
+// 		const r = 1 / t;
 
-		const vertices = [
+// 		const vertices = [
 
-			// (±1, ±1, ±1)
-			- 1, - 1, - 1,	- 1, - 1, 1,
-			- 1, 1, - 1, - 1, 1, 1,
-			1, - 1, - 1, 1, - 1, 1,
-			1, 1, - 1, 1, 1, 1,
+// 			// (±1, ±1, ±1)
+// 			- 1, - 1, - 1,	- 1, - 1, 1,
+// 			- 1, 1, - 1, - 1, 1, 1,
+// 			1, - 1, - 1, 1, - 1, 1,
+// 			1, 1, - 1, 1, 1, 1,
 
-			// (0, ±1/φ, ±φ)
-			0, - r, - t, 0, - r, t,
-			0, r, - t, 0, r, t,
+// 			// (0, ±1/φ, ±φ)
+// 			0, - r, - t, 0, - r, t,
+// 			0, r, - t, 0, r, t,
 
-			// (±1/φ, ±φ, 0)
-			- r, - t, 0, - r, t, 0,
-			r, - t, 0, r, t, 0,
+// 			// (±1/φ, ±φ, 0)
+// 			- r, - t, 0, - r, t, 0,
+// 			r, - t, 0, r, t, 0,
 
-			// (±φ, 0, ±1/φ)
-			- t, 0, - r, t, 0, - r,
-			- t, 0, r, t, 0, r
-		];
+// 			// (±φ, 0, ±1/φ)
+// 			- t, 0, - r, t, 0, - r,
+// 			- t, 0, r, t, 0, r
+// 		];
 
-		const indices = [
-			3, 11, 7, 	3, 7, 15, 	3, 15, 13,
-			7, 19, 17, 	7, 17, 6, 	7, 6, 15,
-			17, 4, 8, 	17, 8, 10, 	17, 10, 6,
-			8, 0, 16, 	8, 16, 2, 	8, 2, 10,
-			0, 12, 1, 	0, 1, 18, 	0, 18, 16,
-			6, 10, 2, 	6, 2, 13, 	6, 13, 15,
-			2, 16, 18, 	2, 18, 3, 	2, 3, 13,
-			18, 1, 9, 	18, 9, 11, 	18, 11, 3,
-			4, 14, 12, 	4, 12, 0, 	4, 0, 8,
-			11, 9, 5, 	11, 5, 19, 	11, 19, 7,
-			19, 5, 14, 	19, 14, 4, 	19, 4, 17,
-			1, 12, 14, 	1, 14, 5, 	1, 5, 9
-		];
+// 		const indices = [
+// 			3, 11, 7, 	3, 7, 15, 	3, 15, 13,
+// 			7, 19, 17, 	7, 17, 6, 	7, 6, 15,
+// 			17, 4, 8, 	17, 8, 10, 	17, 10, 6,
+// 			8, 0, 16, 	8, 16, 2, 	8, 2, 10,
+// 			0, 12, 1, 	0, 1, 18, 	0, 18, 16,
+// 			6, 10, 2, 	6, 2, 13, 	6, 13, 15,
+// 			2, 16, 18, 	2, 18, 3, 	2, 3, 13,
+// 			18, 1, 9, 	18, 9, 11, 	18, 11, 3,
+// 			4, 14, 12, 	4, 12, 0, 	4, 0, 8,
+// 			11, 9, 5, 	11, 5, 19, 	11, 19, 7,
+// 			19, 5, 14, 	19, 14, 4, 	19, 4, 17,
+// 			1, 12, 14, 	1, 14, 5, 	1, 5, 9
+// 		];
 
-		super( vertices, indices, radius, detail );
+// 		super( vertices, indices, radius, detail );
 
-		this.type = 'DodecahedronGeometry';
+// 		this.type = 'DodecahedronGeometry';
 
-		this.parameters = {
-			radius: radius,
-			detail: detail
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			detail: detail
+// 		};
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new DodecahedronGeometry( data.radius, data.detail );
+// 		return new DodecahedronGeometry( data.radius, data.detail );
 
-	}
+// 	}
 
-}
+// }
 
-const _v0 = /*@__PURE__*/ new Vector3();
-const _v1$1 = /*@__PURE__*/ new Vector3();
-const _normal = /*@__PURE__*/ new Vector3();
-const _triangle = /*@__PURE__*/ new Triangle();
+// const _v0 = /*@__PURE__*/ new Vector3();
+// const _v1$1 = /*@__PURE__*/ new Vector3();
+// const _normal = /*@__PURE__*/ new Vector3();
+// const _triangle = /*@__PURE__*/ new Triangle();
 
-class EdgesGeometry extends BufferGeometry {
+// class EdgesGeometry extends BufferGeometry {
 
-	constructor( geometry = null, thresholdAngle = 1 ) {
+// 	constructor( geometry = null, thresholdAngle = 1 ) {
 
-		super();
+// 		super();
 
-		this.type = 'EdgesGeometry';
+// 		this.type = 'EdgesGeometry';
 
-		this.parameters = {
-			geometry: geometry,
-			thresholdAngle: thresholdAngle
-		};
+// 		this.parameters = {
+// 			geometry: geometry,
+// 			thresholdAngle: thresholdAngle
+// 		};
 
-		if ( geometry !== null ) {
+// 		if ( geometry !== null ) {
 
-			const precisionPoints = 4;
-			const precision = Math.pow( 10, precisionPoints );
-			const thresholdDot = Math.cos( DEG2RAD * thresholdAngle );
+// 			const precisionPoints = 4;
+// 			const precision = Math.pow( 10, precisionPoints );
+// 			const thresholdDot = Math.cos( DEG2RAD * thresholdAngle );
 
-			const indexAttr = geometry.getIndex();
-			const positionAttr = geometry.getAttribute( 'position' );
-			const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
+// 			const indexAttr = geometry.getIndex();
+// 			const positionAttr = geometry.getAttribute( 'position' );
+// 			const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
 
-			const indexArr = [ 0, 0, 0 ];
-			const vertKeys = [ 'a', 'b', 'c' ];
-			const hashes = new Array( 3 );
+// 			const indexArr = [ 0, 0, 0 ];
+// 			const vertKeys = [ 'a', 'b', 'c' ];
+// 			const hashes = new Array( 3 );
 
-			const edgeData = {};
-			const vertices = [];
-			for ( let i = 0; i < indexCount; i += 3 ) {
+// 			const edgeData = {};
+// 			const vertices = [];
+// 			for ( let i = 0; i < indexCount; i += 3 ) {
 
-				if ( indexAttr ) {
+// 				if ( indexAttr ) {
 
-					indexArr[ 0 ] = indexAttr.getX( i );
-					indexArr[ 1 ] = indexAttr.getX( i + 1 );
-					indexArr[ 2 ] = indexAttr.getX( i + 2 );
+// 					indexArr[ 0 ] = indexAttr.getX( i );
+// 					indexArr[ 1 ] = indexAttr.getX( i + 1 );
+// 					indexArr[ 2 ] = indexAttr.getX( i + 2 );
 
-				} else {
+// 				} else {
 
-					indexArr[ 0 ] = i;
-					indexArr[ 1 ] = i + 1;
-					indexArr[ 2 ] = i + 2;
+// 					indexArr[ 0 ] = i;
+// 					indexArr[ 1 ] = i + 1;
+// 					indexArr[ 2 ] = i + 2;
 
-				}
+// 				}
 
-				const { a, b, c } = _triangle;
-				a.fromBufferAttribute( positionAttr, indexArr[ 0 ] );
-				b.fromBufferAttribute( positionAttr, indexArr[ 1 ] );
-				c.fromBufferAttribute( positionAttr, indexArr[ 2 ] );
-				_triangle.getNormal( _normal );
+// 				const { a, b, c } = _triangle;
+// 				a.fromBufferAttribute( positionAttr, indexArr[ 0 ] );
+// 				b.fromBufferAttribute( positionAttr, indexArr[ 1 ] );
+// 				c.fromBufferAttribute( positionAttr, indexArr[ 2 ] );
+// 				_triangle.getNormal( _normal );
 
-				// create hashes for the edge from the vertices
-				hashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;
-				hashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;
-				hashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;
+// 				// create hashes for the edge from the vertices
+// 				hashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;
+// 				hashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;
+// 				hashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;
 
-				// skip degenerate triangles
-				if ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {
+// 				// skip degenerate triangles
+// 				if ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {
 
-					continue;
+// 					continue;
 
-				}
+// 				}
 
-				// iterate over every edge
-				for ( let j = 0; j < 3; j ++ ) {
+// 				// iterate over every edge
+// 				for ( let j = 0; j < 3; j ++ ) {
 
-					// get the first and next vertex making up the edge
-					const jNext = ( j + 1 ) % 3;
-					const vecHash0 = hashes[ j ];
-					const vecHash1 = hashes[ jNext ];
-					const v0 = _triangle[ vertKeys[ j ] ];
-					const v1 = _triangle[ vertKeys[ jNext ] ];
+// 					// get the first and next vertex making up the edge
+// 					const jNext = ( j + 1 ) % 3;
+// 					const vecHash0 = hashes[ j ];
+// 					const vecHash1 = hashes[ jNext ];
+// 					const v0 = _triangle[ vertKeys[ j ] ];
+// 					const v1 = _triangle[ vertKeys[ jNext ] ];
 
-					const hash = `${ vecHash0 }_${ vecHash1 }`;
-					const reverseHash = `${ vecHash1 }_${ vecHash0 }`;
+// 					const hash = `${ vecHash0 }_${ vecHash1 }`;
+// 					const reverseHash = `${ vecHash1 }_${ vecHash0 }`;
 
-					if ( reverseHash in edgeData && edgeData[ reverseHash ] ) {
+// 					if ( reverseHash in edgeData && edgeData[ reverseHash ] ) {
 
-						// if we found a sibling edge add it into the vertex array if
-						// it meets the angle threshold and delete the edge from the map.
-						if ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {
+// 						// if we found a sibling edge add it into the vertex array if
+// 						// it meets the angle threshold and delete the edge from the map.
+// 						if ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {
 
-							vertices.push( v0.x, v0.y, v0.z );
-							vertices.push( v1.x, v1.y, v1.z );
+// 							vertices.push( v0.x, v0.y, v0.z );
+// 							vertices.push( v1.x, v1.y, v1.z );
 
-						}
+// 						}
 
-						edgeData[ reverseHash ] = null;
+// 						edgeData[ reverseHash ] = null;
 
-					} else if ( ! ( hash in edgeData ) ) {
+// 					} else if ( ! ( hash in edgeData ) ) {
 
-						// if we've already got an edge here then skip adding a new one
-						edgeData[ hash ] = {
+// 						// if we've already got an edge here then skip adding a new one
+// 						edgeData[ hash ] = {
 
-							index0: indexArr[ j ],
-							index1: indexArr[ jNext ],
-							normal: _normal.clone(),
+// 							index0: indexArr[ j ],
+// 							index1: indexArr[ jNext ],
+// 							normal: _normal.clone(),
 
-						};
+// 						};
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// iterate over all remaining, unmatched edges and add them to the vertex array
-			for ( const key in edgeData ) {
+// 			// iterate over all remaining, unmatched edges and add them to the vertex array
+// 			for ( const key in edgeData ) {
 
-				if ( edgeData[ key ] ) {
+// 				if ( edgeData[ key ] ) {
 
-					const { index0, index1 } = edgeData[ key ];
-					_v0.fromBufferAttribute( positionAttr, index0 );
-					_v1$1.fromBufferAttribute( positionAttr, index1 );
+// 					const { index0, index1 } = edgeData[ key ];
+// 					_v0.fromBufferAttribute( positionAttr, index0 );
+// 					_v1$1.fromBufferAttribute( positionAttr, index1 );
 
-					vertices.push( _v0.x, _v0.y, _v0.z );
-					vertices.push( _v1$1.x, _v1$1.y, _v1$1.z );
+// 					vertices.push( _v0.x, _v0.y, _v0.z );
+// 					vertices.push( _v1$1.x, _v1$1.y, _v1$1.z );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-class Shape extends Path {
+// class Shape extends Path {
 
-	constructor( points ) {
+// 	constructor( points ) {
 
-		super( points );
+// 		super( points );
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		this.type = 'Shape';
+// 		this.type = 'Shape';
 
-		this.holes = [];
+// 		this.holes = [];
 
-	}
+// 	}
 
-	getPointsHoles( divisions ) {
+// 	getPointsHoles( divisions ) {
 
-		const holesPts = [];
+// 		const holesPts = [];
 
-		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {
 
-			holesPts[ i ] = this.holes[ i ].getPoints( divisions );
+// 			holesPts[ i ] = this.holes[ i ].getPoints( divisions );
 
-		}
+// 		}
 
-		return holesPts;
+// 		return holesPts;
 
-	}
+// 	}
 
-	// get points of shape and holes (keypoints based on segments parameter)
+// 	// get points of shape and holes (keypoints based on segments parameter)
 
-	extractPoints( divisions ) {
+// 	extractPoints( divisions ) {
 
-		return {
+// 		return {
 
-			shape: this.getPoints( divisions ),
-			holes: this.getPointsHoles( divisions )
+// 			shape: this.getPoints( divisions ),
+// 			holes: this.getPointsHoles( divisions )
 
-		};
+// 		};
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.holes = [];
+// 		this.holes = [];
 
-		for ( let i = 0, l = source.holes.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = source.holes.length; i < l; i ++ ) {
 
-			const hole = source.holes[ i ];
+// 			const hole = source.holes[ i ];
 
-			this.holes.push( hole.clone() );
+// 			this.holes.push( hole.clone() );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.uuid = this.uuid;
-		data.holes = [];
+// 		data.uuid = this.uuid;
+// 		data.holes = [];
 
-		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {
 
-			const hole = this.holes[ i ];
-			data.holes.push( hole.toJSON() );
+// 			const hole = this.holes[ i ];
+// 			data.holes.push( hole.toJSON() );
 
-		}
+// 		}
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		super.fromJSON( json );
+// 		super.fromJSON( json );
 
-		this.uuid = json.uuid;
-		this.holes = [];
+// 		this.uuid = json.uuid;
+// 		this.holes = [];
 
-		for ( let i = 0, l = json.holes.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = json.holes.length; i < l; i ++ ) {
 
-			const hole = json.holes[ i ];
-			this.holes.push( new Path().fromJSON( hole ) );
+// 			const hole = json.holes[ i ];
+// 			this.holes.push( new Path().fromJSON( hole ) );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Port from https://github.com/mapbox/earcut (v2.2.2)
- */
+// /**
+//  * Port from https://github.com/mapbox/earcut (v2.2.2)
+//  */
 
-const Earcut = {
+// const Earcut = {
 
-	triangulate: function ( data, holeIndices, dim = 2 ) {
+// 	triangulate: function ( data, holeIndices, dim = 2 ) {
 
-		const hasHoles = holeIndices && holeIndices.length;
-		const outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;
-		let outerNode = linkedList( data, 0, outerLen, dim, true );
-		const triangles = [];
+// 		const hasHoles = holeIndices && holeIndices.length;
+// 		const outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;
+// 		let outerNode = linkedList( data, 0, outerLen, dim, true );
+// 		const triangles = [];
 
-		if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;
+// 		if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;
 
-		let minX, minY, maxX, maxY, x, y, invSize;
+// 		let minX, minY, maxX, maxY, x, y, invSize;
 
-		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );
+// 		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );
 
-		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
-		if ( data.length > 80 * dim ) {
+// 		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
+// 		if ( data.length > 80 * dim ) {
 
-			minX = maxX = data[ 0 ];
-			minY = maxY = data[ 1 ];
+// 			minX = maxX = data[ 0 ];
+// 			minY = maxY = data[ 1 ];
 
-			for ( let i = dim; i < outerLen; i += dim ) {
+// 			for ( let i = dim; i < outerLen; i += dim ) {
 
-				x = data[ i ];
-				y = data[ i + 1 ];
-				if ( x < minX ) minX = x;
-				if ( y < minY ) minY = y;
-				if ( x > maxX ) maxX = x;
-				if ( y > maxY ) maxY = y;
+// 				x = data[ i ];
+// 				y = data[ i + 1 ];
+// 				if ( x < minX ) minX = x;
+// 				if ( y < minY ) minY = y;
+// 				if ( x > maxX ) maxX = x;
+// 				if ( y > maxY ) maxY = y;
 
-			}
+// 			}
 
-			// minX, minY and invSize are later used to transform coords into integers for z-order calculation
-			invSize = Math.max( maxX - minX, maxY - minY );
-			invSize = invSize !== 0 ? 1 / invSize : 0;
+// 			// minX, minY and invSize are later used to transform coords into integers for z-order calculation
+// 			invSize = Math.max( maxX - minX, maxY - minY );
+// 			invSize = invSize !== 0 ? 1 / invSize : 0;
 
-		}
+// 		}
 
-		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );
+// 		earcutLinked( outerNode, triangles, dim, minX, minY, invSize );
 
-		return triangles;
+// 		return triangles;
 
-	}
+// 	}
 
-};
+// };
 
-// create a circular doubly linked list from polygon points in the specified winding order
-function linkedList( data, start, end, dim, clockwise ) {
+// // create a circular doubly linked list from polygon points in the specified winding order
+// function linkedList( data, start, end, dim, clockwise ) {
 
-	let i, last;
+// 	let i, last;
 
-	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {
+// 	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {
 
-		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
+// 		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
 
-	} else {
+// 	} else {
 
-		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
+// 		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
 
-	}
+// 	}
 
-	if ( last && equals( last, last.next ) ) {
+// 	if ( last && equals( last, last.next ) ) {
 
-		removeNode( last );
-		last = last.next;
+// 		removeNode( last );
+// 		last = last.next;
 
-	}
+// 	}
 
-	return last;
+// 	return last;
 
-}
+// }
 
-// eliminate colinear or duplicate points
-function filterPoints( start, end ) {
+// // eliminate colinear or duplicate points
+// function filterPoints( start, end ) {
 
-	if ( ! start ) return start;
-	if ( ! end ) end = start;
+// 	if ( ! start ) return start;
+// 	if ( ! end ) end = start;
 
-	let p = start,
-		again;
-	do {
+// 	let p = start,
+// 		again;
+// 	do {
 
-		again = false;
+// 		again = false;
 
-		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {
+// 		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {
 
-			removeNode( p );
-			p = end = p.prev;
-			if ( p === p.next ) break;
-			again = true;
+// 			removeNode( p );
+// 			p = end = p.prev;
+// 			if ( p === p.next ) break;
+// 			again = true;
 
-		} else {
+// 		} else {
 
-			p = p.next;
+// 			p = p.next;
 
-		}
+// 		}
 
-	} while ( again || p !== end );
+// 	} while ( again || p !== end );
 
-	return end;
+// 	return end;
 
-}
+// }
 
-// main ear slicing loop which triangulates a polygon (given as a linked list)
-function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {
+// // main ear slicing loop which triangulates a polygon (given as a linked list)
+// function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {
 
-	if ( ! ear ) return;
+// 	if ( ! ear ) return;
 
-	// interlink polygon nodes in z-order
-	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );
+// 	// interlink polygon nodes in z-order
+// 	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );
 
-	let stop = ear,
-		prev, next;
+// 	let stop = ear,
+// 		prev, next;
 
-	// iterate through ears, slicing them one by one
-	while ( ear.prev !== ear.next ) {
+// 	// iterate through ears, slicing them one by one
+// 	while ( ear.prev !== ear.next ) {
 
-		prev = ear.prev;
-		next = ear.next;
+// 		prev = ear.prev;
+// 		next = ear.next;
 
-		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {
+// 		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {
 
-			// cut off the triangle
-			triangles.push( prev.i / dim );
-			triangles.push( ear.i / dim );
-			triangles.push( next.i / dim );
+// 			// cut off the triangle
+// 			triangles.push( prev.i / dim );
+// 			triangles.push( ear.i / dim );
+// 			triangles.push( next.i / dim );
 
-			removeNode( ear );
+// 			removeNode( ear );
 
-			// skipping the next vertex leads to less sliver triangles
-			ear = next.next;
-			stop = next.next;
+// 			// skipping the next vertex leads to less sliver triangles
+// 			ear = next.next;
+// 			stop = next.next;
 
-			continue;
+// 			continue;
 
-		}
+// 		}
 
-		ear = next;
+// 		ear = next;
 
-		// if we looped through the whole remaining polygon and can't find any more ears
-		if ( ear === stop ) {
+// 		// if we looped through the whole remaining polygon and can't find any more ears
+// 		if ( ear === stop ) {
 
-			// try filtering points and slicing again
-			if ( ! pass ) {
+// 			// try filtering points and slicing again
+// 			if ( ! pass ) {
 
-				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );
+// 				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );
 
-				// if this didn't work, try curing all small self-intersections locally
+// 				// if this didn't work, try curing all small self-intersections locally
 
-			} else if ( pass === 1 ) {
+// 			} else if ( pass === 1 ) {
 
-				ear = cureLocalIntersections( filterPoints( ear ), triangles, dim );
-				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );
+// 				ear = cureLocalIntersections( filterPoints( ear ), triangles, dim );
+// 				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );
 
-				// as a last resort, try splitting the remaining polygon into two
+// 				// as a last resort, try splitting the remaining polygon into two
 
-			} else if ( pass === 2 ) {
+// 			} else if ( pass === 2 ) {
 
-				splitEarcut( ear, triangles, dim, minX, minY, invSize );
+// 				splitEarcut( ear, triangles, dim, minX, minY, invSize );
 
-			}
+// 			}
 
-			break;
+// 			break;
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-// check whether a polygon node forms a valid ear with adjacent nodes
-function isEar( ear ) {
+// // check whether a polygon node forms a valid ear with adjacent nodes
+// function isEar( ear ) {
 
-	const a = ear.prev,
-		b = ear,
-		c = ear.next;
+// 	const a = ear.prev,
+// 		b = ear,
+// 		c = ear.next;
 
-	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear
+// 	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear
 
-	// now make sure we don't have other points inside the potential ear
-	let p = ear.next.next;
+// 	// now make sure we don't have other points inside the potential ear
+// 	let p = ear.next.next;
 
-	while ( p !== ear.prev ) {
+// 	while ( p !== ear.prev ) {
 
-		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
-			area( p.prev, p, p.next ) >= 0 ) return false;
-		p = p.next;
+// 		if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
+// 			area( p.prev, p, p.next ) >= 0 ) return false;
+// 		p = p.next;
 
-	}
+// 	}
 
-	return true;
+// 	return true;
 
-}
+// }
 
-function isEarHashed( ear, minX, minY, invSize ) {
+// function isEarHashed( ear, minX, minY, invSize ) {
 
-	const a = ear.prev,
-		b = ear,
-		c = ear.next;
+// 	const a = ear.prev,
+// 		b = ear,
+// 		c = ear.next;
 
-	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear
+// 	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear
 
-	// triangle bbox; min & max are calculated like this for speed
-	const minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
-		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
-		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
-		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );
+// 	// triangle bbox; min & max are calculated like this for speed
+// 	const minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
+// 		minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
+// 		maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
+// 		maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );
 
-	// z-order range for the current triangle bbox;
-	const minZ = zOrder( minTX, minTY, minX, minY, invSize ),
-		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );
+// 	// z-order range for the current triangle bbox;
+// 	const minZ = zOrder( minTX, minTY, minX, minY, invSize ),
+// 		maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );
 
-	let p = ear.prevZ,
-		n = ear.nextZ;
+// 	let p = ear.prevZ,
+// 		n = ear.nextZ;
 
-	// look for points inside the triangle in both directions
-	while ( p && p.z >= minZ && n && n.z <= maxZ ) {
+// 	// look for points inside the triangle in both directions
+// 	while ( p && p.z >= minZ && n && n.z <= maxZ ) {
 
-		if ( p !== ear.prev && p !== ear.next &&
-			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
-			area( p.prev, p, p.next ) >= 0 ) return false;
-		p = p.prevZ;
+// 		if ( p !== ear.prev && p !== ear.next &&
+// 			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
+// 			area( p.prev, p, p.next ) >= 0 ) return false;
+// 		p = p.prevZ;
 
-		if ( n !== ear.prev && n !== ear.next &&
-			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
-			area( n.prev, n, n.next ) >= 0 ) return false;
-		n = n.nextZ;
+// 		if ( n !== ear.prev && n !== ear.next &&
+// 			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
+// 			area( n.prev, n, n.next ) >= 0 ) return false;
+// 		n = n.nextZ;
 
-	}
+// 	}
 
-	// look for remaining points in decreasing z-order
-	while ( p && p.z >= minZ ) {
+// 	// look for remaining points in decreasing z-order
+// 	while ( p && p.z >= minZ ) {
 
-		if ( p !== ear.prev && p !== ear.next &&
-			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
-			area( p.prev, p, p.next ) >= 0 ) return false;
-		p = p.prevZ;
+// 		if ( p !== ear.prev && p !== ear.next &&
+// 			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
+// 			area( p.prev, p, p.next ) >= 0 ) return false;
+// 		p = p.prevZ;
 
-	}
+// 	}
 
-	// look for remaining points in increasing z-order
-	while ( n && n.z <= maxZ ) {
+// 	// look for remaining points in increasing z-order
+// 	while ( n && n.z <= maxZ ) {
 
-		if ( n !== ear.prev && n !== ear.next &&
-			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
-			area( n.prev, n, n.next ) >= 0 ) return false;
-		n = n.nextZ;
+// 		if ( n !== ear.prev && n !== ear.next &&
+// 			pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
+// 			area( n.prev, n, n.next ) >= 0 ) return false;
+// 		n = n.nextZ;
 
-	}
+// 	}
 
-	return true;
+// 	return true;
 
-}
+// }
 
-// go through all polygon nodes and cure small local self-intersections
-function cureLocalIntersections( start, triangles, dim ) {
+// // go through all polygon nodes and cure small local self-intersections
+// function cureLocalIntersections( start, triangles, dim ) {
 
-	let p = start;
-	do {
+// 	let p = start;
+// 	do {
 
-		const a = p.prev,
-			b = p.next.next;
+// 		const a = p.prev,
+// 			b = p.next.next;
 
-		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {
+// 		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {
 
-			triangles.push( a.i / dim );
-			triangles.push( p.i / dim );
-			triangles.push( b.i / dim );
+// 			triangles.push( a.i / dim );
+// 			triangles.push( p.i / dim );
+// 			triangles.push( b.i / dim );
 
-			// remove two nodes involved
-			removeNode( p );
-			removeNode( p.next );
+// 			// remove two nodes involved
+// 			removeNode( p );
+// 			removeNode( p.next );
 
-			p = start = b;
+// 			p = start = b;
 
-		}
+// 		}
 
-		p = p.next;
+// 		p = p.next;
 
-	} while ( p !== start );
+// 	} while ( p !== start );
 
-	return filterPoints( p );
+// 	return filterPoints( p );
 
-}
+// }
 
-// try splitting polygon into two and triangulate them independently
-function splitEarcut( start, triangles, dim, minX, minY, invSize ) {
+// // try splitting polygon into two and triangulate them independently
+// function splitEarcut( start, triangles, dim, minX, minY, invSize ) {
 
-	// look for a valid diagonal that divides the polygon into two
-	let a = start;
-	do {
+// 	// look for a valid diagonal that divides the polygon into two
+// 	let a = start;
+// 	do {
 
-		let b = a.next.next;
-		while ( b !== a.prev ) {
+// 		let b = a.next.next;
+// 		while ( b !== a.prev ) {
 
-			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {
+// 			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {
 
-				// split the polygon in two by the diagonal
-				let c = splitPolygon( a, b );
+// 				// split the polygon in two by the diagonal
+// 				let c = splitPolygon( a, b );
 
-				// filter colinear points around the cuts
-				a = filterPoints( a, a.next );
-				c = filterPoints( c, c.next );
+// 				// filter colinear points around the cuts
+// 				a = filterPoints( a, a.next );
+// 				c = filterPoints( c, c.next );
 
-				// run earcut on each half
-				earcutLinked( a, triangles, dim, minX, minY, invSize );
-				earcutLinked( c, triangles, dim, minX, minY, invSize );
-				return;
+// 				// run earcut on each half
+// 				earcutLinked( a, triangles, dim, minX, minY, invSize );
+// 				earcutLinked( c, triangles, dim, minX, minY, invSize );
+// 				return;
 
-			}
+// 			}
 
-			b = b.next;
+// 			b = b.next;
 
-		}
+// 		}
 
-		a = a.next;
+// 		a = a.next;
 
-	} while ( a !== start );
+// 	} while ( a !== start );
 
-}
+// }
 
-// link every hole into the outer loop, producing a single-ring polygon without holes
-function eliminateHoles( data, holeIndices, outerNode, dim ) {
+// // link every hole into the outer loop, producing a single-ring polygon without holes
+// function eliminateHoles( data, holeIndices, outerNode, dim ) {
 
-	const queue = [];
-	let i, len, start, end, list;
+// 	const queue = [];
+// 	let i, len, start, end, list;
 
-	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {
+// 	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {
 
-		start = holeIndices[ i ] * dim;
-		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
-		list = linkedList( data, start, end, dim, false );
-		if ( list === list.next ) list.steiner = true;
-		queue.push( getLeftmost( list ) );
+// 		start = holeIndices[ i ] * dim;
+// 		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
+// 		list = linkedList( data, start, end, dim, false );
+// 		if ( list === list.next ) list.steiner = true;
+// 		queue.push( getLeftmost( list ) );
 
-	}
+// 	}
 
-	queue.sort( compareX );
+// 	queue.sort( compareX );
 
-	// process holes from left to right
-	for ( i = 0; i < queue.length; i ++ ) {
+// 	// process holes from left to right
+// 	for ( i = 0; i < queue.length; i ++ ) {
 
-		eliminateHole( queue[ i ], outerNode );
-		outerNode = filterPoints( outerNode, outerNode.next );
+// 		eliminateHole( queue[ i ], outerNode );
+// 		outerNode = filterPoints( outerNode, outerNode.next );
 
-	}
+// 	}
 
-	return outerNode;
+// 	return outerNode;
 
-}
+// }
 
-function compareX( a, b ) {
+// function compareX( a, b ) {
 
-	return a.x - b.x;
+// 	return a.x - b.x;
 
-}
+// }
 
-// find a bridge between vertices that connects hole with an outer ring and link it
-function eliminateHole( hole, outerNode ) {
+// // find a bridge between vertices that connects hole with an outer ring and link it
+// function eliminateHole( hole, outerNode ) {
 
-	outerNode = findHoleBridge( hole, outerNode );
-	if ( outerNode ) {
+// 	outerNode = findHoleBridge( hole, outerNode );
+// 	if ( outerNode ) {
 
-		const b = splitPolygon( outerNode, hole );
+// 		const b = splitPolygon( outerNode, hole );
 
-		// filter collinear points around the cuts
-		filterPoints( outerNode, outerNode.next );
-		filterPoints( b, b.next );
+// 		// filter collinear points around the cuts
+// 		filterPoints( outerNode, outerNode.next );
+// 		filterPoints( b, b.next );
 
-	}
+// 	}
 
-}
+// }
 
-// David Eberly's algorithm for finding a bridge between hole and outer polygon
-function findHoleBridge( hole, outerNode ) {
+// // David Eberly's algorithm for finding a bridge between hole and outer polygon
+// function findHoleBridge( hole, outerNode ) {
 
-	let p = outerNode;
-	const hx = hole.x;
-	const hy = hole.y;
-	let qx = - Infinity, m;
+// 	let p = outerNode;
+// 	const hx = hole.x;
+// 	const hy = hole.y;
+// 	let qx = - Infinity, m;
 
-	// find a segment intersected by a ray from the hole's leftmost point to the left;
-	// segment's endpoint with lesser x will be potential connection point
-	do {
+// 	// find a segment intersected by a ray from the hole's leftmost point to the left;
+// 	// segment's endpoint with lesser x will be potential connection point
+// 	do {
 
-		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {
+// 		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {
 
-			const x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
-			if ( x <= hx && x > qx ) {
+// 			const x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
+// 			if ( x <= hx && x > qx ) {
 
-				qx = x;
-				if ( x === hx ) {
+// 				qx = x;
+// 				if ( x === hx ) {
 
-					if ( hy === p.y ) return p;
-					if ( hy === p.next.y ) return p.next;
+// 					if ( hy === p.y ) return p;
+// 					if ( hy === p.next.y ) return p.next;
 
-				}
+// 				}
 
-				m = p.x < p.next.x ? p : p.next;
+// 				m = p.x < p.next.x ? p : p.next;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		p = p.next;
+// 		p = p.next;
 
-	} while ( p !== outerNode );
+// 	} while ( p !== outerNode );
 
-	if ( ! m ) return null;
+// 	if ( ! m ) return null;
 
-	if ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint
+// 	if ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint
 
-	// look for points inside the triangle of hole point, segment intersection and endpoint;
-	// if there are no points found, we have a valid connection;
-	// otherwise choose the point of the minimum angle with the ray as connection point
+// 	// look for points inside the triangle of hole point, segment intersection and endpoint;
+// 	// if there are no points found, we have a valid connection;
+// 	// otherwise choose the point of the minimum angle with the ray as connection point
 
-	const stop = m,
-		mx = m.x,
-		my = m.y;
-	let tanMin = Infinity, tan;
+// 	const stop = m,
+// 		mx = m.x,
+// 		my = m.y;
+// 	let tanMin = Infinity, tan;
 
-	p = m;
+// 	p = m;
 
-	do {
+// 	do {
 
-		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
-				pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {
+// 		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
+// 				pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {
 
-			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential
+// 			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential
 
-			if ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {
+// 			if ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {
 
-				m = p;
-				tanMin = tan;
+// 				m = p;
+// 				tanMin = tan;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		p = p.next;
+// 		p = p.next;
 
-	} while ( p !== stop );
+// 	} while ( p !== stop );
 
-	return m;
+// 	return m;
 
-}
+// }
 
-// whether sector in vertex m contains sector in vertex p in the same coordinates
-function sectorContainsSector( m, p ) {
+// // whether sector in vertex m contains sector in vertex p in the same coordinates
+// function sectorContainsSector( m, p ) {
 
-	return area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;
+// 	return area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;
 
-}
+// }
 
-// interlink polygon nodes in z-order
-function indexCurve( start, minX, minY, invSize ) {
+// // interlink polygon nodes in z-order
+// function indexCurve( start, minX, minY, invSize ) {
 
-	let p = start;
-	do {
+// 	let p = start;
+// 	do {
 
-		if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
-		p.prevZ = p.prev;
-		p.nextZ = p.next;
-		p = p.next;
+// 		if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
+// 		p.prevZ = p.prev;
+// 		p.nextZ = p.next;
+// 		p = p.next;
 
-	} while ( p !== start );
+// 	} while ( p !== start );
 
-	p.prevZ.nextZ = null;
-	p.prevZ = null;
+// 	p.prevZ.nextZ = null;
+// 	p.prevZ = null;
 
-	sortLinked( p );
+// 	sortLinked( p );
 
-}
+// }
 
-// Simon Tatham's linked list merge sort algorithm
-// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
-function sortLinked( list ) {
+// // Simon Tatham's linked list merge sort algorithm
+// // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
+// function sortLinked( list ) {
 
-	let i, p, q, e, tail, numMerges, pSize, qSize,
-		inSize = 1;
+// 	let i, p, q, e, tail, numMerges, pSize, qSize,
+// 		inSize = 1;
 
-	do {
+// 	do {
 
-		p = list;
-		list = null;
-		tail = null;
-		numMerges = 0;
+// 		p = list;
+// 		list = null;
+// 		tail = null;
+// 		numMerges = 0;
 
-		while ( p ) {
+// 		while ( p ) {
 
-			numMerges ++;
-			q = p;
-			pSize = 0;
-			for ( i = 0; i < inSize; i ++ ) {
+// 			numMerges ++;
+// 			q = p;
+// 			pSize = 0;
+// 			for ( i = 0; i < inSize; i ++ ) {
 
-				pSize ++;
-				q = q.nextZ;
-				if ( ! q ) break;
+// 				pSize ++;
+// 				q = q.nextZ;
+// 				if ( ! q ) break;
 
-			}
+// 			}
 
-			qSize = inSize;
+// 			qSize = inSize;
 
-			while ( pSize > 0 || ( qSize > 0 && q ) ) {
+// 			while ( pSize > 0 || ( qSize > 0 && q ) ) {
 
-				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {
+// 				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {
 
-					e = p;
-					p = p.nextZ;
-					pSize --;
+// 					e = p;
+// 					p = p.nextZ;
+// 					pSize --;
 
-				} else {
+// 				} else {
 
-					e = q;
-					q = q.nextZ;
-					qSize --;
+// 					e = q;
+// 					q = q.nextZ;
+// 					qSize --;
 
-				}
+// 				}
 
-				if ( tail ) tail.nextZ = e;
-				else list = e;
+// 				if ( tail ) tail.nextZ = e;
+// 				else list = e;
 
-				e.prevZ = tail;
-				tail = e;
+// 				e.prevZ = tail;
+// 				tail = e;
 
-			}
+// 			}
 
-			p = q;
+// 			p = q;
 
-		}
+// 		}
 
-		tail.nextZ = null;
-		inSize *= 2;
+// 		tail.nextZ = null;
+// 		inSize *= 2;
 
-	} while ( numMerges > 1 );
+// 	} while ( numMerges > 1 );
 
-	return list;
+// 	return list;
 
-}
+// }
 
-// z-order of a point given coords and inverse of the longer side of data bbox
-function zOrder( x, y, minX, minY, invSize ) {
+// // z-order of a point given coords and inverse of the longer side of data bbox
+// function zOrder( x, y, minX, minY, invSize ) {
 
-	// coords are transformed into non-negative 15-bit integer range
-	x = 32767 * ( x - minX ) * invSize;
-	y = 32767 * ( y - minY ) * invSize;
+// 	// coords are transformed into non-negative 15-bit integer range
+// 	x = 32767 * ( x - minX ) * invSize;
+// 	y = 32767 * ( y - minY ) * invSize;
 
-	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
-	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
-	x = ( x | ( x << 2 ) ) & 0x33333333;
-	x = ( x | ( x << 1 ) ) & 0x55555555;
+// 	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
+// 	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
+// 	x = ( x | ( x << 2 ) ) & 0x33333333;
+// 	x = ( x | ( x << 1 ) ) & 0x55555555;
 
-	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
-	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
-	y = ( y | ( y << 2 ) ) & 0x33333333;
-	y = ( y | ( y << 1 ) ) & 0x55555555;
+// 	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
+// 	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
+// 	y = ( y | ( y << 2 ) ) & 0x33333333;
+// 	y = ( y | ( y << 1 ) ) & 0x55555555;
 
-	return x | ( y << 1 );
+// 	return x | ( y << 1 );
 
-}
+// }
 
-// find the leftmost node of a polygon ring
-function getLeftmost( start ) {
+// // find the leftmost node of a polygon ring
+// function getLeftmost( start ) {
 
-	let p = start,
-		leftmost = start;
-	do {
+// 	let p = start,
+// 		leftmost = start;
+// 	do {
 
-		if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;
-		p = p.next;
+// 		if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;
+// 		p = p.next;
 
-	} while ( p !== start );
+// 	} while ( p !== start );
 
-	return leftmost;
+// 	return leftmost;
 
-}
+// }
 
-// check if a point lies within a convex triangle
-function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {
+// // check if a point lies within a convex triangle
+// function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {
 
-	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
-			( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
-			( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;
+// 	return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
+// 			( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
+// 			( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;
 
-}
+// }
 
-// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
-function isValidDiagonal( a, b ) {
+// // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
+// function isValidDiagonal( a, b ) {
 
-	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // doesn't intersect other edges
-		( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible
-		( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors
-		equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case
+// 	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // doesn't intersect other edges
+// 		( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible
+// 		( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors
+// 		equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case
 
-}
+// }
 
-// signed area of a triangle
-function area( p, q, r ) {
+// // signed area of a triangle
+// function area( p, q, r ) {
 
-	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );
+// 	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );
 
-}
+// }
 
-// check if two points are equal
-function equals( p1, p2 ) {
+// // check if two points are equal
+// function equals( p1, p2 ) {
 
-	return p1.x === p2.x && p1.y === p2.y;
+// 	return p1.x === p2.x && p1.y === p2.y;
 
-}
+// }
 
-// check if two segments intersect
-function intersects( p1, q1, p2, q2 ) {
+// // check if two segments intersect
+// function intersects( p1, q1, p2, q2 ) {
 
-	const o1 = sign( area( p1, q1, p2 ) );
-	const o2 = sign( area( p1, q1, q2 ) );
-	const o3 = sign( area( p2, q2, p1 ) );
-	const o4 = sign( area( p2, q2, q1 ) );
+// 	const o1 = sign( area( p1, q1, p2 ) );
+// 	const o2 = sign( area( p1, q1, q2 ) );
+// 	const o3 = sign( area( p2, q2, p1 ) );
+// 	const o4 = sign( area( p2, q2, q1 ) );
 
-	if ( o1 !== o2 && o3 !== o4 ) return true; // general case
+// 	if ( o1 !== o2 && o3 !== o4 ) return true; // general case
 
-	if ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
-	if ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
-	if ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
-	if ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
+// 	if ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
+// 	if ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
+// 	if ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
+// 	if ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
 
-	return false;
+// 	return false;
 
-}
+// }
 
-// for collinear points p, q, r, check if point q lies on segment pr
-function onSegment( p, q, r ) {
+// // for collinear points p, q, r, check if point q lies on segment pr
+// function onSegment( p, q, r ) {
 
-	return q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );
+// 	return q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );
 
-}
+// }
 
-function sign( num ) {
+// function sign( num ) {
 
-	return num > 0 ? 1 : num < 0 ? - 1 : 0;
+// 	return num > 0 ? 1 : num < 0 ? - 1 : 0;
 
-}
+// }
 
-// check if a polygon diagonal intersects any polygon segments
-function intersectsPolygon( a, b ) {
+// // check if a polygon diagonal intersects any polygon segments
+// function intersectsPolygon( a, b ) {
 
-	let p = a;
-	do {
+// 	let p = a;
+// 	do {
 
-		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
-				intersects( p, p.next, a, b ) ) return true;
-		p = p.next;
+// 		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
+// 				intersects( p, p.next, a, b ) ) return true;
+// 		p = p.next;
 
-	} while ( p !== a );
+// 	} while ( p !== a );
 
-	return false;
+// 	return false;
 
-}
+// }
 
-// check if a polygon diagonal is locally inside the polygon
-function locallyInside( a, b ) {
+// // check if a polygon diagonal is locally inside the polygon
+// function locallyInside( a, b ) {
 
-	return area( a.prev, a, a.next ) < 0 ?
-		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
-		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;
+// 	return area( a.prev, a, a.next ) < 0 ?
+// 		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
+// 		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;
 
-}
+// }
 
-// check if the middle point of a polygon diagonal is inside the polygon
-function middleInside( a, b ) {
+// // check if the middle point of a polygon diagonal is inside the polygon
+// function middleInside( a, b ) {
 
-	let p = a,
-		inside = false;
-	const px = ( a.x + b.x ) / 2,
-		py = ( a.y + b.y ) / 2;
-	do {
+// 	let p = a,
+// 		inside = false;
+// 	const px = ( a.x + b.x ) / 2,
+// 		py = ( a.y + b.y ) / 2;
+// 	do {
 
-		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
-				( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
-			inside = ! inside;
-		p = p.next;
+// 		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
+// 				( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
+// 			inside = ! inside;
+// 		p = p.next;
 
-	} while ( p !== a );
+// 	} while ( p !== a );
 
-	return inside;
+// 	return inside;
 
-}
+// }
 
-// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
-// if one belongs to the outer ring and another to a hole, it merges it into a single ring
-function splitPolygon( a, b ) {
+// // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
+// // if one belongs to the outer ring and another to a hole, it merges it into a single ring
+// function splitPolygon( a, b ) {
 
-	const a2 = new Node( a.i, a.x, a.y ),
-		b2 = new Node( b.i, b.x, b.y ),
-		an = a.next,
-		bp = b.prev;
+// 	const a2 = new Node( a.i, a.x, a.y ),
+// 		b2 = new Node( b.i, b.x, b.y ),
+// 		an = a.next,
+// 		bp = b.prev;
 
-	a.next = b;
-	b.prev = a;
+// 	a.next = b;
+// 	b.prev = a;
 
-	a2.next = an;
-	an.prev = a2;
+// 	a2.next = an;
+// 	an.prev = a2;
 
-	b2.next = a2;
-	a2.prev = b2;
+// 	b2.next = a2;
+// 	a2.prev = b2;
 
-	bp.next = b2;
-	b2.prev = bp;
+// 	bp.next = b2;
+// 	b2.prev = bp;
 
-	return b2;
+// 	return b2;
 
-}
+// }
 
-// create a node and optionally link it with previous one (in a circular doubly linked list)
-function insertNode( i, x, y, last ) {
+// // create a node and optionally link it with previous one (in a circular doubly linked list)
+// function insertNode( i, x, y, last ) {
 
-	const p = new Node( i, x, y );
+// 	const p = new Node( i, x, y );
 
-	if ( ! last ) {
+// 	if ( ! last ) {
 
-		p.prev = p;
-		p.next = p;
+// 		p.prev = p;
+// 		p.next = p;
 
-	} else {
+// 	} else {
 
-		p.next = last.next;
-		p.prev = last;
-		last.next.prev = p;
-		last.next = p;
+// 		p.next = last.next;
+// 		p.prev = last;
+// 		last.next.prev = p;
+// 		last.next = p;
 
-	}
+// 	}
 
-	return p;
+// 	return p;
 
-}
+// }
 
-function removeNode( p ) {
+// function removeNode( p ) {
 
-	p.next.prev = p.prev;
-	p.prev.next = p.next;
+// 	p.next.prev = p.prev;
+// 	p.prev.next = p.next;
 
-	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
-	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;
+// 	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
+// 	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;
 
-}
+// }
 
-function Node( i, x, y ) {
+// function Node( i, x, y ) {
 
-	// vertex index in coordinates array
-	this.i = i;
+// 	// vertex index in coordinates array
+// 	this.i = i;
 
-	// vertex coordinates
-	this.x = x;
-	this.y = y;
+// 	// vertex coordinates
+// 	this.x = x;
+// 	this.y = y;
 
-	// previous and next vertex nodes in a polygon ring
-	this.prev = null;
-	this.next = null;
+// 	// previous and next vertex nodes in a polygon ring
+// 	this.prev = null;
+// 	this.next = null;
 
-	// z-order curve value
-	this.z = null;
+// 	// z-order curve value
+// 	this.z = null;
 
-	// previous and next nodes in z-order
-	this.prevZ = null;
-	this.nextZ = null;
+// 	// previous and next nodes in z-order
+// 	this.prevZ = null;
+// 	this.nextZ = null;
 
-	// indicates whether this is a steiner point
-	this.steiner = false;
+// 	// indicates whether this is a steiner point
+// 	this.steiner = false;
 
-}
+// }
 
-function signedArea( data, start, end, dim ) {
+// function signedArea( data, start, end, dim ) {
 
-	let sum = 0;
-	for ( let i = start, j = end - dim; i < end; i += dim ) {
+// 	let sum = 0;
+// 	for ( let i = start, j = end - dim; i < end; i += dim ) {
 
-		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
-		j = i;
+// 		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
+// 		j = i;
 
-	}
+// 	}
 
-	return sum;
+// 	return sum;
 
-}
+// }
 
-class ShapeUtils {
+// class ShapeUtils {
 
-	// calculate area of the contour polygon
+// 	// calculate area of the contour polygon
 
-	static area( contour ) {
+// 	static area( contour ) {
 
-		const n = contour.length;
-		let a = 0.0;
+// 		const n = contour.length;
+// 		let a = 0.0;
 
-		for ( let p = n - 1, q = 0; q < n; p = q ++ ) {
+// 		for ( let p = n - 1, q = 0; q < n; p = q ++ ) {
 
-			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
+// 			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
 
-		}
+// 		}
 
-		return a * 0.5;
+// 		return a * 0.5;
 
-	}
+// 	}
 
-	static isClockWise( pts ) {
+// 	static isClockWise( pts ) {
 
-		return ShapeUtils.area( pts ) < 0;
+// 		return ShapeUtils.area( pts ) < 0;
 
-	}
+// 	}
 
-	static triangulateShape( contour, holes ) {
+// 	static triangulateShape( contour, holes ) {
 
-		const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
-		const holeIndices = []; // array of hole indices
-		const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
+// 		const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
+// 		const holeIndices = []; // array of hole indices
+// 		const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
 
-		removeDupEndPts( contour );
-		addContour( vertices, contour );
+// 		removeDupEndPts( contour );
+// 		addContour( vertices, contour );
 
-		//
+// 		//
 
-		let holeIndex = contour.length;
+// 		let holeIndex = contour.length;
 
-		holes.forEach( removeDupEndPts );
+// 		holes.forEach( removeDupEndPts );
 
-		for ( let i = 0; i < holes.length; i ++ ) {
+// 		for ( let i = 0; i < holes.length; i ++ ) {
 
-			holeIndices.push( holeIndex );
-			holeIndex += holes[ i ].length;
-			addContour( vertices, holes[ i ] );
+// 			holeIndices.push( holeIndex );
+// 			holeIndex += holes[ i ].length;
+// 			addContour( vertices, holes[ i ] );
 
-		}
+// 		}
 
-		//
+// 		//
 
-		const triangles = Earcut.triangulate( vertices, holeIndices );
+// 		const triangles = Earcut.triangulate( vertices, holeIndices );
 
-		//
+// 		//
 
-		for ( let i = 0; i < triangles.length; i += 3 ) {
+// 		for ( let i = 0; i < triangles.length; i += 3 ) {
 
-			faces.push( triangles.slice( i, i + 3 ) );
+// 			faces.push( triangles.slice( i, i + 3 ) );
 
-		}
+// 		}
 
-		return faces;
+// 		return faces;
 
-	}
+// 	}
 
-}
+// }
 
-function removeDupEndPts( points ) {
+// function removeDupEndPts( points ) {
 
-	const l = points.length;
+// 	const l = points.length;
 
-	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {
+// 	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {
 
-		points.pop();
+// 		points.pop();
 
-	}
+// 	}
 
-}
+// }
 
-function addContour( vertices, contour ) {
+// function addContour( vertices, contour ) {
 
-	for ( let i = 0; i < contour.length; i ++ ) {
+// 	for ( let i = 0; i < contour.length; i ++ ) {
 
-		vertices.push( contour[ i ].x );
-		vertices.push( contour[ i ].y );
+// 		vertices.push( contour[ i ].x );
+// 		vertices.push( contour[ i ].y );
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Creates extruded geometry from a path shape.
- *
- * parameters = {
- *
- *  curveSegments: <int>, // number of points on the curves
- *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
- *  depth: <float>, // Depth to extrude the shape
- *
- *  bevelEnabled: <bool>, // turn on bevel
- *  bevelThickness: <float>, // how deep into the original shape bevel goes
- *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
- *  bevelOffset: <float>, // how far from shape outline does bevel start
- *  bevelSegments: <int>, // number of bevel layers
- *
- *  extrudePath: <THREE.Curve> // curve to extrude shape along
- *
- *  UVGenerator: <Object> // object that provides UV generator functions
- *
- * }
- */
+// /**
+//  * Creates extruded geometry from a path shape.
+//  *
+//  * parameters = {
+//  *
+//  *  curveSegments: <int>, // number of points on the curves
+//  *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
+//  *  depth: <float>, // Depth to extrude the shape
+//  *
+//  *  bevelEnabled: <bool>, // turn on bevel
+//  *  bevelThickness: <float>, // how deep into the original shape bevel goes
+//  *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
+//  *  bevelOffset: <float>, // how far from shape outline does bevel start
+//  *  bevelSegments: <int>, // number of bevel layers
+//  *
+//  *  extrudePath: <THREE.Curve> // curve to extrude shape along
+//  *
+//  *  UVGenerator: <Object> // object that provides UV generator functions
+//  *
+//  * }
+//  */
 
-class ExtrudeGeometry extends BufferGeometry {
+// class ExtrudeGeometry extends BufferGeometry {
 
-	constructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {
+// 	constructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {
 
-		super();
+// 		super();
 
-		this.type = 'ExtrudeGeometry';
+// 		this.type = 'ExtrudeGeometry';
 
-		this.parameters = {
-			shapes: shapes,
-			options: options
-		};
+// 		this.parameters = {
+// 			shapes: shapes,
+// 			options: options
+// 		};
 
-		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
+// 		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
 
-		const scope = this;
+// 		const scope = this;
 
-		const verticesArray = [];
-		const uvArray = [];
+// 		const verticesArray = [];
+// 		const uvArray = [];
 
-		for ( let i = 0, l = shapes.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = shapes.length; i < l; i ++ ) {
 
-			const shape = shapes[ i ];
-			addShape( shape );
+// 			const shape = shapes[ i ];
+// 			addShape( shape );
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );
 
-		this.computeVertexNormals();
+// 		this.computeVertexNormals();
 
-		// functions
+// 		// functions
 
-		function addShape( shape ) {
+// 		function addShape( shape ) {
 
-			const placeholder = [];
+// 			const placeholder = [];
 
-			// options
+// 			// options
 
-			const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
-			const steps = options.steps !== undefined ? options.steps : 1;
-			const depth = options.depth !== undefined ? options.depth : 1;
+// 			const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
+// 			const steps = options.steps !== undefined ? options.steps : 1;
+// 			const depth = options.depth !== undefined ? options.depth : 1;
 
-			let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
-			let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
-			let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
-			let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
-			let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
+// 			let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
+// 			let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
+// 			let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
+// 			let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
+// 			let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
 
-			const extrudePath = options.extrudePath;
+// 			const extrudePath = options.extrudePath;
 
-			const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
+// 			const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
 
-			//
+// 			//
 
-			let extrudePts, extrudeByPath = false;
-			let splineTube, binormal, normal, position2;
+// 			let extrudePts, extrudeByPath = false;
+// 			let splineTube, binormal, normal, position2;
 
-			if ( extrudePath ) {
+// 			if ( extrudePath ) {
 
-				extrudePts = extrudePath.getSpacedPoints( steps );
+// 				extrudePts = extrudePath.getSpacedPoints( steps );
 
-				extrudeByPath = true;
-				bevelEnabled = false; // bevels not supported for path extrusion
+// 				extrudeByPath = true;
+// 				bevelEnabled = false; // bevels not supported for path extrusion
 
-				// SETUP TNB variables
+// 				// SETUP TNB variables
 
-				// TODO1 - have a .isClosed in spline?
+// 				// TODO1 - have a .isClosed in spline?
 
-				splineTube = extrudePath.computeFrenetFrames( steps, false );
+// 				splineTube = extrudePath.computeFrenetFrames( steps, false );
 
-				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
+// 				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
 
-				binormal = new Vector3();
-				normal = new Vector3();
-				position2 = new Vector3();
+// 				binormal = new Vector3();
+// 				normal = new Vector3();
+// 				position2 = new Vector3();
 
-			}
+// 			}
 
-			// Safeguards if bevels are not enabled
+// 			// Safeguards if bevels are not enabled
 
-			if ( ! bevelEnabled ) {
+// 			if ( ! bevelEnabled ) {
 
-				bevelSegments = 0;
-				bevelThickness = 0;
-				bevelSize = 0;
-				bevelOffset = 0;
+// 				bevelSegments = 0;
+// 				bevelThickness = 0;
+// 				bevelSize = 0;
+// 				bevelOffset = 0;
 
-			}
+// 			}
 
-			// Variables initialization
+// 			// Variables initialization
 
-			const shapePoints = shape.extractPoints( curveSegments );
+// 			const shapePoints = shape.extractPoints( curveSegments );
 
-			let vertices = shapePoints.shape;
-			const holes = shapePoints.holes;
+// 			let vertices = shapePoints.shape;
+// 			const holes = shapePoints.holes;
 
-			const reverse = ! ShapeUtils.isClockWise( vertices );
+// 			const reverse = ! ShapeUtils.isClockWise( vertices );
 
-			if ( reverse ) {
+// 			if ( reverse ) {
 
-				vertices = vertices.reverse();
+// 				vertices = vertices.reverse();
 
-				// Maybe we should also check if holes are in the opposite direction, just to be safe ...
+// 				// Maybe we should also check if holes are in the opposite direction, just to be safe ...
 
-				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
+// 				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
 
-					const ahole = holes[ h ];
+// 					const ahole = holes[ h ];
 
-					if ( ShapeUtils.isClockWise( ahole ) ) {
+// 					if ( ShapeUtils.isClockWise( ahole ) ) {
 
-						holes[ h ] = ahole.reverse();
+// 						holes[ h ] = ahole.reverse();
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
 
-			const faces = ShapeUtils.triangulateShape( vertices, holes );
+// 			const faces = ShapeUtils.triangulateShape( vertices, holes );
 
-			/* Vertices */
+// 			/* Vertices */
 
-			const contour = vertices; // vertices has all points but contour has only points of circumference
+// 			const contour = vertices; // vertices has all points but contour has only points of circumference
 
-			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
+// 			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
 
-				const ahole = holes[ h ];
+// 				const ahole = holes[ h ];
 
-				vertices = vertices.concat( ahole );
+// 				vertices = vertices.concat( ahole );
 
-			}
+// 			}
 
 
-			function scalePt2( pt, vec, size ) {
+// 			function scalePt2( pt, vec, size ) {
 
-				if ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );
+// 				if ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );
 
-				return vec.clone().multiplyScalar( size ).add( pt );
+// 				return vec.clone().multiplyScalar( size ).add( pt );
 
-			}
+// 			}
 
-			const vlen = vertices.length, flen = faces.length;
+// 			const vlen = vertices.length, flen = faces.length;
 
 
-			// Find directions for point movement
+// 			// Find directions for point movement
 
 
-			function getBevelVec( inPt, inPrev, inNext ) {
+// 			function getBevelVec( inPt, inPrev, inNext ) {
 
-				// computes for inPt the corresponding point inPt' on a new contour
-				//   shifted by 1 unit (length of normalized vector) to the left
-				// if we walk along contour clockwise, this new contour is outside the old one
-				//
-				// inPt' is the intersection of the two lines parallel to the two
-				//  adjacent edges of inPt at a distance of 1 unit on the left side.
+// 				// computes for inPt the corresponding point inPt' on a new contour
+// 				//   shifted by 1 unit (length of normalized vector) to the left
+// 				// if we walk along contour clockwise, this new contour is outside the old one
+// 				//
+// 				// inPt' is the intersection of the two lines parallel to the two
+// 				//  adjacent edges of inPt at a distance of 1 unit on the left side.
 
-				let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
+// 				let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
 
-				// good reading for geometry algorithms (here: line-line intersection)
-				// http://geomalgorithms.com/a05-_intersect-1.html
+// 				// good reading for geometry algorithms (here: line-line intersection)
+// 				// http://geomalgorithms.com/a05-_intersect-1.html
 
-				const v_prev_x = inPt.x - inPrev.x,
-					v_prev_y = inPt.y - inPrev.y;
-				const v_next_x = inNext.x - inPt.x,
-					v_next_y = inNext.y - inPt.y;
+// 				const v_prev_x = inPt.x - inPrev.x,
+// 					v_prev_y = inPt.y - inPrev.y;
+// 				const v_next_x = inNext.x - inPt.x,
+// 					v_next_y = inNext.y - inPt.y;
 
-				const v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
+// 				const v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
 
-				// check for collinear edges
-				const collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
+// 				// check for collinear edges
+// 				const collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
 
-				if ( Math.abs( collinear0 ) > Number.EPSILON ) {
+// 				if ( Math.abs( collinear0 ) > Number.EPSILON ) {
 
-					// not collinear
+// 					// not collinear
 
-					// length of vectors for normalizing
+// 					// length of vectors for normalizing
 
-					const v_prev_len = Math.sqrt( v_prev_lensq );
-					const v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
+// 					const v_prev_len = Math.sqrt( v_prev_lensq );
+// 					const v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
 
-					// shift adjacent points by unit vectors to the left
+// 					// shift adjacent points by unit vectors to the left
 
-					const ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
-					const ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
+// 					const ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
+// 					const ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
 
-					const ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
-					const ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
+// 					const ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
+// 					const ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
 
-					// scaling factor for v_prev to intersection point
+// 					// scaling factor for v_prev to intersection point
 
-					const sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
-							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
-						( v_prev_x * v_next_y - v_prev_y * v_next_x );
+// 					const sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
+// 							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
+// 						( v_prev_x * v_next_y - v_prev_y * v_next_x );
 
-					// vector from inPt to intersection point
+// 					// vector from inPt to intersection point
 
-					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
-					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
+// 					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
+// 					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
 
-					// Don't normalize!, otherwise sharp corners become ugly
-					//  but prevent crazy spikes
-					const v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
-					if ( v_trans_lensq <= 2 ) {
+// 					// Don't normalize!, otherwise sharp corners become ugly
+// 					//  but prevent crazy spikes
+// 					const v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
+// 					if ( v_trans_lensq <= 2 ) {
 
-						return new Vector2( v_trans_x, v_trans_y );
+// 						return new Vector2( v_trans_x, v_trans_y );
 
-					} else {
+// 					} else {
 
-						shrink_by = Math.sqrt( v_trans_lensq / 2 );
+// 						shrink_by = Math.sqrt( v_trans_lensq / 2 );
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					// handle special case of collinear edges
+// 					// handle special case of collinear edges
 
-					let direction_eq = false; // assumes: opposite
+// 					let direction_eq = false; // assumes: opposite
 
-					if ( v_prev_x > Number.EPSILON ) {
+// 					if ( v_prev_x > Number.EPSILON ) {
 
-						if ( v_next_x > Number.EPSILON ) {
+// 						if ( v_next_x > Number.EPSILON ) {
 
-							direction_eq = true;
+// 							direction_eq = true;
 
-						}
+// 						}
 
-					} else {
+// 					} else {
 
-						if ( v_prev_x < - Number.EPSILON ) {
+// 						if ( v_prev_x < - Number.EPSILON ) {
 
-							if ( v_next_x < - Number.EPSILON ) {
+// 							if ( v_next_x < - Number.EPSILON ) {
 
-								direction_eq = true;
+// 								direction_eq = true;
 
-							}
+// 							}
 
-						} else {
+// 						} else {
 
-							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
+// 							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
 
-								direction_eq = true;
+// 								direction_eq = true;
 
-							}
+// 							}
 
-						}
+// 						}
 
-					}
+// 					}
 
-					if ( direction_eq ) {
+// 					if ( direction_eq ) {
 
-						// console.log("Warning: lines are a straight sequence");
-						v_trans_x = - v_prev_y;
-						v_trans_y = v_prev_x;
-						shrink_by = Math.sqrt( v_prev_lensq );
+// 						// console.log("Warning: lines are a straight sequence");
+// 						v_trans_x = - v_prev_y;
+// 						v_trans_y = v_prev_x;
+// 						shrink_by = Math.sqrt( v_prev_lensq );
 
-					} else {
+// 					} else {
 
-						// console.log("Warning: lines are a straight spike");
-						v_trans_x = v_prev_x;
-						v_trans_y = v_prev_y;
-						shrink_by = Math.sqrt( v_prev_lensq / 2 );
+// 						// console.log("Warning: lines are a straight spike");
+// 						v_trans_x = v_prev_x;
+// 						v_trans_y = v_prev_y;
+// 						shrink_by = Math.sqrt( v_prev_lensq / 2 );
 
-					}
+// 					}
 
-				}
+// 				}
 
-				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
+// 				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
 
-			}
+// 			}
 
 
-			const contourMovements = [];
+// 			const contourMovements = [];
 
-			for ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
+// 			for ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
 
-				if ( j === il ) j = 0;
-				if ( k === il ) k = 0;
+// 				if ( j === il ) j = 0;
+// 				if ( k === il ) k = 0;
 
-				//  (j)---(i)---(k)
-				// console.log('i,j,k', i, j , k)
+// 				//  (j)---(i)---(k)
+// 				// console.log('i,j,k', i, j , k)
 
-				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
+// 				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
 
-			}
+// 			}
 
-			const holesMovements = [];
-			let oneHoleMovements, verticesMovements = contourMovements.concat();
+// 			const holesMovements = [];
+// 			let oneHoleMovements, verticesMovements = contourMovements.concat();
 
-			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
+// 			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
 
-				const ahole = holes[ h ];
+// 				const ahole = holes[ h ];
 
-				oneHoleMovements = [];
+// 				oneHoleMovements = [];
 
-				for ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
+// 				for ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
 
-					if ( j === il ) j = 0;
-					if ( k === il ) k = 0;
+// 					if ( j === il ) j = 0;
+// 					if ( k === il ) k = 0;
 
-					//  (j)---(i)---(k)
-					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
+// 					//  (j)---(i)---(k)
+// 					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
 
-				}
+// 				}
 
-				holesMovements.push( oneHoleMovements );
-				verticesMovements = verticesMovements.concat( oneHoleMovements );
+// 				holesMovements.push( oneHoleMovements );
+// 				verticesMovements = verticesMovements.concat( oneHoleMovements );
 
-			}
+// 			}
 
 
-			// Loop bevelSegments, 1 for the front, 1 for the back
+// 			// Loop bevelSegments, 1 for the front, 1 for the back
 
-			for ( let b = 0; b < bevelSegments; b ++ ) {
+// 			for ( let b = 0; b < bevelSegments; b ++ ) {
 
-				//for ( b = bevelSegments; b > 0; b -- ) {
+// 				//for ( b = bevelSegments; b > 0; b -- ) {
 
-				const t = b / bevelSegments;
-				const z = bevelThickness * Math.cos( t * Math.PI / 2 );
-				const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
+// 				const t = b / bevelSegments;
+// 				const z = bevelThickness * Math.cos( t * Math.PI / 2 );
+// 				const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
 
-				// contract shape
+// 				// contract shape
 
-				for ( let i = 0, il = contour.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = contour.length; i < il; i ++ ) {
 
-					const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
+// 					const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
 
-					v( vert.x, vert.y, - z );
+// 					v( vert.x, vert.y, - z );
 
-				}
+// 				}
 
-				// expand holes
+// 				// expand holes
 
-				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
+// 				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
 
-					const ahole = holes[ h ];
-					oneHoleMovements = holesMovements[ h ];
+// 					const ahole = holes[ h ];
+// 					oneHoleMovements = holesMovements[ h ];
 
-					for ( let i = 0, il = ahole.length; i < il; i ++ ) {
+// 					for ( let i = 0, il = ahole.length; i < il; i ++ ) {
 
-						const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
+// 						const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
 
-						v( vert.x, vert.y, - z );
+// 						v( vert.x, vert.y, - z );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			const bs = bevelSize + bevelOffset;
+// 			const bs = bevelSize + bevelOffset;
 
-			// Back facing vertices
+// 			// Back facing vertices
 
-			for ( let i = 0; i < vlen; i ++ ) {
+// 			for ( let i = 0; i < vlen; i ++ ) {
 
-				const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
+// 				const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
 
-				if ( ! extrudeByPath ) {
+// 				if ( ! extrudeByPath ) {
 
-					v( vert.x, vert.y, 0 );
+// 					v( vert.x, vert.y, 0 );
 
-				} else {
+// 				} else {
 
-					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
+// 					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
 
-					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
-					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
+// 					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
+// 					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
 
-					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
+// 					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
 
-					v( position2.x, position2.y, position2.z );
+// 					v( position2.x, position2.y, position2.z );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// Add stepped vertices...
-			// Including front facing vertices
+// 			// Add stepped vertices...
+// 			// Including front facing vertices
 
-			for ( let s = 1; s <= steps; s ++ ) {
+// 			for ( let s = 1; s <= steps; s ++ ) {
 
-				for ( let i = 0; i < vlen; i ++ ) {
+// 				for ( let i = 0; i < vlen; i ++ ) {
 
-					const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
+// 					const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
 
-					if ( ! extrudeByPath ) {
+// 					if ( ! extrudeByPath ) {
 
-						v( vert.x, vert.y, depth / steps * s );
+// 						v( vert.x, vert.y, depth / steps * s );
 
-					} else {
+// 					} else {
 
-						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
+// 						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
 
-						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
-						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
+// 						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
+// 						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
 
-						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
+// 						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
 
-						v( position2.x, position2.y, position2.z );
+// 						v( position2.x, position2.y, position2.z );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
 
-			// Add bevel segments planes
+// 			// Add bevel segments planes
 
-			//for ( b = 1; b <= bevelSegments; b ++ ) {
-			for ( let b = bevelSegments - 1; b >= 0; b -- ) {
+// 			//for ( b = 1; b <= bevelSegments; b ++ ) {
+// 			for ( let b = bevelSegments - 1; b >= 0; b -- ) {
 
-				const t = b / bevelSegments;
-				const z = bevelThickness * Math.cos( t * Math.PI / 2 );
-				const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
+// 				const t = b / bevelSegments;
+// 				const z = bevelThickness * Math.cos( t * Math.PI / 2 );
+// 				const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
 
-				// contract shape
+// 				// contract shape
 
-				for ( let i = 0, il = contour.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = contour.length; i < il; i ++ ) {
 
-					const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
-					v( vert.x, vert.y, depth + z );
+// 					const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
+// 					v( vert.x, vert.y, depth + z );
 
-				}
+// 				}
 
-				// expand holes
+// 				// expand holes
 
-				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
+// 				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
 
-					const ahole = holes[ h ];
-					oneHoleMovements = holesMovements[ h ];
+// 					const ahole = holes[ h ];
+// 					oneHoleMovements = holesMovements[ h ];
 
-					for ( let i = 0, il = ahole.length; i < il; i ++ ) {
+// 					for ( let i = 0, il = ahole.length; i < il; i ++ ) {
 
-						const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
+// 						const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
 
-						if ( ! extrudeByPath ) {
+// 						if ( ! extrudeByPath ) {
 
-							v( vert.x, vert.y, depth + z );
+// 							v( vert.x, vert.y, depth + z );
 
-						} else {
+// 						} else {
 
-							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
+// 							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			/* Faces */
+// 			/* Faces */
 
-			// Top and bottom faces
+// 			// Top and bottom faces
 
-			buildLidFaces();
+// 			buildLidFaces();
 
-			// Sides faces
+// 			// Sides faces
 
-			buildSideFaces();
+// 			buildSideFaces();
 
 
-			/////  Internal functions
+// 			/////  Internal functions
 
-			function buildLidFaces() {
+// 			function buildLidFaces() {
 
-				const start = verticesArray.length / 3;
+// 				const start = verticesArray.length / 3;
 
-				if ( bevelEnabled ) {
+// 				if ( bevelEnabled ) {
 
-					let layer = 0; // steps + 1
-					let offset = vlen * layer;
+// 					let layer = 0; // steps + 1
+// 					let offset = vlen * layer;
 
-					// Bottom faces
+// 					// Bottom faces
 
-					for ( let i = 0; i < flen; i ++ ) {
+// 					for ( let i = 0; i < flen; i ++ ) {
 
-						const face = faces[ i ];
-						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
+// 						const face = faces[ i ];
+// 						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
 
-					}
+// 					}
 
-					layer = steps + bevelSegments * 2;
-					offset = vlen * layer;
+// 					layer = steps + bevelSegments * 2;
+// 					offset = vlen * layer;
 
-					// Top faces
+// 					// Top faces
 
-					for ( let i = 0; i < flen; i ++ ) {
+// 					for ( let i = 0; i < flen; i ++ ) {
 
-						const face = faces[ i ];
-						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
+// 						const face = faces[ i ];
+// 						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					// Bottom faces
+// 					// Bottom faces
 
-					for ( let i = 0; i < flen; i ++ ) {
+// 					for ( let i = 0; i < flen; i ++ ) {
 
-						const face = faces[ i ];
-						f3( face[ 2 ], face[ 1 ], face[ 0 ] );
+// 						const face = faces[ i ];
+// 						f3( face[ 2 ], face[ 1 ], face[ 0 ] );
 
-					}
+// 					}
 
-					// Top faces
+// 					// Top faces
 
-					for ( let i = 0; i < flen; i ++ ) {
+// 					for ( let i = 0; i < flen; i ++ ) {
 
-						const face = faces[ i ];
-						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
+// 						const face = faces[ i ];
+// 						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
 
-					}
+// 					}
 
-				}
+// 				}
 
-				scope.addGroup( start, verticesArray.length / 3 - start, 0 );
+// 				scope.addGroup( start, verticesArray.length / 3 - start, 0 );
 
-			}
+// 			}
 
-			// Create faces for the z-sides of the shape
+// 			// Create faces for the z-sides of the shape
 
-			function buildSideFaces() {
+// 			function buildSideFaces() {
 
-				const start = verticesArray.length / 3;
-				let layeroffset = 0;
-				sidewalls( contour, layeroffset );
-				layeroffset += contour.length;
+// 				const start = verticesArray.length / 3;
+// 				let layeroffset = 0;
+// 				sidewalls( contour, layeroffset );
+// 				layeroffset += contour.length;
 
-				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
+// 				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {
 
-					const ahole = holes[ h ];
-					sidewalls( ahole, layeroffset );
+// 					const ahole = holes[ h ];
+// 					sidewalls( ahole, layeroffset );
 
-					//, true
-					layeroffset += ahole.length;
+// 					//, true
+// 					layeroffset += ahole.length;
 
-				}
+// 				}
 
 
-				scope.addGroup( start, verticesArray.length / 3 - start, 1 );
+// 				scope.addGroup( start, verticesArray.length / 3 - start, 1 );
 
 
-			}
+// 			}
 
-			function sidewalls( contour, layeroffset ) {
+// 			function sidewalls( contour, layeroffset ) {
 
-				let i = contour.length;
+// 				let i = contour.length;
 
-				while ( -- i >= 0 ) {
+// 				while ( -- i >= 0 ) {
 
-					const j = i;
-					let k = i - 1;
-					if ( k < 0 ) k = contour.length - 1;
+// 					const j = i;
+// 					let k = i - 1;
+// 					if ( k < 0 ) k = contour.length - 1;
 
-					//console.log('b', i,j, i-1, k,vertices.length);
+// 					//console.log('b', i,j, i-1, k,vertices.length);
 
-					for ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {
+// 					for ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {
 
-						const slen1 = vlen * s;
-						const slen2 = vlen * ( s + 1 );
+// 						const slen1 = vlen * s;
+// 						const slen2 = vlen * ( s + 1 );
 
-						const a = layeroffset + j + slen1,
-							b = layeroffset + k + slen1,
-							c = layeroffset + k + slen2,
-							d = layeroffset + j + slen2;
+// 						const a = layeroffset + j + slen1,
+// 							b = layeroffset + k + slen1,
+// 							c = layeroffset + k + slen2,
+// 							d = layeroffset + j + slen2;
 
-						f4( a, b, c, d );
+// 						f4( a, b, c, d );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			function v( x, y, z ) {
+// 			function v( x, y, z ) {
 
-				placeholder.push( x );
-				placeholder.push( y );
-				placeholder.push( z );
+// 				placeholder.push( x );
+// 				placeholder.push( y );
+// 				placeholder.push( z );
 
-			}
+// 			}
 
 
-			function f3( a, b, c ) {
+// 			function f3( a, b, c ) {
 
-				addVertex( a );
-				addVertex( b );
-				addVertex( c );
+// 				addVertex( a );
+// 				addVertex( b );
+// 				addVertex( c );
 
-				const nextIndex = verticesArray.length / 3;
-				const uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
+// 				const nextIndex = verticesArray.length / 3;
+// 				const uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
 
-				addUV( uvs[ 0 ] );
-				addUV( uvs[ 1 ] );
-				addUV( uvs[ 2 ] );
+// 				addUV( uvs[ 0 ] );
+// 				addUV( uvs[ 1 ] );
+// 				addUV( uvs[ 2 ] );
 
-			}
+// 			}
 
-			function f4( a, b, c, d ) {
+// 			function f4( a, b, c, d ) {
 
-				addVertex( a );
-				addVertex( b );
-				addVertex( d );
+// 				addVertex( a );
+// 				addVertex( b );
+// 				addVertex( d );
 
-				addVertex( b );
-				addVertex( c );
-				addVertex( d );
+// 				addVertex( b );
+// 				addVertex( c );
+// 				addVertex( d );
 
 
-				const nextIndex = verticesArray.length / 3;
-				const uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
+// 				const nextIndex = verticesArray.length / 3;
+// 				const uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
 
-				addUV( uvs[ 0 ] );
-				addUV( uvs[ 1 ] );
-				addUV( uvs[ 3 ] );
+// 				addUV( uvs[ 0 ] );
+// 				addUV( uvs[ 1 ] );
+// 				addUV( uvs[ 3 ] );
 
-				addUV( uvs[ 1 ] );
-				addUV( uvs[ 2 ] );
-				addUV( uvs[ 3 ] );
+// 				addUV( uvs[ 1 ] );
+// 				addUV( uvs[ 2 ] );
+// 				addUV( uvs[ 3 ] );
 
-			}
+// 			}
 
-			function addVertex( index ) {
+// 			function addVertex( index ) {
 
-				verticesArray.push( placeholder[ index * 3 + 0 ] );
-				verticesArray.push( placeholder[ index * 3 + 1 ] );
-				verticesArray.push( placeholder[ index * 3 + 2 ] );
+// 				verticesArray.push( placeholder[ index * 3 + 0 ] );
+// 				verticesArray.push( placeholder[ index * 3 + 1 ] );
+// 				verticesArray.push( placeholder[ index * 3 + 2 ] );
 
-			}
+// 			}
 
 
-			function addUV( vector2 ) {
+// 			function addUV( vector2 ) {
 
-				uvArray.push( vector2.x );
-				uvArray.push( vector2.y );
+// 				uvArray.push( vector2.x );
+// 				uvArray.push( vector2.y );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		const shapes = this.parameters.shapes;
-		const options = this.parameters.options;
+// 		const shapes = this.parameters.shapes;
+// 		const options = this.parameters.options;
 
-		return toJSON$1( shapes, options, data );
+// 		return toJSON$1( shapes, options, data );
 
-	}
+// 	}
 
-	static fromJSON( data, shapes ) {
+// 	static fromJSON( data, shapes ) {
 
-		const geometryShapes = [];
+// 		const geometryShapes = [];
 
-		for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {
+// 		for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {
 
-			const shape = shapes[ data.shapes[ j ] ];
+// 			const shape = shapes[ data.shapes[ j ] ];
 
-			geometryShapes.push( shape );
+// 			geometryShapes.push( shape );
 
-		}
+// 		}
 
-		const extrudePath = data.options.extrudePath;
+// 		const extrudePath = data.options.extrudePath;
 
-		if ( extrudePath !== undefined ) {
+// 		if ( extrudePath !== undefined ) {
 
-			data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );
+// 			data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );
 
-		}
+// 		}
 
-		return new ExtrudeGeometry( geometryShapes, data.options );
+// 		return new ExtrudeGeometry( geometryShapes, data.options );
 
-	}
+// 	}
 
-}
+// }
 
-const WorldUVGenerator = {
+// const WorldUVGenerator = {
 
-	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {
+// 	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {
 
-		const a_x = vertices[ indexA * 3 ];
-		const a_y = vertices[ indexA * 3 + 1 ];
-		const b_x = vertices[ indexB * 3 ];
-		const b_y = vertices[ indexB * 3 + 1 ];
-		const c_x = vertices[ indexC * 3 ];
-		const c_y = vertices[ indexC * 3 + 1 ];
+// 		const a_x = vertices[ indexA * 3 ];
+// 		const a_y = vertices[ indexA * 3 + 1 ];
+// 		const b_x = vertices[ indexB * 3 ];
+// 		const b_y = vertices[ indexB * 3 + 1 ];
+// 		const c_x = vertices[ indexC * 3 ];
+// 		const c_y = vertices[ indexC * 3 + 1 ];
 
-		return [
-			new Vector2( a_x, a_y ),
-			new Vector2( b_x, b_y ),
-			new Vector2( c_x, c_y )
-		];
+// 		return [
+// 			new Vector2( a_x, a_y ),
+// 			new Vector2( b_x, b_y ),
+// 			new Vector2( c_x, c_y )
+// 		];
 
-	},
+// 	},
 
-	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {
+// 	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {
 
-		const a_x = vertices[ indexA * 3 ];
-		const a_y = vertices[ indexA * 3 + 1 ];
-		const a_z = vertices[ indexA * 3 + 2 ];
-		const b_x = vertices[ indexB * 3 ];
-		const b_y = vertices[ indexB * 3 + 1 ];
-		const b_z = vertices[ indexB * 3 + 2 ];
-		const c_x = vertices[ indexC * 3 ];
-		const c_y = vertices[ indexC * 3 + 1 ];
-		const c_z = vertices[ indexC * 3 + 2 ];
-		const d_x = vertices[ indexD * 3 ];
-		const d_y = vertices[ indexD * 3 + 1 ];
-		const d_z = vertices[ indexD * 3 + 2 ];
+// 		const a_x = vertices[ indexA * 3 ];
+// 		const a_y = vertices[ indexA * 3 + 1 ];
+// 		const a_z = vertices[ indexA * 3 + 2 ];
+// 		const b_x = vertices[ indexB * 3 ];
+// 		const b_y = vertices[ indexB * 3 + 1 ];
+// 		const b_z = vertices[ indexB * 3 + 2 ];
+// 		const c_x = vertices[ indexC * 3 ];
+// 		const c_y = vertices[ indexC * 3 + 1 ];
+// 		const c_z = vertices[ indexC * 3 + 2 ];
+// 		const d_x = vertices[ indexD * 3 ];
+// 		const d_y = vertices[ indexD * 3 + 1 ];
+// 		const d_z = vertices[ indexD * 3 + 2 ];
 
-		if ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {
+// 		if ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {
 
-			return [
-				new Vector2( a_x, 1 - a_z ),
-				new Vector2( b_x, 1 - b_z ),
-				new Vector2( c_x, 1 - c_z ),
-				new Vector2( d_x, 1 - d_z )
-			];
+// 			return [
+// 				new Vector2( a_x, 1 - a_z ),
+// 				new Vector2( b_x, 1 - b_z ),
+// 				new Vector2( c_x, 1 - c_z ),
+// 				new Vector2( d_x, 1 - d_z )
+// 			];
 
-		} else {
+// 		} else {
 
-			return [
-				new Vector2( a_y, 1 - a_z ),
-				new Vector2( b_y, 1 - b_z ),
-				new Vector2( c_y, 1 - c_z ),
-				new Vector2( d_y, 1 - d_z )
-			];
+// 			return [
+// 				new Vector2( a_y, 1 - a_z ),
+// 				new Vector2( b_y, 1 - b_z ),
+// 				new Vector2( c_y, 1 - c_z ),
+// 				new Vector2( d_y, 1 - d_z )
+// 			];
 
-		}
+// 		}
 
-	}
+// 	}
 
-};
+// };
 
-function toJSON$1( shapes, options, data ) {
+// function toJSON$1( shapes, options, data ) {
 
-	data.shapes = [];
+// 	data.shapes = [];
 
-	if ( Array.isArray( shapes ) ) {
+// 	if ( Array.isArray( shapes ) ) {
 
-		for ( let i = 0, l = shapes.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = shapes.length; i < l; i ++ ) {
 
-			const shape = shapes[ i ];
+// 			const shape = shapes[ i ];
 
-			data.shapes.push( shape.uuid );
+// 			data.shapes.push( shape.uuid );
 
-		}
+// 		}
 
-	} else {
+// 	} else {
 
-		data.shapes.push( shapes.uuid );
+// 		data.shapes.push( shapes.uuid );
 
-	}
+// 	}
 
-	data.options = Object.assign( {}, options );
+// 	data.options = Object.assign( {}, options );
 
-	if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();
+// 	if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();
 
-	return data;
+// 	return data;
 
-}
+// }
 
-class IcosahedronGeometry extends PolyhedronGeometry {
+// class IcosahedronGeometry extends PolyhedronGeometry {
 
-	constructor( radius = 1, detail = 0 ) {
+// 	constructor( radius = 1, detail = 0 ) {
 
-		const t = ( 1 + Math.sqrt( 5 ) ) / 2;
+// 		const t = ( 1 + Math.sqrt( 5 ) ) / 2;
 
-		const vertices = [
-			- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
-			0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
-			t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
-		];
+// 		const vertices = [
+// 			- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
+// 			0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
+// 			t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
+// 		];
 
-		const indices = [
-			0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
-			1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
-			3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
-			4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
-		];
+// 		const indices = [
+// 			0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
+// 			1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
+// 			3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
+// 			4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
+// 		];
 
-		super( vertices, indices, radius, detail );
+// 		super( vertices, indices, radius, detail );
 
-		this.type = 'IcosahedronGeometry';
+// 		this.type = 'IcosahedronGeometry';
 
-		this.parameters = {
-			radius: radius,
-			detail: detail
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			detail: detail
+// 		};
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new IcosahedronGeometry( data.radius, data.detail );
+// 		return new IcosahedronGeometry( data.radius, data.detail );
 
-	}
+// 	}
 
-}
+// }
 
-class OctahedronGeometry extends PolyhedronGeometry {
+// class OctahedronGeometry extends PolyhedronGeometry {
 
-	constructor( radius = 1, detail = 0 ) {
+// 	constructor( radius = 1, detail = 0 ) {
 
-		const vertices = [
-			1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
-			0, - 1, 0, 	0, 0, 1,	0, 0, - 1
-		];
+// 		const vertices = [
+// 			1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
+// 			0, - 1, 0, 	0, 0, 1,	0, 0, - 1
+// 		];
 
-		const indices = [
-			0, 2, 4,	0, 4, 3,	0, 3, 5,
-			0, 5, 2,	1, 2, 5,	1, 5, 3,
-			1, 3, 4,	1, 4, 2
-		];
+// 		const indices = [
+// 			0, 2, 4,	0, 4, 3,	0, 3, 5,
+// 			0, 5, 2,	1, 2, 5,	1, 5, 3,
+// 			1, 3, 4,	1, 4, 2
+// 		];
 
-		super( vertices, indices, radius, detail );
+// 		super( vertices, indices, radius, detail );
 
-		this.type = 'OctahedronGeometry';
+// 		this.type = 'OctahedronGeometry';
 
-		this.parameters = {
-			radius: radius,
-			detail: detail
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			detail: detail
+// 		};
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new OctahedronGeometry( data.radius, data.detail );
+// 		return new OctahedronGeometry( data.radius, data.detail );
 
-	}
+// 	}
 
-}
+// }
 
-class RingGeometry extends BufferGeometry {
+// class RingGeometry extends BufferGeometry {
 
-	constructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {
+// 	constructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {
 
-		super();
+// 		super();
 
-		this.type = 'RingGeometry';
+// 		this.type = 'RingGeometry';
 
-		this.parameters = {
-			innerRadius: innerRadius,
-			outerRadius: outerRadius,
-			thetaSegments: thetaSegments,
-			phiSegments: phiSegments,
-			thetaStart: thetaStart,
-			thetaLength: thetaLength
-		};
+// 		this.parameters = {
+// 			innerRadius: innerRadius,
+// 			outerRadius: outerRadius,
+// 			thetaSegments: thetaSegments,
+// 			phiSegments: phiSegments,
+// 			thetaStart: thetaStart,
+// 			thetaLength: thetaLength
+// 		};
 
-		thetaSegments = Math.max( 3, thetaSegments );
-		phiSegments = Math.max( 1, phiSegments );
+// 		thetaSegments = Math.max( 3, thetaSegments );
+// 		phiSegments = Math.max( 1, phiSegments );
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		// some helper variables
+// 		// some helper variables
 
-		let radius = innerRadius;
-		const radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
-		const vertex = new Vector3();
-		const uv = new Vector2();
+// 		let radius = innerRadius;
+// 		const radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
+// 		const vertex = new Vector3();
+// 		const uv = new Vector2();
 
-		// generate vertices, normals and uvs
+// 		// generate vertices, normals and uvs
 
-		for ( let j = 0; j <= phiSegments; j ++ ) {
+// 		for ( let j = 0; j <= phiSegments; j ++ ) {
 
-			for ( let i = 0; i <= thetaSegments; i ++ ) {
+// 			for ( let i = 0; i <= thetaSegments; i ++ ) {
 
-				// values are generate from the inside of the ring to the outside
+// 				// values are generate from the inside of the ring to the outside
 
-				const segment = thetaStart + i / thetaSegments * thetaLength;
+// 				const segment = thetaStart + i / thetaSegments * thetaLength;
 
-				// vertex
+// 				// vertex
 
-				vertex.x = radius * Math.cos( segment );
-				vertex.y = radius * Math.sin( segment );
+// 				vertex.x = radius * Math.cos( segment );
+// 				vertex.y = radius * Math.sin( segment );
 
-				vertices.push( vertex.x, vertex.y, vertex.z );
+// 				vertices.push( vertex.x, vertex.y, vertex.z );
 
-				// normal
+// 				// normal
 
-				normals.push( 0, 0, 1 );
+// 				normals.push( 0, 0, 1 );
 
-				// uv
+// 				// uv
 
-				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
-				uv.y = ( vertex.y / outerRadius + 1 ) / 2;
+// 				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
+// 				uv.y = ( vertex.y / outerRadius + 1 ) / 2;
 
-				uvs.push( uv.x, uv.y );
+// 				uvs.push( uv.x, uv.y );
 
-			}
+// 			}
 
-			// increase the radius for next row of vertices
+// 			// increase the radius for next row of vertices
 
-			radius += radiusStep;
+// 			radius += radiusStep;
 
-		}
+// 		}
 
-		// indices
+// 		// indices
 
-		for ( let j = 0; j < phiSegments; j ++ ) {
+// 		for ( let j = 0; j < phiSegments; j ++ ) {
 
-			const thetaSegmentLevel = j * ( thetaSegments + 1 );
+// 			const thetaSegmentLevel = j * ( thetaSegments + 1 );
 
-			for ( let i = 0; i < thetaSegments; i ++ ) {
+// 			for ( let i = 0; i < thetaSegments; i ++ ) {
 
-				const segment = i + thetaSegmentLevel;
+// 				const segment = i + thetaSegmentLevel;
 
-				const a = segment;
-				const b = segment + thetaSegments + 1;
-				const c = segment + thetaSegments + 2;
-				const d = segment + 1;
+// 				const a = segment;
+// 				const b = segment + thetaSegments + 1;
+// 				const c = segment + thetaSegments + 2;
+// 				const d = segment + 1;
 
-				// faces
+// 				// faces
 
-				indices.push( a, b, d );
-				indices.push( b, c, d );
+// 				indices.push( a, b, d );
+// 				indices.push( b, c, d );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );
+// 		return new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-class ShapeGeometry extends BufferGeometry {
+// class ShapeGeometry extends BufferGeometry {
 
-	constructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {
+// 	constructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {
 
-		super();
+// 		super();
 
-		this.type = 'ShapeGeometry';
+// 		this.type = 'ShapeGeometry';
 
-		this.parameters = {
-			shapes: shapes,
-			curveSegments: curveSegments
-		};
+// 		this.parameters = {
+// 			shapes: shapes,
+// 			curveSegments: curveSegments
+// 		};
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		// helper variables
+// 		// helper variables
 
-		let groupStart = 0;
-		let groupCount = 0;
+// 		let groupStart = 0;
+// 		let groupCount = 0;
 
-		// allow single and array values for "shapes" parameter
+// 		// allow single and array values for "shapes" parameter
 
-		if ( Array.isArray( shapes ) === false ) {
+// 		if ( Array.isArray( shapes ) === false ) {
 
-			addShape( shapes );
+// 			addShape( shapes );
 
-		} else {
+// 		} else {
 
-			for ( let i = 0; i < shapes.length; i ++ ) {
+// 			for ( let i = 0; i < shapes.length; i ++ ) {
 
-				addShape( shapes[ i ] );
+// 				addShape( shapes[ i ] );
 
-				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support
+// 				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support
 
-				groupStart += groupCount;
-				groupCount = 0;
+// 				groupStart += groupCount;
+// 				groupCount = 0;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
 
-		// helper functions
+// 		// helper functions
 
-		function addShape( shape ) {
+// 		function addShape( shape ) {
 
-			const indexOffset = vertices.length / 3;
-			const points = shape.extractPoints( curveSegments );
+// 			const indexOffset = vertices.length / 3;
+// 			const points = shape.extractPoints( curveSegments );
 
-			let shapeVertices = points.shape;
-			const shapeHoles = points.holes;
+// 			let shapeVertices = points.shape;
+// 			const shapeHoles = points.holes;
 
-			// check direction of vertices
+// 			// check direction of vertices
 
-			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {
+// 			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {
 
-				shapeVertices = shapeVertices.reverse();
+// 				shapeVertices = shapeVertices.reverse();
 
-			}
+// 			}
 
-			for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {
 
-				const shapeHole = shapeHoles[ i ];
+// 				const shapeHole = shapeHoles[ i ];
 
-				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {
+// 				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {
 
-					shapeHoles[ i ] = shapeHole.reverse();
+// 					shapeHoles[ i ] = shapeHole.reverse();
 
-				}
+// 				}
 
-			}
+// 			}
 
-			const faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );
+// 			const faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );
 
-			// join vertices of inner and outer paths to a single array
+// 			// join vertices of inner and outer paths to a single array
 
-			for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {
 
-				const shapeHole = shapeHoles[ i ];
-				shapeVertices = shapeVertices.concat( shapeHole );
+// 				const shapeHole = shapeHoles[ i ];
+// 				shapeVertices = shapeVertices.concat( shapeHole );
 
-			}
+// 			}
 
-			// vertices, normals, uvs
+// 			// vertices, normals, uvs
 
-			for ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {
 
-				const vertex = shapeVertices[ i ];
+// 				const vertex = shapeVertices[ i ];
 
-				vertices.push( vertex.x, vertex.y, 0 );
-				normals.push( 0, 0, 1 );
-				uvs.push( vertex.x, vertex.y ); // world uvs
+// 				vertices.push( vertex.x, vertex.y, 0 );
+// 				normals.push( 0, 0, 1 );
+// 				uvs.push( vertex.x, vertex.y ); // world uvs
 
-			}
+// 			}
 
-			// incides
+// 			// incides
 
-			for ( let i = 0, l = faces.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = faces.length; i < l; i ++ ) {
 
-				const face = faces[ i ];
+// 				const face = faces[ i ];
 
-				const a = face[ 0 ] + indexOffset;
-				const b = face[ 1 ] + indexOffset;
-				const c = face[ 2 ] + indexOffset;
+// 				const a = face[ 0 ] + indexOffset;
+// 				const b = face[ 1 ] + indexOffset;
+// 				const c = face[ 2 ] + indexOffset;
 
-				indices.push( a, b, c );
-				groupCount += 3;
+// 				indices.push( a, b, c );
+// 				groupCount += 3;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		const shapes = this.parameters.shapes;
+// 		const shapes = this.parameters.shapes;
 
-		return toJSON( shapes, data );
+// 		return toJSON( shapes, data );
 
-	}
+// 	}
 
-	static fromJSON( data, shapes ) {
+// 	static fromJSON( data, shapes ) {
 
-		const geometryShapes = [];
+// 		const geometryShapes = [];
 
-		for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {
+// 		for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {
 
-			const shape = shapes[ data.shapes[ j ] ];
+// 			const shape = shapes[ data.shapes[ j ] ];
 
-			geometryShapes.push( shape );
+// 			geometryShapes.push( shape );
 
-		}
+// 		}
 
-		return new ShapeGeometry( geometryShapes, data.curveSegments );
+// 		return new ShapeGeometry( geometryShapes, data.curveSegments );
 
-	}
+// 	}
 
-}
+// }
 
-function toJSON( shapes, data ) {
+// function toJSON( shapes, data ) {
 
-	data.shapes = [];
+// 	data.shapes = [];
 
-	if ( Array.isArray( shapes ) ) {
+// 	if ( Array.isArray( shapes ) ) {
 
-		for ( let i = 0, l = shapes.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = shapes.length; i < l; i ++ ) {
 
-			const shape = shapes[ i ];
+// 			const shape = shapes[ i ];
 
-			data.shapes.push( shape.uuid );
+// 			data.shapes.push( shape.uuid );
 
-		}
+// 		}
 
-	} else {
+// 	} else {
 
-		data.shapes.push( shapes.uuid );
+// 		data.shapes.push( shapes.uuid );
 
-	}
+// 	}
 
-	return data;
+// 	return data;
 
-}
+// }
 
-class SphereGeometry extends BufferGeometry {
+// class SphereGeometry extends BufferGeometry {
 
-	constructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {
+// 	constructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {
 
-		super();
+// 		super();
 
-		this.type = 'SphereGeometry';
+// 		this.type = 'SphereGeometry';
 
-		this.parameters = {
-			radius: radius,
-			widthSegments: widthSegments,
-			heightSegments: heightSegments,
-			phiStart: phiStart,
-			phiLength: phiLength,
-			thetaStart: thetaStart,
-			thetaLength: thetaLength
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			widthSegments: widthSegments,
+// 			heightSegments: heightSegments,
+// 			phiStart: phiStart,
+// 			phiLength: phiLength,
+// 			thetaStart: thetaStart,
+// 			thetaLength: thetaLength
+// 		};
 
-		widthSegments = Math.max( 3, Math.floor( widthSegments ) );
-		heightSegments = Math.max( 2, Math.floor( heightSegments ) );
+// 		widthSegments = Math.max( 3, Math.floor( widthSegments ) );
+// 		heightSegments = Math.max( 2, Math.floor( heightSegments ) );
 
-		const thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );
+// 		const thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );
 
-		let index = 0;
-		const grid = [];
+// 		let index = 0;
+// 		const grid = [];
 
-		const vertex = new Vector3();
-		const normal = new Vector3();
+// 		const vertex = new Vector3();
+// 		const normal = new Vector3();
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		// generate vertices, normals and uvs
+// 		// generate vertices, normals and uvs
 
-		for ( let iy = 0; iy <= heightSegments; iy ++ ) {
+// 		for ( let iy = 0; iy <= heightSegments; iy ++ ) {
 
-			const verticesRow = [];
+// 			const verticesRow = [];
 
-			const v = iy / heightSegments;
+// 			const v = iy / heightSegments;
 
-			// special case for the poles
+// 			// special case for the poles
 
-			let uOffset = 0;
+// 			let uOffset = 0;
 
-			if ( iy == 0 && thetaStart == 0 ) {
+// 			if ( iy == 0 && thetaStart == 0 ) {
 
-				uOffset = 0.5 / widthSegments;
+// 				uOffset = 0.5 / widthSegments;
 
-			} else if ( iy == heightSegments && thetaEnd == Math.PI ) {
+// 			} else if ( iy == heightSegments && thetaEnd == Math.PI ) {
 
-				uOffset = - 0.5 / widthSegments;
+// 				uOffset = - 0.5 / widthSegments;
 
-			}
+// 			}
 
-			for ( let ix = 0; ix <= widthSegments; ix ++ ) {
+// 			for ( let ix = 0; ix <= widthSegments; ix ++ ) {
 
-				const u = ix / widthSegments;
+// 				const u = ix / widthSegments;
 
-				// vertex
+// 				// vertex
 
-				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
-				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
-				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
+// 				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
+// 				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
+// 				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
 
-				vertices.push( vertex.x, vertex.y, vertex.z );
+// 				vertices.push( vertex.x, vertex.y, vertex.z );
 
-				// normal
+// 				// normal
 
-				normal.copy( vertex ).normalize();
-				normals.push( normal.x, normal.y, normal.z );
+// 				normal.copy( vertex ).normalize();
+// 				normals.push( normal.x, normal.y, normal.z );
 
-				// uv
+// 				// uv
 
-				uvs.push( u + uOffset, 1 - v );
+// 				uvs.push( u + uOffset, 1 - v );
 
-				verticesRow.push( index ++ );
+// 				verticesRow.push( index ++ );
 
-			}
+// 			}
 
-			grid.push( verticesRow );
+// 			grid.push( verticesRow );
 
-		}
+// 		}
 
-		// indices
+// 		// indices
 
-		for ( let iy = 0; iy < heightSegments; iy ++ ) {
+// 		for ( let iy = 0; iy < heightSegments; iy ++ ) {
 
-			for ( let ix = 0; ix < widthSegments; ix ++ ) {
+// 			for ( let ix = 0; ix < widthSegments; ix ++ ) {
 
-				const a = grid[ iy ][ ix + 1 ];
-				const b = grid[ iy ][ ix ];
-				const c = grid[ iy + 1 ][ ix ];
-				const d = grid[ iy + 1 ][ ix + 1 ];
+// 				const a = grid[ iy ][ ix + 1 ];
+// 				const b = grid[ iy ][ ix ];
+// 				const c = grid[ iy + 1 ][ ix ];
+// 				const d = grid[ iy + 1 ][ ix + 1 ];
 
-				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
-				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );
+// 				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
+// 				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );
+// 		return new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-class TetrahedronGeometry extends PolyhedronGeometry {
+// class TetrahedronGeometry extends PolyhedronGeometry {
 
-	constructor( radius = 1, detail = 0 ) {
+// 	constructor( radius = 1, detail = 0 ) {
 
-		const vertices = [
-			1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
-		];
+// 		const vertices = [
+// 			1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
+// 		];
 
-		const indices = [
-			2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
-		];
+// 		const indices = [
+// 			2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
+// 		];
 
-		super( vertices, indices, radius, detail );
+// 		super( vertices, indices, radius, detail );
 
-		this.type = 'TetrahedronGeometry';
+// 		this.type = 'TetrahedronGeometry';
 
-		this.parameters = {
-			radius: radius,
-			detail: detail
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			detail: detail
+// 		};
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new TetrahedronGeometry( data.radius, data.detail );
+// 		return new TetrahedronGeometry( data.radius, data.detail );
 
-	}
+// 	}
 
-}
+// }
 
-class TorusGeometry extends BufferGeometry {
+// class TorusGeometry extends BufferGeometry {
 
-	constructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {
+// 	constructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {
 
-		super();
+// 		super();
 
-		this.type = 'TorusGeometry';
+// 		this.type = 'TorusGeometry';
 
-		this.parameters = {
-			radius: radius,
-			tube: tube,
-			radialSegments: radialSegments,
-			tubularSegments: tubularSegments,
-			arc: arc
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			tube: tube,
+// 			radialSegments: radialSegments,
+// 			tubularSegments: tubularSegments,
+// 			arc: arc
+// 		};
 
-		radialSegments = Math.floor( radialSegments );
-		tubularSegments = Math.floor( tubularSegments );
+// 		radialSegments = Math.floor( radialSegments );
+// 		tubularSegments = Math.floor( tubularSegments );
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		// helper variables
+// 		// helper variables
 
-		const center = new Vector3();
-		const vertex = new Vector3();
-		const normal = new Vector3();
+// 		const center = new Vector3();
+// 		const vertex = new Vector3();
+// 		const normal = new Vector3();
 
-		// generate vertices, normals and uvs
+// 		// generate vertices, normals and uvs
 
-		for ( let j = 0; j <= radialSegments; j ++ ) {
+// 		for ( let j = 0; j <= radialSegments; j ++ ) {
 
-			for ( let i = 0; i <= tubularSegments; i ++ ) {
+// 			for ( let i = 0; i <= tubularSegments; i ++ ) {
 
-				const u = i / tubularSegments * arc;
-				const v = j / radialSegments * Math.PI * 2;
+// 				const u = i / tubularSegments * arc;
+// 				const v = j / radialSegments * Math.PI * 2;
 
-				// vertex
+// 				// vertex
 
-				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
-				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
-				vertex.z = tube * Math.sin( v );
+// 				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
+// 				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
+// 				vertex.z = tube * Math.sin( v );
 
-				vertices.push( vertex.x, vertex.y, vertex.z );
+// 				vertices.push( vertex.x, vertex.y, vertex.z );
 
-				// normal
+// 				// normal
 
-				center.x = radius * Math.cos( u );
-				center.y = radius * Math.sin( u );
-				normal.subVectors( vertex, center ).normalize();
+// 				center.x = radius * Math.cos( u );
+// 				center.y = radius * Math.sin( u );
+// 				normal.subVectors( vertex, center ).normalize();
 
-				normals.push( normal.x, normal.y, normal.z );
+// 				normals.push( normal.x, normal.y, normal.z );
 
-				// uv
+// 				// uv
 
-				uvs.push( i / tubularSegments );
-				uvs.push( j / radialSegments );
+// 				uvs.push( i / tubularSegments );
+// 				uvs.push( j / radialSegments );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// generate indices
+// 		// generate indices
 
-		for ( let j = 1; j <= radialSegments; j ++ ) {
+// 		for ( let j = 1; j <= radialSegments; j ++ ) {
 
-			for ( let i = 1; i <= tubularSegments; i ++ ) {
+// 			for ( let i = 1; i <= tubularSegments; i ++ ) {
 
-				// indices
+// 				// indices
 
-				const a = ( tubularSegments + 1 ) * j + i - 1;
-				const b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
-				const c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
-				const d = ( tubularSegments + 1 ) * j + i;
+// 				const a = ( tubularSegments + 1 ) * j + i - 1;
+// 				const b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
+// 				const c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
+// 				const d = ( tubularSegments + 1 ) * j + i;
 
-				// faces
+// 				// faces
 
-				indices.push( a, b, d );
-				indices.push( b, c, d );
+// 				indices.push( a, b, d );
+// 				indices.push( b, c, d );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );
+// 		return new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );
 
-	}
+// 	}
 
-}
+// }
 
-class TorusKnotGeometry extends BufferGeometry {
+// class TorusKnotGeometry extends BufferGeometry {
 
-	constructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {
+// 	constructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {
 
-		super();
+// 		super();
 
-		this.type = 'TorusKnotGeometry';
+// 		this.type = 'TorusKnotGeometry';
 
-		this.parameters = {
-			radius: radius,
-			tube: tube,
-			tubularSegments: tubularSegments,
-			radialSegments: radialSegments,
-			p: p,
-			q: q
-		};
+// 		this.parameters = {
+// 			radius: radius,
+// 			tube: tube,
+// 			tubularSegments: tubularSegments,
+// 			radialSegments: radialSegments,
+// 			p: p,
+// 			q: q
+// 		};
 
-		tubularSegments = Math.floor( tubularSegments );
-		radialSegments = Math.floor( radialSegments );
+// 		tubularSegments = Math.floor( tubularSegments );
+// 		radialSegments = Math.floor( radialSegments );
 
-		// buffers
+// 		// buffers
 
-		const indices = [];
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
+// 		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
 
-		// helper variables
+// 		// helper variables
 
-		const vertex = new Vector3();
-		const normal = new Vector3();
+// 		const vertex = new Vector3();
+// 		const normal = new Vector3();
 
-		const P1 = new Vector3();
-		const P2 = new Vector3();
+// 		const P1 = new Vector3();
+// 		const P2 = new Vector3();
 
-		const B = new Vector3();
-		const T = new Vector3();
-		const N = new Vector3();
+// 		const B = new Vector3();
+// 		const T = new Vector3();
+// 		const N = new Vector3();
 
-		// generate vertices, normals and uvs
+// 		// generate vertices, normals and uvs
 
-		for ( let i = 0; i <= tubularSegments; ++ i ) {
+// 		for ( let i = 0; i <= tubularSegments; ++ i ) {
 
-			// the radian "u" is used to calculate the position on the torus curve of the current tubular segment
+// 			// the radian "u" is used to calculate the position on the torus curve of the current tubular segment
 
-			const u = i / tubularSegments * p * Math.PI * 2;
+// 			const u = i / tubularSegments * p * Math.PI * 2;
 
-			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
-			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
+// 			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
+// 			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
 
-			calculatePositionOnCurve( u, p, q, radius, P1 );
-			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );
+// 			calculatePositionOnCurve( u, p, q, radius, P1 );
+// 			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );
 
-			// calculate orthonormal basis
+// 			// calculate orthonormal basis
 
-			T.subVectors( P2, P1 );
-			N.addVectors( P2, P1 );
-			B.crossVectors( T, N );
-			N.crossVectors( B, T );
+// 			T.subVectors( P2, P1 );
+// 			N.addVectors( P2, P1 );
+// 			B.crossVectors( T, N );
+// 			N.crossVectors( B, T );
 
-			// normalize B, N. T can be ignored, we don't use it
+// 			// normalize B, N. T can be ignored, we don't use it
 
-			B.normalize();
-			N.normalize();
+// 			B.normalize();
+// 			N.normalize();
 
-			for ( let j = 0; j <= radialSegments; ++ j ) {
+// 			for ( let j = 0; j <= radialSegments; ++ j ) {
 
-				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
-				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
+// 				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
+// 				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
 
-				const v = j / radialSegments * Math.PI * 2;
-				const cx = - tube * Math.cos( v );
-				const cy = tube * Math.sin( v );
+// 				const v = j / radialSegments * Math.PI * 2;
+// 				const cx = - tube * Math.cos( v );
+// 				const cy = tube * Math.sin( v );
 
-				// now calculate the final vertex position.
-				// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
+// 				// now calculate the final vertex position.
+// 				// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve
 
-				vertex.x = P1.x + ( cx * N.x + cy * B.x );
-				vertex.y = P1.y + ( cx * N.y + cy * B.y );
-				vertex.z = P1.z + ( cx * N.z + cy * B.z );
+// 				vertex.x = P1.x + ( cx * N.x + cy * B.x );
+// 				vertex.y = P1.y + ( cx * N.y + cy * B.y );
+// 				vertex.z = P1.z + ( cx * N.z + cy * B.z );
 
-				vertices.push( vertex.x, vertex.y, vertex.z );
+// 				vertices.push( vertex.x, vertex.y, vertex.z );
 
-				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
+// 				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
 
-				normal.subVectors( vertex, P1 ).normalize();
+// 				normal.subVectors( vertex, P1 ).normalize();
 
-				normals.push( normal.x, normal.y, normal.z );
+// 				normals.push( normal.x, normal.y, normal.z );
 
-				// uv
+// 				// uv
 
-				uvs.push( i / tubularSegments );
-				uvs.push( j / radialSegments );
+// 				uvs.push( i / tubularSegments );
+// 				uvs.push( j / radialSegments );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// generate indices
+// 		// generate indices
 
-		for ( let j = 1; j <= tubularSegments; j ++ ) {
+// 		for ( let j = 1; j <= tubularSegments; j ++ ) {
 
-			for ( let i = 1; i <= radialSegments; i ++ ) {
+// 			for ( let i = 1; i <= radialSegments; i ++ ) {
 
-				// indices
+// 				// indices
 
-				const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
-				const b = ( radialSegments + 1 ) * j + ( i - 1 );
-				const c = ( radialSegments + 1 ) * j + i;
-				const d = ( radialSegments + 1 ) * ( j - 1 ) + i;
+// 				const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
+// 				const b = ( radialSegments + 1 ) * j + ( i - 1 );
+// 				const c = ( radialSegments + 1 ) * j + i;
+// 				const d = ( radialSegments + 1 ) * ( j - 1 ) + i;
 
-				// faces
+// 				// faces
 
-				indices.push( a, b, d );
-				indices.push( b, c, d );
+// 				indices.push( a, b, d );
+// 				indices.push( b, c, d );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-		// this function calculates the current position on the torus curve
+// 		// this function calculates the current position on the torus curve
 
-		function calculatePositionOnCurve( u, p, q, radius, position ) {
+// 		function calculatePositionOnCurve( u, p, q, radius, position ) {
 
-			const cu = Math.cos( u );
-			const su = Math.sin( u );
-			const quOverP = q / p * u;
-			const cs = Math.cos( quOverP );
+// 			const cu = Math.cos( u );
+// 			const su = Math.sin( u );
+// 			const quOverP = q / p * u;
+// 			const cs = Math.cos( quOverP );
 
-			position.x = radius * ( 2 + cs ) * 0.5 * cu;
-			position.y = radius * ( 2 + cs ) * su * 0.5;
-			position.z = radius * Math.sin( quOverP ) * 0.5;
+// 			position.x = radius * ( 2 + cs ) * 0.5 * cu;
+// 			position.y = radius * ( 2 + cs ) * su * 0.5;
+// 			position.z = radius * Math.sin( quOverP ) * 0.5;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		return new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );
+// 		return new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );
 
-	}
+// 	}
 
-}
+// }
 
-class TubeGeometry extends BufferGeometry {
+// class TubeGeometry extends BufferGeometry {
 
-	constructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {
+// 	constructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {
 
-		super();
+// 		super();
 
-		this.type = 'TubeGeometry';
+// 		this.type = 'TubeGeometry';
 
-		this.parameters = {
-			path: path,
-			tubularSegments: tubularSegments,
-			radius: radius,
-			radialSegments: radialSegments,
-			closed: closed
-		};
+// 		this.parameters = {
+// 			path: path,
+// 			tubularSegments: tubularSegments,
+// 			radius: radius,
+// 			radialSegments: radialSegments,
+// 			closed: closed
+// 		};
 
-		const frames = path.computeFrenetFrames( tubularSegments, closed );
+// 		const frames = path.computeFrenetFrames( tubularSegments, closed );
 
-		// expose internals
+// 		// expose internals
 
-		this.tangents = frames.tangents;
-		this.normals = frames.normals;
-		this.binormals = frames.binormals;
+// 		this.tangents = frames.tangents;
+// 		this.normals = frames.normals;
+// 		this.binormals = frames.binormals;
 
-		// helper variables
+// 		// helper variables
 
-		const vertex = new Vector3();
-		const normal = new Vector3();
-		const uv = new Vector2();
-		let P = new Vector3();
+// 		const vertex = new Vector3();
+// 		const normal = new Vector3();
+// 		const uv = new Vector2();
+// 		let P = new Vector3();
 
-		// buffer
+// 		// buffer
 
-		const vertices = [];
-		const normals = [];
-		const uvs = [];
-		const indices = [];
+// 		const vertices = [];
+// 		const normals = [];
+// 		const uvs = [];
+// 		const indices = [];
 
-		// create buffer data
+// 		// create buffer data
 
-		generateBufferData();
+// 		generateBufferData();
 
-		// build geometry
+// 		// build geometry
 
-		this.setIndex( indices );
-		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
-		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+// 		this.setIndex( indices );
+// 		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+// 		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
 
-		// functions
+// 		// functions
 
-		function generateBufferData() {
+// 		function generateBufferData() {
 
-			for ( let i = 0; i < tubularSegments; i ++ ) {
+// 			for ( let i = 0; i < tubularSegments; i ++ ) {
 
-				generateSegment( i );
+// 				generateSegment( i );
 
-			}
+// 			}
 
-			// if the geometry is not closed, generate the last row of vertices and normals
-			// at the regular position on the given path
-			//
-			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
+// 			// if the geometry is not closed, generate the last row of vertices and normals
+// 			// at the regular position on the given path
+// 			//
+// 			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
 
-			generateSegment( ( closed === false ) ? tubularSegments : 0 );
+// 			generateSegment( ( closed === false ) ? tubularSegments : 0 );
 
-			// uvs are generated in a separate function.
-			// this makes it easy compute correct values for closed geometries
+// 			// uvs are generated in a separate function.
+// 			// this makes it easy compute correct values for closed geometries
 
-			generateUVs();
+// 			generateUVs();
 
-			// finally create faces
+// 			// finally create faces
 
-			generateIndices();
+// 			generateIndices();
 
-		}
+// 		}
 
-		function generateSegment( i ) {
+// 		function generateSegment( i ) {
 
-			// we use getPointAt to sample evenly distributed points from the given path
+// 			// we use getPointAt to sample evenly distributed points from the given path
 
-			P = path.getPointAt( i / tubularSegments, P );
+// 			P = path.getPointAt( i / tubularSegments, P );
 
-			// retrieve corresponding normal and binormal
+// 			// retrieve corresponding normal and binormal
 
-			const N = frames.normals[ i ];
-			const B = frames.binormals[ i ];
+// 			const N = frames.normals[ i ];
+// 			const B = frames.binormals[ i ];
 
-			// generate normals and vertices for the current segment
+// 			// generate normals and vertices for the current segment
 
-			for ( let j = 0; j <= radialSegments; j ++ ) {
+// 			for ( let j = 0; j <= radialSegments; j ++ ) {
 
-				const v = j / radialSegments * Math.PI * 2;
+// 				const v = j / radialSegments * Math.PI * 2;
 
-				const sin = Math.sin( v );
-				const cos = - Math.cos( v );
+// 				const sin = Math.sin( v );
+// 				const cos = - Math.cos( v );
 
-				// normal
+// 				// normal
 
-				normal.x = ( cos * N.x + sin * B.x );
-				normal.y = ( cos * N.y + sin * B.y );
-				normal.z = ( cos * N.z + sin * B.z );
-				normal.normalize();
+// 				normal.x = ( cos * N.x + sin * B.x );
+// 				normal.y = ( cos * N.y + sin * B.y );
+// 				normal.z = ( cos * N.z + sin * B.z );
+// 				normal.normalize();
 
-				normals.push( normal.x, normal.y, normal.z );
+// 				normals.push( normal.x, normal.y, normal.z );
 
-				// vertex
+// 				// vertex
 
-				vertex.x = P.x + radius * normal.x;
-				vertex.y = P.y + radius * normal.y;
-				vertex.z = P.z + radius * normal.z;
+// 				vertex.x = P.x + radius * normal.x;
+// 				vertex.y = P.y + radius * normal.y;
+// 				vertex.z = P.z + radius * normal.z;
 
-				vertices.push( vertex.x, vertex.y, vertex.z );
+// 				vertices.push( vertex.x, vertex.y, vertex.z );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		function generateIndices() {
+// 		function generateIndices() {
 
-			for ( let j = 1; j <= tubularSegments; j ++ ) {
+// 			for ( let j = 1; j <= tubularSegments; j ++ ) {
 
-				for ( let i = 1; i <= radialSegments; i ++ ) {
+// 				for ( let i = 1; i <= radialSegments; i ++ ) {
 
-					const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
-					const b = ( radialSegments + 1 ) * j + ( i - 1 );
-					const c = ( radialSegments + 1 ) * j + i;
-					const d = ( radialSegments + 1 ) * ( j - 1 ) + i;
+// 					const a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
+// 					const b = ( radialSegments + 1 ) * j + ( i - 1 );
+// 					const c = ( radialSegments + 1 ) * j + i;
+// 					const d = ( radialSegments + 1 ) * ( j - 1 ) + i;
 
-					// faces
+// 					// faces
 
-					indices.push( a, b, d );
-					indices.push( b, c, d );
+// 					indices.push( a, b, d );
+// 					indices.push( b, c, d );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		function generateUVs() {
+// 		function generateUVs() {
 
-			for ( let i = 0; i <= tubularSegments; i ++ ) {
+// 			for ( let i = 0; i <= tubularSegments; i ++ ) {
 
-				for ( let j = 0; j <= radialSegments; j ++ ) {
+// 				for ( let j = 0; j <= radialSegments; j ++ ) {
 
-					uv.x = i / tubularSegments;
-					uv.y = j / radialSegments;
+// 					uv.x = i / tubularSegments;
+// 					uv.y = j / radialSegments;
 
-					uvs.push( uv.x, uv.y );
+// 					uvs.push( uv.x, uv.y );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON();
+// 		const data = super.toJSON();
 
-		data.path = this.parameters.path.toJSON();
+// 		data.path = this.parameters.path.toJSON();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-	static fromJSON( data ) {
+// 	static fromJSON( data ) {
 
-		// This only works for built-in curves (e.g. CatmullRomCurve3).
-		// User defined curves or instances of CurvePath will not be deserialized.
-		return new TubeGeometry(
-			new Curves[ data.path.type ]().fromJSON( data.path ),
-			data.tubularSegments,
-			data.radius,
-			data.radialSegments,
-			data.closed
-		);
+// 		// This only works for built-in curves (e.g. CatmullRomCurve3).
+// 		// User defined curves or instances of CurvePath will not be deserialized.
+// 		return new TubeGeometry(
+// 			new Curves[ data.path.type ]().fromJSON( data.path ),
+// 			data.tubularSegments,
+// 			data.radius,
+// 			data.radialSegments,
+// 			data.closed
+// 		);
 
-	}
+// 	}
 
-}
+// }
 
-class WireframeGeometry extends BufferGeometry {
+// class WireframeGeometry extends BufferGeometry {
 
-	constructor( geometry = null ) {
+// 	constructor( geometry = null ) {
 
-		super();
+// 		super();
 
-		this.type = 'WireframeGeometry';
+// 		this.type = 'WireframeGeometry';
 
-		this.parameters = {
-			geometry: geometry
-		};
+// 		this.parameters = {
+// 			geometry: geometry
+// 		};
 
-		if ( geometry !== null ) {
+// 		if ( geometry !== null ) {
 
-			// buffer
+// 			// buffer
 
-			const vertices = [];
-			const edges = new Set();
+// 			const vertices = [];
+// 			const edges = new Set();
 
-			// helper variables
+// 			// helper variables
 
-			const start = new Vector3();
-			const end = new Vector3();
+// 			const start = new Vector3();
+// 			const end = new Vector3();
 
-			if ( geometry.index !== null ) {
+// 			if ( geometry.index !== null ) {
 
-				// indexed BufferGeometry
+// 				// indexed BufferGeometry
 
-				const position = geometry.attributes.position;
-				const indices = geometry.index;
-				let groups = geometry.groups;
+// 				const position = geometry.attributes.position;
+// 				const indices = geometry.index;
+// 				let groups = geometry.groups;
 
-				if ( groups.length === 0 ) {
+// 				if ( groups.length === 0 ) {
 
-					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];
+// 					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];
 
-				}
+// 				}
 
-				// create a data structure that contains all edges without duplicates
+// 				// create a data structure that contains all edges without duplicates
 
-				for ( let o = 0, ol = groups.length; o < ol; ++ o ) {
+// 				for ( let o = 0, ol = groups.length; o < ol; ++ o ) {
 
-					const group = groups[ o ];
+// 					const group = groups[ o ];
 
-					const groupStart = group.start;
-					const groupCount = group.count;
+// 					const groupStart = group.start;
+// 					const groupCount = group.count;
 
-					for ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {
+// 					for ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {
 
-						for ( let j = 0; j < 3; j ++ ) {
+// 						for ( let j = 0; j < 3; j ++ ) {
 
-							const index1 = indices.getX( i + j );
-							const index2 = indices.getX( i + ( j + 1 ) % 3 );
+// 							const index1 = indices.getX( i + j );
+// 							const index2 = indices.getX( i + ( j + 1 ) % 3 );
 
-							start.fromBufferAttribute( position, index1 );
-							end.fromBufferAttribute( position, index2 );
+// 							start.fromBufferAttribute( position, index1 );
+// 							end.fromBufferAttribute( position, index2 );
 
-							if ( isUniqueEdge( start, end, edges ) === true ) {
+// 							if ( isUniqueEdge( start, end, edges ) === true ) {
 
-								vertices.push( start.x, start.y, start.z );
-								vertices.push( end.x, end.y, end.z );
+// 								vertices.push( start.x, start.y, start.z );
+// 								vertices.push( end.x, end.y, end.z );
 
-							}
+// 							}
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				// non-indexed BufferGeometry
+// 				// non-indexed BufferGeometry
 
-				const position = geometry.attributes.position;
+// 				const position = geometry.attributes.position;
 
-				for ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {
+// 				for ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {
 
-					for ( let j = 0; j < 3; j ++ ) {
+// 					for ( let j = 0; j < 3; j ++ ) {
 
-						// three edges per triangle, an edge is represented as (index1, index2)
-						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
+// 						// three edges per triangle, an edge is represented as (index1, index2)
+// 						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
 
-						const index1 = 3 * i + j;
-						const index2 = 3 * i + ( ( j + 1 ) % 3 );
+// 						const index1 = 3 * i + j;
+// 						const index2 = 3 * i + ( ( j + 1 ) % 3 );
 
-						start.fromBufferAttribute( position, index1 );
-						end.fromBufferAttribute( position, index2 );
+// 						start.fromBufferAttribute( position, index1 );
+// 						end.fromBufferAttribute( position, index2 );
 
-						if ( isUniqueEdge( start, end, edges ) === true ) {
+// 						if ( isUniqueEdge( start, end, edges ) === true ) {
 
-							vertices.push( start.x, start.y, start.z );
-							vertices.push( end.x, end.y, end.z );
+// 							vertices.push( start.x, start.y, start.z );
+// 							vertices.push( end.x, end.y, end.z );
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// build geometry
+// 			// build geometry
 
-			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-function isUniqueEdge( start, end, edges ) {
+// function isUniqueEdge( start, end, edges ) {
 
-	const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
-	const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge
+// 	const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
+// 	const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge
 
-	if ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {
+// 	if ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {
 
-		return false;
+// 		return false;
 
-	} else {
+// 	} else {
 
-		edges.add( hash1 );
-		edges.add( hash2 );
-		return true;
+// 		edges.add( hash1 );
+// 		edges.add( hash2 );
+// 		return true;
 
-	}
+// 	}
 
-}
+// }
 
-var Geometries = /*#__PURE__*/Object.freeze({
-	__proto__: null,
-	BoxGeometry: BoxGeometry,
-	CapsuleGeometry: CapsuleGeometry,
-	CircleGeometry: CircleGeometry,
-	ConeGeometry: ConeGeometry,
-	CylinderGeometry: CylinderGeometry,
-	DodecahedronGeometry: DodecahedronGeometry,
-	EdgesGeometry: EdgesGeometry,
-	ExtrudeGeometry: ExtrudeGeometry,
-	IcosahedronGeometry: IcosahedronGeometry,
-	LatheGeometry: LatheGeometry,
-	OctahedronGeometry: OctahedronGeometry,
-	PlaneGeometry: PlaneGeometry,
-	PolyhedronGeometry: PolyhedronGeometry,
-	RingGeometry: RingGeometry,
-	ShapeGeometry: ShapeGeometry,
-	SphereGeometry: SphereGeometry,
-	TetrahedronGeometry: TetrahedronGeometry,
-	TorusGeometry: TorusGeometry,
-	TorusKnotGeometry: TorusKnotGeometry,
-	TubeGeometry: TubeGeometry,
-	WireframeGeometry: WireframeGeometry
-});
+// var Geometries = /*#__PURE__*/Object.freeze({
+// 	__proto__: null,
+// 	BoxGeometry: BoxGeometry,
+// 	CapsuleGeometry: CapsuleGeometry,
+// 	CircleGeometry: CircleGeometry,
+// 	ConeGeometry: ConeGeometry,
+// 	CylinderGeometry: CylinderGeometry,
+// 	DodecahedronGeometry: DodecahedronGeometry,
+// 	EdgesGeometry: EdgesGeometry,
+// 	ExtrudeGeometry: ExtrudeGeometry,
+// 	IcosahedronGeometry: IcosahedronGeometry,
+// 	LatheGeometry: LatheGeometry,
+// 	OctahedronGeometry: OctahedronGeometry,
+// 	PlaneGeometry: PlaneGeometry,
+// 	PolyhedronGeometry: PolyhedronGeometry,
+// 	RingGeometry: RingGeometry,
+// 	ShapeGeometry: ShapeGeometry,
+// 	SphereGeometry: SphereGeometry,
+// 	TetrahedronGeometry: TetrahedronGeometry,
+// 	TorusGeometry: TorusGeometry,
+// 	TorusKnotGeometry: TorusKnotGeometry,
+// 	TubeGeometry: TubeGeometry,
+// 	WireframeGeometry: WireframeGeometry
+// });
 
-class ShadowMaterial extends Material {
+// class ShadowMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isShadowMaterial = true;
+// 		this.isShadowMaterial = true;
 
-		this.type = 'ShadowMaterial';
+// 		this.type = 'ShadowMaterial';
 
-		this.color = new Color( 0x000000 );
-		this.transparent = true;
+// 		this.color = new Color( 0x000000 );
+// 		this.transparent = true;
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.color.copy( source.color );
+// 		this.color.copy( source.color );
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class RawShaderMaterial extends ShaderMaterial {
+// class RawShaderMaterial extends ShaderMaterial {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super( parameters );
+// 		super( parameters );
 
-		this.isRawShaderMaterial = true;
+// 		this.isRawShaderMaterial = true;
 
-		this.type = 'RawShaderMaterial';
+// 		this.type = 'RawShaderMaterial';
 
-	}
+// 	}
 
-}
+// }
 
-class MeshStandardMaterial extends Material {
+// class MeshStandardMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshStandardMaterial = true;
+// 		this.isMeshStandardMaterial = true;
 
-		this.defines = { 'STANDARD': '' };
+// 		this.defines = { 'STANDARD': '' };
 
-		this.type = 'MeshStandardMaterial';
+// 		this.type = 'MeshStandardMaterial';
 
-		this.color = new Color( 0xffffff ); // diffuse
-		this.roughness = 1.0;
-		this.metalness = 0.0;
+// 		this.color = new Color( 0xffffff ); // diffuse
+// 		this.roughness = 1.0;
+// 		this.metalness = 0.0;
 
-		this.map = null;
+// 		this.map = null;
 
-		this.lightMap = null;
-		this.lightMapIntensity = 1.0;
+// 		this.lightMap = null;
+// 		this.lightMapIntensity = 1.0;
 
-		this.aoMap = null;
-		this.aoMapIntensity = 1.0;
+// 		this.aoMap = null;
+// 		this.aoMapIntensity = 1.0;
 
-		this.emissive = new Color( 0x000000 );
-		this.emissiveIntensity = 1.0;
-		this.emissiveMap = null;
+// 		this.emissive = new Color( 0x000000 );
+// 		this.emissiveIntensity = 1.0;
+// 		this.emissiveMap = null;
 
-		this.bumpMap = null;
-		this.bumpScale = 1;
+// 		this.bumpMap = null;
+// 		this.bumpScale = 1;
 
-		this.normalMap = null;
-		this.normalMapType = TangentSpaceNormalMap;
-		this.normalScale = new Vector2( 1, 1 );
+// 		this.normalMap = null;
+// 		this.normalMapType = TangentSpaceNormalMap;
+// 		this.normalScale = new Vector2( 1, 1 );
 
-		this.displacementMap = null;
-		this.displacementScale = 1;
-		this.displacementBias = 0;
+// 		this.displacementMap = null;
+// 		this.displacementScale = 1;
+// 		this.displacementBias = 0;
 
-		this.roughnessMap = null;
+// 		this.roughnessMap = null;
 
-		this.metalnessMap = null;
+// 		this.metalnessMap = null;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.envMap = null;
-		this.envMapIntensity = 1.0;
+// 		this.envMap = null;
+// 		this.envMapIntensity = 1.0;
 
-		this.wireframe = false;
-		this.wireframeLinewidth = 1;
-		this.wireframeLinecap = 'round';
-		this.wireframeLinejoin = 'round';
+// 		this.wireframe = false;
+// 		this.wireframeLinewidth = 1;
+// 		this.wireframeLinecap = 'round';
+// 		this.wireframeLinejoin = 'round';
 
-		this.flatShading = false;
+// 		this.flatShading = false;
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.defines = { 'STANDARD': '' };
+// 		this.defines = { 'STANDARD': '' };
 
-		this.color.copy( source.color );
-		this.roughness = source.roughness;
-		this.metalness = source.metalness;
+// 		this.color.copy( source.color );
+// 		this.roughness = source.roughness;
+// 		this.metalness = source.metalness;
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.lightMap = source.lightMap;
-		this.lightMapIntensity = source.lightMapIntensity;
+// 		this.lightMap = source.lightMap;
+// 		this.lightMapIntensity = source.lightMapIntensity;
 
-		this.aoMap = source.aoMap;
-		this.aoMapIntensity = source.aoMapIntensity;
+// 		this.aoMap = source.aoMap;
+// 		this.aoMapIntensity = source.aoMapIntensity;
 
-		this.emissive.copy( source.emissive );
-		this.emissiveMap = source.emissiveMap;
-		this.emissiveIntensity = source.emissiveIntensity;
+// 		this.emissive.copy( source.emissive );
+// 		this.emissiveMap = source.emissiveMap;
+// 		this.emissiveIntensity = source.emissiveIntensity;
 
-		this.bumpMap = source.bumpMap;
-		this.bumpScale = source.bumpScale;
+// 		this.bumpMap = source.bumpMap;
+// 		this.bumpScale = source.bumpScale;
 
-		this.normalMap = source.normalMap;
-		this.normalMapType = source.normalMapType;
-		this.normalScale.copy( source.normalScale );
+// 		this.normalMap = source.normalMap;
+// 		this.normalMapType = source.normalMapType;
+// 		this.normalScale.copy( source.normalScale );
 
-		this.displacementMap = source.displacementMap;
-		this.displacementScale = source.displacementScale;
-		this.displacementBias = source.displacementBias;
+// 		this.displacementMap = source.displacementMap;
+// 		this.displacementScale = source.displacementScale;
+// 		this.displacementBias = source.displacementBias;
 
-		this.roughnessMap = source.roughnessMap;
+// 		this.roughnessMap = source.roughnessMap;
 
-		this.metalnessMap = source.metalnessMap;
+// 		this.metalnessMap = source.metalnessMap;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.envMap = source.envMap;
-		this.envMapIntensity = source.envMapIntensity;
+// 		this.envMap = source.envMap;
+// 		this.envMapIntensity = source.envMapIntensity;
 
-		this.wireframe = source.wireframe;
-		this.wireframeLinewidth = source.wireframeLinewidth;
-		this.wireframeLinecap = source.wireframeLinecap;
-		this.wireframeLinejoin = source.wireframeLinejoin;
+// 		this.wireframe = source.wireframe;
+// 		this.wireframeLinewidth = source.wireframeLinewidth;
+// 		this.wireframeLinecap = source.wireframeLinecap;
+// 		this.wireframeLinejoin = source.wireframeLinejoin;
 
-		this.flatShading = source.flatShading;
+// 		this.flatShading = source.flatShading;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class MeshPhysicalMaterial extends MeshStandardMaterial {
+// class MeshPhysicalMaterial extends MeshStandardMaterial {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshPhysicalMaterial = true;
+// 		this.isMeshPhysicalMaterial = true;
 
-		this.defines = {
+// 		this.defines = {
 
-			'STANDARD': '',
-			'PHYSICAL': ''
+// 			'STANDARD': '',
+// 			'PHYSICAL': ''
 
-		};
+// 		};
 
-		this.type = 'MeshPhysicalMaterial';
+// 		this.type = 'MeshPhysicalMaterial';
 
-		this.clearcoatMap = null;
-		this.clearcoatRoughness = 0.0;
-		this.clearcoatRoughnessMap = null;
-		this.clearcoatNormalScale = new Vector2( 1, 1 );
-		this.clearcoatNormalMap = null;
+// 		this.clearcoatMap = null;
+// 		this.clearcoatRoughness = 0.0;
+// 		this.clearcoatRoughnessMap = null;
+// 		this.clearcoatNormalScale = new Vector2( 1, 1 );
+// 		this.clearcoatNormalMap = null;
 
-		this.ior = 1.5;
+// 		this.ior = 1.5;
 
-		Object.defineProperty( this, 'reflectivity', {
-			get: function () {
+// 		Object.defineProperty( this, 'reflectivity', {
+// 			get: function () {
 
-				return ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );
+// 				return ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );
 
-			},
-			set: function ( reflectivity ) {
+// 			},
+// 			set: function ( reflectivity ) {
 
-				this.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );
+// 				this.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );
 
-			}
-		} );
+// 			}
+// 		} );
 
-		this.iridescenceMap = null;
-		this.iridescenceIOR = 1.3;
-		this.iridescenceThicknessRange = [ 100, 400 ];
-		this.iridescenceThicknessMap = null;
+// 		this.iridescenceMap = null;
+// 		this.iridescenceIOR = 1.3;
+// 		this.iridescenceThicknessRange = [ 100, 400 ];
+// 		this.iridescenceThicknessMap = null;
 
-		this.sheenColor = new Color( 0x000000 );
-		this.sheenColorMap = null;
-		this.sheenRoughness = 1.0;
-		this.sheenRoughnessMap = null;
+// 		this.sheenColor = new Color( 0x000000 );
+// 		this.sheenColorMap = null;
+// 		this.sheenRoughness = 1.0;
+// 		this.sheenRoughnessMap = null;
 
-		this.transmissionMap = null;
+// 		this.transmissionMap = null;
 
-		this.thickness = 0;
-		this.thicknessMap = null;
-		this.attenuationDistance = Infinity;
-		this.attenuationColor = new Color( 1, 1, 1 );
+// 		this.thickness = 0;
+// 		this.thicknessMap = null;
+// 		this.attenuationDistance = Infinity;
+// 		this.attenuationColor = new Color( 1, 1, 1 );
 
-		this.specularIntensity = 1.0;
-		this.specularIntensityMap = null;
-		this.specularColor = new Color( 1, 1, 1 );
-		this.specularColorMap = null;
+// 		this.specularIntensity = 1.0;
+// 		this.specularIntensityMap = null;
+// 		this.specularColor = new Color( 1, 1, 1 );
+// 		this.specularColorMap = null;
 
-		this._sheen = 0.0;
-		this._clearcoat = 0;
-		this._iridescence = 0;
-		this._transmission = 0;
+// 		this._sheen = 0.0;
+// 		this._clearcoat = 0;
+// 		this._iridescence = 0;
+// 		this._transmission = 0;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	get sheen() {
+// 	get sheen() {
 
-		return this._sheen;
+// 		return this._sheen;
 
-	}
+// 	}
 
-	set sheen( value ) {
+// 	set sheen( value ) {
 
-		if ( this._sheen > 0 !== value > 0 ) {
+// 		if ( this._sheen > 0 !== value > 0 ) {
 
-			this.version ++;
+// 			this.version ++;
 
-		}
+// 		}
 
-		this._sheen = value;
+// 		this._sheen = value;
 
-	}
+// 	}
 
-	get clearcoat() {
+// 	get clearcoat() {
 
-		return this._clearcoat;
+// 		return this._clearcoat;
 
-	}
+// 	}
 
-	set clearcoat( value ) {
+// 	set clearcoat( value ) {
 
-		if ( this._clearcoat > 0 !== value > 0 ) {
+// 		if ( this._clearcoat > 0 !== value > 0 ) {
 
-			this.version ++;
+// 			this.version ++;
 
-		}
+// 		}
 
-		this._clearcoat = value;
+// 		this._clearcoat = value;
 
-	}
+// 	}
 
-	get iridescence() {
+// 	get iridescence() {
 
-		return this._iridescence;
+// 		return this._iridescence;
 
-	}
+// 	}
 
-	set iridescence( value ) {
+// 	set iridescence( value ) {
 
-		if ( this._iridescence > 0 !== value > 0 ) {
+// 		if ( this._iridescence > 0 !== value > 0 ) {
 
-			this.version ++;
+// 			this.version ++;
 
-		}
+// 		}
 
-		this._iridescence = value;
+// 		this._iridescence = value;
 
-	}
+// 	}
 
-	get transmission() {
+// 	get transmission() {
 
-		return this._transmission;
+// 		return this._transmission;
 
-	}
+// 	}
 
-	set transmission( value ) {
+// 	set transmission( value ) {
 
-		if ( this._transmission > 0 !== value > 0 ) {
+// 		if ( this._transmission > 0 !== value > 0 ) {
 
-			this.version ++;
+// 			this.version ++;
 
-		}
+// 		}
 
-		this._transmission = value;
+// 		this._transmission = value;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.defines = {
+// 		this.defines = {
 
-			'STANDARD': '',
-			'PHYSICAL': ''
+// 			'STANDARD': '',
+// 			'PHYSICAL': ''
 
-		};
+// 		};
 
-		this.clearcoat = source.clearcoat;
-		this.clearcoatMap = source.clearcoatMap;
-		this.clearcoatRoughness = source.clearcoatRoughness;
-		this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
-		this.clearcoatNormalMap = source.clearcoatNormalMap;
-		this.clearcoatNormalScale.copy( source.clearcoatNormalScale );
+// 		this.clearcoat = source.clearcoat;
+// 		this.clearcoatMap = source.clearcoatMap;
+// 		this.clearcoatRoughness = source.clearcoatRoughness;
+// 		this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
+// 		this.clearcoatNormalMap = source.clearcoatNormalMap;
+// 		this.clearcoatNormalScale.copy( source.clearcoatNormalScale );
 
-		this.ior = source.ior;
+// 		this.ior = source.ior;
 
-		this.iridescence = source.iridescence;
-		this.iridescenceMap = source.iridescenceMap;
-		this.iridescenceIOR = source.iridescenceIOR;
-		this.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];
-		this.iridescenceThicknessMap = source.iridescenceThicknessMap;
+// 		this.iridescence = source.iridescence;
+// 		this.iridescenceMap = source.iridescenceMap;
+// 		this.iridescenceIOR = source.iridescenceIOR;
+// 		this.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];
+// 		this.iridescenceThicknessMap = source.iridescenceThicknessMap;
 
-		this.sheen = source.sheen;
-		this.sheenColor.copy( source.sheenColor );
-		this.sheenColorMap = source.sheenColorMap;
-		this.sheenRoughness = source.sheenRoughness;
-		this.sheenRoughnessMap = source.sheenRoughnessMap;
+// 		this.sheen = source.sheen;
+// 		this.sheenColor.copy( source.sheenColor );
+// 		this.sheenColorMap = source.sheenColorMap;
+// 		this.sheenRoughness = source.sheenRoughness;
+// 		this.sheenRoughnessMap = source.sheenRoughnessMap;
 
-		this.transmission = source.transmission;
-		this.transmissionMap = source.transmissionMap;
+// 		this.transmission = source.transmission;
+// 		this.transmissionMap = source.transmissionMap;
 
-		this.thickness = source.thickness;
-		this.thicknessMap = source.thicknessMap;
-		this.attenuationDistance = source.attenuationDistance;
-		this.attenuationColor.copy( source.attenuationColor );
+// 		this.thickness = source.thickness;
+// 		this.thicknessMap = source.thicknessMap;
+// 		this.attenuationDistance = source.attenuationDistance;
+// 		this.attenuationColor.copy( source.attenuationColor );
 
-		this.specularIntensity = source.specularIntensity;
-		this.specularIntensityMap = source.specularIntensityMap;
-		this.specularColor.copy( source.specularColor );
-		this.specularColorMap = source.specularColorMap;
+// 		this.specularIntensity = source.specularIntensity;
+// 		this.specularIntensityMap = source.specularIntensityMap;
+// 		this.specularColor.copy( source.specularColor );
+// 		this.specularColorMap = source.specularColorMap;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class MeshPhongMaterial extends Material {
+// class MeshPhongMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshPhongMaterial = true;
+// 		this.isMeshPhongMaterial = true;
 
-		this.type = 'MeshPhongMaterial';
+// 		this.type = 'MeshPhongMaterial';
 
-		this.color = new Color( 0xffffff ); // diffuse
-		this.specular = new Color( 0x111111 );
-		this.shininess = 30;
+// 		this.color = new Color( 0xffffff ); // diffuse
+// 		this.specular = new Color( 0x111111 );
+// 		this.shininess = 30;
 
-		this.map = null;
+// 		this.map = null;
 
-		this.lightMap = null;
-		this.lightMapIntensity = 1.0;
+// 		this.lightMap = null;
+// 		this.lightMapIntensity = 1.0;
 
-		this.aoMap = null;
-		this.aoMapIntensity = 1.0;
+// 		this.aoMap = null;
+// 		this.aoMapIntensity = 1.0;
 
-		this.emissive = new Color( 0x000000 );
-		this.emissiveIntensity = 1.0;
-		this.emissiveMap = null;
+// 		this.emissive = new Color( 0x000000 );
+// 		this.emissiveIntensity = 1.0;
+// 		this.emissiveMap = null;
 
-		this.bumpMap = null;
-		this.bumpScale = 1;
+// 		this.bumpMap = null;
+// 		this.bumpScale = 1;
 
-		this.normalMap = null;
-		this.normalMapType = TangentSpaceNormalMap;
-		this.normalScale = new Vector2( 1, 1 );
+// 		this.normalMap = null;
+// 		this.normalMapType = TangentSpaceNormalMap;
+// 		this.normalScale = new Vector2( 1, 1 );
 
-		this.displacementMap = null;
-		this.displacementScale = 1;
-		this.displacementBias = 0;
+// 		this.displacementMap = null;
+// 		this.displacementScale = 1;
+// 		this.displacementBias = 0;
 
-		this.specularMap = null;
+// 		this.specularMap = null;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.envMap = null;
-		this.combine = MultiplyOperation;
-		this.reflectivity = 1;
-		this.refractionRatio = 0.98;
+// 		this.envMap = null;
+// 		this.combine = MultiplyOperation;
+// 		this.reflectivity = 1;
+// 		this.refractionRatio = 0.98;
 
-		this.wireframe = false;
-		this.wireframeLinewidth = 1;
-		this.wireframeLinecap = 'round';
-		this.wireframeLinejoin = 'round';
+// 		this.wireframe = false;
+// 		this.wireframeLinewidth = 1;
+// 		this.wireframeLinecap = 'round';
+// 		this.wireframeLinejoin = 'round';
 
-		this.flatShading = false;
+// 		this.flatShading = false;
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.color.copy( source.color );
-		this.specular.copy( source.specular );
-		this.shininess = source.shininess;
+// 		this.color.copy( source.color );
+// 		this.specular.copy( source.specular );
+// 		this.shininess = source.shininess;
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.lightMap = source.lightMap;
-		this.lightMapIntensity = source.lightMapIntensity;
+// 		this.lightMap = source.lightMap;
+// 		this.lightMapIntensity = source.lightMapIntensity;
 
-		this.aoMap = source.aoMap;
-		this.aoMapIntensity = source.aoMapIntensity;
+// 		this.aoMap = source.aoMap;
+// 		this.aoMapIntensity = source.aoMapIntensity;
 
-		this.emissive.copy( source.emissive );
-		this.emissiveMap = source.emissiveMap;
-		this.emissiveIntensity = source.emissiveIntensity;
+// 		this.emissive.copy( source.emissive );
+// 		this.emissiveMap = source.emissiveMap;
+// 		this.emissiveIntensity = source.emissiveIntensity;
 
-		this.bumpMap = source.bumpMap;
-		this.bumpScale = source.bumpScale;
+// 		this.bumpMap = source.bumpMap;
+// 		this.bumpScale = source.bumpScale;
 
-		this.normalMap = source.normalMap;
-		this.normalMapType = source.normalMapType;
-		this.normalScale.copy( source.normalScale );
+// 		this.normalMap = source.normalMap;
+// 		this.normalMapType = source.normalMapType;
+// 		this.normalScale.copy( source.normalScale );
 
-		this.displacementMap = source.displacementMap;
-		this.displacementScale = source.displacementScale;
-		this.displacementBias = source.displacementBias;
+// 		this.displacementMap = source.displacementMap;
+// 		this.displacementScale = source.displacementScale;
+// 		this.displacementBias = source.displacementBias;
 
-		this.specularMap = source.specularMap;
+// 		this.specularMap = source.specularMap;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.envMap = source.envMap;
-		this.combine = source.combine;
-		this.reflectivity = source.reflectivity;
-		this.refractionRatio = source.refractionRatio;
+// 		this.envMap = source.envMap;
+// 		this.combine = source.combine;
+// 		this.reflectivity = source.reflectivity;
+// 		this.refractionRatio = source.refractionRatio;
 
-		this.wireframe = source.wireframe;
-		this.wireframeLinewidth = source.wireframeLinewidth;
-		this.wireframeLinecap = source.wireframeLinecap;
-		this.wireframeLinejoin = source.wireframeLinejoin;
+// 		this.wireframe = source.wireframe;
+// 		this.wireframeLinewidth = source.wireframeLinewidth;
+// 		this.wireframeLinecap = source.wireframeLinecap;
+// 		this.wireframeLinejoin = source.wireframeLinejoin;
 
-		this.flatShading = source.flatShading;
+// 		this.flatShading = source.flatShading;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class MeshToonMaterial extends Material {
+// class MeshToonMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshToonMaterial = true;
+// 		this.isMeshToonMaterial = true;
 
-		this.defines = { 'TOON': '' };
+// 		this.defines = { 'TOON': '' };
 
-		this.type = 'MeshToonMaterial';
+// 		this.type = 'MeshToonMaterial';
 
-		this.color = new Color( 0xffffff );
+// 		this.color = new Color( 0xffffff );
 
-		this.map = null;
-		this.gradientMap = null;
+// 		this.map = null;
+// 		this.gradientMap = null;
 
-		this.lightMap = null;
-		this.lightMapIntensity = 1.0;
+// 		this.lightMap = null;
+// 		this.lightMapIntensity = 1.0;
 
-		this.aoMap = null;
-		this.aoMapIntensity = 1.0;
+// 		this.aoMap = null;
+// 		this.aoMapIntensity = 1.0;
 
-		this.emissive = new Color( 0x000000 );
-		this.emissiveIntensity = 1.0;
-		this.emissiveMap = null;
+// 		this.emissive = new Color( 0x000000 );
+// 		this.emissiveIntensity = 1.0;
+// 		this.emissiveMap = null;
 
-		this.bumpMap = null;
-		this.bumpScale = 1;
+// 		this.bumpMap = null;
+// 		this.bumpScale = 1;
 
-		this.normalMap = null;
-		this.normalMapType = TangentSpaceNormalMap;
-		this.normalScale = new Vector2( 1, 1 );
+// 		this.normalMap = null;
+// 		this.normalMapType = TangentSpaceNormalMap;
+// 		this.normalScale = new Vector2( 1, 1 );
 
-		this.displacementMap = null;
-		this.displacementScale = 1;
-		this.displacementBias = 0;
+// 		this.displacementMap = null;
+// 		this.displacementScale = 1;
+// 		this.displacementBias = 0;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.wireframe = false;
-		this.wireframeLinewidth = 1;
-		this.wireframeLinecap = 'round';
-		this.wireframeLinejoin = 'round';
+// 		this.wireframe = false;
+// 		this.wireframeLinewidth = 1;
+// 		this.wireframeLinecap = 'round';
+// 		this.wireframeLinejoin = 'round';
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.color.copy( source.color );
+// 		this.color.copy( source.color );
 
-		this.map = source.map;
-		this.gradientMap = source.gradientMap;
+// 		this.map = source.map;
+// 		this.gradientMap = source.gradientMap;
 
-		this.lightMap = source.lightMap;
-		this.lightMapIntensity = source.lightMapIntensity;
+// 		this.lightMap = source.lightMap;
+// 		this.lightMapIntensity = source.lightMapIntensity;
 
-		this.aoMap = source.aoMap;
-		this.aoMapIntensity = source.aoMapIntensity;
+// 		this.aoMap = source.aoMap;
+// 		this.aoMapIntensity = source.aoMapIntensity;
 
-		this.emissive.copy( source.emissive );
-		this.emissiveMap = source.emissiveMap;
-		this.emissiveIntensity = source.emissiveIntensity;
+// 		this.emissive.copy( source.emissive );
+// 		this.emissiveMap = source.emissiveMap;
+// 		this.emissiveIntensity = source.emissiveIntensity;
 
-		this.bumpMap = source.bumpMap;
-		this.bumpScale = source.bumpScale;
+// 		this.bumpMap = source.bumpMap;
+// 		this.bumpScale = source.bumpScale;
 
-		this.normalMap = source.normalMap;
-		this.normalMapType = source.normalMapType;
-		this.normalScale.copy( source.normalScale );
+// 		this.normalMap = source.normalMap;
+// 		this.normalMapType = source.normalMapType;
+// 		this.normalScale.copy( source.normalScale );
 
-		this.displacementMap = source.displacementMap;
-		this.displacementScale = source.displacementScale;
-		this.displacementBias = source.displacementBias;
+// 		this.displacementMap = source.displacementMap;
+// 		this.displacementScale = source.displacementScale;
+// 		this.displacementBias = source.displacementBias;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.wireframe = source.wireframe;
-		this.wireframeLinewidth = source.wireframeLinewidth;
-		this.wireframeLinecap = source.wireframeLinecap;
-		this.wireframeLinejoin = source.wireframeLinejoin;
+// 		this.wireframe = source.wireframe;
+// 		this.wireframeLinewidth = source.wireframeLinewidth;
+// 		this.wireframeLinecap = source.wireframeLinecap;
+// 		this.wireframeLinejoin = source.wireframeLinejoin;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class MeshNormalMaterial extends Material {
+// class MeshNormalMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshNormalMaterial = true;
+// 		this.isMeshNormalMaterial = true;
 
-		this.type = 'MeshNormalMaterial';
+// 		this.type = 'MeshNormalMaterial';
 
-		this.bumpMap = null;
-		this.bumpScale = 1;
+// 		this.bumpMap = null;
+// 		this.bumpScale = 1;
 
-		this.normalMap = null;
-		this.normalMapType = TangentSpaceNormalMap;
-		this.normalScale = new Vector2( 1, 1 );
+// 		this.normalMap = null;
+// 		this.normalMapType = TangentSpaceNormalMap;
+// 		this.normalScale = new Vector2( 1, 1 );
 
-		this.displacementMap = null;
-		this.displacementScale = 1;
-		this.displacementBias = 0;
+// 		this.displacementMap = null;
+// 		this.displacementScale = 1;
+// 		this.displacementBias = 0;
 
-		this.wireframe = false;
-		this.wireframeLinewidth = 1;
+// 		this.wireframe = false;
+// 		this.wireframeLinewidth = 1;
 
-		this.flatShading = false;
+// 		this.flatShading = false;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.bumpMap = source.bumpMap;
-		this.bumpScale = source.bumpScale;
+// 		this.bumpMap = source.bumpMap;
+// 		this.bumpScale = source.bumpScale;
 
-		this.normalMap = source.normalMap;
-		this.normalMapType = source.normalMapType;
-		this.normalScale.copy( source.normalScale );
+// 		this.normalMap = source.normalMap;
+// 		this.normalMapType = source.normalMapType;
+// 		this.normalScale.copy( source.normalScale );
 
-		this.displacementMap = source.displacementMap;
-		this.displacementScale = source.displacementScale;
-		this.displacementBias = source.displacementBias;
+// 		this.displacementMap = source.displacementMap;
+// 		this.displacementScale = source.displacementScale;
+// 		this.displacementBias = source.displacementBias;
 
-		this.wireframe = source.wireframe;
-		this.wireframeLinewidth = source.wireframeLinewidth;
+// 		this.wireframe = source.wireframe;
+// 		this.wireframeLinewidth = source.wireframeLinewidth;
 
-		this.flatShading = source.flatShading;
+// 		this.flatShading = source.flatShading;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class MeshLambertMaterial extends Material {
+// class MeshLambertMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshLambertMaterial = true;
+// 		this.isMeshLambertMaterial = true;
 
-		this.type = 'MeshLambertMaterial';
+// 		this.type = 'MeshLambertMaterial';
 
-		this.color = new Color( 0xffffff ); // diffuse
+// 		this.color = new Color( 0xffffff ); // diffuse
 
-		this.map = null;
+// 		this.map = null;
 
-		this.lightMap = null;
-		this.lightMapIntensity = 1.0;
+// 		this.lightMap = null;
+// 		this.lightMapIntensity = 1.0;
 
-		this.aoMap = null;
-		this.aoMapIntensity = 1.0;
+// 		this.aoMap = null;
+// 		this.aoMapIntensity = 1.0;
 
-		this.emissive = new Color( 0x000000 );
-		this.emissiveIntensity = 1.0;
-		this.emissiveMap = null;
+// 		this.emissive = new Color( 0x000000 );
+// 		this.emissiveIntensity = 1.0;
+// 		this.emissiveMap = null;
 
-		this.bumpMap = null;
-		this.bumpScale = 1;
+// 		this.bumpMap = null;
+// 		this.bumpScale = 1;
 
-		this.normalMap = null;
-		this.normalMapType = TangentSpaceNormalMap;
-		this.normalScale = new Vector2( 1, 1 );
+// 		this.normalMap = null;
+// 		this.normalMapType = TangentSpaceNormalMap;
+// 		this.normalScale = new Vector2( 1, 1 );
 
-		this.displacementMap = null;
-		this.displacementScale = 1;
-		this.displacementBias = 0;
+// 		this.displacementMap = null;
+// 		this.displacementScale = 1;
+// 		this.displacementBias = 0;
 
-		this.specularMap = null;
+// 		this.specularMap = null;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.envMap = null;
-		this.combine = MultiplyOperation;
-		this.reflectivity = 1;
-		this.refractionRatio = 0.98;
+// 		this.envMap = null;
+// 		this.combine = MultiplyOperation;
+// 		this.reflectivity = 1;
+// 		this.refractionRatio = 0.98;
 
-		this.wireframe = false;
-		this.wireframeLinewidth = 1;
-		this.wireframeLinecap = 'round';
-		this.wireframeLinejoin = 'round';
+// 		this.wireframe = false;
+// 		this.wireframeLinewidth = 1;
+// 		this.wireframeLinecap = 'round';
+// 		this.wireframeLinejoin = 'round';
 
-		this.flatShading = false;
+// 		this.flatShading = false;
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.color.copy( source.color );
+// 		this.color.copy( source.color );
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.lightMap = source.lightMap;
-		this.lightMapIntensity = source.lightMapIntensity;
+// 		this.lightMap = source.lightMap;
+// 		this.lightMapIntensity = source.lightMapIntensity;
 
-		this.aoMap = source.aoMap;
-		this.aoMapIntensity = source.aoMapIntensity;
+// 		this.aoMap = source.aoMap;
+// 		this.aoMapIntensity = source.aoMapIntensity;
 
-		this.emissive.copy( source.emissive );
-		this.emissiveMap = source.emissiveMap;
-		this.emissiveIntensity = source.emissiveIntensity;
+// 		this.emissive.copy( source.emissive );
+// 		this.emissiveMap = source.emissiveMap;
+// 		this.emissiveIntensity = source.emissiveIntensity;
 
-		this.bumpMap = source.bumpMap;
-		this.bumpScale = source.bumpScale;
+// 		this.bumpMap = source.bumpMap;
+// 		this.bumpScale = source.bumpScale;
 
-		this.normalMap = source.normalMap;
-		this.normalMapType = source.normalMapType;
-		this.normalScale.copy( source.normalScale );
+// 		this.normalMap = source.normalMap;
+// 		this.normalMapType = source.normalMapType;
+// 		this.normalScale.copy( source.normalScale );
 
-		this.displacementMap = source.displacementMap;
-		this.displacementScale = source.displacementScale;
-		this.displacementBias = source.displacementBias;
+// 		this.displacementMap = source.displacementMap;
+// 		this.displacementScale = source.displacementScale;
+// 		this.displacementBias = source.displacementBias;
 
-		this.specularMap = source.specularMap;
+// 		this.specularMap = source.specularMap;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.envMap = source.envMap;
-		this.combine = source.combine;
-		this.reflectivity = source.reflectivity;
-		this.refractionRatio = source.refractionRatio;
+// 		this.envMap = source.envMap;
+// 		this.combine = source.combine;
+// 		this.reflectivity = source.reflectivity;
+// 		this.refractionRatio = source.refractionRatio;
 
-		this.wireframe = source.wireframe;
-		this.wireframeLinewidth = source.wireframeLinewidth;
-		this.wireframeLinecap = source.wireframeLinecap;
-		this.wireframeLinejoin = source.wireframeLinejoin;
+// 		this.wireframe = source.wireframe;
+// 		this.wireframeLinewidth = source.wireframeLinewidth;
+// 		this.wireframeLinecap = source.wireframeLinecap;
+// 		this.wireframeLinejoin = source.wireframeLinejoin;
 
-		this.flatShading = source.flatShading;
+// 		this.flatShading = source.flatShading;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class MeshMatcapMaterial extends Material {
+// class MeshMatcapMaterial extends Material {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isMeshMatcapMaterial = true;
+// 		this.isMeshMatcapMaterial = true;
 
-		this.defines = { 'MATCAP': '' };
+// 		this.defines = { 'MATCAP': '' };
 
-		this.type = 'MeshMatcapMaterial';
+// 		this.type = 'MeshMatcapMaterial';
 
-		this.color = new Color( 0xffffff ); // diffuse
+// 		this.color = new Color( 0xffffff ); // diffuse
 
-		this.matcap = null;
+// 		this.matcap = null;
 
-		this.map = null;
+// 		this.map = null;
 
-		this.bumpMap = null;
-		this.bumpScale = 1;
+// 		this.bumpMap = null;
+// 		this.bumpScale = 1;
 
-		this.normalMap = null;
-		this.normalMapType = TangentSpaceNormalMap;
-		this.normalScale = new Vector2( 1, 1 );
+// 		this.normalMap = null;
+// 		this.normalMapType = TangentSpaceNormalMap;
+// 		this.normalScale = new Vector2( 1, 1 );
 
-		this.displacementMap = null;
-		this.displacementScale = 1;
-		this.displacementBias = 0;
+// 		this.displacementMap = null;
+// 		this.displacementScale = 1;
+// 		this.displacementBias = 0;
 
-		this.alphaMap = null;
+// 		this.alphaMap = null;
 
-		this.flatShading = false;
+// 		this.flatShading = false;
 
-		this.fog = true;
+// 		this.fog = true;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.defines = { 'MATCAP': '' };
+// 		this.defines = { 'MATCAP': '' };
 
-		this.color.copy( source.color );
+// 		this.color.copy( source.color );
 
-		this.matcap = source.matcap;
+// 		this.matcap = source.matcap;
 
-		this.map = source.map;
+// 		this.map = source.map;
 
-		this.bumpMap = source.bumpMap;
-		this.bumpScale = source.bumpScale;
+// 		this.bumpMap = source.bumpMap;
+// 		this.bumpScale = source.bumpScale;
 
-		this.normalMap = source.normalMap;
-		this.normalMapType = source.normalMapType;
-		this.normalScale.copy( source.normalScale );
+// 		this.normalMap = source.normalMap;
+// 		this.normalMapType = source.normalMapType;
+// 		this.normalScale.copy( source.normalScale );
 
-		this.displacementMap = source.displacementMap;
-		this.displacementScale = source.displacementScale;
-		this.displacementBias = source.displacementBias;
+// 		this.displacementMap = source.displacementMap;
+// 		this.displacementScale = source.displacementScale;
+// 		this.displacementBias = source.displacementBias;
 
-		this.alphaMap = source.alphaMap;
+// 		this.alphaMap = source.alphaMap;
 
-		this.flatShading = source.flatShading;
+// 		this.flatShading = source.flatShading;
 
-		this.fog = source.fog;
+// 		this.fog = source.fog;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class LineDashedMaterial extends LineBasicMaterial {
+// class LineDashedMaterial extends LineBasicMaterial {
 
-	constructor( parameters ) {
+// 	constructor( parameters ) {
 
-		super();
+// 		super();
 
-		this.isLineDashedMaterial = true;
+// 		this.isLineDashedMaterial = true;
 
-		this.type = 'LineDashedMaterial';
+// 		this.type = 'LineDashedMaterial';
 
-		this.scale = 1;
-		this.dashSize = 3;
-		this.gapSize = 1;
+// 		this.scale = 1;
+// 		this.dashSize = 3;
+// 		this.gapSize = 1;
 
-		this.setValues( parameters );
+// 		this.setValues( parameters );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.scale = source.scale;
-		this.dashSize = source.dashSize;
-		this.gapSize = source.gapSize;
+// 		this.scale = source.scale;
+// 		this.dashSize = source.dashSize;
+// 		this.gapSize = source.gapSize;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-// same as Array.prototype.slice, but also works on typed arrays
-function arraySlice( array, from, to ) {
+// // same as Array.prototype.slice, but also works on typed arrays
+// function arraySlice( array, from, to ) {
 
-	if ( isTypedArray( array ) ) {
+// 	if ( isTypedArray( array ) ) {
 
-		// in ios9 array.subarray(from, undefined) will return empty array
-		// but array.subarray(from) or array.subarray(from, len) is correct
-		return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );
+// 		// in ios9 array.subarray(from, undefined) will return empty array
+// 		// but array.subarray(from) or array.subarray(from, len) is correct
+// 		return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );
 
-	}
+// 	}
 
-	return array.slice( from, to );
+// 	return array.slice( from, to );
 
-}
+// }
 
-// converts an array to a specific type
-function convertArray( array, type, forceClone ) {
+// // converts an array to a specific type
+// function convertArray( array, type, forceClone ) {
 
-	if ( ! array || // let 'undefined' and 'null' pass
-		! forceClone && array.constructor === type ) return array;
+// 	if ( ! array || // let 'undefined' and 'null' pass
+// 		! forceClone && array.constructor === type ) return array;
 
-	if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {
+// 	if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {
 
-		return new type( array ); // create typed array
+// 		return new type( array ); // create typed array
 
-	}
+// 	}
 
-	return Array.prototype.slice.call( array ); // create Array
+// 	return Array.prototype.slice.call( array ); // create Array
 
-}
+// }
 
-function isTypedArray( object ) {
+// function isTypedArray( object ) {
 
-	return ArrayBuffer.isView( object ) &&
-		! ( object instanceof DataView );
+// 	return ArrayBuffer.isView( object ) &&
+// 		! ( object instanceof DataView );
 
-}
+// }
 
-// returns an array by which times and values can be sorted
-function getKeyframeOrder( times ) {
+// // returns an array by which times and values can be sorted
+// function getKeyframeOrder( times ) {
 
-	function compareTime( i, j ) {
+// 	function compareTime( i, j ) {
 
-		return times[ i ] - times[ j ];
+// 		return times[ i ] - times[ j ];
 
-	}
+// 	}
 
-	const n = times.length;
-	const result = new Array( n );
-	for ( let i = 0; i !== n; ++ i ) result[ i ] = i;
+// 	const n = times.length;
+// 	const result = new Array( n );
+// 	for ( let i = 0; i !== n; ++ i ) result[ i ] = i;
 
-	result.sort( compareTime );
+// 	result.sort( compareTime );
 
-	return result;
+// 	return result;
 
-}
+// }
 
-// uses the array previously returned by 'getKeyframeOrder' to sort data
-function sortedArray( values, stride, order ) {
+// // uses the array previously returned by 'getKeyframeOrder' to sort data
+// function sortedArray( values, stride, order ) {
 
-	const nValues = values.length;
-	const result = new values.constructor( nValues );
+// 	const nValues = values.length;
+// 	const result = new values.constructor( nValues );
 
-	for ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {
+// 	for ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {
 
-		const srcOffset = order[ i ] * stride;
+// 		const srcOffset = order[ i ] * stride;
 
-		for ( let j = 0; j !== stride; ++ j ) {
+// 		for ( let j = 0; j !== stride; ++ j ) {
 
-			result[ dstOffset ++ ] = values[ srcOffset + j ];
+// 			result[ dstOffset ++ ] = values[ srcOffset + j ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return result;
+// 	return result;
 
-}
+// }
 
-// function for parsing AOS keyframe formats
-function flattenJSON( jsonKeys, times, values, valuePropertyName ) {
+// // function for parsing AOS keyframe formats
+// function flattenJSON( jsonKeys, times, values, valuePropertyName ) {
 
-	let i = 1, key = jsonKeys[ 0 ];
+// 	let i = 1, key = jsonKeys[ 0 ];
 
-	while ( key !== undefined && key[ valuePropertyName ] === undefined ) {
+// 	while ( key !== undefined && key[ valuePropertyName ] === undefined ) {
 
-		key = jsonKeys[ i ++ ];
+// 		key = jsonKeys[ i ++ ];
 
-	}
+// 	}
 
-	if ( key === undefined ) return; // no data
+// 	if ( key === undefined ) return; // no data
 
-	let value = key[ valuePropertyName ];
-	if ( value === undefined ) return; // no data
+// 	let value = key[ valuePropertyName ];
+// 	if ( value === undefined ) return; // no data
 
-	if ( Array.isArray( value ) ) {
+// 	if ( Array.isArray( value ) ) {
 
-		do {
+// 		do {
 
-			value = key[ valuePropertyName ];
+// 			value = key[ valuePropertyName ];
 
-			if ( value !== undefined ) {
+// 			if ( value !== undefined ) {
 
-				times.push( key.time );
-				values.push.apply( values, value ); // push all elements
+// 				times.push( key.time );
+// 				values.push.apply( values, value ); // push all elements
 
-			}
+// 			}
 
-			key = jsonKeys[ i ++ ];
+// 			key = jsonKeys[ i ++ ];
 
-		} while ( key !== undefined );
+// 		} while ( key !== undefined );
 
-	} else if ( value.toArray !== undefined ) {
+// 	} else if ( value.toArray !== undefined ) {
 
-		// ...assume THREE.Math-ish
+// 		// ...assume THREE.Math-ish
 
-		do {
+// 		do {
 
-			value = key[ valuePropertyName ];
+// 			value = key[ valuePropertyName ];
 
-			if ( value !== undefined ) {
+// 			if ( value !== undefined ) {
 
-				times.push( key.time );
-				value.toArray( values, values.length );
+// 				times.push( key.time );
+// 				value.toArray( values, values.length );
 
-			}
+// 			}
 
-			key = jsonKeys[ i ++ ];
+// 			key = jsonKeys[ i ++ ];
 
-		} while ( key !== undefined );
+// 		} while ( key !== undefined );
 
-	} else {
+// 	} else {
 
-		// otherwise push as-is
+// 		// otherwise push as-is
 
-		do {
+// 		do {
 
-			value = key[ valuePropertyName ];
+// 			value = key[ valuePropertyName ];
 
-			if ( value !== undefined ) {
+// 			if ( value !== undefined ) {
 
-				times.push( key.time );
-				values.push( value );
+// 				times.push( key.time );
+// 				values.push( value );
 
-			}
+// 			}
 
-			key = jsonKeys[ i ++ ];
+// 			key = jsonKeys[ i ++ ];
 
-		} while ( key !== undefined );
+// 		} while ( key !== undefined );
 
-	}
+// 	}
 
-}
+// }
 
-function subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {
+// function subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {
 
-	const clip = sourceClip.clone();
+// 	const clip = sourceClip.clone();
 
-	clip.name = name;
+// 	clip.name = name;
 
-	const tracks = [];
+// 	const tracks = [];
 
-	for ( let i = 0; i < clip.tracks.length; ++ i ) {
+// 	for ( let i = 0; i < clip.tracks.length; ++ i ) {
 
-		const track = clip.tracks[ i ];
-		const valueSize = track.getValueSize();
+// 		const track = clip.tracks[ i ];
+// 		const valueSize = track.getValueSize();
 
-		const times = [];
-		const values = [];
+// 		const times = [];
+// 		const values = [];
 
-		for ( let j = 0; j < track.times.length; ++ j ) {
+// 		for ( let j = 0; j < track.times.length; ++ j ) {
 
-			const frame = track.times[ j ] * fps;
+// 			const frame = track.times[ j ] * fps;
 
-			if ( frame < startFrame || frame >= endFrame ) continue;
+// 			if ( frame < startFrame || frame >= endFrame ) continue;
 
-			times.push( track.times[ j ] );
+// 			times.push( track.times[ j ] );
 
-			for ( let k = 0; k < valueSize; ++ k ) {
+// 			for ( let k = 0; k < valueSize; ++ k ) {
 
-				values.push( track.values[ j * valueSize + k ] );
+// 				values.push( track.values[ j * valueSize + k ] );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( times.length === 0 ) continue;
+// 		if ( times.length === 0 ) continue;
 
-		track.times = convertArray( times, track.times.constructor );
-		track.values = convertArray( values, track.values.constructor );
+// 		track.times = convertArray( times, track.times.constructor );
+// 		track.values = convertArray( values, track.values.constructor );
 
-		tracks.push( track );
+// 		tracks.push( track );
 
-	}
+// 	}
 
-	clip.tracks = tracks;
+// 	clip.tracks = tracks;
 
-	// find minimum .times value across all tracks in the trimmed clip
+// 	// find minimum .times value across all tracks in the trimmed clip
 
-	let minStartTime = Infinity;
+// 	let minStartTime = Infinity;
 
-	for ( let i = 0; i < clip.tracks.length; ++ i ) {
+// 	for ( let i = 0; i < clip.tracks.length; ++ i ) {
 
-		if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {
+// 		if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {
 
-			minStartTime = clip.tracks[ i ].times[ 0 ];
+// 			minStartTime = clip.tracks[ i ].times[ 0 ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// shift all tracks such that clip begins at t=0
+// 	// shift all tracks such that clip begins at t=0
 
-	for ( let i = 0; i < clip.tracks.length; ++ i ) {
+// 	for ( let i = 0; i < clip.tracks.length; ++ i ) {
 
-		clip.tracks[ i ].shift( - 1 * minStartTime );
+// 		clip.tracks[ i ].shift( - 1 * minStartTime );
 
-	}
+// 	}
 
-	clip.resetDuration();
+// 	clip.resetDuration();
 
-	return clip;
+// 	return clip;
 
-}
+// }
 
-function makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {
+// function makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {
 
-	if ( fps <= 0 ) fps = 30;
+// 	if ( fps <= 0 ) fps = 30;
 
-	const numTracks = referenceClip.tracks.length;
-	const referenceTime = referenceFrame / fps;
+// 	const numTracks = referenceClip.tracks.length;
+// 	const referenceTime = referenceFrame / fps;
 
-	// Make each track's values relative to the values at the reference frame
-	for ( let i = 0; i < numTracks; ++ i ) {
+// 	// Make each track's values relative to the values at the reference frame
+// 	for ( let i = 0; i < numTracks; ++ i ) {
 
-		const referenceTrack = referenceClip.tracks[ i ];
-		const referenceTrackType = referenceTrack.ValueTypeName;
+// 		const referenceTrack = referenceClip.tracks[ i ];
+// 		const referenceTrackType = referenceTrack.ValueTypeName;
 
-		// Skip this track if it's non-numeric
-		if ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;
+// 		// Skip this track if it's non-numeric
+// 		if ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;
 
-		// Find the track in the target clip whose name and type matches the reference track
-		const targetTrack = targetClip.tracks.find( function ( track ) {
+// 		// Find the track in the target clip whose name and type matches the reference track
+// 		const targetTrack = targetClip.tracks.find( function ( track ) {
 
-			return track.name === referenceTrack.name
-				&& track.ValueTypeName === referenceTrackType;
+// 			return track.name === referenceTrack.name
+// 				&& track.ValueTypeName === referenceTrackType;
 
-		} );
+// 		} );
 
-		if ( targetTrack === undefined ) continue;
+// 		if ( targetTrack === undefined ) continue;
 
-		let referenceOffset = 0;
-		const referenceValueSize = referenceTrack.getValueSize();
+// 		let referenceOffset = 0;
+// 		const referenceValueSize = referenceTrack.getValueSize();
 
-		if ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {
+// 		if ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {
 
-			referenceOffset = referenceValueSize / 3;
+// 			referenceOffset = referenceValueSize / 3;
 
-		}
+// 		}
 
-		let targetOffset = 0;
-		const targetValueSize = targetTrack.getValueSize();
+// 		let targetOffset = 0;
+// 		const targetValueSize = targetTrack.getValueSize();
 
-		if ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {
+// 		if ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {
 
-			targetOffset = targetValueSize / 3;
+// 			targetOffset = targetValueSize / 3;
 
-		}
+// 		}
 
-		const lastIndex = referenceTrack.times.length - 1;
-		let referenceValue;
+// 		const lastIndex = referenceTrack.times.length - 1;
+// 		let referenceValue;
 
-		// Find the value to subtract out of the track
-		if ( referenceTime <= referenceTrack.times[ 0 ] ) {
+// 		// Find the value to subtract out of the track
+// 		if ( referenceTime <= referenceTrack.times[ 0 ] ) {
 
-			// Reference frame is earlier than the first keyframe, so just use the first keyframe
-			const startIndex = referenceOffset;
-			const endIndex = referenceValueSize - referenceOffset;
-			referenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );
+// 			// Reference frame is earlier than the first keyframe, so just use the first keyframe
+// 			const startIndex = referenceOffset;
+// 			const endIndex = referenceValueSize - referenceOffset;
+// 			referenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );
 
-		} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {
+// 		} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {
 
-			// Reference frame is after the last keyframe, so just use the last keyframe
-			const startIndex = lastIndex * referenceValueSize + referenceOffset;
-			const endIndex = startIndex + referenceValueSize - referenceOffset;
-			referenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );
+// 			// Reference frame is after the last keyframe, so just use the last keyframe
+// 			const startIndex = lastIndex * referenceValueSize + referenceOffset;
+// 			const endIndex = startIndex + referenceValueSize - referenceOffset;
+// 			referenceValue = arraySlice( referenceTrack.values, startIndex, endIndex );
 
-		} else {
+// 		} else {
 
-			// Interpolate to the reference value
-			const interpolant = referenceTrack.createInterpolant();
-			const startIndex = referenceOffset;
-			const endIndex = referenceValueSize - referenceOffset;
-			interpolant.evaluate( referenceTime );
-			referenceValue = arraySlice( interpolant.resultBuffer, startIndex, endIndex );
+// 			// Interpolate to the reference value
+// 			const interpolant = referenceTrack.createInterpolant();
+// 			const startIndex = referenceOffset;
+// 			const endIndex = referenceValueSize - referenceOffset;
+// 			interpolant.evaluate( referenceTime );
+// 			referenceValue = arraySlice( interpolant.resultBuffer, startIndex, endIndex );
 
-		}
+// 		}
 
-		// Conjugate the quaternion
-		if ( referenceTrackType === 'quaternion' ) {
+// 		// Conjugate the quaternion
+// 		if ( referenceTrackType === 'quaternion' ) {
 
-			const referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();
-			referenceQuat.toArray( referenceValue );
+// 			const referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();
+// 			referenceQuat.toArray( referenceValue );
 
-		}
+// 		}
 
-		// Subtract the reference value from all of the track values
+// 		// Subtract the reference value from all of the track values
 
-		const numTimes = targetTrack.times.length;
-		for ( let j = 0; j < numTimes; ++ j ) {
+// 		const numTimes = targetTrack.times.length;
+// 		for ( let j = 0; j < numTimes; ++ j ) {
 
-			const valueStart = j * targetValueSize + targetOffset;
+// 			const valueStart = j * targetValueSize + targetOffset;
 
-			if ( referenceTrackType === 'quaternion' ) {
+// 			if ( referenceTrackType === 'quaternion' ) {
 
-				// Multiply the conjugate for quaternion track types
-				Quaternion.multiplyQuaternionsFlat(
-					targetTrack.values,
-					valueStart,
-					referenceValue,
-					0,
-					targetTrack.values,
-					valueStart
-				);
+// 				// Multiply the conjugate for quaternion track types
+// 				Quaternion.multiplyQuaternionsFlat(
+// 					targetTrack.values,
+// 					valueStart,
+// 					referenceValue,
+// 					0,
+// 					targetTrack.values,
+// 					valueStart
+// 				);
 
-			} else {
+// 			} else {
 
-				const valueEnd = targetValueSize - targetOffset * 2;
+// 				const valueEnd = targetValueSize - targetOffset * 2;
 
-				// Subtract each value for all other numeric track types
-				for ( let k = 0; k < valueEnd; ++ k ) {
+// 				// Subtract each value for all other numeric track types
+// 				for ( let k = 0; k < valueEnd; ++ k ) {
 
-					targetTrack.values[ valueStart + k ] -= referenceValue[ k ];
+// 					targetTrack.values[ valueStart + k ] -= referenceValue[ k ];
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	targetClip.blendMode = AdditiveAnimationBlendMode;
+// 	targetClip.blendMode = AdditiveAnimationBlendMode;
 
-	return targetClip;
+// 	return targetClip;
 
-}
+// }
 
-var AnimationUtils = /*#__PURE__*/Object.freeze({
-	__proto__: null,
-	arraySlice: arraySlice,
-	convertArray: convertArray,
-	isTypedArray: isTypedArray,
-	getKeyframeOrder: getKeyframeOrder,
-	sortedArray: sortedArray,
-	flattenJSON: flattenJSON,
-	subclip: subclip,
-	makeClipAdditive: makeClipAdditive
-});
+// var AnimationUtils = /*#__PURE__*/Object.freeze({
+// 	__proto__: null,
+// 	arraySlice: arraySlice,
+// 	convertArray: convertArray,
+// 	isTypedArray: isTypedArray,
+// 	getKeyframeOrder: getKeyframeOrder,
+// 	sortedArray: sortedArray,
+// 	flattenJSON: flattenJSON,
+// 	subclip: subclip,
+// 	makeClipAdditive: makeClipAdditive
+// });
 
-/**
- * Abstract base class of interpolants over parametric samples.
- *
- * The parameter domain is one dimensional, typically the time or a path
- * along a curve defined by the data.
- *
- * The sample values can have any dimensionality and derived classes may
- * apply special interpretations to the data.
- *
- * This class provides the interval seek in a Template Method, deferring
- * the actual interpolation to derived classes.
- *
- * Time complexity is O(1) for linear access crossing at most two points
- * and O(log N) for random access, where N is the number of positions.
- *
- * References:
- *
- * 		http://www.oodesign.com/template-method-pattern.html
- *
- */
+// /**
+//  * Abstract base class of interpolants over parametric samples.
+//  *
+//  * The parameter domain is one dimensional, typically the time or a path
+//  * along a curve defined by the data.
+//  *
+//  * The sample values can have any dimensionality and derived classes may
+//  * apply special interpretations to the data.
+//  *
+//  * This class provides the interval seek in a Template Method, deferring
+//  * the actual interpolation to derived classes.
+//  *
+//  * Time complexity is O(1) for linear access crossing at most two points
+//  * and O(log N) for random access, where N is the number of positions.
+//  *
+//  * References:
+//  *
+//  * 		http://www.oodesign.com/template-method-pattern.html
+//  *
+//  */
 
-class Interpolant {
+// class Interpolant {
 
-	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
+// 	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
 
-		this.parameterPositions = parameterPositions;
-		this._cachedIndex = 0;
+// 		this.parameterPositions = parameterPositions;
+// 		this._cachedIndex = 0;
 
-		this.resultBuffer = resultBuffer !== undefined ?
-			resultBuffer : new sampleValues.constructor( sampleSize );
-		this.sampleValues = sampleValues;
-		this.valueSize = sampleSize;
+// 		this.resultBuffer = resultBuffer !== undefined ?
+// 			resultBuffer : new sampleValues.constructor( sampleSize );
+// 		this.sampleValues = sampleValues;
+// 		this.valueSize = sampleSize;
 
-		this.settings = null;
-		this.DefaultSettings_ = {};
+// 		this.settings = null;
+// 		this.DefaultSettings_ = {};
 
-	}
+// 	}
 
-	evaluate( t ) {
+// 	evaluate( t ) {
 
-		const pp = this.parameterPositions;
-		let i1 = this._cachedIndex,
-			t1 = pp[ i1 ],
-			t0 = pp[ i1 - 1 ];
+// 		const pp = this.parameterPositions;
+// 		let i1 = this._cachedIndex,
+// 			t1 = pp[ i1 ],
+// 			t0 = pp[ i1 - 1 ];
 
-		validate_interval: {
+// 		validate_interval: {
 
-			seek: {
+// 			seek: {
 
-				let right;
+// 				let right;
 
-				linear_scan: {
+// 				linear_scan: {
 
-					//- See http://jsperf.com/comparison-to-undefined/3
-					//- slower code:
-					//-
-					//- 				if ( t >= t1 || t1 === undefined ) {
-					forward_scan: if ( ! ( t < t1 ) ) {
+// 					//- See http://jsperf.com/comparison-to-undefined/3
+// 					//- slower code:
+// 					//-
+// 					//- 				if ( t >= t1 || t1 === undefined ) {
+// 					forward_scan: if ( ! ( t < t1 ) ) {
 
-						for ( let giveUpAt = i1 + 2; ; ) {
+// 						for ( let giveUpAt = i1 + 2; ; ) {
 
-							if ( t1 === undefined ) {
+// 							if ( t1 === undefined ) {
 
-								if ( t < t0 ) break forward_scan;
+// 								if ( t < t0 ) break forward_scan;
 
-								// after end
+// 								// after end
 
-								i1 = pp.length;
-								this._cachedIndex = i1;
-								return this.copySampleValue_( i1 - 1 );
+// 								i1 = pp.length;
+// 								this._cachedIndex = i1;
+// 								return this.copySampleValue_( i1 - 1 );
 
-							}
+// 							}
 
-							if ( i1 === giveUpAt ) break; // this loop
+// 							if ( i1 === giveUpAt ) break; // this loop
 
-							t0 = t1;
-							t1 = pp[ ++ i1 ];
+// 							t0 = t1;
+// 							t1 = pp[ ++ i1 ];
 
-							if ( t < t1 ) {
+// 							if ( t < t1 ) {
 
-								// we have arrived at the sought interval
-								break seek;
+// 								// we have arrived at the sought interval
+// 								break seek;
 
-							}
+// 							}
 
-						}
+// 						}
 
-						// prepare binary search on the right side of the index
-						right = pp.length;
-						break linear_scan;
+// 						// prepare binary search on the right side of the index
+// 						right = pp.length;
+// 						break linear_scan;
 
-					}
+// 					}
 
-					//- slower code:
-					//-					if ( t < t0 || t0 === undefined ) {
-					if ( ! ( t >= t0 ) ) {
+// 					//- slower code:
+// 					//-					if ( t < t0 || t0 === undefined ) {
+// 					if ( ! ( t >= t0 ) ) {
 
-						// looping?
+// 						// looping?
 
-						const t1global = pp[ 1 ];
+// 						const t1global = pp[ 1 ];
 
-						if ( t < t1global ) {
+// 						if ( t < t1global ) {
 
-							i1 = 2; // + 1, using the scan for the details
-							t0 = t1global;
+// 							i1 = 2; // + 1, using the scan for the details
+// 							t0 = t1global;
 
-						}
+// 						}
 
-						// linear reverse scan
+// 						// linear reverse scan
 
-						for ( let giveUpAt = i1 - 2; ; ) {
+// 						for ( let giveUpAt = i1 - 2; ; ) {
 
-							if ( t0 === undefined ) {
+// 							if ( t0 === undefined ) {
 
-								// before start
+// 								// before start
 
-								this._cachedIndex = 0;
-								return this.copySampleValue_( 0 );
+// 								this._cachedIndex = 0;
+// 								return this.copySampleValue_( 0 );
 
-							}
+// 							}
 
-							if ( i1 === giveUpAt ) break; // this loop
+// 							if ( i1 === giveUpAt ) break; // this loop
 
-							t1 = t0;
-							t0 = pp[ -- i1 - 1 ];
+// 							t1 = t0;
+// 							t0 = pp[ -- i1 - 1 ];
 
-							if ( t >= t0 ) {
+// 							if ( t >= t0 ) {
 
-								// we have arrived at the sought interval
-								break seek;
+// 								// we have arrived at the sought interval
+// 								break seek;
 
-							}
+// 							}
 
-						}
+// 						}
 
-						// prepare binary search on the left side of the index
-						right = i1;
-						i1 = 0;
-						break linear_scan;
+// 						// prepare binary search on the left side of the index
+// 						right = i1;
+// 						i1 = 0;
+// 						break linear_scan;
 
-					}
+// 					}
 
-					// the interval is valid
+// 					// the interval is valid
 
-					break validate_interval;
+// 					break validate_interval;
 
-				} // linear scan
+// 				} // linear scan
 
-				// binary search
+// 				// binary search
 
-				while ( i1 < right ) {
+// 				while ( i1 < right ) {
 
-					const mid = ( i1 + right ) >>> 1;
+// 					const mid = ( i1 + right ) >>> 1;
 
-					if ( t < pp[ mid ] ) {
+// 					if ( t < pp[ mid ] ) {
 
-						right = mid;
+// 						right = mid;
 
-					} else {
+// 					} else {
 
-						i1 = mid + 1;
+// 						i1 = mid + 1;
 
-					}
+// 					}
 
-				}
+// 				}
 
-				t1 = pp[ i1 ];
-				t0 = pp[ i1 - 1 ];
+// 				t1 = pp[ i1 ];
+// 				t0 = pp[ i1 - 1 ];
 
-				// check boundary cases, again
+// 				// check boundary cases, again
 
-				if ( t0 === undefined ) {
+// 				if ( t0 === undefined ) {
 
-					this._cachedIndex = 0;
-					return this.copySampleValue_( 0 );
+// 					this._cachedIndex = 0;
+// 					return this.copySampleValue_( 0 );
 
-				}
+// 				}
 
-				if ( t1 === undefined ) {
+// 				if ( t1 === undefined ) {
 
-					i1 = pp.length;
-					this._cachedIndex = i1;
-					return this.copySampleValue_( i1 - 1 );
+// 					i1 = pp.length;
+// 					this._cachedIndex = i1;
+// 					return this.copySampleValue_( i1 - 1 );
 
-				}
+// 				}
 
-			} // seek
+// 			} // seek
 
-			this._cachedIndex = i1;
+// 			this._cachedIndex = i1;
 
-			this.intervalChanged_( i1, t0, t1 );
+// 			this.intervalChanged_( i1, t0, t1 );
 
-		} // validate_interval
+// 		} // validate_interval
 
-		return this.interpolate_( i1, t0, t, t1 );
+// 		return this.interpolate_( i1, t0, t, t1 );
 
-	}
+// 	}
 
-	getSettings_() {
+// 	getSettings_() {
 
-		return this.settings || this.DefaultSettings_;
+// 		return this.settings || this.DefaultSettings_;
 
-	}
+// 	}
 
-	copySampleValue_( index ) {
+// 	copySampleValue_( index ) {
 
-		// copies a sample value to the result buffer
+// 		// copies a sample value to the result buffer
 
-		const result = this.resultBuffer,
-			values = this.sampleValues,
-			stride = this.valueSize,
-			offset = index * stride;
+// 		const result = this.resultBuffer,
+// 			values = this.sampleValues,
+// 			stride = this.valueSize,
+// 			offset = index * stride;
 
-		for ( let i = 0; i !== stride; ++ i ) {
+// 		for ( let i = 0; i !== stride; ++ i ) {
 
-			result[ i ] = values[ offset + i ];
+// 			result[ i ] = values[ offset + i ];
 
-		}
+// 		}
 
-		return result;
+// 		return result;
 
-	}
+// 	}
 
-	// Template methods for derived classes:
+// 	// Template methods for derived classes:
 
-	interpolate_( /* i1, t0, t, t1 */ ) {
+// 	interpolate_( /* i1, t0, t, t1 */ ) {
 
-		throw new Error( 'call to abstract method' );
-		// implementations shall return this.resultBuffer
+// 		throw new Error( 'call to abstract method' );
+// 		// implementations shall return this.resultBuffer
 
-	}
+// 	}
 
-	intervalChanged_( /* i1, t0, t1 */ ) {
+// 	intervalChanged_( /* i1, t0, t1 */ ) {
 
-		// empty
+// 		// empty
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Fast and simple cubic spline interpolant.
- *
- * It was derived from a Hermitian construction setting the first derivative
- * at each sample position to the linear slope between neighboring positions
- * over their parameter interval.
- */
+// /**
+//  * Fast and simple cubic spline interpolant.
+//  *
+//  * It was derived from a Hermitian construction setting the first derivative
+//  * at each sample position to the linear slope between neighboring positions
+//  * over their parameter interval.
+//  */
 
-class CubicInterpolant extends Interpolant {
+// class CubicInterpolant extends Interpolant {
 
-	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
+// 	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
 
-		super( parameterPositions, sampleValues, sampleSize, resultBuffer );
+// 		super( parameterPositions, sampleValues, sampleSize, resultBuffer );
 
-		this._weightPrev = - 0;
-		this._offsetPrev = - 0;
-		this._weightNext = - 0;
-		this._offsetNext = - 0;
+// 		this._weightPrev = - 0;
+// 		this._offsetPrev = - 0;
+// 		this._weightNext = - 0;
+// 		this._offsetNext = - 0;
 
-		this.DefaultSettings_ = {
+// 		this.DefaultSettings_ = {
 
-			endingStart: ZeroCurvatureEnding,
-			endingEnd: ZeroCurvatureEnding
+// 			endingStart: ZeroCurvatureEnding,
+// 			endingEnd: ZeroCurvatureEnding
 
-		};
+// 		};
 
-	}
+// 	}
 
-	intervalChanged_( i1, t0, t1 ) {
+// 	intervalChanged_( i1, t0, t1 ) {
 
-		const pp = this.parameterPositions;
-		let iPrev = i1 - 2,
-			iNext = i1 + 1,
+// 		const pp = this.parameterPositions;
+// 		let iPrev = i1 - 2,
+// 			iNext = i1 + 1,
 
-			tPrev = pp[ iPrev ],
-			tNext = pp[ iNext ];
+// 			tPrev = pp[ iPrev ],
+// 			tNext = pp[ iNext ];
 
-		if ( tPrev === undefined ) {
+// 		if ( tPrev === undefined ) {
 
-			switch ( this.getSettings_().endingStart ) {
+// 			switch ( this.getSettings_().endingStart ) {
 
-				case ZeroSlopeEnding:
+// 				case ZeroSlopeEnding:
 
-					// f'(t0) = 0
-					iPrev = i1;
-					tPrev = 2 * t0 - t1;
+// 					// f'(t0) = 0
+// 					iPrev = i1;
+// 					tPrev = 2 * t0 - t1;
 
-					break;
+// 					break;
 
-				case WrapAroundEnding:
+// 				case WrapAroundEnding:
 
-					// use the other end of the curve
-					iPrev = pp.length - 2;
-					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];
+// 					// use the other end of the curve
+// 					iPrev = pp.length - 2;
+// 					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];
 
-					break;
+// 					break;
 
-				default: // ZeroCurvatureEnding
+// 				default: // ZeroCurvatureEnding
 
-					// f''(t0) = 0 a.k.a. Natural Spline
-					iPrev = i1;
-					tPrev = t1;
+// 					// f''(t0) = 0 a.k.a. Natural Spline
+// 					iPrev = i1;
+// 					tPrev = t1;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( tNext === undefined ) {
+// 		if ( tNext === undefined ) {
 
-			switch ( this.getSettings_().endingEnd ) {
+// 			switch ( this.getSettings_().endingEnd ) {
 
-				case ZeroSlopeEnding:
+// 				case ZeroSlopeEnding:
 
-					// f'(tN) = 0
-					iNext = i1;
-					tNext = 2 * t1 - t0;
+// 					// f'(tN) = 0
+// 					iNext = i1;
+// 					tNext = 2 * t1 - t0;
 
-					break;
+// 					break;
 
-				case WrapAroundEnding:
+// 				case WrapAroundEnding:
 
-					// use the other end of the curve
-					iNext = 1;
-					tNext = t1 + pp[ 1 ] - pp[ 0 ];
+// 					// use the other end of the curve
+// 					iNext = 1;
+// 					tNext = t1 + pp[ 1 ] - pp[ 0 ];
 
-					break;
+// 					break;
 
-				default: // ZeroCurvatureEnding
+// 				default: // ZeroCurvatureEnding
 
-					// f''(tN) = 0, a.k.a. Natural Spline
-					iNext = i1 - 1;
-					tNext = t0;
+// 					// f''(tN) = 0, a.k.a. Natural Spline
+// 					iNext = i1 - 1;
+// 					tNext = t0;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const halfDt = ( t1 - t0 ) * 0.5,
-			stride = this.valueSize;
+// 		const halfDt = ( t1 - t0 ) * 0.5,
+// 			stride = this.valueSize;
 
-		this._weightPrev = halfDt / ( t0 - tPrev );
-		this._weightNext = halfDt / ( tNext - t1 );
-		this._offsetPrev = iPrev * stride;
-		this._offsetNext = iNext * stride;
+// 		this._weightPrev = halfDt / ( t0 - tPrev );
+// 		this._weightNext = halfDt / ( tNext - t1 );
+// 		this._offsetPrev = iPrev * stride;
+// 		this._offsetNext = iNext * stride;
 
-	}
+// 	}
 
-	interpolate_( i1, t0, t, t1 ) {
+// 	interpolate_( i1, t0, t, t1 ) {
 
-		const result = this.resultBuffer,
-			values = this.sampleValues,
-			stride = this.valueSize,
+// 		const result = this.resultBuffer,
+// 			values = this.sampleValues,
+// 			stride = this.valueSize,
 
-			o1 = i1 * stride,		o0 = o1 - stride,
-			oP = this._offsetPrev, 	oN = this._offsetNext,
-			wP = this._weightPrev,	wN = this._weightNext,
+// 			o1 = i1 * stride,		o0 = o1 - stride,
+// 			oP = this._offsetPrev, 	oN = this._offsetNext,
+// 			wP = this._weightPrev,	wN = this._weightNext,
 
-			p = ( t - t0 ) / ( t1 - t0 ),
-			pp = p * p,
-			ppp = pp * p;
+// 			p = ( t - t0 ) / ( t1 - t0 ),
+// 			pp = p * p,
+// 			ppp = pp * p;
 
-		// evaluate polynomials
+// 		// evaluate polynomials
 
-		const sP = - wP * ppp + 2 * wP * pp - wP * p;
-		const s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
-		const s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
-		const sN = wN * ppp - wN * pp;
+// 		const sP = - wP * ppp + 2 * wP * pp - wP * p;
+// 		const s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
+// 		const s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
+// 		const sN = wN * ppp - wN * pp;
 
-		// combine data linearly
+// 		// combine data linearly
 
-		for ( let i = 0; i !== stride; ++ i ) {
+// 		for ( let i = 0; i !== stride; ++ i ) {
 
-			result[ i ] =
-					sP * values[ oP + i ] +
-					s0 * values[ o0 + i ] +
-					s1 * values[ o1 + i ] +
-					sN * values[ oN + i ];
+// 			result[ i ] =
+// 					sP * values[ oP + i ] +
+// 					s0 * values[ o0 + i ] +
+// 					s1 * values[ o1 + i ] +
+// 					sN * values[ oN + i ];
 
-		}
+// 		}
 
-		return result;
+// 		return result;
 
-	}
+// 	}
 
-}
+// }
 
-class LinearInterpolant extends Interpolant {
+// class LinearInterpolant extends Interpolant {
 
-	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
+// 	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
 
-		super( parameterPositions, sampleValues, sampleSize, resultBuffer );
+// 		super( parameterPositions, sampleValues, sampleSize, resultBuffer );
 
-	}
+// 	}
 
-	interpolate_( i1, t0, t, t1 ) {
+// 	interpolate_( i1, t0, t, t1 ) {
 
-		const result = this.resultBuffer,
-			values = this.sampleValues,
-			stride = this.valueSize,
+// 		const result = this.resultBuffer,
+// 			values = this.sampleValues,
+// 			stride = this.valueSize,
 
-			offset1 = i1 * stride,
-			offset0 = offset1 - stride,
+// 			offset1 = i1 * stride,
+// 			offset0 = offset1 - stride,
 
-			weight1 = ( t - t0 ) / ( t1 - t0 ),
-			weight0 = 1 - weight1;
+// 			weight1 = ( t - t0 ) / ( t1 - t0 ),
+// 			weight0 = 1 - weight1;
 
-		for ( let i = 0; i !== stride; ++ i ) {
+// 		for ( let i = 0; i !== stride; ++ i ) {
 
-			result[ i ] =
-					values[ offset0 + i ] * weight0 +
-					values[ offset1 + i ] * weight1;
+// 			result[ i ] =
+// 					values[ offset0 + i ] * weight0 +
+// 					values[ offset1 + i ] * weight1;
 
-		}
+// 		}
 
-		return result;
+// 		return result;
 
-	}
+// 	}
 
-}
+// }
 
-/**
- *
- * Interpolant that evaluates to the sample value at the position preceding
- * the parameter.
- */
+// /**
+//  *
+//  * Interpolant that evaluates to the sample value at the position preceding
+//  * the parameter.
+//  */
 
-class DiscreteInterpolant extends Interpolant {
+// class DiscreteInterpolant extends Interpolant {
 
-	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
+// 	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
 
-		super( parameterPositions, sampleValues, sampleSize, resultBuffer );
+// 		super( parameterPositions, sampleValues, sampleSize, resultBuffer );
 
-	}
+// 	}
 
-	interpolate_( i1 /*, t0, t, t1 */ ) {
+// 	interpolate_( i1 /*, t0, t, t1 */ ) {
 
-		return this.copySampleValue_( i1 - 1 );
+// 		return this.copySampleValue_( i1 - 1 );
 
-	}
+// 	}
 
-}
+// }
 
-class KeyframeTrack {
+// class KeyframeTrack {
 
-	constructor( name, times, values, interpolation ) {
+// 	constructor( name, times, values, interpolation ) {
 
-		if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
-		if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );
+// 		if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
+// 		if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );
 
-		this.name = name;
+// 		this.name = name;
 
-		this.times = convertArray( times, this.TimeBufferType );
-		this.values = convertArray( values, this.ValueBufferType );
+// 		this.times = convertArray( times, this.TimeBufferType );
+// 		this.values = convertArray( values, this.ValueBufferType );
 
-		this.setInterpolation( interpolation || this.DefaultInterpolation );
+// 		this.setInterpolation( interpolation || this.DefaultInterpolation );
 
-	}
+// 	}
 
-	// Serialization (in static context, because of constructor invocation
-	// and automatic invocation of .toJSON):
+// 	// Serialization (in static context, because of constructor invocation
+// 	// and automatic invocation of .toJSON):
 
-	static toJSON( track ) {
+// 	static toJSON( track ) {
 
-		const trackType = track.constructor;
+// 		const trackType = track.constructor;
 
-		let json;
+// 		let json;
 
-		// derived classes can define a static toJSON method
-		if ( trackType.toJSON !== this.toJSON ) {
+// 		// derived classes can define a static toJSON method
+// 		if ( trackType.toJSON !== this.toJSON ) {
 
-			json = trackType.toJSON( track );
+// 			json = trackType.toJSON( track );
 
-		} else {
+// 		} else {
 
-			// by default, we assume the data can be serialized as-is
-			json = {
+// 			// by default, we assume the data can be serialized as-is
+// 			json = {
 
-				'name': track.name,
-				'times': convertArray( track.times, Array ),
-				'values': convertArray( track.values, Array )
+// 				'name': track.name,
+// 				'times': convertArray( track.times, Array ),
+// 				'values': convertArray( track.values, Array )
 
-			};
+// 			};
 
-			const interpolation = track.getInterpolation();
+// 			const interpolation = track.getInterpolation();
 
-			if ( interpolation !== track.DefaultInterpolation ) {
+// 			if ( interpolation !== track.DefaultInterpolation ) {
 
-				json.interpolation = interpolation;
+// 				json.interpolation = interpolation;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		json.type = track.ValueTypeName; // mandatory
+// 		json.type = track.ValueTypeName; // mandatory
 
-		return json;
+// 		return json;
 
-	}
+// 	}
 
-	InterpolantFactoryMethodDiscrete( result ) {
+// 	InterpolantFactoryMethodDiscrete( result ) {
 
-		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );
+// 		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );
 
-	}
+// 	}
 
-	InterpolantFactoryMethodLinear( result ) {
+// 	InterpolantFactoryMethodLinear( result ) {
 
-		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );
+// 		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );
 
-	}
+// 	}
 
-	InterpolantFactoryMethodSmooth( result ) {
+// 	InterpolantFactoryMethodSmooth( result ) {
 
-		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );
+// 		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );
 
-	}
+// 	}
 
-	setInterpolation( interpolation ) {
+// 	setInterpolation( interpolation ) {
 
-		let factoryMethod;
+// 		let factoryMethod;
 
-		switch ( interpolation ) {
+// 		switch ( interpolation ) {
 
-			case InterpolateDiscrete:
+// 			case InterpolateDiscrete:
 
-				factoryMethod = this.InterpolantFactoryMethodDiscrete;
+// 				factoryMethod = this.InterpolantFactoryMethodDiscrete;
 
-				break;
+// 				break;
 
-			case InterpolateLinear:
+// 			case InterpolateLinear:
 
-				factoryMethod = this.InterpolantFactoryMethodLinear;
+// 				factoryMethod = this.InterpolantFactoryMethodLinear;
 
-				break;
+// 				break;
 
-			case InterpolateSmooth:
+// 			case InterpolateSmooth:
 
-				factoryMethod = this.InterpolantFactoryMethodSmooth;
+// 				factoryMethod = this.InterpolantFactoryMethodSmooth;
 
-				break;
+// 				break;
 
-		}
+// 		}
 
-		if ( factoryMethod === undefined ) {
+// 		if ( factoryMethod === undefined ) {
 
-			const message = 'unsupported interpolation for ' +
-				this.ValueTypeName + ' keyframe track named ' + this.name;
+// 			const message = 'unsupported interpolation for ' +
+// 				this.ValueTypeName + ' keyframe track named ' + this.name;
 
-			if ( this.createInterpolant === undefined ) {
+// 			if ( this.createInterpolant === undefined ) {
 
-				// fall back to default, unless the default itself is messed up
-				if ( interpolation !== this.DefaultInterpolation ) {
+// 				// fall back to default, unless the default itself is messed up
+// 				if ( interpolation !== this.DefaultInterpolation ) {
 
-					this.setInterpolation( this.DefaultInterpolation );
+// 					this.setInterpolation( this.DefaultInterpolation );
 
-				} else {
+// 				} else {
 
-					throw new Error( message ); // fatal, in this case
+// 					throw new Error( message ); // fatal, in this case
 
-				}
+// 				}
 
-			}
+// 			}
 
-			console.warn( 'THREE.KeyframeTrack:', message );
-			return this;
+// 			console.warn( 'THREE.KeyframeTrack:', message );
+// 			return this;
 
-		}
+// 		}
 
-		this.createInterpolant = factoryMethod;
+// 		this.createInterpolant = factoryMethod;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getInterpolation() {
+// 	getInterpolation() {
 
-		switch ( this.createInterpolant ) {
+// 		switch ( this.createInterpolant ) {
 
-			case this.InterpolantFactoryMethodDiscrete:
+// 			case this.InterpolantFactoryMethodDiscrete:
 
-				return InterpolateDiscrete;
+// 				return InterpolateDiscrete;
 
-			case this.InterpolantFactoryMethodLinear:
+// 			case this.InterpolantFactoryMethodLinear:
 
-				return InterpolateLinear;
+// 				return InterpolateLinear;
 
-			case this.InterpolantFactoryMethodSmooth:
+// 			case this.InterpolantFactoryMethodSmooth:
 
-				return InterpolateSmooth;
+// 				return InterpolateSmooth;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	getValueSize() {
+// 	getValueSize() {
 
-		return this.values.length / this.times.length;
+// 		return this.values.length / this.times.length;
 
-	}
+// 	}
 
-	// move all keyframes either forwards or backwards in time
-	shift( timeOffset ) {
+// 	// move all keyframes either forwards or backwards in time
+// 	shift( timeOffset ) {
 
-		if ( timeOffset !== 0.0 ) {
+// 		if ( timeOffset !== 0.0 ) {
 
-			const times = this.times;
+// 			const times = this.times;
 
-			for ( let i = 0, n = times.length; i !== n; ++ i ) {
+// 			for ( let i = 0, n = times.length; i !== n; ++ i ) {
 
-				times[ i ] += timeOffset;
+// 				times[ i ] += timeOffset;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
-	scale( timeScale ) {
+// 	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
+// 	scale( timeScale ) {
 
-		if ( timeScale !== 1.0 ) {
+// 		if ( timeScale !== 1.0 ) {
 
-			const times = this.times;
+// 			const times = this.times;
 
-			for ( let i = 0, n = times.length; i !== n; ++ i ) {
+// 			for ( let i = 0, n = times.length; i !== n; ++ i ) {
 
-				times[ i ] *= timeScale;
+// 				times[ i ] *= timeScale;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
-	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
-	trim( startTime, endTime ) {
+// 	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
+// 	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
+// 	trim( startTime, endTime ) {
 
-		const times = this.times,
-			nKeys = times.length;
+// 		const times = this.times,
+// 			nKeys = times.length;
 
-		let from = 0,
-			to = nKeys - 1;
+// 		let from = 0,
+// 			to = nKeys - 1;
 
-		while ( from !== nKeys && times[ from ] < startTime ) {
+// 		while ( from !== nKeys && times[ from ] < startTime ) {
 
-			++ from;
+// 			++ from;
 
-		}
+// 		}
 
-		while ( to !== - 1 && times[ to ] > endTime ) {
+// 		while ( to !== - 1 && times[ to ] > endTime ) {
 
-			-- to;
+// 			-- to;
 
-		}
+// 		}
 
-		++ to; // inclusive -> exclusive bound
+// 		++ to; // inclusive -> exclusive bound
 
-		if ( from !== 0 || to !== nKeys ) {
+// 		if ( from !== 0 || to !== nKeys ) {
 
-			// empty tracks are forbidden, so keep at least one keyframe
-			if ( from >= to ) {
+// 			// empty tracks are forbidden, so keep at least one keyframe
+// 			if ( from >= to ) {
 
-				to = Math.max( to, 1 );
-				from = to - 1;
+// 				to = Math.max( to, 1 );
+// 				from = to - 1;
 
-			}
+// 			}
 
-			const stride = this.getValueSize();
-			this.times = arraySlice( times, from, to );
-			this.values = arraySlice( this.values, from * stride, to * stride );
+// 			const stride = this.getValueSize();
+// 			this.times = arraySlice( times, from, to );
+// 			this.values = arraySlice( this.values, from * stride, to * stride );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
-	validate() {
+// 	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
+// 	validate() {
 
-		let valid = true;
+// 		let valid = true;
 
-		const valueSize = this.getValueSize();
-		if ( valueSize - Math.floor( valueSize ) !== 0 ) {
+// 		const valueSize = this.getValueSize();
+// 		if ( valueSize - Math.floor( valueSize ) !== 0 ) {
 
-			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
-			valid = false;
+// 			console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
+// 			valid = false;
 
-		}
+// 		}
 
-		const times = this.times,
-			values = this.values,
+// 		const times = this.times,
+// 			values = this.values,
 
-			nKeys = times.length;
+// 			nKeys = times.length;
 
-		if ( nKeys === 0 ) {
+// 		if ( nKeys === 0 ) {
 
-			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
-			valid = false;
+// 			console.error( 'THREE.KeyframeTrack: Track is empty.', this );
+// 			valid = false;
 
-		}
+// 		}
 
-		let prevTime = null;
+// 		let prevTime = null;
 
-		for ( let i = 0; i !== nKeys; i ++ ) {
+// 		for ( let i = 0; i !== nKeys; i ++ ) {
 
-			const currTime = times[ i ];
+// 			const currTime = times[ i ];
 
-			if ( typeof currTime === 'number' && isNaN( currTime ) ) {
+// 			if ( typeof currTime === 'number' && isNaN( currTime ) ) {
 
-				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
-				valid = false;
-				break;
+// 				console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
+// 				valid = false;
+// 				break;
 
-			}
+// 			}
 
-			if ( prevTime !== null && prevTime > currTime ) {
+// 			if ( prevTime !== null && prevTime > currTime ) {
 
-				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
-				valid = false;
-				break;
+// 				console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
+// 				valid = false;
+// 				break;
 
-			}
+// 			}
 
-			prevTime = currTime;
+// 			prevTime = currTime;
 
-		}
+// 		}
 
-		if ( values !== undefined ) {
+// 		if ( values !== undefined ) {
 
-			if ( isTypedArray( values ) ) {
+// 			if ( isTypedArray( values ) ) {
 
-				for ( let i = 0, n = values.length; i !== n; ++ i ) {
+// 				for ( let i = 0, n = values.length; i !== n; ++ i ) {
 
-					const value = values[ i ];
+// 					const value = values[ i ];
 
-					if ( isNaN( value ) ) {
+// 					if ( isNaN( value ) ) {
 
-						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
-						valid = false;
-						break;
+// 						console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
+// 						valid = false;
+// 						break;
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return valid;
+// 		return valid;
 
-	}
+// 	}
 
-	// removes equivalent sequential keys as common in morph target sequences
-	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
-	optimize() {
+// 	// removes equivalent sequential keys as common in morph target sequences
+// 	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
+// 	optimize() {
 
-		// times or values may be shared with other tracks, so overwriting is unsafe
-		const times = arraySlice( this.times ),
-			values = arraySlice( this.values ),
-			stride = this.getValueSize(),
+// 		// times or values may be shared with other tracks, so overwriting is unsafe
+// 		const times = arraySlice( this.times ),
+// 			values = arraySlice( this.values ),
+// 			stride = this.getValueSize(),
 
-			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
+// 			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
 
-			lastIndex = times.length - 1;
+// 			lastIndex = times.length - 1;
 
-		let writeIndex = 1;
+// 		let writeIndex = 1;
 
-		for ( let i = 1; i < lastIndex; ++ i ) {
+// 		for ( let i = 1; i < lastIndex; ++ i ) {
 
-			let keep = false;
+// 			let keep = false;
 
-			const time = times[ i ];
-			const timeNext = times[ i + 1 ];
+// 			const time = times[ i ];
+// 			const timeNext = times[ i + 1 ];
 
-			// remove adjacent keyframes scheduled at the same time
+// 			// remove adjacent keyframes scheduled at the same time
 
-			if ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {
+// 			if ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {
 
-				if ( ! smoothInterpolation ) {
+// 				if ( ! smoothInterpolation ) {
 
-					// remove unnecessary keyframes same as their neighbors
+// 					// remove unnecessary keyframes same as their neighbors
 
-					const offset = i * stride,
-						offsetP = offset - stride,
-						offsetN = offset + stride;
+// 					const offset = i * stride,
+// 						offsetP = offset - stride,
+// 						offsetN = offset + stride;
 
-					for ( let j = 0; j !== stride; ++ j ) {
+// 					for ( let j = 0; j !== stride; ++ j ) {
 
-						const value = values[ offset + j ];
+// 						const value = values[ offset + j ];
 
-						if ( value !== values[ offsetP + j ] ||
-							value !== values[ offsetN + j ] ) {
+// 						if ( value !== values[ offsetP + j ] ||
+// 							value !== values[ offsetN + j ] ) {
 
-							keep = true;
-							break;
+// 							keep = true;
+// 							break;
 
-						}
+// 						}
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					keep = true;
+// 					keep = true;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			// in-place compaction
+// 			// in-place compaction
 
-			if ( keep ) {
+// 			if ( keep ) {
 
-				if ( i !== writeIndex ) {
+// 				if ( i !== writeIndex ) {
 
-					times[ writeIndex ] = times[ i ];
+// 					times[ writeIndex ] = times[ i ];
 
-					const readOffset = i * stride,
-						writeOffset = writeIndex * stride;
+// 					const readOffset = i * stride,
+// 						writeOffset = writeIndex * stride;
 
-					for ( let j = 0; j !== stride; ++ j ) {
+// 					for ( let j = 0; j !== stride; ++ j ) {
 
-						values[ writeOffset + j ] = values[ readOffset + j ];
+// 						values[ writeOffset + j ] = values[ readOffset + j ];
 
-					}
+// 					}
 
-				}
+// 				}
 
-				++ writeIndex;
+// 				++ writeIndex;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// flush last keyframe (compaction looks ahead)
+// 		// flush last keyframe (compaction looks ahead)
 
-		if ( lastIndex > 0 ) {
+// 		if ( lastIndex > 0 ) {
 
-			times[ writeIndex ] = times[ lastIndex ];
+// 			times[ writeIndex ] = times[ lastIndex ];
 
-			for ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {
+// 			for ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {
 
-				values[ writeOffset + j ] = values[ readOffset + j ];
+// 				values[ writeOffset + j ] = values[ readOffset + j ];
 
-			}
+// 			}
 
-			++ writeIndex;
+// 			++ writeIndex;
 
-		}
+// 		}
 
-		if ( writeIndex !== times.length ) {
+// 		if ( writeIndex !== times.length ) {
 
-			this.times = arraySlice( times, 0, writeIndex );
-			this.values = arraySlice( values, 0, writeIndex * stride );
+// 			this.times = arraySlice( times, 0, writeIndex );
+// 			this.values = arraySlice( values, 0, writeIndex * stride );
 
-		} else {
+// 		} else {
 
-			this.times = times;
-			this.values = values;
+// 			this.times = times;
+// 			this.values = values;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		const times = arraySlice( this.times, 0 );
-		const values = arraySlice( this.values, 0 );
+// 		const times = arraySlice( this.times, 0 );
+// 		const values = arraySlice( this.values, 0 );
 
-		const TypedKeyframeTrack = this.constructor;
-		const track = new TypedKeyframeTrack( this.name, times, values );
+// 		const TypedKeyframeTrack = this.constructor;
+// 		const track = new TypedKeyframeTrack( this.name, times, values );
 
-		// Interpolant argument to constructor is not saved, so copy the factory method directly.
-		track.createInterpolant = this.createInterpolant;
+// 		// Interpolant argument to constructor is not saved, so copy the factory method directly.
+// 		track.createInterpolant = this.createInterpolant;
 
-		return track;
+// 		return track;
 
-	}
+// 	}
 
-}
+// }
 
-KeyframeTrack.prototype.TimeBufferType = Float32Array;
-KeyframeTrack.prototype.ValueBufferType = Float32Array;
-KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
+// KeyframeTrack.prototype.TimeBufferType = Float32Array;
+// KeyframeTrack.prototype.ValueBufferType = Float32Array;
+// KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
 
-/**
- * A Track of Boolean keyframe values.
- */
-class BooleanKeyframeTrack extends KeyframeTrack {}
+// /**
+//  * A Track of Boolean keyframe values.
+//  */
+// class BooleanKeyframeTrack extends KeyframeTrack {}
 
-BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
-BooleanKeyframeTrack.prototype.ValueBufferType = Array;
-BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
-BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
-BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
+// BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';
+// BooleanKeyframeTrack.prototype.ValueBufferType = Array;
+// BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
+// BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
+// BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
 
-/**
- * A Track of keyframe values that represent color.
- */
-class ColorKeyframeTrack extends KeyframeTrack {}
+// /**
+//  * A Track of keyframe values that represent color.
+//  */
+// class ColorKeyframeTrack extends KeyframeTrack {}
 
-ColorKeyframeTrack.prototype.ValueTypeName = 'color';
+// ColorKeyframeTrack.prototype.ValueTypeName = 'color';
 
-/**
- * A Track of numeric keyframe values.
- */
-class NumberKeyframeTrack extends KeyframeTrack {}
+// /**
+//  * A Track of numeric keyframe values.
+//  */
+// class NumberKeyframeTrack extends KeyframeTrack {}
 
-NumberKeyframeTrack.prototype.ValueTypeName = 'number';
+// NumberKeyframeTrack.prototype.ValueTypeName = 'number';
 
-/**
- * Spherical linear unit quaternion interpolant.
- */
+// /**
+//  * Spherical linear unit quaternion interpolant.
+//  */
 
-class QuaternionLinearInterpolant extends Interpolant {
+// class QuaternionLinearInterpolant extends Interpolant {
 
-	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
+// 	constructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
 
-		super( parameterPositions, sampleValues, sampleSize, resultBuffer );
+// 		super( parameterPositions, sampleValues, sampleSize, resultBuffer );
 
-	}
+// 	}
 
-	interpolate_( i1, t0, t, t1 ) {
+// 	interpolate_( i1, t0, t, t1 ) {
 
-		const result = this.resultBuffer,
-			values = this.sampleValues,
-			stride = this.valueSize,
+// 		const result = this.resultBuffer,
+// 			values = this.sampleValues,
+// 			stride = this.valueSize,
 
-			alpha = ( t - t0 ) / ( t1 - t0 );
+// 			alpha = ( t - t0 ) / ( t1 - t0 );
 
-		let offset = i1 * stride;
+// 		let offset = i1 * stride;
 
-		for ( let end = offset + stride; offset !== end; offset += 4 ) {
+// 		for ( let end = offset + stride; offset !== end; offset += 4 ) {
 
-			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );
+// 			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );
 
-		}
+// 		}
 
-		return result;
+// 		return result;
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * A Track of quaternion keyframe values.
- */
-class QuaternionKeyframeTrack extends KeyframeTrack {
+// /**
+//  * A Track of quaternion keyframe values.
+//  */
+// class QuaternionKeyframeTrack extends KeyframeTrack {
 
-	InterpolantFactoryMethodLinear( result ) {
+// 	InterpolantFactoryMethodLinear( result ) {
 
-		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );
+// 		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );
 
-	}
+// 	}
 
-}
+// }
 
-QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';
-// ValueBufferType is inherited
-QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
-QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
+// QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';
+// // ValueBufferType is inherited
+// QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
+// QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
 
-/**
- * A Track that interpolates Strings
- */
-class StringKeyframeTrack extends KeyframeTrack {}
+// /**
+//  * A Track that interpolates Strings
+//  */
+// class StringKeyframeTrack extends KeyframeTrack {}
 
-StringKeyframeTrack.prototype.ValueTypeName = 'string';
-StringKeyframeTrack.prototype.ValueBufferType = Array;
-StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
-StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
-StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
+// StringKeyframeTrack.prototype.ValueTypeName = 'string';
+// StringKeyframeTrack.prototype.ValueBufferType = Array;
+// StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
+// StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;
+// StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;
 
-/**
- * A Track of vectored keyframe values.
- */
-class VectorKeyframeTrack extends KeyframeTrack {}
+// /**
+//  * A Track of vectored keyframe values.
+//  */
+// class VectorKeyframeTrack extends KeyframeTrack {}
 
-VectorKeyframeTrack.prototype.ValueTypeName = 'vector';
+// VectorKeyframeTrack.prototype.ValueTypeName = 'vector';
 
-class AnimationClip {
+// class AnimationClip {
 
-	constructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {
+// 	constructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {
 
-		this.name = name;
-		this.tracks = tracks;
-		this.duration = duration;
-		this.blendMode = blendMode;
+// 		this.name = name;
+// 		this.tracks = tracks;
+// 		this.duration = duration;
+// 		this.blendMode = blendMode;
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		// this means it should figure out its duration by scanning the tracks
-		if ( this.duration < 0 ) {
+// 		// this means it should figure out its duration by scanning the tracks
+// 		if ( this.duration < 0 ) {
 
-			this.resetDuration();
+// 			this.resetDuration();
 
-		}
+// 		}
 
-	}
+// 	}
 
 
-	static parse( json ) {
+// 	static parse( json ) {
 
-		const tracks = [],
-			jsonTracks = json.tracks,
-			frameTime = 1.0 / ( json.fps || 1.0 );
+// 		const tracks = [],
+// 			jsonTracks = json.tracks,
+// 			frameTime = 1.0 / ( json.fps || 1.0 );
 
-		for ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {
 
-			tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );
+// 			tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );
 
-		}
+// 		}
 
-		const clip = new this( json.name, json.duration, tracks, json.blendMode );
-		clip.uuid = json.uuid;
+// 		const clip = new this( json.name, json.duration, tracks, json.blendMode );
+// 		clip.uuid = json.uuid;
 
-		return clip;
+// 		return clip;
 
-	}
+// 	}
 
-	static toJSON( clip ) {
+// 	static toJSON( clip ) {
 
-		const tracks = [],
-			clipTracks = clip.tracks;
+// 		const tracks = [],
+// 			clipTracks = clip.tracks;
 
-		const json = {
+// 		const json = {
 
-			'name': clip.name,
-			'duration': clip.duration,
-			'tracks': tracks,
-			'uuid': clip.uuid,
-			'blendMode': clip.blendMode
+// 			'name': clip.name,
+// 			'duration': clip.duration,
+// 			'tracks': tracks,
+// 			'uuid': clip.uuid,
+// 			'blendMode': clip.blendMode
 
-		};
+// 		};
 
-		for ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {
 
-			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );
+// 			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );
 
-		}
+// 		}
 
-		return json;
+// 		return json;
 
-	}
+// 	}
 
-	static CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {
+// 	static CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {
 
-		const numMorphTargets = morphTargetSequence.length;
-		const tracks = [];
+// 		const numMorphTargets = morphTargetSequence.length;
+// 		const tracks = [];
 
-		for ( let i = 0; i < numMorphTargets; i ++ ) {
+// 		for ( let i = 0; i < numMorphTargets; i ++ ) {
 
-			let times = [];
-			let values = [];
+// 			let times = [];
+// 			let values = [];
 
-			times.push(
-				( i + numMorphTargets - 1 ) % numMorphTargets,
-				i,
-				( i + 1 ) % numMorphTargets );
+// 			times.push(
+// 				( i + numMorphTargets - 1 ) % numMorphTargets,
+// 				i,
+// 				( i + 1 ) % numMorphTargets );
 
-			values.push( 0, 1, 0 );
+// 			values.push( 0, 1, 0 );
 
-			const order = getKeyframeOrder( times );
-			times = sortedArray( times, 1, order );
-			values = sortedArray( values, 1, order );
+// 			const order = getKeyframeOrder( times );
+// 			times = sortedArray( times, 1, order );
+// 			values = sortedArray( values, 1, order );
 
-			// if there is a key at the first frame, duplicate it as the
-			// last frame as well for perfect loop.
-			if ( ! noLoop && times[ 0 ] === 0 ) {
+// 			// if there is a key at the first frame, duplicate it as the
+// 			// last frame as well for perfect loop.
+// 			if ( ! noLoop && times[ 0 ] === 0 ) {
 
-				times.push( numMorphTargets );
-				values.push( values[ 0 ] );
+// 				times.push( numMorphTargets );
+// 				values.push( values[ 0 ] );
 
-			}
+// 			}
 
-			tracks.push(
-				new NumberKeyframeTrack(
-					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
-					times, values
-				).scale( 1.0 / fps ) );
+// 			tracks.push(
+// 				new NumberKeyframeTrack(
+// 					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
+// 					times, values
+// 				).scale( 1.0 / fps ) );
 
-		}
+// 		}
 
-		return new this( name, - 1, tracks );
+// 		return new this( name, - 1, tracks );
 
-	}
+// 	}
 
-	static findByName( objectOrClipArray, name ) {
+// 	static findByName( objectOrClipArray, name ) {
 
-		let clipArray = objectOrClipArray;
+// 		let clipArray = objectOrClipArray;
 
-		if ( ! Array.isArray( objectOrClipArray ) ) {
+// 		if ( ! Array.isArray( objectOrClipArray ) ) {
 
-			const o = objectOrClipArray;
-			clipArray = o.geometry && o.geometry.animations || o.animations;
+// 			const o = objectOrClipArray;
+// 			clipArray = o.geometry && o.geometry.animations || o.animations;
 
-		}
+// 		}
 
-		for ( let i = 0; i < clipArray.length; i ++ ) {
+// 		for ( let i = 0; i < clipArray.length; i ++ ) {
 
-			if ( clipArray[ i ].name === name ) {
+// 			if ( clipArray[ i ].name === name ) {
 
-				return clipArray[ i ];
+// 				return clipArray[ i ];
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return null;
+// 		return null;
 
-	}
+// 	}
 
-	static CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {
+// 	static CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {
 
-		const animationToMorphTargets = {};
+// 		const animationToMorphTargets = {};
 
-		// tested with https://regex101.com/ on trick sequences
-		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
-		const pattern = /^([\w-]*?)([\d]+)$/;
+// 		// tested with https://regex101.com/ on trick sequences
+// 		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
+// 		const pattern = /^([\w-]*?)([\d]+)$/;
 
-		// sort morph target names into animation groups based
-		// patterns like Walk_001, Walk_002, Run_001, Run_002
-		for ( let i = 0, il = morphTargets.length; i < il; i ++ ) {
+// 		// sort morph target names into animation groups based
+// 		// patterns like Walk_001, Walk_002, Run_001, Run_002
+// 		for ( let i = 0, il = morphTargets.length; i < il; i ++ ) {
 
-			const morphTarget = morphTargets[ i ];
-			const parts = morphTarget.name.match( pattern );
+// 			const morphTarget = morphTargets[ i ];
+// 			const parts = morphTarget.name.match( pattern );
 
-			if ( parts && parts.length > 1 ) {
+// 			if ( parts && parts.length > 1 ) {
 
-				const name = parts[ 1 ];
+// 				const name = parts[ 1 ];
 
-				let animationMorphTargets = animationToMorphTargets[ name ];
+// 				let animationMorphTargets = animationToMorphTargets[ name ];
 
-				if ( ! animationMorphTargets ) {
+// 				if ( ! animationMorphTargets ) {
 
-					animationToMorphTargets[ name ] = animationMorphTargets = [];
+// 					animationToMorphTargets[ name ] = animationMorphTargets = [];
 
-				}
+// 				}
 
-				animationMorphTargets.push( morphTarget );
+// 				animationMorphTargets.push( morphTarget );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const clips = [];
+// 		const clips = [];
 
-		for ( const name in animationToMorphTargets ) {
+// 		for ( const name in animationToMorphTargets ) {
 
-			clips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );
+// 			clips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );
 
-		}
+// 		}
 
-		return clips;
+// 		return clips;
 
-	}
+// 	}
 
-	// parse the animation.hierarchy format
-	static parseAnimation( animation, bones ) {
+// 	// parse the animation.hierarchy format
+// 	static parseAnimation( animation, bones ) {
 
-		if ( ! animation ) {
+// 		if ( ! animation ) {
 
-			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
-			return null;
+// 			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
+// 			return null;
 
-		}
+// 		}
 
-		const addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {
+// 		const addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {
 
-			// only return track if there are actually keys.
-			if ( animationKeys.length !== 0 ) {
+// 			// only return track if there are actually keys.
+// 			if ( animationKeys.length !== 0 ) {
 
-				const times = [];
-				const values = [];
+// 				const times = [];
+// 				const values = [];
 
-				flattenJSON( animationKeys, times, values, propertyName );
+// 				flattenJSON( animationKeys, times, values, propertyName );
 
-				// empty keys are filtered out, so check again
-				if ( times.length !== 0 ) {
+// 				// empty keys are filtered out, so check again
+// 				if ( times.length !== 0 ) {
 
-					destTracks.push( new trackType( trackName, times, values ) );
+// 					destTracks.push( new trackType( trackName, times, values ) );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		};
+// 		};
 
-		const tracks = [];
+// 		const tracks = [];
 
-		const clipName = animation.name || 'default';
-		const fps = animation.fps || 30;
-		const blendMode = animation.blendMode;
+// 		const clipName = animation.name || 'default';
+// 		const fps = animation.fps || 30;
+// 		const blendMode = animation.blendMode;
 
-		// automatic length determination in AnimationClip.
-		let duration = animation.length || - 1;
+// 		// automatic length determination in AnimationClip.
+// 		let duration = animation.length || - 1;
 
-		const hierarchyTracks = animation.hierarchy || [];
+// 		const hierarchyTracks = animation.hierarchy || [];
 
-		for ( let h = 0; h < hierarchyTracks.length; h ++ ) {
+// 		for ( let h = 0; h < hierarchyTracks.length; h ++ ) {
 
-			const animationKeys = hierarchyTracks[ h ].keys;
+// 			const animationKeys = hierarchyTracks[ h ].keys;
 
-			// skip empty tracks
-			if ( ! animationKeys || animationKeys.length === 0 ) continue;
+// 			// skip empty tracks
+// 			if ( ! animationKeys || animationKeys.length === 0 ) continue;
 
-			// process morph targets
-			if ( animationKeys[ 0 ].morphTargets ) {
+// 			// process morph targets
+// 			if ( animationKeys[ 0 ].morphTargets ) {
 
-				// figure out all morph targets used in this track
-				const morphTargetNames = {};
+// 				// figure out all morph targets used in this track
+// 				const morphTargetNames = {};
 
-				let k;
+// 				let k;
 
-				for ( k = 0; k < animationKeys.length; k ++ ) {
+// 				for ( k = 0; k < animationKeys.length; k ++ ) {
 
-					if ( animationKeys[ k ].morphTargets ) {
+// 					if ( animationKeys[ k ].morphTargets ) {
 
-						for ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {
+// 						for ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {
 
-							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;
+// 							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;
 
-						}
+// 						}
 
-					}
+// 					}
 
-				}
+// 				}
 
-				// create a track for each morph target with all zero
-				// morphTargetInfluences except for the keys in which
-				// the morphTarget is named.
-				for ( const morphTargetName in morphTargetNames ) {
+// 				// create a track for each morph target with all zero
+// 				// morphTargetInfluences except for the keys in which
+// 				// the morphTarget is named.
+// 				for ( const morphTargetName in morphTargetNames ) {
 
-					const times = [];
-					const values = [];
+// 					const times = [];
+// 					const values = [];
 
-					for ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {
+// 					for ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {
 
-						const animationKey = animationKeys[ k ];
+// 						const animationKey = animationKeys[ k ];
 
-						times.push( animationKey.time );
-						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );
+// 						times.push( animationKey.time );
+// 						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );
 
-					}
+// 					}
 
-					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );
+// 					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );
 
-				}
+// 				}
 
-				duration = morphTargetNames.length * fps;
+// 				duration = morphTargetNames.length * fps;
 
-			} else {
+// 			} else {
 
-				// ...assume skeletal animation
+// 				// ...assume skeletal animation
 
-				const boneName = '.bones[' + bones[ h ].name + ']';
+// 				const boneName = '.bones[' + bones[ h ].name + ']';
 
-				addNonemptyTrack(
-					VectorKeyframeTrack, boneName + '.position',
-					animationKeys, 'pos', tracks );
+// 				addNonemptyTrack(
+// 					VectorKeyframeTrack, boneName + '.position',
+// 					animationKeys, 'pos', tracks );
 
-				addNonemptyTrack(
-					QuaternionKeyframeTrack, boneName + '.quaternion',
-					animationKeys, 'rot', tracks );
+// 				addNonemptyTrack(
+// 					QuaternionKeyframeTrack, boneName + '.quaternion',
+// 					animationKeys, 'rot', tracks );
 
-				addNonemptyTrack(
-					VectorKeyframeTrack, boneName + '.scale',
-					animationKeys, 'scl', tracks );
+// 				addNonemptyTrack(
+// 					VectorKeyframeTrack, boneName + '.scale',
+// 					animationKeys, 'scl', tracks );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( tracks.length === 0 ) {
+// 		if ( tracks.length === 0 ) {
 
-			return null;
+// 			return null;
 
-		}
+// 		}
 
-		const clip = new this( clipName, duration, tracks, blendMode );
+// 		const clip = new this( clipName, duration, tracks, blendMode );
 
-		return clip;
+// 		return clip;
 
-	}
+// 	}
 
-	resetDuration() {
+// 	resetDuration() {
 
-		const tracks = this.tracks;
-		let duration = 0;
+// 		const tracks = this.tracks;
+// 		let duration = 0;
 
-		for ( let i = 0, n = tracks.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = tracks.length; i !== n; ++ i ) {
 
-			const track = this.tracks[ i ];
+// 			const track = this.tracks[ i ];
 
-			duration = Math.max( duration, track.times[ track.times.length - 1 ] );
+// 			duration = Math.max( duration, track.times[ track.times.length - 1 ] );
 
-		}
+// 		}
 
-		this.duration = duration;
+// 		this.duration = duration;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	trim() {
+// 	trim() {
 
-		for ( let i = 0; i < this.tracks.length; i ++ ) {
+// 		for ( let i = 0; i < this.tracks.length; i ++ ) {
 
-			this.tracks[ i ].trim( 0, this.duration );
+// 			this.tracks[ i ].trim( 0, this.duration );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	validate() {
+// 	validate() {
 
-		let valid = true;
+// 		let valid = true;
 
-		for ( let i = 0; i < this.tracks.length; i ++ ) {
+// 		for ( let i = 0; i < this.tracks.length; i ++ ) {
 
-			valid = valid && this.tracks[ i ].validate();
+// 			valid = valid && this.tracks[ i ].validate();
 
-		}
+// 		}
 
-		return valid;
+// 		return valid;
 
-	}
+// 	}
 
-	optimize() {
+// 	optimize() {
 
-		for ( let i = 0; i < this.tracks.length; i ++ ) {
+// 		for ( let i = 0; i < this.tracks.length; i ++ ) {
 
-			this.tracks[ i ].optimize();
+// 			this.tracks[ i ].optimize();
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		const tracks = [];
+// 		const tracks = [];
 
-		for ( let i = 0; i < this.tracks.length; i ++ ) {
+// 		for ( let i = 0; i < this.tracks.length; i ++ ) {
 
-			tracks.push( this.tracks[ i ].clone() );
+// 			tracks.push( this.tracks[ i ].clone() );
 
-		}
+// 		}
 
-		return new this.constructor( this.name, this.duration, tracks, this.blendMode );
+// 		return new this.constructor( this.name, this.duration, tracks, this.blendMode );
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		return this.constructor.toJSON( this );
+// 		return this.constructor.toJSON( this );
 
-	}
+// 	}
 
-}
+// }
 
-function getTrackTypeForValueTypeName( typeName ) {
+// function getTrackTypeForValueTypeName( typeName ) {
 
-	switch ( typeName.toLowerCase() ) {
+// 	switch ( typeName.toLowerCase() ) {
 
-		case 'scalar':
-		case 'double':
-		case 'float':
-		case 'number':
-		case 'integer':
+// 		case 'scalar':
+// 		case 'double':
+// 		case 'float':
+// 		case 'number':
+// 		case 'integer':
 
-			return NumberKeyframeTrack;
+// 			return NumberKeyframeTrack;
 
-		case 'vector':
-		case 'vector2':
-		case 'vector3':
-		case 'vector4':
+// 		case 'vector':
+// 		case 'vector2':
+// 		case 'vector3':
+// 		case 'vector4':
 
-			return VectorKeyframeTrack;
+// 			return VectorKeyframeTrack;
 
-		case 'color':
+// 		case 'color':
 
-			return ColorKeyframeTrack;
+// 			return ColorKeyframeTrack;
 
-		case 'quaternion':
+// 		case 'quaternion':
 
-			return QuaternionKeyframeTrack;
+// 			return QuaternionKeyframeTrack;
 
-		case 'bool':
-		case 'boolean':
+// 		case 'bool':
+// 		case 'boolean':
 
-			return BooleanKeyframeTrack;
+// 			return BooleanKeyframeTrack;
 
-		case 'string':
+// 		case 'string':
 
-			return StringKeyframeTrack;
+// 			return StringKeyframeTrack;
 
-	}
+// 	}
 
-	throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );
+// 	throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );
 
-}
+// }
 
-function parseKeyframeTrack( json ) {
+// function parseKeyframeTrack( json ) {
 
-	if ( json.type === undefined ) {
+// 	if ( json.type === undefined ) {
 
-		throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );
+// 		throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );
 
-	}
+// 	}
 
-	const trackType = getTrackTypeForValueTypeName( json.type );
+// 	const trackType = getTrackTypeForValueTypeName( json.type );
 
-	if ( json.times === undefined ) {
+// 	if ( json.times === undefined ) {
 
-		const times = [], values = [];
+// 		const times = [], values = [];
 
-		flattenJSON( json.keys, times, values, 'value' );
+// 		flattenJSON( json.keys, times, values, 'value' );
 
-		json.times = times;
-		json.values = values;
+// 		json.times = times;
+// 		json.values = values;
 
-	}
+// 	}
 
-	// derived classes can define a static parse method
-	if ( trackType.parse !== undefined ) {
+// 	// derived classes can define a static parse method
+// 	if ( trackType.parse !== undefined ) {
 
-		return trackType.parse( json );
+// 		return trackType.parse( json );
 
-	} else {
+// 	} else {
 
-		// by default, we assume a constructor compatible with the base
-		return new trackType( json.name, json.times, json.values, json.interpolation );
+// 		// by default, we assume a constructor compatible with the base
+// 		return new trackType( json.name, json.times, json.values, json.interpolation );
 
-	}
+// 	}
 
-}
+// }
 
-const Cache = {
+// const Cache = {
 
-	enabled: false,
+// 	enabled: false,
 
-	files: {},
+// 	files: {},
 
-	add: function ( key, file ) {
+// 	add: function ( key, file ) {
 
-		if ( this.enabled === false ) return;
+// 		if ( this.enabled === false ) return;
 
-		// console.log( 'THREE.Cache', 'Adding key:', key );
+// 		// console.log( 'THREE.Cache', 'Adding key:', key );
 
-		this.files[ key ] = file;
+// 		this.files[ key ] = file;
 
-	},
+// 	},
 
-	get: function ( key ) {
+// 	get: function ( key ) {
 
-		if ( this.enabled === false ) return;
+// 		if ( this.enabled === false ) return;
 
-		// console.log( 'THREE.Cache', 'Checking key:', key );
+// 		// console.log( 'THREE.Cache', 'Checking key:', key );
 
-		return this.files[ key ];
+// 		return this.files[ key ];
 
-	},
+// 	},
 
-	remove: function ( key ) {
+// 	remove: function ( key ) {
 
-		delete this.files[ key ];
+// 		delete this.files[ key ];
 
-	},
+// 	},
 
-	clear: function () {
+// 	clear: function () {
 
-		this.files = {};
+// 		this.files = {};
 
-	}
+// 	}
 
-};
+// };
 
-class LoadingManager {
+// class LoadingManager {
 
-	constructor( onLoad, onProgress, onError ) {
+// 	constructor( onLoad, onProgress, onError ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		let isLoading = false;
-		let itemsLoaded = 0;
-		let itemsTotal = 0;
-		let urlModifier = undefined;
-		const handlers = [];
+// 		let isLoading = false;
+// 		let itemsLoaded = 0;
+// 		let itemsTotal = 0;
+// 		let urlModifier = undefined;
+// 		const handlers = [];
 
-		// Refer to #5689 for the reason why we don't set .onStart
-		// in the constructor
+// 		// Refer to #5689 for the reason why we don't set .onStart
+// 		// in the constructor
 
-		this.onStart = undefined;
-		this.onLoad = onLoad;
-		this.onProgress = onProgress;
-		this.onError = onError;
+// 		this.onStart = undefined;
+// 		this.onLoad = onLoad;
+// 		this.onProgress = onProgress;
+// 		this.onError = onError;
 
-		this.itemStart = function ( url ) {
+// 		this.itemStart = function ( url ) {
 
-			itemsTotal ++;
+// 			itemsTotal ++;
 
-			if ( isLoading === false ) {
+// 			if ( isLoading === false ) {
 
-				if ( scope.onStart !== undefined ) {
+// 				if ( scope.onStart !== undefined ) {
 
-					scope.onStart( url, itemsLoaded, itemsTotal );
+// 					scope.onStart( url, itemsLoaded, itemsTotal );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			isLoading = true;
+// 			isLoading = true;
 
-		};
+// 		};
 
-		this.itemEnd = function ( url ) {
+// 		this.itemEnd = function ( url ) {
 
-			itemsLoaded ++;
+// 			itemsLoaded ++;
 
-			if ( scope.onProgress !== undefined ) {
+// 			if ( scope.onProgress !== undefined ) {
 
-				scope.onProgress( url, itemsLoaded, itemsTotal );
+// 				scope.onProgress( url, itemsLoaded, itemsTotal );
 
-			}
+// 			}
 
-			if ( itemsLoaded === itemsTotal ) {
+// 			if ( itemsLoaded === itemsTotal ) {
 
-				isLoading = false;
+// 				isLoading = false;
 
-				if ( scope.onLoad !== undefined ) {
+// 				if ( scope.onLoad !== undefined ) {
 
-					scope.onLoad();
+// 					scope.onLoad();
 
-				}
+// 				}
 
-			}
+// 			}
 
-		};
+// 		};
 
-		this.itemError = function ( url ) {
+// 		this.itemError = function ( url ) {
 
-			if ( scope.onError !== undefined ) {
+// 			if ( scope.onError !== undefined ) {
 
-				scope.onError( url );
+// 				scope.onError( url );
 
-			}
+// 			}
 
-		};
+// 		};
 
-		this.resolveURL = function ( url ) {
+// 		this.resolveURL = function ( url ) {
 
-			if ( urlModifier ) {
+// 			if ( urlModifier ) {
 
-				return urlModifier( url );
+// 				return urlModifier( url );
 
-			}
+// 			}
 
-			return url;
+// 			return url;
 
-		};
+// 		};
 
-		this.setURLModifier = function ( transform ) {
+// 		this.setURLModifier = function ( transform ) {
 
-			urlModifier = transform;
+// 			urlModifier = transform;
 
-			return this;
+// 			return this;
 
-		};
+// 		};
 
-		this.addHandler = function ( regex, loader ) {
+// 		this.addHandler = function ( regex, loader ) {
 
-			handlers.push( regex, loader );
+// 			handlers.push( regex, loader );
 
-			return this;
+// 			return this;
 
-		};
+// 		};
 
-		this.removeHandler = function ( regex ) {
+// 		this.removeHandler = function ( regex ) {
 
-			const index = handlers.indexOf( regex );
+// 			const index = handlers.indexOf( regex );
 
-			if ( index !== - 1 ) {
+// 			if ( index !== - 1 ) {
 
-				handlers.splice( index, 2 );
+// 				handlers.splice( index, 2 );
 
-			}
+// 			}
 
-			return this;
+// 			return this;
 
-		};
+// 		};
 
-		this.getHandler = function ( file ) {
+// 		this.getHandler = function ( file ) {
 
-			for ( let i = 0, l = handlers.length; i < l; i += 2 ) {
+// 			for ( let i = 0, l = handlers.length; i < l; i += 2 ) {
 
-				const regex = handlers[ i ];
-				const loader = handlers[ i + 1 ];
+// 				const regex = handlers[ i ];
+// 				const loader = handlers[ i + 1 ];
 
-				if ( regex.global ) regex.lastIndex = 0; // see #17920
+// 				if ( regex.global ) regex.lastIndex = 0; // see #17920
 
-				if ( regex.test( file ) ) {
+// 				if ( regex.test( file ) ) {
 
-					return loader;
+// 					return loader;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			return null;
+// 			return null;
 
-		};
+// 		};
 
-	}
+// 	}
 
-}
+// }
 
-const DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();
+// const DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();
 
-class Loader {
+// class Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
+// 		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
 
-		this.crossOrigin = 'anonymous';
-		this.withCredentials = false;
-		this.path = '';
-		this.resourcePath = '';
-		this.requestHeader = {};
+// 		this.crossOrigin = 'anonymous';
+// 		this.withCredentials = false;
+// 		this.path = '';
+// 		this.resourcePath = '';
+// 		this.requestHeader = {};
 
-	}
+// 	}
 
-	load( /* url, onLoad, onProgress, onError */ ) {}
+// 	load( /* url, onLoad, onProgress, onError */ ) {}
 
-	loadAsync( url, onProgress ) {
+// 	loadAsync( url, onProgress ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		return new Promise( function ( resolve, reject ) {
+// 		return new Promise( function ( resolve, reject ) {
 
-			scope.load( url, resolve, onProgress, reject );
+// 			scope.load( url, resolve, onProgress, reject );
 
-		} );
+// 		} );
 
-	}
+// 	}
 
-	parse( /* data */ ) {}
+// 	parse( /* data */ ) {}
 
-	setCrossOrigin( crossOrigin ) {
+// 	setCrossOrigin( crossOrigin ) {
 
-		this.crossOrigin = crossOrigin;
-		return this;
+// 		this.crossOrigin = crossOrigin;
+// 		return this;
 
-	}
+// 	}
 
-	setWithCredentials( value ) {
+// 	setWithCredentials( value ) {
 
-		this.withCredentials = value;
-		return this;
+// 		this.withCredentials = value;
+// 		return this;
 
-	}
+// 	}
 
-	setPath( path ) {
+// 	setPath( path ) {
 
-		this.path = path;
-		return this;
+// 		this.path = path;
+// 		return this;
 
-	}
+// 	}
 
-	setResourcePath( resourcePath ) {
+// 	setResourcePath( resourcePath ) {
 
-		this.resourcePath = resourcePath;
-		return this;
+// 		this.resourcePath = resourcePath;
+// 		return this;
 
-	}
+// 	}
 
-	setRequestHeader( requestHeader ) {
+// 	setRequestHeader( requestHeader ) {
 
-		this.requestHeader = requestHeader;
-		return this;
+// 		this.requestHeader = requestHeader;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const loading = {};
+// const loading = {};
 
-class HttpError extends Error {
+// class HttpError extends Error {
 
-	constructor( message, response ) {
+// 	constructor( message, response ) {
 
-		super( message );
-		this.response = response;
+// 		super( message );
+// 		this.response = response;
 
-	}
+// 	}
 
-}
+// }
 
-class FileLoader extends Loader {
+// class FileLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		if ( url === undefined ) url = '';
+// 		if ( url === undefined ) url = '';
 
-		if ( this.path !== undefined ) url = this.path + url;
+// 		if ( this.path !== undefined ) url = this.path + url;
 
-		url = this.manager.resolveURL( url );
+// 		url = this.manager.resolveURL( url );
 
-		const cached = Cache.get( url );
+// 		const cached = Cache.get( url );
 
-		if ( cached !== undefined ) {
+// 		if ( cached !== undefined ) {
 
-			this.manager.itemStart( url );
+// 			this.manager.itemStart( url );
 
-			setTimeout( () => {
+// 			setTimeout( () => {
 
-				if ( onLoad ) onLoad( cached );
+// 				if ( onLoad ) onLoad( cached );
 
-				this.manager.itemEnd( url );
+// 				this.manager.itemEnd( url );
 
-			}, 0 );
+// 			}, 0 );
 
-			return cached;
+// 			return cached;
 
-		}
+// 		}
 
-		// Check if request is duplicate
+// 		// Check if request is duplicate
 
-		if ( loading[ url ] !== undefined ) {
+// 		if ( loading[ url ] !== undefined ) {
 
-			loading[ url ].push( {
+// 			loading[ url ].push( {
 
-				onLoad: onLoad,
-				onProgress: onProgress,
-				onError: onError
+// 				onLoad: onLoad,
+// 				onProgress: onProgress,
+// 				onError: onError
 
-			} );
+// 			} );
 
-			return;
+// 			return;
 
-		}
+// 		}
 
-		// Initialise array for duplicate requests
-		loading[ url ] = [];
+// 		// Initialise array for duplicate requests
+// 		loading[ url ] = [];
 
-		loading[ url ].push( {
-			onLoad: onLoad,
-			onProgress: onProgress,
-			onError: onError,
-		} );
+// 		loading[ url ].push( {
+// 			onLoad: onLoad,
+// 			onProgress: onProgress,
+// 			onError: onError,
+// 		} );
 
-		// create request
-		const req = new Request( url, {
-			headers: new Headers( this.requestHeader ),
-			credentials: this.withCredentials ? 'include' : 'same-origin',
-			// An abort controller could be added within a future PR
-		} );
+// 		// create request
+// 		const req = new Request( url, {
+// 			headers: new Headers( this.requestHeader ),
+// 			credentials: this.withCredentials ? 'include' : 'same-origin',
+// 			// An abort controller could be added within a future PR
+// 		} );
 
-		// record states ( avoid data race )
-		const mimeType = this.mimeType;
-		const responseType = this.responseType;
+// 		// record states ( avoid data race )
+// 		const mimeType = this.mimeType;
+// 		const responseType = this.responseType;
 
-		// start the fetch
-		fetch( req )
-			.then( response => {
+// 		// start the fetch
+// 		fetch( req )
+// 			.then( response => {
 
-				if ( response.status === 200 || response.status === 0 ) {
+// 				if ( response.status === 200 || response.status === 0 ) {
 
-					// Some browsers return HTTP Status 0 when using non-http protocol
-					// e.g. 'file://' or 'data://'. Handle as success.
+// 					// Some browsers return HTTP Status 0 when using non-http protocol
+// 					// e.g. 'file://' or 'data://'. Handle as success.
 
-					if ( response.status === 0 ) {
+// 					if ( response.status === 0 ) {
 
-						console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );
+// 						console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );
 
-					}
+// 					}
 
-					// Workaround: Checking if response.body === undefined for Alipay browser #23548
+// 					// Workaround: Checking if response.body === undefined for Alipay browser #23548
 
-					if ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {
+// 					if ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {
 
-						return response;
+// 						return response;
 
-					}
+// 					}
 
-					const callbacks = loading[ url ];
-					const reader = response.body.getReader();
-					const contentLength = response.headers.get( 'Content-Length' );
-					const total = contentLength ? parseInt( contentLength ) : 0;
-					const lengthComputable = total !== 0;
-					let loaded = 0;
+// 					const callbacks = loading[ url ];
+// 					const reader = response.body.getReader();
+// 					const contentLength = response.headers.get( 'Content-Length' );
+// 					const total = contentLength ? parseInt( contentLength ) : 0;
+// 					const lengthComputable = total !== 0;
+// 					let loaded = 0;
 
-					// periodically read data into the new stream tracking while download progress
-					const stream = new ReadableStream( {
-						start( controller ) {
+// 					// periodically read data into the new stream tracking while download progress
+// 					const stream = new ReadableStream( {
+// 						start( controller ) {
 
-							readData();
+// 							readData();
 
-							function readData() {
+// 							function readData() {
 
-								reader.read().then( ( { done, value } ) => {
+// 								reader.read().then( ( { done, value } ) => {
 
-									if ( done ) {
+// 									if ( done ) {
 
-										controller.close();
+// 										controller.close();
 
-									} else {
+// 									} else {
 
-										loaded += value.byteLength;
+// 										loaded += value.byteLength;
 
-										const event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );
-										for ( let i = 0, il = callbacks.length; i < il; i ++ ) {
+// 										const event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );
+// 										for ( let i = 0, il = callbacks.length; i < il; i ++ ) {
 
-											const callback = callbacks[ i ];
-											if ( callback.onProgress ) callback.onProgress( event );
+// 											const callback = callbacks[ i ];
+// 											if ( callback.onProgress ) callback.onProgress( event );
 
-										}
+// 										}
 
-										controller.enqueue( value );
-										readData();
+// 										controller.enqueue( value );
+// 										readData();
 
-									}
+// 									}
 
-								} );
+// 								} );
 
-							}
+// 							}
 
-						}
+// 						}
 
-					} );
+// 					} );
 
-					return new Response( stream );
+// 					return new Response( stream );
 
-				} else {
+// 				} else {
 
-					throw new HttpError( `fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response );
+// 					throw new HttpError( `fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response );
 
-				}
+// 				}
 
-			} )
-			.then( response => {
+// 			} )
+// 			.then( response => {
 
-				switch ( responseType ) {
+// 				switch ( responseType ) {
 
-					case 'arraybuffer':
+// 					case 'arraybuffer':
 
-						return response.arrayBuffer();
+// 						return response.arrayBuffer();
 
-					case 'blob':
+// 					case 'blob':
 
-						return response.blob();
+// 						return response.blob();
 
-					case 'document':
+// 					case 'document':
 
-						return response.text()
-							.then( text => {
+// 						return response.text()
+// 							.then( text => {
 
-								const parser = new DOMParser();
-								return parser.parseFromString( text, mimeType );
+// 								const parser = new DOMParser();
+// 								return parser.parseFromString( text, mimeType );
 
-							} );
+// 							} );
 
-					case 'json':
+// 					case 'json':
 
-						return response.json();
+// 						return response.json();
 
-					default:
+// 					default:
 
-						if ( mimeType === undefined ) {
+// 						if ( mimeType === undefined ) {
 
-							return response.text();
+// 							return response.text();
 
-						} else {
+// 						} else {
 
-							// sniff encoding
-							const re = /charset="?([^;"\s]*)"?/i;
-							const exec = re.exec( mimeType );
-							const label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;
-							const decoder = new TextDecoder( label );
-							return response.arrayBuffer().then( ab => decoder.decode( ab ) );
+// 							// sniff encoding
+// 							const re = /charset="?([^;"\s]*)"?/i;
+// 							const exec = re.exec( mimeType );
+// 							const label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;
+// 							const decoder = new TextDecoder( label );
+// 							return response.arrayBuffer().then( ab => decoder.decode( ab ) );
 
-						}
+// 						}
 
-				}
+// 				}
 
-			} )
-			.then( data => {
+// 			} )
+// 			.then( data => {
 
-				// Add to cache only on HTTP success, so that we do not cache
-				// error response bodies as proper responses to requests.
-				Cache.add( url, data );
+// 				// Add to cache only on HTTP success, so that we do not cache
+// 				// error response bodies as proper responses to requests.
+// 				Cache.add( url, data );
 
-				const callbacks = loading[ url ];
-				delete loading[ url ];
+// 				const callbacks = loading[ url ];
+// 				delete loading[ url ];
 
-				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {
 
-					const callback = callbacks[ i ];
-					if ( callback.onLoad ) callback.onLoad( data );
+// 					const callback = callbacks[ i ];
+// 					if ( callback.onLoad ) callback.onLoad( data );
 
-				}
+// 				}
 
-			} )
-			.catch( err => {
+// 			} )
+// 			.catch( err => {
 
-				// Abort errors and other errors are handled the same
+// 				// Abort errors and other errors are handled the same
 
-				const callbacks = loading[ url ];
+// 				const callbacks = loading[ url ];
 
-				if ( callbacks === undefined ) {
+// 				if ( callbacks === undefined ) {
 
-					// When onLoad was called and url was deleted in `loading`
-					this.manager.itemError( url );
-					throw err;
+// 					// When onLoad was called and url was deleted in `loading`
+// 					this.manager.itemError( url );
+// 					throw err;
 
-				}
+// 				}
 
-				delete loading[ url ];
+// 				delete loading[ url ];
 
-				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {
 
-					const callback = callbacks[ i ];
-					if ( callback.onError ) callback.onError( err );
+// 					const callback = callbacks[ i ];
+// 					if ( callback.onError ) callback.onError( err );
 
-				}
+// 				}
 
-				this.manager.itemError( url );
+// 				this.manager.itemError( url );
 
-			} )
-			.finally( () => {
+// 			} )
+// 			.finally( () => {
 
-				this.manager.itemEnd( url );
+// 				this.manager.itemEnd( url );
 
-			} );
+// 			} );
 
-		this.manager.itemStart( url );
+// 		this.manager.itemStart( url );
 
-	}
+// 	}
 
-	setResponseType( value ) {
+// 	setResponseType( value ) {
 
-		this.responseType = value;
-		return this;
+// 		this.responseType = value;
+// 		return this;
 
-	}
+// 	}
 
-	setMimeType( value ) {
+// 	setMimeType( value ) {
 
-		this.mimeType = value;
-		return this;
+// 		this.mimeType = value;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class AnimationLoader extends Loader {
+// class AnimationLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		const loader = new FileLoader( this.manager );
-		loader.setPath( this.path );
-		loader.setRequestHeader( this.requestHeader );
-		loader.setWithCredentials( this.withCredentials );
-		loader.load( url, function ( text ) {
+// 		const loader = new FileLoader( this.manager );
+// 		loader.setPath( this.path );
+// 		loader.setRequestHeader( this.requestHeader );
+// 		loader.setWithCredentials( this.withCredentials );
+// 		loader.load( url, function ( text ) {
 
-			try {
+// 			try {
 
-				onLoad( scope.parse( JSON.parse( text ) ) );
+// 				onLoad( scope.parse( JSON.parse( text ) ) );
 
-			} catch ( e ) {
+// 			} catch ( e ) {
 
-				if ( onError ) {
+// 				if ( onError ) {
 
-					onError( e );
+// 					onError( e );
 
-				} else {
+// 				} else {
 
-					console.error( e );
+// 					console.error( e );
 
-				}
+// 				}
 
-				scope.manager.itemError( url );
+// 				scope.manager.itemError( url );
 
-			}
+// 			}
 
-		}, onProgress, onError );
+// 		}, onProgress, onError );
 
-	}
+// 	}
 
-	parse( json ) {
+// 	parse( json ) {
 
-		const animations = [];
+// 		const animations = [];
 
-		for ( let i = 0; i < json.length; i ++ ) {
+// 		for ( let i = 0; i < json.length; i ++ ) {
 
-			const clip = AnimationClip.parse( json[ i ] );
+// 			const clip = AnimationClip.parse( json[ i ] );
 
-			animations.push( clip );
+// 			animations.push( clip );
 
-		}
+// 		}
 
-		return animations;
+// 		return animations;
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Abstract Base class to block based textures loader (dds, pvr, ...)
- *
- * Sub classes have to implement the parse() method which will be used in load().
- */
+// /**
+//  * Abstract Base class to block based textures loader (dds, pvr, ...)
+//  *
+//  * Sub classes have to implement the parse() method which will be used in load().
+//  */
 
-class CompressedTextureLoader extends Loader {
+// class CompressedTextureLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		const images = [];
+// 		const images = [];
 
-		const texture = new CompressedTexture();
+// 		const texture = new CompressedTexture();
 
-		const loader = new FileLoader( this.manager );
-		loader.setPath( this.path );
-		loader.setResponseType( 'arraybuffer' );
-		loader.setRequestHeader( this.requestHeader );
-		loader.setWithCredentials( scope.withCredentials );
+// 		const loader = new FileLoader( this.manager );
+// 		loader.setPath( this.path );
+// 		loader.setResponseType( 'arraybuffer' );
+// 		loader.setRequestHeader( this.requestHeader );
+// 		loader.setWithCredentials( scope.withCredentials );
 
-		let loaded = 0;
+// 		let loaded = 0;
 
-		function loadTexture( i ) {
+// 		function loadTexture( i ) {
 
-			loader.load( url[ i ], function ( buffer ) {
+// 			loader.load( url[ i ], function ( buffer ) {
 
-				const texDatas = scope.parse( buffer, true );
+// 				const texDatas = scope.parse( buffer, true );
 
-				images[ i ] = {
-					width: texDatas.width,
-					height: texDatas.height,
-					format: texDatas.format,
-					mipmaps: texDatas.mipmaps
-				};
+// 				images[ i ] = {
+// 					width: texDatas.width,
+// 					height: texDatas.height,
+// 					format: texDatas.format,
+// 					mipmaps: texDatas.mipmaps
+// 				};
 
-				loaded += 1;
+// 				loaded += 1;
 
-				if ( loaded === 6 ) {
+// 				if ( loaded === 6 ) {
 
-					if ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;
+// 					if ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;
 
-					texture.image = images;
-					texture.format = texDatas.format;
-					texture.needsUpdate = true;
+// 					texture.image = images;
+// 					texture.format = texDatas.format;
+// 					texture.needsUpdate = true;
 
-					if ( onLoad ) onLoad( texture );
+// 					if ( onLoad ) onLoad( texture );
 
-				}
+// 				}
 
-			}, onProgress, onError );
+// 			}, onProgress, onError );
 
-		}
+// 		}
 
-		if ( Array.isArray( url ) ) {
+// 		if ( Array.isArray( url ) ) {
 
-			for ( let i = 0, il = url.length; i < il; ++ i ) {
+// 			for ( let i = 0, il = url.length; i < il; ++ i ) {
 
-				loadTexture( i );
+// 				loadTexture( i );
 
-			}
+// 			}
 
-		} else {
+// 		} else {
 
-			// compressed cubemap texture stored in a single DDS file
+// 			// compressed cubemap texture stored in a single DDS file
 
-			loader.load( url, function ( buffer ) {
+// 			loader.load( url, function ( buffer ) {
 
-				const texDatas = scope.parse( buffer, true );
+// 				const texDatas = scope.parse( buffer, true );
 
-				if ( texDatas.isCubemap ) {
+// 				if ( texDatas.isCubemap ) {
 
-					const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
+// 					const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
 
-					for ( let f = 0; f < faces; f ++ ) {
+// 					for ( let f = 0; f < faces; f ++ ) {
 
-						images[ f ] = { mipmaps: [] };
+// 						images[ f ] = { mipmaps: [] };
 
-						for ( let i = 0; i < texDatas.mipmapCount; i ++ ) {
+// 						for ( let i = 0; i < texDatas.mipmapCount; i ++ ) {
 
-							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
-							images[ f ].format = texDatas.format;
-							images[ f ].width = texDatas.width;
-							images[ f ].height = texDatas.height;
+// 							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
+// 							images[ f ].format = texDatas.format;
+// 							images[ f ].width = texDatas.width;
+// 							images[ f ].height = texDatas.height;
 
-						}
+// 						}
 
-					}
+// 					}
 
-					texture.image = images;
+// 					texture.image = images;
 
-				} else {
+// 				} else {
 
-					texture.image.width = texDatas.width;
-					texture.image.height = texDatas.height;
-					texture.mipmaps = texDatas.mipmaps;
+// 					texture.image.width = texDatas.width;
+// 					texture.image.height = texDatas.height;
+// 					texture.mipmaps = texDatas.mipmaps;
 
-				}
+// 				}
 
-				if ( texDatas.mipmapCount === 1 ) {
+// 				if ( texDatas.mipmapCount === 1 ) {
 
-					texture.minFilter = LinearFilter;
+// 					texture.minFilter = LinearFilter;
 
-				}
+// 				}
 
-				texture.format = texDatas.format;
-				texture.needsUpdate = true;
+// 				texture.format = texDatas.format;
+// 				texture.needsUpdate = true;
 
-				if ( onLoad ) onLoad( texture );
+// 				if ( onLoad ) onLoad( texture );
 
-			}, onProgress, onError );
+// 			}, onProgress, onError );
 
-		}
+// 		}
 
-		return texture;
+// 		return texture;
 
-	}
+// 	}
 
-}
+// }
 
-class ImageLoader extends Loader {
+// class ImageLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		if ( this.path !== undefined ) url = this.path + url;
+// 		if ( this.path !== undefined ) url = this.path + url;
 
-		url = this.manager.resolveURL( url );
+// 		url = this.manager.resolveURL( url );
 
-		const scope = this;
+// 		const scope = this;
 
-		const cached = Cache.get( url );
+// 		const cached = Cache.get( url );
 
-		if ( cached !== undefined ) {
+// 		if ( cached !== undefined ) {
 
-			scope.manager.itemStart( url );
+// 			scope.manager.itemStart( url );
 
-			setTimeout( function () {
+// 			setTimeout( function () {
 
-				if ( onLoad ) onLoad( cached );
+// 				if ( onLoad ) onLoad( cached );
 
-				scope.manager.itemEnd( url );
+// 				scope.manager.itemEnd( url );
 
-			}, 0 );
+// 			}, 0 );
 
-			return cached;
+// 			return cached;
 
-		}
+// 		}
 
-		const image = createElementNS( 'img' );
+// 		const image = createElementNS( 'img' );
 
-		function onImageLoad() {
+// 		function onImageLoad() {
 
-			removeEventListeners();
+// 			removeEventListeners();
 
-			Cache.add( url, this );
+// 			Cache.add( url, this );
 
-			if ( onLoad ) onLoad( this );
+// 			if ( onLoad ) onLoad( this );
 
-			scope.manager.itemEnd( url );
+// 			scope.manager.itemEnd( url );
 
-		}
+// 		}
 
-		function onImageError( event ) {
+// 		function onImageError( event ) {
 
-			removeEventListeners();
+// 			removeEventListeners();
 
-			if ( onError ) onError( event );
+// 			if ( onError ) onError( event );
 
-			scope.manager.itemError( url );
-			scope.manager.itemEnd( url );
+// 			scope.manager.itemError( url );
+// 			scope.manager.itemEnd( url );
 
-		}
+// 		}
 
-		function removeEventListeners() {
+// 		function removeEventListeners() {
 
-			image.removeEventListener( 'load', onImageLoad, false );
-			image.removeEventListener( 'error', onImageError, false );
+// 			image.removeEventListener( 'load', onImageLoad, false );
+// 			image.removeEventListener( 'error', onImageError, false );
 
-		}
+// 		}
 
-		image.addEventListener( 'load', onImageLoad, false );
-		image.addEventListener( 'error', onImageError, false );
+// 		image.addEventListener( 'load', onImageLoad, false );
+// 		image.addEventListener( 'error', onImageError, false );
 
-		if ( url.slice( 0, 5 ) !== 'data:' ) {
+// 		if ( url.slice( 0, 5 ) !== 'data:' ) {
 
-			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;
+// 			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;
 
-		}
+// 		}
 
-		scope.manager.itemStart( url );
+// 		scope.manager.itemStart( url );
 
-		image.src = url;
+// 		image.src = url;
 
-		return image;
+// 		return image;
 
-	}
+// 	}
 
-}
+// }
 
-class CubeTextureLoader extends Loader {
+// class CubeTextureLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( urls, onLoad, onProgress, onError ) {
+// 	load( urls, onLoad, onProgress, onError ) {
 
-		const texture = new CubeTexture();
+// 		const texture = new CubeTexture();
 
-		const loader = new ImageLoader( this.manager );
-		loader.setCrossOrigin( this.crossOrigin );
-		loader.setPath( this.path );
+// 		const loader = new ImageLoader( this.manager );
+// 		loader.setCrossOrigin( this.crossOrigin );
+// 		loader.setPath( this.path );
 
-		let loaded = 0;
+// 		let loaded = 0;
 
-		function loadTexture( i ) {
+// 		function loadTexture( i ) {
 
-			loader.load( urls[ i ], function ( image ) {
+// 			loader.load( urls[ i ], function ( image ) {
 
-				texture.images[ i ] = image;
+// 				texture.images[ i ] = image;
 
-				loaded ++;
+// 				loaded ++;
 
-				if ( loaded === 6 ) {
+// 				if ( loaded === 6 ) {
 
-					texture.needsUpdate = true;
+// 					texture.needsUpdate = true;
 
-					if ( onLoad ) onLoad( texture );
+// 					if ( onLoad ) onLoad( texture );
 
-				}
+// 				}
 
-			}, undefined, onError );
+// 			}, undefined, onError );
 
-		}
+// 		}
 
-		for ( let i = 0; i < urls.length; ++ i ) {
+// 		for ( let i = 0; i < urls.length; ++ i ) {
 
-			loadTexture( i );
+// 			loadTexture( i );
 
-		}
+// 		}
 
-		return texture;
+// 		return texture;
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
- *
- * Sub classes have to implement the parse() method which will be used in load().
- */
+// /**
+//  * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
+//  *
+//  * Sub classes have to implement the parse() method which will be used in load().
+//  */
 
-class DataTextureLoader extends Loader {
+// class DataTextureLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		const texture = new DataTexture();
+// 		const texture = new DataTexture();
 
-		const loader = new FileLoader( this.manager );
-		loader.setResponseType( 'arraybuffer' );
-		loader.setRequestHeader( this.requestHeader );
-		loader.setPath( this.path );
-		loader.setWithCredentials( scope.withCredentials );
-		loader.load( url, function ( buffer ) {
+// 		const loader = new FileLoader( this.manager );
+// 		loader.setResponseType( 'arraybuffer' );
+// 		loader.setRequestHeader( this.requestHeader );
+// 		loader.setPath( this.path );
+// 		loader.setWithCredentials( scope.withCredentials );
+// 		loader.load( url, function ( buffer ) {
 
-			const texData = scope.parse( buffer );
+// 			const texData = scope.parse( buffer );
 
-			if ( ! texData ) return;
+// 			if ( ! texData ) return;
 
-			if ( texData.image !== undefined ) {
+// 			if ( texData.image !== undefined ) {
 
-				texture.image = texData.image;
+// 				texture.image = texData.image;
 
-			} else if ( texData.data !== undefined ) {
+// 			} else if ( texData.data !== undefined ) {
 
-				texture.image.width = texData.width;
-				texture.image.height = texData.height;
-				texture.image.data = texData.data;
+// 				texture.image.width = texData.width;
+// 				texture.image.height = texData.height;
+// 				texture.image.data = texData.data;
 
-			}
+// 			}
 
-			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
-			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
+// 			texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
+// 			texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
 
-			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
-			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
+// 			texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
+// 			texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
 
-			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
+// 			texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
 
-			if ( texData.encoding !== undefined ) {
+// 			if ( texData.encoding !== undefined ) {
 
-				texture.encoding = texData.encoding;
+// 				texture.encoding = texData.encoding;
 
-			}
+// 			}
 
-			if ( texData.flipY !== undefined ) {
+// 			if ( texData.flipY !== undefined ) {
 
-				texture.flipY = texData.flipY;
+// 				texture.flipY = texData.flipY;
 
-			}
+// 			}
 
-			if ( texData.format !== undefined ) {
+// 			if ( texData.format !== undefined ) {
 
-				texture.format = texData.format;
+// 				texture.format = texData.format;
 
-			}
+// 			}
 
-			if ( texData.type !== undefined ) {
+// 			if ( texData.type !== undefined ) {
 
-				texture.type = texData.type;
+// 				texture.type = texData.type;
 
-			}
+// 			}
 
-			if ( texData.mipmaps !== undefined ) {
+// 			if ( texData.mipmaps !== undefined ) {
 
-				texture.mipmaps = texData.mipmaps;
-				texture.minFilter = LinearMipmapLinearFilter; // presumably...
+// 				texture.mipmaps = texData.mipmaps;
+// 				texture.minFilter = LinearMipmapLinearFilter; // presumably...
 
-			}
+// 			}
 
-			if ( texData.mipmapCount === 1 ) {
+// 			if ( texData.mipmapCount === 1 ) {
 
-				texture.minFilter = LinearFilter;
+// 				texture.minFilter = LinearFilter;
 
-			}
+// 			}
 
-			if ( texData.generateMipmaps !== undefined ) {
+// 			if ( texData.generateMipmaps !== undefined ) {
 
-				texture.generateMipmaps = texData.generateMipmaps;
+// 				texture.generateMipmaps = texData.generateMipmaps;
 
-			}
+// 			}
 
-			texture.needsUpdate = true;
+// 			texture.needsUpdate = true;
 
-			if ( onLoad ) onLoad( texture, texData );
+// 			if ( onLoad ) onLoad( texture, texData );
 
-		}, onProgress, onError );
+// 		}, onProgress, onError );
 
 
-		return texture;
+// 		return texture;
 
-	}
+// 	}
 
-}
+// }
 
-class TextureLoader extends Loader {
+// class TextureLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		const texture = new Texture();
+// 		const texture = new Texture();
 
-		const loader = new ImageLoader( this.manager );
-		loader.setCrossOrigin( this.crossOrigin );
-		loader.setPath( this.path );
+// 		const loader = new ImageLoader( this.manager );
+// 		loader.setCrossOrigin( this.crossOrigin );
+// 		loader.setPath( this.path );
 
-		loader.load( url, function ( image ) {
+// 		loader.load( url, function ( image ) {
 
-			texture.image = image;
-			texture.needsUpdate = true;
+// 			texture.image = image;
+// 			texture.needsUpdate = true;
 
-			if ( onLoad !== undefined ) {
+// 			if ( onLoad !== undefined ) {
 
-				onLoad( texture );
+// 				onLoad( texture );
 
-			}
+// 			}
 
-		}, onProgress, onError );
+// 		}, onProgress, onError );
 
-		return texture;
+// 		return texture;
 
-	}
+// 	}
 
-}
+// }
 
-class Light extends Object3D {
+// class Light extends Object3D {
 
-	constructor( color, intensity = 1 ) {
+// 	constructor( color, intensity = 1 ) {
 
-		super();
+// 		super();
 
-		this.isLight = true;
+// 		this.isLight = true;
 
-		this.type = 'Light';
+// 		this.type = 'Light';
 
-		this.color = new Color( color );
-		this.intensity = intensity;
+// 		this.color = new Color( color );
+// 		this.intensity = intensity;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		// Empty here in base class; some subclasses override.
+// 		// Empty here in base class; some subclasses override.
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.color.copy( source.color );
-		this.intensity = source.intensity;
+// 		this.color.copy( source.color );
+// 		this.intensity = source.intensity;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const data = super.toJSON( meta );
+// 		const data = super.toJSON( meta );
 
-		data.object.color = this.color.getHex();
-		data.object.intensity = this.intensity;
+// 		data.object.color = this.color.getHex();
+// 		data.object.intensity = this.intensity;
 
-		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();
+// 		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();
 
-		if ( this.distance !== undefined ) data.object.distance = this.distance;
-		if ( this.angle !== undefined ) data.object.angle = this.angle;
-		if ( this.decay !== undefined ) data.object.decay = this.decay;
-		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;
+// 		if ( this.distance !== undefined ) data.object.distance = this.distance;
+// 		if ( this.angle !== undefined ) data.object.angle = this.angle;
+// 		if ( this.decay !== undefined ) data.object.decay = this.decay;
+// 		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;
 
-		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
+// 		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-class HemisphereLight extends Light {
+// class HemisphereLight extends Light {
 
-	constructor( skyColor, groundColor, intensity ) {
+// 	constructor( skyColor, groundColor, intensity ) {
 
-		super( skyColor, intensity );
+// 		super( skyColor, intensity );
 
-		this.isHemisphereLight = true;
+// 		this.isHemisphereLight = true;
 
-		this.type = 'HemisphereLight';
+// 		this.type = 'HemisphereLight';
 
-		this.position.copy( Object3D.DefaultUp );
-		this.updateMatrix();
+// 		this.position.copy( Object3D.DefaultUp );
+// 		this.updateMatrix();
 
-		this.groundColor = new Color( groundColor );
+// 		this.groundColor = new Color( groundColor );
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.groundColor.copy( source.groundColor );
+// 		this.groundColor.copy( source.groundColor );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();
-const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();
-const _lookTarget$1 = /*@__PURE__*/ new Vector3();
+// const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();
+// const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();
+// const _lookTarget$1 = /*@__PURE__*/ new Vector3();
 
-class LightShadow {
+// class LightShadow {
 
-	constructor( camera ) {
+// 	constructor( camera ) {
 
-		this.camera = camera;
+// 		this.camera = camera;
 
-		this.bias = 0;
-		this.normalBias = 0;
-		this.radius = 1;
-		this.blurSamples = 8;
+// 		this.bias = 0;
+// 		this.normalBias = 0;
+// 		this.radius = 1;
+// 		this.blurSamples = 8;
 
-		this.mapSize = new Vector2( 512, 512 );
+// 		this.mapSize = new Vector2( 512, 512 );
 
-		this.map = null;
-		this.mapPass = null;
-		this.matrix = new Matrix4();
+// 		this.map = null;
+// 		this.mapPass = null;
+// 		this.matrix = new Matrix4();
 
-		this.autoUpdate = true;
-		this.needsUpdate = false;
+// 		this.autoUpdate = true;
+// 		this.needsUpdate = false;
 
-		this._frustum = new Frustum();
-		this._frameExtents = new Vector2( 1, 1 );
+// 		this._frustum = new Frustum();
+// 		this._frameExtents = new Vector2( 1, 1 );
 
-		this._viewportCount = 1;
+// 		this._viewportCount = 1;
 
-		this._viewports = [
+// 		this._viewports = [
 
-			new Vector4( 0, 0, 1, 1 )
+// 			new Vector4( 0, 0, 1, 1 )
 
-		];
+// 		];
 
-	}
+// 	}
 
-	getViewportCount() {
+// 	getViewportCount() {
 
-		return this._viewportCount;
+// 		return this._viewportCount;
 
-	}
+// 	}
 
-	getFrustum() {
+// 	getFrustum() {
 
-		return this._frustum;
+// 		return this._frustum;
 
-	}
+// 	}
 
-	updateMatrices( light ) {
+// 	updateMatrices( light ) {
 
-		const shadowCamera = this.camera;
-		const shadowMatrix = this.matrix;
+// 		const shadowCamera = this.camera;
+// 		const shadowMatrix = this.matrix;
 
-		_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );
-		shadowCamera.position.copy( _lightPositionWorld$1 );
+// 		_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );
+// 		shadowCamera.position.copy( _lightPositionWorld$1 );
 
-		_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );
-		shadowCamera.lookAt( _lookTarget$1 );
-		shadowCamera.updateMatrixWorld();
+// 		_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );
+// 		shadowCamera.lookAt( _lookTarget$1 );
+// 		shadowCamera.updateMatrixWorld();
 
-		_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
-		this._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );
+// 		_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
+// 		this._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );
 
-		shadowMatrix.set(
-			0.5, 0.0, 0.0, 0.5,
-			0.0, 0.5, 0.0, 0.5,
-			0.0, 0.0, 0.5, 0.5,
-			0.0, 0.0, 0.0, 1.0
-		);
+// 		shadowMatrix.set(
+// 			0.5, 0.0, 0.0, 0.5,
+// 			0.0, 0.5, 0.0, 0.5,
+// 			0.0, 0.0, 0.5, 0.5,
+// 			0.0, 0.0, 0.0, 1.0
+// 		);
 
-		shadowMatrix.multiply( _projScreenMatrix$1 );
+// 		shadowMatrix.multiply( _projScreenMatrix$1 );
 
-	}
+// 	}
 
-	getViewport( viewportIndex ) {
+// 	getViewport( viewportIndex ) {
 
-		return this._viewports[ viewportIndex ];
+// 		return this._viewports[ viewportIndex ];
 
-	}
+// 	}
 
-	getFrameExtents() {
+// 	getFrameExtents() {
 
-		return this._frameExtents;
+// 		return this._frameExtents;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		if ( this.map ) {
+// 		if ( this.map ) {
 
-			this.map.dispose();
+// 			this.map.dispose();
 
-		}
+// 		}
 
-		if ( this.mapPass ) {
+// 		if ( this.mapPass ) {
 
-			this.mapPass.dispose();
+// 			this.mapPass.dispose();
 
-		}
+// 		}
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.camera = source.camera.clone();
+// 		this.camera = source.camera.clone();
 
-		this.bias = source.bias;
-		this.radius = source.radius;
+// 		this.bias = source.bias;
+// 		this.radius = source.radius;
 
-		this.mapSize.copy( source.mapSize );
+// 		this.mapSize.copy( source.mapSize );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const object = {};
+// 		const object = {};
 
-		if ( this.bias !== 0 ) object.bias = this.bias;
-		if ( this.normalBias !== 0 ) object.normalBias = this.normalBias;
-		if ( this.radius !== 1 ) object.radius = this.radius;
-		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();
+// 		if ( this.bias !== 0 ) object.bias = this.bias;
+// 		if ( this.normalBias !== 0 ) object.normalBias = this.normalBias;
+// 		if ( this.radius !== 1 ) object.radius = this.radius;
+// 		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();
 
-		object.camera = this.camera.toJSON( false ).object;
-		delete object.camera.matrix;
+// 		object.camera = this.camera.toJSON( false ).object;
+// 		delete object.camera.matrix;
 
-		return object;
+// 		return object;
 
-	}
+// 	}
 
-}
+// }
 
-class SpotLightShadow extends LightShadow {
+// class SpotLightShadow extends LightShadow {
 
-	constructor() {
+// 	constructor() {
 
-		super( new PerspectiveCamera( 50, 1, 0.5, 500 ) );
+// 		super( new PerspectiveCamera( 50, 1, 0.5, 500 ) );
 
-		this.isSpotLightShadow = true;
+// 		this.isSpotLightShadow = true;
 
-		this.focus = 1;
+// 		this.focus = 1;
 
-	}
+// 	}
 
-	updateMatrices( light ) {
+// 	updateMatrices( light ) {
 
-		const camera = this.camera;
+// 		const camera = this.camera;
 
-		const fov = RAD2DEG * 2 * light.angle * this.focus;
-		const aspect = this.mapSize.width / this.mapSize.height;
-		const far = light.distance || camera.far;
+// 		const fov = RAD2DEG * 2 * light.angle * this.focus;
+// 		const aspect = this.mapSize.width / this.mapSize.height;
+// 		const far = light.distance || camera.far;
 
-		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {
+// 		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {
 
-			camera.fov = fov;
-			camera.aspect = aspect;
-			camera.far = far;
-			camera.updateProjectionMatrix();
+// 			camera.fov = fov;
+// 			camera.aspect = aspect;
+// 			camera.far = far;
+// 			camera.updateProjectionMatrix();
 
-		}
+// 		}
 
-		super.updateMatrices( light );
+// 		super.updateMatrices( light );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.focus = source.focus;
+// 		this.focus = source.focus;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class SpotLight extends Light {
+// class SpotLight extends Light {
 
-	constructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1 ) {
+// 	constructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1 ) {
 
-		super( color, intensity );
+// 		super( color, intensity );
 
-		this.isSpotLight = true;
+// 		this.isSpotLight = true;
 
-		this.type = 'SpotLight';
+// 		this.type = 'SpotLight';
 
-		this.position.copy( Object3D.DefaultUp );
-		this.updateMatrix();
+// 		this.position.copy( Object3D.DefaultUp );
+// 		this.updateMatrix();
 
-		this.target = new Object3D();
+// 		this.target = new Object3D();
 
-		this.distance = distance;
-		this.angle = angle;
-		this.penumbra = penumbra;
-		this.decay = decay; // for physically correct lights, should be 2.
+// 		this.distance = distance;
+// 		this.angle = angle;
+// 		this.penumbra = penumbra;
+// 		this.decay = decay; // for physically correct lights, should be 2.
 
-		this.map = null;
+// 		this.map = null;
 
-		this.shadow = new SpotLightShadow();
+// 		this.shadow = new SpotLightShadow();
 
-	}
+// 	}
 
-	get power() {
+// 	get power() {
 
-		// compute the light's luminous power (in lumens) from its intensity (in candela)
-		// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
-		return this.intensity * Math.PI;
+// 		// compute the light's luminous power (in lumens) from its intensity (in candela)
+// 		// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
+// 		return this.intensity * Math.PI;
 
-	}
+// 	}
 
-	set power( power ) {
+// 	set power( power ) {
 
-		// set the light's intensity (in candela) from the desired luminous power (in lumens)
-		this.intensity = power / Math.PI;
+// 		// set the light's intensity (in candela) from the desired luminous power (in lumens)
+// 		this.intensity = power / Math.PI;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.shadow.dispose();
+// 		this.shadow.dispose();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.distance = source.distance;
-		this.angle = source.angle;
-		this.penumbra = source.penumbra;
-		this.decay = source.decay;
+// 		this.distance = source.distance;
+// 		this.angle = source.angle;
+// 		this.penumbra = source.penumbra;
+// 		this.decay = source.decay;
 
-		this.target = source.target.clone();
+// 		this.target = source.target.clone();
 
-		this.shadow = source.shadow.clone();
+// 		this.shadow = source.shadow.clone();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const _projScreenMatrix = /*@__PURE__*/ new Matrix4();
-const _lightPositionWorld = /*@__PURE__*/ new Vector3();
-const _lookTarget = /*@__PURE__*/ new Vector3();
+// const _projScreenMatrix = /*@__PURE__*/ new Matrix4();
+// const _lightPositionWorld = /*@__PURE__*/ new Vector3();
+// const _lookTarget = /*@__PURE__*/ new Vector3();
 
-class PointLightShadow extends LightShadow {
+// class PointLightShadow extends LightShadow {
 
-	constructor() {
+// 	constructor() {
 
-		super( new PerspectiveCamera( 90, 1, 0.5, 500 ) );
+// 		super( new PerspectiveCamera( 90, 1, 0.5, 500 ) );
 
-		this.isPointLightShadow = true;
+// 		this.isPointLightShadow = true;
 
-		this._frameExtents = new Vector2( 4, 2 );
+// 		this._frameExtents = new Vector2( 4, 2 );
 
-		this._viewportCount = 6;
+// 		this._viewportCount = 6;
 
-		this._viewports = [
-			// These viewports map a cube-map onto a 2D texture with the
-			// following orientation:
-			//
-			//  xzXZ
-			//   y Y
-			//
-			// X - Positive x direction
-			// x - Negative x direction
-			// Y - Positive y direction
-			// y - Negative y direction
-			// Z - Positive z direction
-			// z - Negative z direction
+// 		this._viewports = [
+// 			// These viewports map a cube-map onto a 2D texture with the
+// 			// following orientation:
+// 			//
+// 			//  xzXZ
+// 			//   y Y
+// 			//
+// 			// X - Positive x direction
+// 			// x - Negative x direction
+// 			// Y - Positive y direction
+// 			// y - Negative y direction
+// 			// Z - Positive z direction
+// 			// z - Negative z direction
 
-			// positive X
-			new Vector4( 2, 1, 1, 1 ),
-			// negative X
-			new Vector4( 0, 1, 1, 1 ),
-			// positive Z
-			new Vector4( 3, 1, 1, 1 ),
-			// negative Z
-			new Vector4( 1, 1, 1, 1 ),
-			// positive Y
-			new Vector4( 3, 0, 1, 1 ),
-			// negative Y
-			new Vector4( 1, 0, 1, 1 )
-		];
+// 			// positive X
+// 			new Vector4( 2, 1, 1, 1 ),
+// 			// negative X
+// 			new Vector4( 0, 1, 1, 1 ),
+// 			// positive Z
+// 			new Vector4( 3, 1, 1, 1 ),
+// 			// negative Z
+// 			new Vector4( 1, 1, 1, 1 ),
+// 			// positive Y
+// 			new Vector4( 3, 0, 1, 1 ),
+// 			// negative Y
+// 			new Vector4( 1, 0, 1, 1 )
+// 		];
 
-		this._cubeDirections = [
-			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
-			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
-		];
+// 		this._cubeDirections = [
+// 			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
+// 			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
+// 		];
 
-		this._cubeUps = [
-			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
-			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
-		];
+// 		this._cubeUps = [
+// 			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
+// 			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
+// 		];
 
-	}
+// 	}
 
-	updateMatrices( light, viewportIndex = 0 ) {
+// 	updateMatrices( light, viewportIndex = 0 ) {
 
-		const camera = this.camera;
-		const shadowMatrix = this.matrix;
+// 		const camera = this.camera;
+// 		const shadowMatrix = this.matrix;
 
-		const far = light.distance || camera.far;
+// 		const far = light.distance || camera.far;
 
-		if ( far !== camera.far ) {
+// 		if ( far !== camera.far ) {
 
-			camera.far = far;
-			camera.updateProjectionMatrix();
+// 			camera.far = far;
+// 			camera.updateProjectionMatrix();
 
-		}
+// 		}
 
-		_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
-		camera.position.copy( _lightPositionWorld );
+// 		_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
+// 		camera.position.copy( _lightPositionWorld );
 
-		_lookTarget.copy( camera.position );
-		_lookTarget.add( this._cubeDirections[ viewportIndex ] );
-		camera.up.copy( this._cubeUps[ viewportIndex ] );
-		camera.lookAt( _lookTarget );
-		camera.updateMatrixWorld();
+// 		_lookTarget.copy( camera.position );
+// 		_lookTarget.add( this._cubeDirections[ viewportIndex ] );
+// 		camera.up.copy( this._cubeUps[ viewportIndex ] );
+// 		camera.lookAt( _lookTarget );
+// 		camera.updateMatrixWorld();
 
-		shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );
+// 		shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );
 
-		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
-		this._frustum.setFromProjectionMatrix( _projScreenMatrix );
+// 		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
+// 		this._frustum.setFromProjectionMatrix( _projScreenMatrix );
 
-	}
+// 	}
 
-}
+// }
 
-class PointLight extends Light {
+// class PointLight extends Light {
 
-	constructor( color, intensity, distance = 0, decay = 1 ) {
+// 	constructor( color, intensity, distance = 0, decay = 1 ) {
 
-		super( color, intensity );
+// 		super( color, intensity );
 
-		this.isPointLight = true;
+// 		this.isPointLight = true;
 
-		this.type = 'PointLight';
+// 		this.type = 'PointLight';
 
-		this.distance = distance;
-		this.decay = decay; // for physically correct lights, should be 2.
+// 		this.distance = distance;
+// 		this.decay = decay; // for physically correct lights, should be 2.
 
-		this.shadow = new PointLightShadow();
+// 		this.shadow = new PointLightShadow();
 
-	}
+// 	}
 
-	get power() {
+// 	get power() {
 
-		// compute the light's luminous power (in lumens) from its intensity (in candela)
-		// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
-		return this.intensity * 4 * Math.PI;
+// 		// compute the light's luminous power (in lumens) from its intensity (in candela)
+// 		// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
+// 		return this.intensity * 4 * Math.PI;
 
-	}
+// 	}
 
-	set power( power ) {
+// 	set power( power ) {
 
-		// set the light's intensity (in candela) from the desired luminous power (in lumens)
-		this.intensity = power / ( 4 * Math.PI );
+// 		// set the light's intensity (in candela) from the desired luminous power (in lumens)
+// 		this.intensity = power / ( 4 * Math.PI );
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.shadow.dispose();
+// 		this.shadow.dispose();
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.distance = source.distance;
-		this.decay = source.decay;
+// 		this.distance = source.distance;
+// 		this.decay = source.decay;
 
-		this.shadow = source.shadow.clone();
+// 		this.shadow = source.shadow.clone();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class DirectionalLightShadow extends LightShadow {
+// class DirectionalLightShadow extends LightShadow {
 
-	constructor() {
+// 	constructor() {
 
-		super( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );
+// 		super( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );
 
-		this.isDirectionalLightShadow = true;
+// 		this.isDirectionalLightShadow = true;
 
-	}
+// 	}
 
-}
+// }
 
-class DirectionalLight extends Light {
+// class DirectionalLight extends Light {
 
-	constructor( color, intensity ) {
+// 	constructor( color, intensity ) {
 
-		super( color, intensity );
+// 		super( color, intensity );
 
-		this.isDirectionalLight = true;
+// 		this.isDirectionalLight = true;
 
-		this.type = 'DirectionalLight';
+// 		this.type = 'DirectionalLight';
 
-		this.position.copy( Object3D.DefaultUp );
-		this.updateMatrix();
+// 		this.position.copy( Object3D.DefaultUp );
+// 		this.updateMatrix();
 
-		this.target = new Object3D();
+// 		this.target = new Object3D();
 
-		this.shadow = new DirectionalLightShadow();
+// 		this.shadow = new DirectionalLightShadow();
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.shadow.dispose();
+// 		this.shadow.dispose();
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.target = source.target.clone();
-		this.shadow = source.shadow.clone();
+// 		this.target = source.target.clone();
+// 		this.shadow = source.shadow.clone();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class AmbientLight extends Light {
+// class AmbientLight extends Light {
 
-	constructor( color, intensity ) {
+// 	constructor( color, intensity ) {
 
-		super( color, intensity );
+// 		super( color, intensity );
 
-		this.isAmbientLight = true;
+// 		this.isAmbientLight = true;
 
-		this.type = 'AmbientLight';
+// 		this.type = 'AmbientLight';
 
-	}
+// 	}
 
-}
+// }
 
-class RectAreaLight extends Light {
+// class RectAreaLight extends Light {
 
-	constructor( color, intensity, width = 10, height = 10 ) {
+// 	constructor( color, intensity, width = 10, height = 10 ) {
 
-		super( color, intensity );
+// 		super( color, intensity );
 
-		this.isRectAreaLight = true;
+// 		this.isRectAreaLight = true;
 
-		this.type = 'RectAreaLight';
+// 		this.type = 'RectAreaLight';
 
-		this.width = width;
-		this.height = height;
+// 		this.width = width;
+// 		this.height = height;
 
-	}
+// 	}
 
-	get power() {
+// 	get power() {
 
-		// compute the light's luminous power (in lumens) from its intensity (in nits)
-		return this.intensity * this.width * this.height * Math.PI;
+// 		// compute the light's luminous power (in lumens) from its intensity (in nits)
+// 		return this.intensity * this.width * this.height * Math.PI;
 
-	}
+// 	}
 
-	set power( power ) {
+// 	set power( power ) {
 
-		// set the light's intensity (in nits) from the desired luminous power (in lumens)
-		this.intensity = power / ( this.width * this.height * Math.PI );
+// 		// set the light's intensity (in nits) from the desired luminous power (in lumens)
+// 		this.intensity = power / ( this.width * this.height * Math.PI );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.width = source.width;
-		this.height = source.height;
+// 		this.width = source.width;
+// 		this.height = source.height;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const data = super.toJSON( meta );
+// 		const data = super.toJSON( meta );
 
-		data.object.width = this.width;
-		data.object.height = this.height;
+// 		data.object.width = this.width;
+// 		data.object.height = this.height;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Primary reference:
- *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
- *
- * Secondary reference:
- *   https://www.ppsloan.org/publications/StupidSH36.pdf
- */
+// /**
+//  * Primary reference:
+//  *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
+//  *
+//  * Secondary reference:
+//  *   https://www.ppsloan.org/publications/StupidSH36.pdf
+//  */
 
-// 3-band SH defined by 9 coefficients
+// // 3-band SH defined by 9 coefficients
 
-class SphericalHarmonics3 {
+// class SphericalHarmonics3 {
 
-	constructor() {
+// 	constructor() {
 
-		this.isSphericalHarmonics3 = true;
+// 		this.isSphericalHarmonics3 = true;
 
-		this.coefficients = [];
+// 		this.coefficients = [];
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			this.coefficients.push( new Vector3() );
+// 			this.coefficients.push( new Vector3() );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	set( coefficients ) {
+// 	set( coefficients ) {
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			this.coefficients[ i ].copy( coefficients[ i ] );
+// 			this.coefficients[ i ].copy( coefficients[ i ] );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	zero() {
+// 	zero() {
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			this.coefficients[ i ].set( 0, 0, 0 );
+// 			this.coefficients[ i ].set( 0, 0, 0 );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// get the radiance in the direction of the normal
-	// target is a Vector3
-	getAt( normal, target ) {
+// 	// get the radiance in the direction of the normal
+// 	// target is a Vector3
+// 	getAt( normal, target ) {
 
-		// normal is assumed to be unit length
+// 		// normal is assumed to be unit length
 
-		const x = normal.x, y = normal.y, z = normal.z;
+// 		const x = normal.x, y = normal.y, z = normal.z;
 
-		const coeff = this.coefficients;
+// 		const coeff = this.coefficients;
 
-		// band 0
-		target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );
+// 		// band 0
+// 		target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );
 
-		// band 1
-		target.addScaledVector( coeff[ 1 ], 0.488603 * y );
-		target.addScaledVector( coeff[ 2 ], 0.488603 * z );
-		target.addScaledVector( coeff[ 3 ], 0.488603 * x );
+// 		// band 1
+// 		target.addScaledVector( coeff[ 1 ], 0.488603 * y );
+// 		target.addScaledVector( coeff[ 2 ], 0.488603 * z );
+// 		target.addScaledVector( coeff[ 3 ], 0.488603 * x );
 
-		// band 2
-		target.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );
-		target.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );
-		target.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
-		target.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );
-		target.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );
+// 		// band 2
+// 		target.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );
+// 		target.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );
+// 		target.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
+// 		target.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );
+// 		target.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
-	// target is a Vector3
-	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
-	getIrradianceAt( normal, target ) {
+// 	// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
+// 	// target is a Vector3
+// 	// https://graphics.stanford.edu/papers/envmap/envmap.pdf
+// 	getIrradianceAt( normal, target ) {
 
-		// normal is assumed to be unit length
+// 		// normal is assumed to be unit length
 
-		const x = normal.x, y = normal.y, z = normal.z;
+// 		const x = normal.x, y = normal.y, z = normal.z;
 
-		const coeff = this.coefficients;
+// 		const coeff = this.coefficients;
 
-		// band 0
-		target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095
+// 		// band 0
+// 		target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095
 
-		// band 1
-		target.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
-		target.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );
-		target.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );
+// 		// band 1
+// 		target.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
+// 		target.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );
+// 		target.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );
 
-		// band 2
-		target.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
-		target.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );
-		target.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
-		target.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );
-		target.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274
+// 		// band 2
+// 		target.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
+// 		target.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );
+// 		target.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
+// 		target.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );
+// 		target.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274
 
-		return target;
+// 		return target;
 
-	}
+// 	}
 
-	add( sh ) {
+// 	add( sh ) {
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			this.coefficients[ i ].add( sh.coefficients[ i ] );
+// 			this.coefficients[ i ].add( sh.coefficients[ i ] );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	addScaledSH( sh, s ) {
+// 	addScaledSH( sh, s ) {
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			this.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );
+// 			this.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	scale( s ) {
+// 	scale( s ) {
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			this.coefficients[ i ].multiplyScalar( s );
+// 			this.coefficients[ i ].multiplyScalar( s );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lerp( sh, alpha ) {
+// 	lerp( sh, alpha ) {
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );
+// 			this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( sh ) {
+// 	equals( sh ) {
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {
+// 			if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {
 
-				return false;
+// 				return false;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return true;
+// 		return true;
 
-	}
+// 	}
 
-	copy( sh ) {
+// 	copy( sh ) {
 
-		return this.set( sh.coefficients );
+// 		return this.set( sh.coefficients );
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	fromArray( array, offset = 0 ) {
+// 	fromArray( array, offset = 0 ) {
 
-		const coefficients = this.coefficients;
+// 		const coefficients = this.coefficients;
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			coefficients[ i ].fromArray( array, offset + ( i * 3 ) );
+// 			coefficients[ i ].fromArray( array, offset + ( i * 3 ) );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toArray( array = [], offset = 0 ) {
+// 	toArray( array = [], offset = 0 ) {
 
-		const coefficients = this.coefficients;
+// 		const coefficients = this.coefficients;
 
-		for ( let i = 0; i < 9; i ++ ) {
+// 		for ( let i = 0; i < 9; i ++ ) {
 
-			coefficients[ i ].toArray( array, offset + ( i * 3 ) );
+// 			coefficients[ i ].toArray( array, offset + ( i * 3 ) );
 
-		}
+// 		}
 
-		return array;
+// 		return array;
 
-	}
+// 	}
 
-	// evaluate the basis functions
-	// shBasis is an Array[ 9 ]
-	static getBasisAt( normal, shBasis ) {
+// 	// evaluate the basis functions
+// 	// shBasis is an Array[ 9 ]
+// 	static getBasisAt( normal, shBasis ) {
 
-		// normal is assumed to be unit length
+// 		// normal is assumed to be unit length
 
-		const x = normal.x, y = normal.y, z = normal.z;
+// 		const x = normal.x, y = normal.y, z = normal.z;
 
-		// band 0
-		shBasis[ 0 ] = 0.282095;
+// 		// band 0
+// 		shBasis[ 0 ] = 0.282095;
 
-		// band 1
-		shBasis[ 1 ] = 0.488603 * y;
-		shBasis[ 2 ] = 0.488603 * z;
-		shBasis[ 3 ] = 0.488603 * x;
+// 		// band 1
+// 		shBasis[ 1 ] = 0.488603 * y;
+// 		shBasis[ 2 ] = 0.488603 * z;
+// 		shBasis[ 3 ] = 0.488603 * x;
 
-		// band 2
-		shBasis[ 4 ] = 1.092548 * x * y;
-		shBasis[ 5 ] = 1.092548 * y * z;
-		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
-		shBasis[ 7 ] = 1.092548 * x * z;
-		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );
+// 		// band 2
+// 		shBasis[ 4 ] = 1.092548 * x * y;
+// 		shBasis[ 5 ] = 1.092548 * y * z;
+// 		shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
+// 		shBasis[ 7 ] = 1.092548 * x * z;
+// 		shBasis[ 8 ] = 0.546274 * ( x * x - y * y );
 
-	}
+// 	}
 
-}
+// }
 
-class LightProbe extends Light {
+// class LightProbe extends Light {
 
-	constructor( sh = new SphericalHarmonics3(), intensity = 1 ) {
+// 	constructor( sh = new SphericalHarmonics3(), intensity = 1 ) {
 
-		super( undefined, intensity );
+// 		super( undefined, intensity );
 
-		this.isLightProbe = true;
+// 		this.isLightProbe = true;
 
-		this.sh = sh;
+// 		this.sh = sh;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.sh.copy( source.sh );
+// 		this.sh.copy( source.sh );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	fromJSON( json ) {
+// 	fromJSON( json ) {
 
-		this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
-		this.sh.fromArray( json.sh );
+// 		this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
+// 		this.sh.fromArray( json.sh );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toJSON( meta ) {
+// 	toJSON( meta ) {
 
-		const data = super.toJSON( meta );
+// 		const data = super.toJSON( meta );
 
-		data.object.sh = this.sh.toArray();
+// 		data.object.sh = this.sh.toArray();
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-class MaterialLoader extends Loader {
+// class MaterialLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
-		this.textures = {};
+// 		super( manager );
+// 		this.textures = {};
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		const loader = new FileLoader( scope.manager );
-		loader.setPath( scope.path );
-		loader.setRequestHeader( scope.requestHeader );
-		loader.setWithCredentials( scope.withCredentials );
-		loader.load( url, function ( text ) {
+// 		const loader = new FileLoader( scope.manager );
+// 		loader.setPath( scope.path );
+// 		loader.setRequestHeader( scope.requestHeader );
+// 		loader.setWithCredentials( scope.withCredentials );
+// 		loader.load( url, function ( text ) {
 
-			try {
+// 			try {
 
-				onLoad( scope.parse( JSON.parse( text ) ) );
+// 				onLoad( scope.parse( JSON.parse( text ) ) );
 
-			} catch ( e ) {
+// 			} catch ( e ) {
 
-				if ( onError ) {
+// 				if ( onError ) {
 
-					onError( e );
+// 					onError( e );
 
-				} else {
+// 				} else {
 
-					console.error( e );
+// 					console.error( e );
 
-				}
+// 				}
 
-				scope.manager.itemError( url );
+// 				scope.manager.itemError( url );
 
-			}
+// 			}
 
-		}, onProgress, onError );
+// 		}, onProgress, onError );
 
-	}
+// 	}
 
-	parse( json ) {
+// 	parse( json ) {
 
-		const textures = this.textures;
+// 		const textures = this.textures;
 
-		function getTexture( name ) {
+// 		function getTexture( name ) {
 
-			if ( textures[ name ] === undefined ) {
+// 			if ( textures[ name ] === undefined ) {
 
-				console.warn( 'THREE.MaterialLoader: Undefined texture', name );
+// 				console.warn( 'THREE.MaterialLoader: Undefined texture', name );
 
-			}
+// 			}
 
-			return textures[ name ];
+// 			return textures[ name ];
 
-		}
+// 		}
 
-		const material = MaterialLoader.createMaterialFromType( json.type );
+// 		const material = MaterialLoader.createMaterialFromType( json.type );
 
-		if ( json.uuid !== undefined ) material.uuid = json.uuid;
-		if ( json.name !== undefined ) material.name = json.name;
-		if ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );
-		if ( json.roughness !== undefined ) material.roughness = json.roughness;
-		if ( json.metalness !== undefined ) material.metalness = json.metalness;
-		if ( json.sheen !== undefined ) material.sheen = json.sheen;
-		if ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );
-		if ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;
-		if ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );
-		if ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );
-		if ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;
-		if ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );
-		if ( json.shininess !== undefined ) material.shininess = json.shininess;
-		if ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;
-		if ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;
-		if ( json.iridescence !== undefined ) material.iridescence = json.iridescence;
-		if ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;
-		if ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;
-		if ( json.transmission !== undefined ) material.transmission = json.transmission;
-		if ( json.thickness !== undefined ) material.thickness = json.thickness;
-		if ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;
-		if ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );
-		if ( json.fog !== undefined ) material.fog = json.fog;
-		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
-		if ( json.blending !== undefined ) material.blending = json.blending;
-		if ( json.combine !== undefined ) material.combine = json.combine;
-		if ( json.side !== undefined ) material.side = json.side;
-		if ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;
-		if ( json.opacity !== undefined ) material.opacity = json.opacity;
-		if ( json.transparent !== undefined ) material.transparent = json.transparent;
-		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
-		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
-		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
-		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
+// 		if ( json.uuid !== undefined ) material.uuid = json.uuid;
+// 		if ( json.name !== undefined ) material.name = json.name;
+// 		if ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );
+// 		if ( json.roughness !== undefined ) material.roughness = json.roughness;
+// 		if ( json.metalness !== undefined ) material.metalness = json.metalness;
+// 		if ( json.sheen !== undefined ) material.sheen = json.sheen;
+// 		if ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );
+// 		if ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;
+// 		if ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );
+// 		if ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );
+// 		if ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;
+// 		if ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );
+// 		if ( json.shininess !== undefined ) material.shininess = json.shininess;
+// 		if ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;
+// 		if ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;
+// 		if ( json.iridescence !== undefined ) material.iridescence = json.iridescence;
+// 		if ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;
+// 		if ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;
+// 		if ( json.transmission !== undefined ) material.transmission = json.transmission;
+// 		if ( json.thickness !== undefined ) material.thickness = json.thickness;
+// 		if ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;
+// 		if ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );
+// 		if ( json.fog !== undefined ) material.fog = json.fog;
+// 		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
+// 		if ( json.blending !== undefined ) material.blending = json.blending;
+// 		if ( json.combine !== undefined ) material.combine = json.combine;
+// 		if ( json.side !== undefined ) material.side = json.side;
+// 		if ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;
+// 		if ( json.opacity !== undefined ) material.opacity = json.opacity;
+// 		if ( json.transparent !== undefined ) material.transparent = json.transparent;
+// 		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
+// 		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
+// 		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
+// 		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
 
-		if ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;
-		if ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;
-		if ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;
-		if ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;
-		if ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;
-		if ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;
-		if ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;
-		if ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;
+// 		if ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;
+// 		if ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;
+// 		if ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;
+// 		if ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;
+// 		if ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;
+// 		if ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;
+// 		if ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;
+// 		if ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;
 
-		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
-		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
-		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
-		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
+// 		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
+// 		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
+// 		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
+// 		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
 
-		if ( json.rotation !== undefined ) material.rotation = json.rotation;
+// 		if ( json.rotation !== undefined ) material.rotation = json.rotation;
 
-		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
-		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
-		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
-		if ( json.scale !== undefined ) material.scale = json.scale;
+// 		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
+// 		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
+// 		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
+// 		if ( json.scale !== undefined ) material.scale = json.scale;
 
-		if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
-		if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
-		if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;
+// 		if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
+// 		if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
+// 		if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;
 
-		if ( json.dithering !== undefined ) material.dithering = json.dithering;
+// 		if ( json.dithering !== undefined ) material.dithering = json.dithering;
 
-		if ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;
-		if ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;
+// 		if ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;
+// 		if ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;
 
-		if ( json.visible !== undefined ) material.visible = json.visible;
+// 		if ( json.visible !== undefined ) material.visible = json.visible;
 
-		if ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;
+// 		if ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;
 
-		if ( json.userData !== undefined ) material.userData = json.userData;
+// 		if ( json.userData !== undefined ) material.userData = json.userData;
 
-		if ( json.vertexColors !== undefined ) {
+// 		if ( json.vertexColors !== undefined ) {
 
-			if ( typeof json.vertexColors === 'number' ) {
+// 			if ( typeof json.vertexColors === 'number' ) {
 
-				material.vertexColors = ( json.vertexColors > 0 ) ? true : false;
+// 				material.vertexColors = ( json.vertexColors > 0 ) ? true : false;
 
-			} else {
+// 			} else {
 
-				material.vertexColors = json.vertexColors;
+// 				material.vertexColors = json.vertexColors;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// Shader Material
+// 		// Shader Material
 
-		if ( json.uniforms !== undefined ) {
+// 		if ( json.uniforms !== undefined ) {
 
-			for ( const name in json.uniforms ) {
+// 			for ( const name in json.uniforms ) {
 
-				const uniform = json.uniforms[ name ];
+// 				const uniform = json.uniforms[ name ];
 
-				material.uniforms[ name ] = {};
+// 				material.uniforms[ name ] = {};
 
-				switch ( uniform.type ) {
+// 				switch ( uniform.type ) {
 
-					case 't':
-						material.uniforms[ name ].value = getTexture( uniform.value );
-						break;
+// 					case 't':
+// 						material.uniforms[ name ].value = getTexture( uniform.value );
+// 						break;
 
-					case 'c':
-						material.uniforms[ name ].value = new Color().setHex( uniform.value );
-						break;
+// 					case 'c':
+// 						material.uniforms[ name ].value = new Color().setHex( uniform.value );
+// 						break;
 
-					case 'v2':
-						material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
-						break;
+// 					case 'v2':
+// 						material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
+// 						break;
 
-					case 'v3':
-						material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
-						break;
+// 					case 'v3':
+// 						material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
+// 						break;
 
-					case 'v4':
-						material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
-						break;
+// 					case 'v4':
+// 						material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
+// 						break;
 
-					case 'm3':
-						material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );
-						break;
+// 					case 'm3':
+// 						material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );
+// 						break;
 
-					case 'm4':
-						material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
-						break;
+// 					case 'm4':
+// 						material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
+// 						break;
 
-					default:
-						material.uniforms[ name ].value = uniform.value;
+// 					default:
+// 						material.uniforms[ name ].value = uniform.value;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( json.defines !== undefined ) material.defines = json.defines;
-		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
-		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
-		if ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;
+// 		if ( json.defines !== undefined ) material.defines = json.defines;
+// 		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
+// 		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
+// 		if ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;
 
-		if ( json.extensions !== undefined ) {
+// 		if ( json.extensions !== undefined ) {
 
-			for ( const key in json.extensions ) {
+// 			for ( const key in json.extensions ) {
 
-				material.extensions[ key ] = json.extensions[ key ];
+// 				material.extensions[ key ] = json.extensions[ key ];
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// for PointsMaterial
+// 		// for PointsMaterial
 
-		if ( json.size !== undefined ) material.size = json.size;
-		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;
+// 		if ( json.size !== undefined ) material.size = json.size;
+// 		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;
 
-		// maps
+// 		// maps
 
-		if ( json.map !== undefined ) material.map = getTexture( json.map );
-		if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );
+// 		if ( json.map !== undefined ) material.map = getTexture( json.map );
+// 		if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );
 
-		if ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );
+// 		if ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );
 
-		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
-		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;
+// 		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
+// 		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;
 
-		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
-		if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
-		if ( json.normalScale !== undefined ) {
+// 		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
+// 		if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
+// 		if ( json.normalScale !== undefined ) {
 
-			let normalScale = json.normalScale;
+// 			let normalScale = json.normalScale;
 
-			if ( Array.isArray( normalScale ) === false ) {
+// 			if ( Array.isArray( normalScale ) === false ) {
 
-				// Blender exporter used to export a scalar. See #7459
+// 				// Blender exporter used to export a scalar. See #7459
 
-				normalScale = [ normalScale, normalScale ];
+// 				normalScale = [ normalScale, normalScale ];
 
-			}
+// 			}
 
-			material.normalScale = new Vector2().fromArray( normalScale );
+// 			material.normalScale = new Vector2().fromArray( normalScale );
 
-		}
+// 		}
 
-		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
-		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
-		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;
+// 		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
+// 		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
+// 		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;
 
-		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
-		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );
+// 		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
+// 		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );
 
-		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
-		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;
+// 		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
+// 		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;
 
-		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );
-		if ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );
-		if ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );
+// 		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );
+// 		if ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );
+// 		if ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );
 
-		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
-		if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;
+// 		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
+// 		if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;
 
-		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
-		if ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;
+// 		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
+// 		if ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;
 
-		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
-		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;
+// 		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
+// 		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;
 
-		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
-		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;
+// 		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
+// 		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;
 
-		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );
+// 		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );
 
-		if ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );
-		if ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );
-		if ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );
-		if ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );
+// 		if ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );
+// 		if ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );
+// 		if ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );
+// 		if ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );
 
-		if ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );
-		if ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );
+// 		if ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );
+// 		if ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );
 
-		if ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );
-		if ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );
+// 		if ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );
+// 		if ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );
 
-		if ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );
-		if ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );
+// 		if ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );
+// 		if ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );
 
-		return material;
+// 		return material;
 
-	}
+// 	}
 
-	setTextures( value ) {
+// 	setTextures( value ) {
 
-		this.textures = value;
-		return this;
+// 		this.textures = value;
+// 		return this;
 
-	}
+// 	}
 
-	static createMaterialFromType( type ) {
+// 	static createMaterialFromType( type ) {
 
-		const materialLib = {
-			ShadowMaterial,
-			SpriteMaterial,
-			RawShaderMaterial,
-			ShaderMaterial,
-			PointsMaterial,
-			MeshPhysicalMaterial,
-			MeshStandardMaterial,
-			MeshPhongMaterial,
-			MeshToonMaterial,
-			MeshNormalMaterial,
-			MeshLambertMaterial,
-			MeshDepthMaterial,
-			MeshDistanceMaterial,
-			MeshBasicMaterial,
-			MeshMatcapMaterial,
-			LineDashedMaterial,
-			LineBasicMaterial,
-			Material
-		};
+// 		const materialLib = {
+// 			ShadowMaterial,
+// 			SpriteMaterial,
+// 			RawShaderMaterial,
+// 			ShaderMaterial,
+// 			PointsMaterial,
+// 			MeshPhysicalMaterial,
+// 			MeshStandardMaterial,
+// 			MeshPhongMaterial,
+// 			MeshToonMaterial,
+// 			MeshNormalMaterial,
+// 			MeshLambertMaterial,
+// 			MeshDepthMaterial,
+// 			MeshDistanceMaterial,
+// 			MeshBasicMaterial,
+// 			MeshMatcapMaterial,
+// 			LineDashedMaterial,
+// 			LineBasicMaterial,
+// 			Material
+// 		};
 
-		return new materialLib[ type ]();
+// 		return new materialLib[ type ]();
 
-	}
+// 	}
 
-}
+// }
 
-class LoaderUtils {
+// class LoaderUtils {
 
-	static decodeText( array ) {
+// 	static decodeText( array ) {
 
-		if ( typeof TextDecoder !== 'undefined' ) {
+// 		if ( typeof TextDecoder !== 'undefined' ) {
 
-			return new TextDecoder().decode( array );
+// 			return new TextDecoder().decode( array );
 
-		}
+// 		}
 
-		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
-		// throws a "maximum call stack size exceeded" error for large arrays.
+// 		// Avoid the String.fromCharCode.apply(null, array) shortcut, which
+// 		// throws a "maximum call stack size exceeded" error for large arrays.
 
-		let s = '';
+// 		let s = '';
 
-		for ( let i = 0, il = array.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = array.length; i < il; i ++ ) {
 
-			// Implicitly assumes little-endian.
-			s += String.fromCharCode( array[ i ] );
+// 			// Implicitly assumes little-endian.
+// 			s += String.fromCharCode( array[ i ] );
 
-		}
+// 		}
 
-		try {
+// 		try {
 
-			// merges multi-byte utf-8 characters.
+// 			// merges multi-byte utf-8 characters.
 
-			return decodeURIComponent( escape( s ) );
+// 			return decodeURIComponent( escape( s ) );
 
-		} catch ( e ) { // see #16358
+// 		} catch ( e ) { // see #16358
 
-			return s;
+// 			return s;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	static extractUrlBase( url ) {
+// 	static extractUrlBase( url ) {
 
-		const index = url.lastIndexOf( '/' );
+// 		const index = url.lastIndexOf( '/' );
 
-		if ( index === - 1 ) return './';
+// 		if ( index === - 1 ) return './';
 
-		return url.slice( 0, index + 1 );
+// 		return url.slice( 0, index + 1 );
 
-	}
+// 	}
 
-	static resolveURL( url, path ) {
+// 	static resolveURL( url, path ) {
 
-		// Invalid URL
-		if ( typeof url !== 'string' || url === '' ) return '';
+// 		// Invalid URL
+// 		if ( typeof url !== 'string' || url === '' ) return '';
 
-		// Host Relative URL
-		if ( /^https?:\/\//i.test( path ) && /^\//.test( url ) ) {
+// 		// Host Relative URL
+// 		if ( /^https?:\/\//i.test( path ) && /^\//.test( url ) ) {
 
-			path = path.replace( /(^https?:\/\/[^\/]+).*/i, '$1' );
+// 			path = path.replace( /(^https?:\/\/[^\/]+).*/i, '$1' );
 
-		}
+// 		}
 
-		// Absolute URL http://,https://,//
-		if ( /^(https?:)?\/\//i.test( url ) ) return url;
+// 		// Absolute URL http://,https://,//
+// 		if ( /^(https?:)?\/\//i.test( url ) ) return url;
 
-		// Data URI
-		if ( /^data:.*,.*$/i.test( url ) ) return url;
+// 		// Data URI
+// 		if ( /^data:.*,.*$/i.test( url ) ) return url;
 
-		// Blob URL
-		if ( /^blob:.*$/i.test( url ) ) return url;
+// 		// Blob URL
+// 		if ( /^blob:.*$/i.test( url ) ) return url;
 
-		// Relative URL
-		return path + url;
+// 		// Relative URL
+// 		return path + url;
 
-	}
+// 	}
 
-}
+// }
 
-class InstancedBufferGeometry extends BufferGeometry {
+// class InstancedBufferGeometry extends BufferGeometry {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isInstancedBufferGeometry = true;
+// 		this.isInstancedBufferGeometry = true;
 
-		this.type = 'InstancedBufferGeometry';
-		this.instanceCount = Infinity;
+// 		this.type = 'InstancedBufferGeometry';
+// 		this.instanceCount = Infinity;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.instanceCount = source.instanceCount;
+// 		this.instanceCount = source.instanceCount;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	toJSON() {
+// 	toJSON() {
 
-		const data = super.toJSON( this );
+// 		const data = super.toJSON( this );
 
-		data.instanceCount = this.instanceCount;
+// 		data.instanceCount = this.instanceCount;
 
-		data.isInstancedBufferGeometry = true;
+// 		data.isInstancedBufferGeometry = true;
 
-		return data;
+// 		return data;
 
-	}
+// 	}
 
-}
+// }
 
-class BufferGeometryLoader extends Loader {
+// class BufferGeometryLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		const loader = new FileLoader( scope.manager );
-		loader.setPath( scope.path );
-		loader.setRequestHeader( scope.requestHeader );
-		loader.setWithCredentials( scope.withCredentials );
-		loader.load( url, function ( text ) {
+// 		const loader = new FileLoader( scope.manager );
+// 		loader.setPath( scope.path );
+// 		loader.setRequestHeader( scope.requestHeader );
+// 		loader.setWithCredentials( scope.withCredentials );
+// 		loader.load( url, function ( text ) {
 
-			try {
+// 			try {
 
-				onLoad( scope.parse( JSON.parse( text ) ) );
+// 				onLoad( scope.parse( JSON.parse( text ) ) );
 
-			} catch ( e ) {
+// 			} catch ( e ) {
 
-				if ( onError ) {
+// 				if ( onError ) {
 
-					onError( e );
+// 					onError( e );
 
-				} else {
+// 				} else {
 
-					console.error( e );
+// 					console.error( e );
 
-				}
+// 				}
 
-				scope.manager.itemError( url );
+// 				scope.manager.itemError( url );
 
-			}
+// 			}
 
-		}, onProgress, onError );
+// 		}, onProgress, onError );
 
-	}
+// 	}
 
-	parse( json ) {
+// 	parse( json ) {
 
-		const interleavedBufferMap = {};
-		const arrayBufferMap = {};
+// 		const interleavedBufferMap = {};
+// 		const arrayBufferMap = {};
 
-		function getInterleavedBuffer( json, uuid ) {
+// 		function getInterleavedBuffer( json, uuid ) {
 
-			if ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];
+// 			if ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];
 
-			const interleavedBuffers = json.interleavedBuffers;
-			const interleavedBuffer = interleavedBuffers[ uuid ];
+// 			const interleavedBuffers = json.interleavedBuffers;
+// 			const interleavedBuffer = interleavedBuffers[ uuid ];
 
-			const buffer = getArrayBuffer( json, interleavedBuffer.buffer );
+// 			const buffer = getArrayBuffer( json, interleavedBuffer.buffer );
 
-			const array = getTypedArray( interleavedBuffer.type, buffer );
-			const ib = new InterleavedBuffer( array, interleavedBuffer.stride );
-			ib.uuid = interleavedBuffer.uuid;
+// 			const array = getTypedArray( interleavedBuffer.type, buffer );
+// 			const ib = new InterleavedBuffer( array, interleavedBuffer.stride );
+// 			ib.uuid = interleavedBuffer.uuid;
 
-			interleavedBufferMap[ uuid ] = ib;
+// 			interleavedBufferMap[ uuid ] = ib;
 
-			return ib;
+// 			return ib;
 
-		}
+// 		}
 
-		function getArrayBuffer( json, uuid ) {
+// 		function getArrayBuffer( json, uuid ) {
 
-			if ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];
+// 			if ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];
 
-			const arrayBuffers = json.arrayBuffers;
-			const arrayBuffer = arrayBuffers[ uuid ];
+// 			const arrayBuffers = json.arrayBuffers;
+// 			const arrayBuffer = arrayBuffers[ uuid ];
 
-			const ab = new Uint32Array( arrayBuffer ).buffer;
+// 			const ab = new Uint32Array( arrayBuffer ).buffer;
 
-			arrayBufferMap[ uuid ] = ab;
+// 			arrayBufferMap[ uuid ] = ab;
 
-			return ab;
+// 			return ab;
 
-		}
+// 		}
 
-		const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
+// 		const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
 
-		const index = json.data.index;
+// 		const index = json.data.index;
 
-		if ( index !== undefined ) {
+// 		if ( index !== undefined ) {
 
-			const typedArray = getTypedArray( index.type, index.array );
-			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );
+// 			const typedArray = getTypedArray( index.type, index.array );
+// 			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );
 
-		}
+// 		}
 
-		const attributes = json.data.attributes;
+// 		const attributes = json.data.attributes;
 
-		for ( const key in attributes ) {
+// 		for ( const key in attributes ) {
 
-			const attribute = attributes[ key ];
-			let bufferAttribute;
+// 			const attribute = attributes[ key ];
+// 			let bufferAttribute;
 
-			if ( attribute.isInterleavedBufferAttribute ) {
+// 			if ( attribute.isInterleavedBufferAttribute ) {
 
-				const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
-				bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );
+// 				const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
+// 				bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );
 
-			} else {
+// 			} else {
 
-				const typedArray = getTypedArray( attribute.type, attribute.array );
-				const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
-				bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );
+// 				const typedArray = getTypedArray( attribute.type, attribute.array );
+// 				const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
+// 				bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );
 
-			}
+// 			}
 
-			if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
-			if ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );
+// 			if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
+// 			if ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );
 
-			if ( attribute.updateRange !== undefined ) {
+// 			if ( attribute.updateRange !== undefined ) {
 
-				bufferAttribute.updateRange.offset = attribute.updateRange.offset;
-				bufferAttribute.updateRange.count = attribute.updateRange.count;
+// 				bufferAttribute.updateRange.offset = attribute.updateRange.offset;
+// 				bufferAttribute.updateRange.count = attribute.updateRange.count;
 
-			}
+// 			}
 
-			geometry.setAttribute( key, bufferAttribute );
+// 			geometry.setAttribute( key, bufferAttribute );
 
-		}
+// 		}
 
-		const morphAttributes = json.data.morphAttributes;
+// 		const morphAttributes = json.data.morphAttributes;
 
-		if ( morphAttributes ) {
+// 		if ( morphAttributes ) {
 
-			for ( const key in morphAttributes ) {
+// 			for ( const key in morphAttributes ) {
 
-				const attributeArray = morphAttributes[ key ];
+// 				const attributeArray = morphAttributes[ key ];
 
-				const array = [];
+// 				const array = [];
 
-				for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {
+// 				for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {
 
-					const attribute = attributeArray[ i ];
-					let bufferAttribute;
+// 					const attribute = attributeArray[ i ];
+// 					let bufferAttribute;
 
-					if ( attribute.isInterleavedBufferAttribute ) {
+// 					if ( attribute.isInterleavedBufferAttribute ) {
 
-						const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
-						bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );
+// 						const interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );
+// 						bufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );
 
-					} else {
+// 					} else {
 
-						const typedArray = getTypedArray( attribute.type, attribute.array );
-						bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
+// 						const typedArray = getTypedArray( attribute.type, attribute.array );
+// 						bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
 
-					}
+// 					}
 
-					if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
-					array.push( bufferAttribute );
+// 					if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
+// 					array.push( bufferAttribute );
 
-				}
+// 				}
 
-				geometry.morphAttributes[ key ] = array;
+// 				geometry.morphAttributes[ key ] = array;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const morphTargetsRelative = json.data.morphTargetsRelative;
+// 		const morphTargetsRelative = json.data.morphTargetsRelative;
 
-		if ( morphTargetsRelative ) {
+// 		if ( morphTargetsRelative ) {
 
-			geometry.morphTargetsRelative = true;
+// 			geometry.morphTargetsRelative = true;
 
-		}
+// 		}
 
-		const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
+// 		const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
 
-		if ( groups !== undefined ) {
+// 		if ( groups !== undefined ) {
 
-			for ( let i = 0, n = groups.length; i !== n; ++ i ) {
+// 			for ( let i = 0, n = groups.length; i !== n; ++ i ) {
 
-				const group = groups[ i ];
+// 				const group = groups[ i ];
 
-				geometry.addGroup( group.start, group.count, group.materialIndex );
+// 				geometry.addGroup( group.start, group.count, group.materialIndex );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const boundingSphere = json.data.boundingSphere;
+// 		const boundingSphere = json.data.boundingSphere;
 
-		if ( boundingSphere !== undefined ) {
+// 		if ( boundingSphere !== undefined ) {
 
-			const center = new Vector3();
+// 			const center = new Vector3();
 
-			if ( boundingSphere.center !== undefined ) {
+// 			if ( boundingSphere.center !== undefined ) {
 
-				center.fromArray( boundingSphere.center );
+// 				center.fromArray( boundingSphere.center );
 
-			}
+// 			}
 
-			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );
+// 			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );
 
-		}
+// 		}
 
-		if ( json.name ) geometry.name = json.name;
-		if ( json.userData ) geometry.userData = json.userData;
+// 		if ( json.name ) geometry.name = json.name;
+// 		if ( json.userData ) geometry.userData = json.userData;
 
-		return geometry;
+// 		return geometry;
 
-	}
+// 	}
 
-}
+// }
 
-class ObjectLoader extends Loader {
+// class ObjectLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
-		this.resourcePath = this.resourcePath || path;
+// 		const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
+// 		this.resourcePath = this.resourcePath || path;
 
-		const loader = new FileLoader( this.manager );
-		loader.setPath( this.path );
-		loader.setRequestHeader( this.requestHeader );
-		loader.setWithCredentials( this.withCredentials );
-		loader.load( url, function ( text ) {
+// 		const loader = new FileLoader( this.manager );
+// 		loader.setPath( this.path );
+// 		loader.setRequestHeader( this.requestHeader );
+// 		loader.setWithCredentials( this.withCredentials );
+// 		loader.load( url, function ( text ) {
 
-			let json = null;
+// 			let json = null;
 
-			try {
+// 			try {
 
-				json = JSON.parse( text );
+// 				json = JSON.parse( text );
 
-			} catch ( error ) {
+// 			} catch ( error ) {
 
-				if ( onError !== undefined ) onError( error );
+// 				if ( onError !== undefined ) onError( error );
 
-				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );
+// 				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );
 
-				return;
+// 				return;
 
-			}
+// 			}
 
-			const metadata = json.metadata;
+// 			const metadata = json.metadata;
 
-			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
+// 			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
 
-				console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
-				return;
+// 				console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
+// 				return;
 
-			}
+// 			}
 
-			scope.parse( json, onLoad );
+// 			scope.parse( json, onLoad );
 
-		}, onProgress, onError );
+// 		}, onProgress, onError );
 
-	}
+// 	}
 
-	async loadAsync( url, onProgress ) {
+// 	async loadAsync( url, onProgress ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
-		this.resourcePath = this.resourcePath || path;
+// 		const path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
+// 		this.resourcePath = this.resourcePath || path;
 
-		const loader = new FileLoader( this.manager );
-		loader.setPath( this.path );
-		loader.setRequestHeader( this.requestHeader );
-		loader.setWithCredentials( this.withCredentials );
+// 		const loader = new FileLoader( this.manager );
+// 		loader.setPath( this.path );
+// 		loader.setRequestHeader( this.requestHeader );
+// 		loader.setWithCredentials( this.withCredentials );
 
-		const text = await loader.loadAsync( url, onProgress );
+// 		const text = await loader.loadAsync( url, onProgress );
 
-		const json = JSON.parse( text );
+// 		const json = JSON.parse( text );
 
-		const metadata = json.metadata;
+// 		const metadata = json.metadata;
 
-		if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
+// 		if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
 
-			throw new Error( 'THREE.ObjectLoader: Can\'t load ' + url );
+// 			throw new Error( 'THREE.ObjectLoader: Can\'t load ' + url );
 
-		}
+// 		}
 
-		return await scope.parseAsync( json );
+// 		return await scope.parseAsync( json );
 
-	}
+// 	}
 
-	parse( json, onLoad ) {
+// 	parse( json, onLoad ) {
 
-		const animations = this.parseAnimations( json.animations );
-		const shapes = this.parseShapes( json.shapes );
-		const geometries = this.parseGeometries( json.geometries, shapes );
+// 		const animations = this.parseAnimations( json.animations );
+// 		const shapes = this.parseShapes( json.shapes );
+// 		const geometries = this.parseGeometries( json.geometries, shapes );
 
-		const images = this.parseImages( json.images, function () {
+// 		const images = this.parseImages( json.images, function () {
 
-			if ( onLoad !== undefined ) onLoad( object );
+// 			if ( onLoad !== undefined ) onLoad( object );
 
-		} );
+// 		} );
 
-		const textures = this.parseTextures( json.textures, images );
-		const materials = this.parseMaterials( json.materials, textures );
+// 		const textures = this.parseTextures( json.textures, images );
+// 		const materials = this.parseMaterials( json.materials, textures );
 
-		const object = this.parseObject( json.object, geometries, materials, textures, animations );
-		const skeletons = this.parseSkeletons( json.skeletons, object );
+// 		const object = this.parseObject( json.object, geometries, materials, textures, animations );
+// 		const skeletons = this.parseSkeletons( json.skeletons, object );
 
-		this.bindSkeletons( object, skeletons );
+// 		this.bindSkeletons( object, skeletons );
 
-		//
+// 		//
 
-		if ( onLoad !== undefined ) {
+// 		if ( onLoad !== undefined ) {
 
-			let hasImages = false;
+// 			let hasImages = false;
 
-			for ( const uuid in images ) {
+// 			for ( const uuid in images ) {
 
-				if ( images[ uuid ].data instanceof HTMLImageElement ) {
+// 				if ( images[ uuid ].data instanceof HTMLImageElement ) {
 
-					hasImages = true;
-					break;
+// 					hasImages = true;
+// 					break;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( hasImages === false ) onLoad( object );
+// 			if ( hasImages === false ) onLoad( object );
 
-		}
+// 		}
 
-		return object;
+// 		return object;
 
-	}
+// 	}
 
-	async parseAsync( json ) {
+// 	async parseAsync( json ) {
 
-		const animations = this.parseAnimations( json.animations );
-		const shapes = this.parseShapes( json.shapes );
-		const geometries = this.parseGeometries( json.geometries, shapes );
+// 		const animations = this.parseAnimations( json.animations );
+// 		const shapes = this.parseShapes( json.shapes );
+// 		const geometries = this.parseGeometries( json.geometries, shapes );
 
-		const images = await this.parseImagesAsync( json.images );
+// 		const images = await this.parseImagesAsync( json.images );
 
-		const textures = this.parseTextures( json.textures, images );
-		const materials = this.parseMaterials( json.materials, textures );
+// 		const textures = this.parseTextures( json.textures, images );
+// 		const materials = this.parseMaterials( json.materials, textures );
 
-		const object = this.parseObject( json.object, geometries, materials, textures, animations );
-		const skeletons = this.parseSkeletons( json.skeletons, object );
+// 		const object = this.parseObject( json.object, geometries, materials, textures, animations );
+// 		const skeletons = this.parseSkeletons( json.skeletons, object );
 
-		this.bindSkeletons( object, skeletons );
+// 		this.bindSkeletons( object, skeletons );
 
-		return object;
+// 		return object;
 
-	}
+// 	}
 
-	parseShapes( json ) {
+// 	parseShapes( json ) {
 
-		const shapes = {};
+// 		const shapes = {};
 
-		if ( json !== undefined ) {
+// 		if ( json !== undefined ) {
 
-			for ( let i = 0, l = json.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = json.length; i < l; i ++ ) {
 
-				const shape = new Shape().fromJSON( json[ i ] );
+// 				const shape = new Shape().fromJSON( json[ i ] );
 
-				shapes[ shape.uuid ] = shape;
+// 				shapes[ shape.uuid ] = shape;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return shapes;
+// 		return shapes;
 
-	}
+// 	}
 
-	parseSkeletons( json, object ) {
+// 	parseSkeletons( json, object ) {
 
-		const skeletons = {};
-		const bones = {};
+// 		const skeletons = {};
+// 		const bones = {};
 
-		// generate bone lookup table
+// 		// generate bone lookup table
 
-		object.traverse( function ( child ) {
+// 		object.traverse( function ( child ) {
 
-			if ( child.isBone ) bones[ child.uuid ] = child;
+// 			if ( child.isBone ) bones[ child.uuid ] = child;
 
-		} );
+// 		} );
 
-		// create skeletons
+// 		// create skeletons
 
-		if ( json !== undefined ) {
+// 		if ( json !== undefined ) {
 
-			for ( let i = 0, l = json.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = json.length; i < l; i ++ ) {
 
-				const skeleton = new Skeleton().fromJSON( json[ i ], bones );
+// 				const skeleton = new Skeleton().fromJSON( json[ i ], bones );
 
-				skeletons[ skeleton.uuid ] = skeleton;
+// 				skeletons[ skeleton.uuid ] = skeleton;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return skeletons;
+// 		return skeletons;
 
-	}
+// 	}
 
-	parseGeometries( json, shapes ) {
+// 	parseGeometries( json, shapes ) {
 
-		const geometries = {};
+// 		const geometries = {};
 
-		if ( json !== undefined ) {
+// 		if ( json !== undefined ) {
 
-			const bufferGeometryLoader = new BufferGeometryLoader();
+// 			const bufferGeometryLoader = new BufferGeometryLoader();
 
-			for ( let i = 0, l = json.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = json.length; i < l; i ++ ) {
 
-				let geometry;
-				const data = json[ i ];
+// 				let geometry;
+// 				const data = json[ i ];
 
-				switch ( data.type ) {
+// 				switch ( data.type ) {
 
-					case 'BufferGeometry':
-					case 'InstancedBufferGeometry':
+// 					case 'BufferGeometry':
+// 					case 'InstancedBufferGeometry':
 
-						geometry = bufferGeometryLoader.parse( data );
-						break;
+// 						geometry = bufferGeometryLoader.parse( data );
+// 						break;
 
-					default:
+// 					default:
 
-						if ( data.type in Geometries ) {
+// 						if ( data.type in Geometries ) {
 
-							geometry = Geometries[ data.type ].fromJSON( data, shapes );
+// 							geometry = Geometries[ data.type ].fromJSON( data, shapes );
 
-						} else {
+// 						} else {
 
-							console.warn( `THREE.ObjectLoader: Unsupported geometry type "${ data.type }"` );
+// 							console.warn( `THREE.ObjectLoader: Unsupported geometry type "${ data.type }"` );
 
-						}
+// 						}
 
-				}
+// 				}
 
-				geometry.uuid = data.uuid;
+// 				geometry.uuid = data.uuid;
 
-				if ( data.name !== undefined ) geometry.name = data.name;
-				if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;
+// 				if ( data.name !== undefined ) geometry.name = data.name;
+// 				if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;
 
-				geometries[ data.uuid ] = geometry;
+// 				geometries[ data.uuid ] = geometry;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return geometries;
+// 		return geometries;
 
-	}
+// 	}
 
-	parseMaterials( json, textures ) {
+// 	parseMaterials( json, textures ) {
 
-		const cache = {}; // MultiMaterial
-		const materials = {};
+// 		const cache = {}; // MultiMaterial
+// 		const materials = {};
 
-		if ( json !== undefined ) {
+// 		if ( json !== undefined ) {
 
-			const loader = new MaterialLoader();
-			loader.setTextures( textures );
+// 			const loader = new MaterialLoader();
+// 			loader.setTextures( textures );
 
-			for ( let i = 0, l = json.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = json.length; i < l; i ++ ) {
 
-				const data = json[ i ];
+// 				const data = json[ i ];
 
-				if ( cache[ data.uuid ] === undefined ) {
+// 				if ( cache[ data.uuid ] === undefined ) {
 
-					cache[ data.uuid ] = loader.parse( data );
+// 					cache[ data.uuid ] = loader.parse( data );
 
-				}
+// 				}
 
-				materials[ data.uuid ] = cache[ data.uuid ];
+// 				materials[ data.uuid ] = cache[ data.uuid ];
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return materials;
+// 		return materials;
 
-	}
+// 	}
 
-	parseAnimations( json ) {
+// 	parseAnimations( json ) {
 
-		const animations = {};
+// 		const animations = {};
 
-		if ( json !== undefined ) {
+// 		if ( json !== undefined ) {
 
-			for ( let i = 0; i < json.length; i ++ ) {
+// 			for ( let i = 0; i < json.length; i ++ ) {
 
-				const data = json[ i ];
+// 				const data = json[ i ];
 
-				const clip = AnimationClip.parse( data );
+// 				const clip = AnimationClip.parse( data );
 
-				animations[ clip.uuid ] = clip;
+// 				animations[ clip.uuid ] = clip;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return animations;
+// 		return animations;
 
-	}
+// 	}
 
-	parseImages( json, onLoad ) {
+// 	parseImages( json, onLoad ) {
 
-		const scope = this;
-		const images = {};
+// 		const scope = this;
+// 		const images = {};
 
-		let loader;
+// 		let loader;
 
-		function loadImage( url ) {
+// 		function loadImage( url ) {
 
-			scope.manager.itemStart( url );
+// 			scope.manager.itemStart( url );
 
-			return loader.load( url, function () {
+// 			return loader.load( url, function () {
 
-				scope.manager.itemEnd( url );
+// 				scope.manager.itemEnd( url );
 
-			}, undefined, function () {
+// 			}, undefined, function () {
 
-				scope.manager.itemError( url );
-				scope.manager.itemEnd( url );
+// 				scope.manager.itemError( url );
+// 				scope.manager.itemEnd( url );
 
-			} );
+// 			} );
 
-		}
+// 		}
 
-		function deserializeImage( image ) {
+// 		function deserializeImage( image ) {
 
-			if ( typeof image === 'string' ) {
+// 			if ( typeof image === 'string' ) {
 
-				const url = image;
+// 				const url = image;
 
-				const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( url ) ? url : scope.resourcePath + url;
+// 				const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( url ) ? url : scope.resourcePath + url;
 
-				return loadImage( path );
+// 				return loadImage( path );
 
-			} else {
+// 			} else {
 
-				if ( image.data ) {
+// 				if ( image.data ) {
 
-					return {
-						data: getTypedArray( image.type, image.data ),
-						width: image.width,
-						height: image.height
-					};
+// 					return {
+// 						data: getTypedArray( image.type, image.data ),
+// 						width: image.width,
+// 						height: image.height
+// 					};
 
-				} else {
+// 				} else {
 
-					return null;
+// 					return null;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( json !== undefined && json.length > 0 ) {
+// 		if ( json !== undefined && json.length > 0 ) {
 
-			const manager = new LoadingManager( onLoad );
+// 			const manager = new LoadingManager( onLoad );
 
-			loader = new ImageLoader( manager );
-			loader.setCrossOrigin( this.crossOrigin );
+// 			loader = new ImageLoader( manager );
+// 			loader.setCrossOrigin( this.crossOrigin );
 
-			for ( let i = 0, il = json.length; i < il; i ++ ) {
+// 			for ( let i = 0, il = json.length; i < il; i ++ ) {
 
-				const image = json[ i ];
-				const url = image.url;
+// 				const image = json[ i ];
+// 				const url = image.url;
 
-				if ( Array.isArray( url ) ) {
+// 				if ( Array.isArray( url ) ) {
 
-					// load array of images e.g CubeTexture
+// 					// load array of images e.g CubeTexture
 
-					const imageArray = [];
+// 					const imageArray = [];
 
-					for ( let j = 0, jl = url.length; j < jl; j ++ ) {
+// 					for ( let j = 0, jl = url.length; j < jl; j ++ ) {
 
-						const currentUrl = url[ j ];
+// 						const currentUrl = url[ j ];
 
-						const deserializedImage = deserializeImage( currentUrl );
+// 						const deserializedImage = deserializeImage( currentUrl );
 
-						if ( deserializedImage !== null ) {
+// 						if ( deserializedImage !== null ) {
 
-							if ( deserializedImage instanceof HTMLImageElement ) {
+// 							if ( deserializedImage instanceof HTMLImageElement ) {
 
-								imageArray.push( deserializedImage );
+// 								imageArray.push( deserializedImage );
 
-							} else {
+// 							} else {
 
-								// special case: handle array of data textures for cube textures
+// 								// special case: handle array of data textures for cube textures
 
-								imageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );
+// 								imageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );
 
-							}
+// 							}
 
-						}
+// 						}
 
-					}
+// 					}
 
-					images[ image.uuid ] = new Source( imageArray );
+// 					images[ image.uuid ] = new Source( imageArray );
 
-				} else {
+// 				} else {
 
-					// load single image
+// 					// load single image
 
-					const deserializedImage = deserializeImage( image.url );
-					images[ image.uuid ] = new Source( deserializedImage );
+// 					const deserializedImage = deserializeImage( image.url );
+// 					images[ image.uuid ] = new Source( deserializedImage );
 
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return images;
+// 		return images;
 
-	}
+// 	}
 
-	async parseImagesAsync( json ) {
+// 	async parseImagesAsync( json ) {
 
-		const scope = this;
-		const images = {};
+// 		const scope = this;
+// 		const images = {};
 
-		let loader;
+// 		let loader;
 
-		async function deserializeImage( image ) {
+// 		async function deserializeImage( image ) {
 
-			if ( typeof image === 'string' ) {
+// 			if ( typeof image === 'string' ) {
 
-				const url = image;
+// 				const url = image;
 
-				const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( url ) ? url : scope.resourcePath + url;
+// 				const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( url ) ? url : scope.resourcePath + url;
 
-				return await loader.loadAsync( path );
+// 				return await loader.loadAsync( path );
 
-			} else {
+// 			} else {
 
-				if ( image.data ) {
+// 				if ( image.data ) {
 
-					return {
-						data: getTypedArray( image.type, image.data ),
-						width: image.width,
-						height: image.height
-					};
+// 					return {
+// 						data: getTypedArray( image.type, image.data ),
+// 						width: image.width,
+// 						height: image.height
+// 					};
 
-				} else {
+// 				} else {
 
-					return null;
+// 					return null;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( json !== undefined && json.length > 0 ) {
+// 		if ( json !== undefined && json.length > 0 ) {
 
-			loader = new ImageLoader( this.manager );
-			loader.setCrossOrigin( this.crossOrigin );
+// 			loader = new ImageLoader( this.manager );
+// 			loader.setCrossOrigin( this.crossOrigin );
 
-			for ( let i = 0, il = json.length; i < il; i ++ ) {
+// 			for ( let i = 0, il = json.length; i < il; i ++ ) {
 
-				const image = json[ i ];
-				const url = image.url;
+// 				const image = json[ i ];
+// 				const url = image.url;
 
-				if ( Array.isArray( url ) ) {
+// 				if ( Array.isArray( url ) ) {
 
-					// load array of images e.g CubeTexture
+// 					// load array of images e.g CubeTexture
 
-					const imageArray = [];
+// 					const imageArray = [];
 
-					for ( let j = 0, jl = url.length; j < jl; j ++ ) {
+// 					for ( let j = 0, jl = url.length; j < jl; j ++ ) {
 
-						const currentUrl = url[ j ];
+// 						const currentUrl = url[ j ];
 
-						const deserializedImage = await deserializeImage( currentUrl );
+// 						const deserializedImage = await deserializeImage( currentUrl );
 
-						if ( deserializedImage !== null ) {
+// 						if ( deserializedImage !== null ) {
 
-							if ( deserializedImage instanceof HTMLImageElement ) {
+// 							if ( deserializedImage instanceof HTMLImageElement ) {
 
-								imageArray.push( deserializedImage );
+// 								imageArray.push( deserializedImage );
 
-							} else {
+// 							} else {
 
-								// special case: handle array of data textures for cube textures
+// 								// special case: handle array of data textures for cube textures
 
-								imageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );
+// 								imageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );
 
-							}
+// 							}
 
-						}
+// 						}
 
-					}
+// 					}
 
-					images[ image.uuid ] = new Source( imageArray );
+// 					images[ image.uuid ] = new Source( imageArray );
 
-				} else {
+// 				} else {
 
-					// load single image
+// 					// load single image
 
-					const deserializedImage = await deserializeImage( image.url );
-					images[ image.uuid ] = new Source( deserializedImage );
+// 					const deserializedImage = await deserializeImage( image.url );
+// 					images[ image.uuid ] = new Source( deserializedImage );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return images;
+// 		return images;
 
-	}
+// 	}
 
-	parseTextures( json, images ) {
+// 	parseTextures( json, images ) {
 
-		function parseConstant( value, type ) {
+// 		function parseConstant( value, type ) {
 
-			if ( typeof value === 'number' ) return value;
+// 			if ( typeof value === 'number' ) return value;
 
-			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
+// 			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
 
-			return type[ value ];
+// 			return type[ value ];
 
-		}
+// 		}
 
-		const textures = {};
+// 		const textures = {};
 
-		if ( json !== undefined ) {
+// 		if ( json !== undefined ) {
 
-			for ( let i = 0, l = json.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = json.length; i < l; i ++ ) {
 
-				const data = json[ i ];
+// 				const data = json[ i ];
 
-				if ( data.image === undefined ) {
+// 				if ( data.image === undefined ) {
 
-					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
+// 					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
 
-				}
+// 				}
 
-				if ( images[ data.image ] === undefined ) {
+// 				if ( images[ data.image ] === undefined ) {
 
-					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
+// 					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
 
-				}
+// 				}
 
-				const source = images[ data.image ];
-				const image = source.data;
+// 				const source = images[ data.image ];
+// 				const image = source.data;
 
-				let texture;
+// 				let texture;
 
-				if ( Array.isArray( image ) ) {
+// 				if ( Array.isArray( image ) ) {
 
-					texture = new CubeTexture();
+// 					texture = new CubeTexture();
 
-					if ( image.length === 6 ) texture.needsUpdate = true;
+// 					if ( image.length === 6 ) texture.needsUpdate = true;
 
-				} else {
+// 				} else {
 
-					if ( image && image.data ) {
+// 					if ( image && image.data ) {
 
-						texture = new DataTexture();
+// 						texture = new DataTexture();
 
-					} else {
+// 					} else {
 
-						texture = new Texture();
+// 						texture = new Texture();
 
-					}
+// 					}
 
-					if ( image ) texture.needsUpdate = true; // textures can have undefined image data
+// 					if ( image ) texture.needsUpdate = true; // textures can have undefined image data
 
-				}
+// 				}
 
-				texture.source = source;
+// 				texture.source = source;
 
-				texture.uuid = data.uuid;
+// 				texture.uuid = data.uuid;
 
-				if ( data.name !== undefined ) texture.name = data.name;
+// 				if ( data.name !== undefined ) texture.name = data.name;
 
-				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );
+// 				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );
 
-				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
-				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
-				if ( data.center !== undefined ) texture.center.fromArray( data.center );
-				if ( data.rotation !== undefined ) texture.rotation = data.rotation;
+// 				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
+// 				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
+// 				if ( data.center !== undefined ) texture.center.fromArray( data.center );
+// 				if ( data.rotation !== undefined ) texture.rotation = data.rotation;
 
-				if ( data.wrap !== undefined ) {
+// 				if ( data.wrap !== undefined ) {
 
-					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
-					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );
+// 					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
+// 					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );
 
-				}
+// 				}
 
-				if ( data.format !== undefined ) texture.format = data.format;
-				if ( data.type !== undefined ) texture.type = data.type;
-				if ( data.encoding !== undefined ) texture.encoding = data.encoding;
+// 				if ( data.format !== undefined ) texture.format = data.format;
+// 				if ( data.type !== undefined ) texture.type = data.type;
+// 				if ( data.encoding !== undefined ) texture.encoding = data.encoding;
 
-				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
-				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
-				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
+// 				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
+// 				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
+// 				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
 
-				if ( data.flipY !== undefined ) texture.flipY = data.flipY;
+// 				if ( data.flipY !== undefined ) texture.flipY = data.flipY;
 
-				if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
-				if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;
+// 				if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
+// 				if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;
 
-				if ( data.userData !== undefined ) texture.userData = data.userData;
+// 				if ( data.userData !== undefined ) texture.userData = data.userData;
 
-				textures[ data.uuid ] = texture;
+// 				textures[ data.uuid ] = texture;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return textures;
+// 		return textures;
 
-	}
+// 	}
 
-	parseObject( data, geometries, materials, textures, animations ) {
+// 	parseObject( data, geometries, materials, textures, animations ) {
 
-		let object;
+// 		let object;
 
-		function getGeometry( name ) {
+// 		function getGeometry( name ) {
 
-			if ( geometries[ name ] === undefined ) {
+// 			if ( geometries[ name ] === undefined ) {
 
-				console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
+// 				console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
 
-			}
+// 			}
 
-			return geometries[ name ];
+// 			return geometries[ name ];
 
-		}
+// 		}
 
-		function getMaterial( name ) {
+// 		function getMaterial( name ) {
 
-			if ( name === undefined ) return undefined;
+// 			if ( name === undefined ) return undefined;
 
-			if ( Array.isArray( name ) ) {
+// 			if ( Array.isArray( name ) ) {
 
-				const array = [];
+// 				const array = [];
 
-				for ( let i = 0, l = name.length; i < l; i ++ ) {
+// 				for ( let i = 0, l = name.length; i < l; i ++ ) {
 
-					const uuid = name[ i ];
+// 					const uuid = name[ i ];
 
-					if ( materials[ uuid ] === undefined ) {
+// 					if ( materials[ uuid ] === undefined ) {
 
-						console.warn( 'THREE.ObjectLoader: Undefined material', uuid );
+// 						console.warn( 'THREE.ObjectLoader: Undefined material', uuid );
 
-					}
+// 					}
 
-					array.push( materials[ uuid ] );
+// 					array.push( materials[ uuid ] );
 
-				}
+// 				}
 
-				return array;
+// 				return array;
 
-			}
+// 			}
 
-			if ( materials[ name ] === undefined ) {
+// 			if ( materials[ name ] === undefined ) {
 
-				console.warn( 'THREE.ObjectLoader: Undefined material', name );
+// 				console.warn( 'THREE.ObjectLoader: Undefined material', name );
 
-			}
+// 			}
 
-			return materials[ name ];
+// 			return materials[ name ];
 
-		}
+// 		}
 
-		function getTexture( uuid ) {
+// 		function getTexture( uuid ) {
 
-			if ( textures[ uuid ] === undefined ) {
+// 			if ( textures[ uuid ] === undefined ) {
 
-				console.warn( 'THREE.ObjectLoader: Undefined texture', uuid );
+// 				console.warn( 'THREE.ObjectLoader: Undefined texture', uuid );
 
-			}
+// 			}
 
-			return textures[ uuid ];
+// 			return textures[ uuid ];
 
-		}
+// 		}
 
-		let geometry, material;
+// 		let geometry, material;
 
-		switch ( data.type ) {
+// 		switch ( data.type ) {
 
-			case 'Scene':
+// 			case 'Scene':
 
-				object = new Scene();
+// 				object = new Scene();
 
-				if ( data.background !== undefined ) {
+// 				if ( data.background !== undefined ) {
 
-					if ( Number.isInteger( data.background ) ) {
+// 					if ( Number.isInteger( data.background ) ) {
 
-						object.background = new Color( data.background );
+// 						object.background = new Color( data.background );
 
-					} else {
+// 					} else {
 
-						object.background = getTexture( data.background );
+// 						object.background = getTexture( data.background );
 
-					}
+// 					}
 
-				}
+// 				}
 
-				if ( data.environment !== undefined ) {
+// 				if ( data.environment !== undefined ) {
 
-					object.environment = getTexture( data.environment );
+// 					object.environment = getTexture( data.environment );
 
-				}
+// 				}
 
-				if ( data.fog !== undefined ) {
+// 				if ( data.fog !== undefined ) {
 
-					if ( data.fog.type === 'Fog' ) {
+// 					if ( data.fog.type === 'Fog' ) {
 
-						object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
+// 						object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
 
-					} else if ( data.fog.type === 'FogExp2' ) {
+// 					} else if ( data.fog.type === 'FogExp2' ) {
 
-						object.fog = new FogExp2( data.fog.color, data.fog.density );
+// 						object.fog = new FogExp2( data.fog.color, data.fog.density );
 
-					}
+// 					}
 
-				}
+// 				}
 
-				break;
+// 				break;
 
-			case 'PerspectiveCamera':
+// 			case 'PerspectiveCamera':
 
-				object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
+// 				object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
 
-				if ( data.focus !== undefined ) object.focus = data.focus;
-				if ( data.zoom !== undefined ) object.zoom = data.zoom;
-				if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
-				if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
-				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
+// 				if ( data.focus !== undefined ) object.focus = data.focus;
+// 				if ( data.zoom !== undefined ) object.zoom = data.zoom;
+// 				if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
+// 				if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
+// 				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
 
-				break;
+// 				break;
 
-			case 'OrthographicCamera':
+// 			case 'OrthographicCamera':
 
-				object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
+// 				object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
 
-				if ( data.zoom !== undefined ) object.zoom = data.zoom;
-				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
+// 				if ( data.zoom !== undefined ) object.zoom = data.zoom;
+// 				if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
 
-				break;
+// 				break;
 
-			case 'AmbientLight':
+// 			case 'AmbientLight':
 
-				object = new AmbientLight( data.color, data.intensity );
+// 				object = new AmbientLight( data.color, data.intensity );
 
-				break;
+// 				break;
 
-			case 'DirectionalLight':
+// 			case 'DirectionalLight':
 
-				object = new DirectionalLight( data.color, data.intensity );
+// 				object = new DirectionalLight( data.color, data.intensity );
 
-				break;
+// 				break;
 
-			case 'PointLight':
+// 			case 'PointLight':
 
-				object = new PointLight( data.color, data.intensity, data.distance, data.decay );
+// 				object = new PointLight( data.color, data.intensity, data.distance, data.decay );
 
-				break;
+// 				break;
 
-			case 'RectAreaLight':
+// 			case 'RectAreaLight':
 
-				object = new RectAreaLight( data.color, data.intensity, data.width, data.height );
+// 				object = new RectAreaLight( data.color, data.intensity, data.width, data.height );
 
-				break;
+// 				break;
 
-			case 'SpotLight':
+// 			case 'SpotLight':
 
-				object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );
+// 				object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );
 
-				break;
+// 				break;
 
-			case 'HemisphereLight':
+// 			case 'HemisphereLight':
 
-				object = new HemisphereLight( data.color, data.groundColor, data.intensity );
+// 				object = new HemisphereLight( data.color, data.groundColor, data.intensity );
 
-				break;
+// 				break;
 
-			case 'LightProbe':
+// 			case 'LightProbe':
 
-				object = new LightProbe().fromJSON( data );
+// 				object = new LightProbe().fromJSON( data );
 
-				break;
+// 				break;
 
-			case 'SkinnedMesh':
+// 			case 'SkinnedMesh':
 
-				geometry = getGeometry( data.geometry );
-			 	material = getMaterial( data.material );
+// 				geometry = getGeometry( data.geometry );
+// 			 	material = getMaterial( data.material );
 
-				object = new SkinnedMesh( geometry, material );
+// 				object = new SkinnedMesh( geometry, material );
 
-				if ( data.bindMode !== undefined ) object.bindMode = data.bindMode;
-				if ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );
-				if ( data.skeleton !== undefined ) object.skeleton = data.skeleton;
+// 				if ( data.bindMode !== undefined ) object.bindMode = data.bindMode;
+// 				if ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );
+// 				if ( data.skeleton !== undefined ) object.skeleton = data.skeleton;
 
-				break;
+// 				break;
 
-			case 'Mesh':
+// 			case 'Mesh':
 
-				geometry = getGeometry( data.geometry );
-				material = getMaterial( data.material );
+// 				geometry = getGeometry( data.geometry );
+// 				material = getMaterial( data.material );
 
-				object = new Mesh( geometry, material );
+// 				object = new Mesh( geometry, material );
 
-				break;
+// 				break;
 
-			case 'InstancedMesh':
+// 			case 'InstancedMesh':
 
-				geometry = getGeometry( data.geometry );
-				material = getMaterial( data.material );
-				const count = data.count;
-				const instanceMatrix = data.instanceMatrix;
-				const instanceColor = data.instanceColor;
+// 				geometry = getGeometry( data.geometry );
+// 				material = getMaterial( data.material );
+// 				const count = data.count;
+// 				const instanceMatrix = data.instanceMatrix;
+// 				const instanceColor = data.instanceColor;
 
-				object = new InstancedMesh( geometry, material, count );
-				object.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );
-				if ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );
+// 				object = new InstancedMesh( geometry, material, count );
+// 				object.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );
+// 				if ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );
 
-				break;
+// 				break;
 
-			case 'LOD':
+// 			case 'LOD':
 
-				object = new LOD();
+// 				object = new LOD();
 
-				break;
+// 				break;
 
-			case 'Line':
+// 			case 'Line':
 
-				object = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );
+// 				object = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );
 
-				break;
+// 				break;
 
-			case 'LineLoop':
+// 			case 'LineLoop':
 
-				object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );
+// 				object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );
 
-				break;
+// 				break;
 
-			case 'LineSegments':
+// 			case 'LineSegments':
 
-				object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );
+// 				object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );
 
-				break;
+// 				break;
 
-			case 'PointCloud':
-			case 'Points':
+// 			case 'PointCloud':
+// 			case 'Points':
 
-				object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );
+// 				object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );
 
-				break;
+// 				break;
 
-			case 'Sprite':
+// 			case 'Sprite':
 
-				object = new Sprite( getMaterial( data.material ) );
+// 				object = new Sprite( getMaterial( data.material ) );
 
-				break;
+// 				break;
 
-			case 'Group':
+// 			case 'Group':
 
-				object = new Group();
+// 				object = new Group();
 
-				break;
+// 				break;
 
-			case 'Bone':
+// 			case 'Bone':
 
-				object = new Bone();
+// 				object = new Bone();
 
-				break;
+// 				break;
 
-			default:
+// 			default:
 
-				object = new Object3D();
+// 				object = new Object3D();
 
-		}
+// 		}
 
-		object.uuid = data.uuid;
+// 		object.uuid = data.uuid;
 
-		if ( data.name !== undefined ) object.name = data.name;
+// 		if ( data.name !== undefined ) object.name = data.name;
 
-		if ( data.matrix !== undefined ) {
+// 		if ( data.matrix !== undefined ) {
 
-			object.matrix.fromArray( data.matrix );
+// 			object.matrix.fromArray( data.matrix );
 
-			if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
-			if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );
+// 			if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
+// 			if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );
 
-		} else {
+// 		} else {
 
-			if ( data.position !== undefined ) object.position.fromArray( data.position );
-			if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
-			if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
-			if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
+// 			if ( data.position !== undefined ) object.position.fromArray( data.position );
+// 			if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
+// 			if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
+// 			if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
 
-		}
+// 		}
 
-		if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
-		if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;
+// 		if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
+// 		if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;
 
-		if ( data.shadow ) {
+// 		if ( data.shadow ) {
 
-			if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
-			if ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;
-			if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
-			if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
-			if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );
+// 			if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
+// 			if ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;
+// 			if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
+// 			if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
+// 			if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );
 
-		}
+// 		}
 
-		if ( data.visible !== undefined ) object.visible = data.visible;
-		if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
-		if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
-		if ( data.userData !== undefined ) object.userData = data.userData;
-		if ( data.layers !== undefined ) object.layers.mask = data.layers;
+// 		if ( data.visible !== undefined ) object.visible = data.visible;
+// 		if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
+// 		if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
+// 		if ( data.userData !== undefined ) object.userData = data.userData;
+// 		if ( data.layers !== undefined ) object.layers.mask = data.layers;
 
-		if ( data.children !== undefined ) {
+// 		if ( data.children !== undefined ) {
 
-			const children = data.children;
+// 			const children = data.children;
 
-			for ( let i = 0; i < children.length; i ++ ) {
+// 			for ( let i = 0; i < children.length; i ++ ) {
 
-				object.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );
+// 				object.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( data.animations !== undefined ) {
+// 		if ( data.animations !== undefined ) {
 
-			const objectAnimations = data.animations;
+// 			const objectAnimations = data.animations;
 
-			for ( let i = 0; i < objectAnimations.length; i ++ ) {
+// 			for ( let i = 0; i < objectAnimations.length; i ++ ) {
 
-				const uuid = objectAnimations[ i ];
+// 				const uuid = objectAnimations[ i ];
 
-				object.animations.push( animations[ uuid ] );
+// 				object.animations.push( animations[ uuid ] );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( data.type === 'LOD' ) {
+// 		if ( data.type === 'LOD' ) {
 
-			if ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;
+// 			if ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;
 
-			const levels = data.levels;
+// 			const levels = data.levels;
 
-			for ( let l = 0; l < levels.length; l ++ ) {
+// 			for ( let l = 0; l < levels.length; l ++ ) {
 
-				const level = levels[ l ];
-				const child = object.getObjectByProperty( 'uuid', level.object );
+// 				const level = levels[ l ];
+// 				const child = object.getObjectByProperty( 'uuid', level.object );
 
-				if ( child !== undefined ) {
+// 				if ( child !== undefined ) {
 
-					object.addLevel( child, level.distance );
+// 					object.addLevel( child, level.distance );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return object;
+// 		return object;
 
-	}
+// 	}
 
-	bindSkeletons( object, skeletons ) {
+// 	bindSkeletons( object, skeletons ) {
 
-		if ( Object.keys( skeletons ).length === 0 ) return;
+// 		if ( Object.keys( skeletons ).length === 0 ) return;
 
-		object.traverse( function ( child ) {
+// 		object.traverse( function ( child ) {
 
-			if ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {
+// 			if ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {
 
-				const skeleton = skeletons[ child.skeleton ];
+// 				const skeleton = skeletons[ child.skeleton ];
 
-				if ( skeleton === undefined ) {
+// 				if ( skeleton === undefined ) {
 
-					console.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );
+// 					console.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );
 
-				} else {
+// 				} else {
 
-					child.bind( skeleton, child.bindMatrix );
+// 					child.bind( skeleton, child.bindMatrix );
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} );
+// 		} );
 
-	}
+// 	}
 
-}
+// }
 
-const TEXTURE_MAPPING = {
-	UVMapping: UVMapping,
-	CubeReflectionMapping: CubeReflectionMapping,
-	CubeRefractionMapping: CubeRefractionMapping,
-	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
-	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
-	CubeUVReflectionMapping: CubeUVReflectionMapping
-};
+// const TEXTURE_MAPPING = {
+// 	UVMapping: UVMapping,
+// 	CubeReflectionMapping: CubeReflectionMapping,
+// 	CubeRefractionMapping: CubeRefractionMapping,
+// 	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
+// 	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
+// 	CubeUVReflectionMapping: CubeUVReflectionMapping
+// };
 
-const TEXTURE_WRAPPING = {
-	RepeatWrapping: RepeatWrapping,
-	ClampToEdgeWrapping: ClampToEdgeWrapping,
-	MirroredRepeatWrapping: MirroredRepeatWrapping
-};
+// const TEXTURE_WRAPPING = {
+// 	RepeatWrapping: RepeatWrapping,
+// 	ClampToEdgeWrapping: ClampToEdgeWrapping,
+// 	MirroredRepeatWrapping: MirroredRepeatWrapping
+// };
 
-const TEXTURE_FILTER = {
-	NearestFilter: NearestFilter,
-	NearestMipmapNearestFilter: NearestMipmapNearestFilter,
-	NearestMipmapLinearFilter: NearestMipmapLinearFilter,
-	LinearFilter: LinearFilter,
-	LinearMipmapNearestFilter: LinearMipmapNearestFilter,
-	LinearMipmapLinearFilter: LinearMipmapLinearFilter
-};
+// const TEXTURE_FILTER = {
+// 	NearestFilter: NearestFilter,
+// 	NearestMipmapNearestFilter: NearestMipmapNearestFilter,
+// 	NearestMipmapLinearFilter: NearestMipmapLinearFilter,
+// 	LinearFilter: LinearFilter,
+// 	LinearMipmapNearestFilter: LinearMipmapNearestFilter,
+// 	LinearMipmapLinearFilter: LinearMipmapLinearFilter
+// };
 
-class ImageBitmapLoader extends Loader {
+// class ImageBitmapLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-		this.isImageBitmapLoader = true;
+// 		this.isImageBitmapLoader = true;
 
-		if ( typeof createImageBitmap === 'undefined' ) {
+// 		if ( typeof createImageBitmap === 'undefined' ) {
 
-			console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );
+// 			console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );
 
-		}
+// 		}
 
-		if ( typeof fetch === 'undefined' ) {
+// 		if ( typeof fetch === 'undefined' ) {
 
-			console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );
+// 			console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );
 
-		}
+// 		}
 
-		this.options = { premultiplyAlpha: 'none' };
+// 		this.options = { premultiplyAlpha: 'none' };
 
-	}
+// 	}
 
-	setOptions( options ) {
+// 	setOptions( options ) {
 
-		this.options = options;
+// 		this.options = options;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		if ( url === undefined ) url = '';
+// 		if ( url === undefined ) url = '';
 
-		if ( this.path !== undefined ) url = this.path + url;
+// 		if ( this.path !== undefined ) url = this.path + url;
 
-		url = this.manager.resolveURL( url );
+// 		url = this.manager.resolveURL( url );
 
-		const scope = this;
+// 		const scope = this;
 
-		const cached = Cache.get( url );
+// 		const cached = Cache.get( url );
 
-		if ( cached !== undefined ) {
+// 		if ( cached !== undefined ) {
 
-			scope.manager.itemStart( url );
+// 			scope.manager.itemStart( url );
 
-			setTimeout( function () {
+// 			setTimeout( function () {
 
-				if ( onLoad ) onLoad( cached );
+// 				if ( onLoad ) onLoad( cached );
 
-				scope.manager.itemEnd( url );
+// 				scope.manager.itemEnd( url );
 
-			}, 0 );
+// 			}, 0 );
 
-			return cached;
+// 			return cached;
 
-		}
+// 		}
 
-		const fetchOptions = {};
-		fetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';
-		fetchOptions.headers = this.requestHeader;
+// 		const fetchOptions = {};
+// 		fetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';
+// 		fetchOptions.headers = this.requestHeader;
 
-		fetch( url, fetchOptions ).then( function ( res ) {
+// 		fetch( url, fetchOptions ).then( function ( res ) {
 
-			return res.blob();
+// 			return res.blob();
 
-		} ).then( function ( blob ) {
+// 		} ).then( function ( blob ) {
 
-			return createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );
+// 			return createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );
 
-		} ).then( function ( imageBitmap ) {
+// 		} ).then( function ( imageBitmap ) {
 
-			Cache.add( url, imageBitmap );
+// 			Cache.add( url, imageBitmap );
 
-			if ( onLoad ) onLoad( imageBitmap );
+// 			if ( onLoad ) onLoad( imageBitmap );
 
-			scope.manager.itemEnd( url );
+// 			scope.manager.itemEnd( url );
 
-		} ).catch( function ( e ) {
+// 		} ).catch( function ( e ) {
 
-			if ( onError ) onError( e );
+// 			if ( onError ) onError( e );
 
-			scope.manager.itemError( url );
-			scope.manager.itemEnd( url );
+// 			scope.manager.itemError( url );
+// 			scope.manager.itemEnd( url );
 
-		} );
+// 		} );
 
-		scope.manager.itemStart( url );
+// 		scope.manager.itemStart( url );
 
-	}
+// 	}
 
-}
+// }
 
-let _context;
+// let _context;
 
-const AudioContext = {
+// const AudioContext = {
 
-	getContext: function () {
+// 	getContext: function () {
 
-		if ( _context === undefined ) {
+// 		if ( _context === undefined ) {
 
-			_context = new ( window.AudioContext || window.webkitAudioContext )();
+// 			_context = new ( window.AudioContext || window.webkitAudioContext )();
 
-		}
+// 		}
 
-		return _context;
+// 		return _context;
 
-	},
+// 	},
 
-	setContext: function ( value ) {
+// 	setContext: function ( value ) {
 
-		_context = value;
+// 		_context = value;
 
-	}
+// 	}
 
-};
+// };
 
-class AudioLoader extends Loader {
+// class AudioLoader extends Loader {
 
-	constructor( manager ) {
+// 	constructor( manager ) {
 
-		super( manager );
+// 		super( manager );
 
-	}
+// 	}
 
-	load( url, onLoad, onProgress, onError ) {
+// 	load( url, onLoad, onProgress, onError ) {
 
-		const scope = this;
+// 		const scope = this;
 
-		const loader = new FileLoader( this.manager );
-		loader.setResponseType( 'arraybuffer' );
-		loader.setPath( this.path );
-		loader.setRequestHeader( this.requestHeader );
-		loader.setWithCredentials( this.withCredentials );
-		loader.load( url, function ( buffer ) {
+// 		const loader = new FileLoader( this.manager );
+// 		loader.setResponseType( 'arraybuffer' );
+// 		loader.setPath( this.path );
+// 		loader.setRequestHeader( this.requestHeader );
+// 		loader.setWithCredentials( this.withCredentials );
+// 		loader.load( url, function ( buffer ) {
 
-			try {
+// 			try {
 
-				// Create a copy of the buffer. The `decodeAudioData` method
-				// detaches the buffer when complete, preventing reuse.
-				const bufferCopy = buffer.slice( 0 );
+// 				// Create a copy of the buffer. The `decodeAudioData` method
+// 				// detaches the buffer when complete, preventing reuse.
+// 				const bufferCopy = buffer.slice( 0 );
 
-				const context = AudioContext.getContext();
-				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {
+// 				const context = AudioContext.getContext();
+// 				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {
 
-					onLoad( audioBuffer );
+// 					onLoad( audioBuffer );
 
-				} );
+// 				} );
 
-			} catch ( e ) {
+// 			} catch ( e ) {
 
-				if ( onError ) {
+// 				if ( onError ) {
 
-					onError( e );
+// 					onError( e );
 
-				} else {
+// 				} else {
 
-					console.error( e );
+// 					console.error( e );
 
-				}
+// 				}
 
-				scope.manager.itemError( url );
+// 				scope.manager.itemError( url );
 
-			}
+// 			}
 
-		}, onProgress, onError );
+// 		}, onProgress, onError );
 
-	}
+// 	}
 
-}
+// }
 
-class HemisphereLightProbe extends LightProbe {
+// class HemisphereLightProbe extends LightProbe {
 
-	constructor( skyColor, groundColor, intensity = 1 ) {
+// 	constructor( skyColor, groundColor, intensity = 1 ) {
 
-		super( undefined, intensity );
+// 		super( undefined, intensity );
 
-		this.isHemisphereLightProbe = true;
+// 		this.isHemisphereLightProbe = true;
 
-		const color1 = new Color().set( skyColor );
-		const color2 = new Color().set( groundColor );
+// 		const color1 = new Color().set( skyColor );
+// 		const color2 = new Color().set( groundColor );
 
-		const sky = new Vector3( color1.r, color1.g, color1.b );
-		const ground = new Vector3( color2.r, color2.g, color2.b );
+// 		const sky = new Vector3( color1.r, color1.g, color1.b );
+// 		const ground = new Vector3( color2.r, color2.g, color2.b );
 
-		// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
-		const c0 = Math.sqrt( Math.PI );
-		const c1 = c0 * Math.sqrt( 0.75 );
+// 		// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
+// 		const c0 = Math.sqrt( Math.PI );
+// 		const c1 = c0 * Math.sqrt( 0.75 );
 
-		this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
-		this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );
+// 		this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
+// 		this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );
 
-	}
+// 	}
 
-}
+// }
 
-class AmbientLightProbe extends LightProbe {
+// class AmbientLightProbe extends LightProbe {
 
-	constructor( color, intensity = 1 ) {
+// 	constructor( color, intensity = 1 ) {
 
-		super( undefined, intensity );
+// 		super( undefined, intensity );
 
-		this.isAmbientLightProbe = true;
+// 		this.isAmbientLightProbe = true;
 
-		const color1 = new Color().set( color );
+// 		const color1 = new Color().set( color );
 
-		// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
-		this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );
+// 		// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
+// 		this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );
 
-	}
+// 	}
 
-}
+// }
 
-const _eyeRight = /*@__PURE__*/ new Matrix4();
-const _eyeLeft = /*@__PURE__*/ new Matrix4();
-const _projectionMatrix = /*@__PURE__*/ new Matrix4();
+// const _eyeRight = /*@__PURE__*/ new Matrix4();
+// const _eyeLeft = /*@__PURE__*/ new Matrix4();
+// const _projectionMatrix = /*@__PURE__*/ new Matrix4();
 
-class StereoCamera {
+// class StereoCamera {
 
-	constructor() {
+// 	constructor() {
 
-		this.type = 'StereoCamera';
+// 		this.type = 'StereoCamera';
 
-		this.aspect = 1;
+// 		this.aspect = 1;
 
-		this.eyeSep = 0.064;
+// 		this.eyeSep = 0.064;
 
-		this.cameraL = new PerspectiveCamera();
-		this.cameraL.layers.enable( 1 );
-		this.cameraL.matrixAutoUpdate = false;
+// 		this.cameraL = new PerspectiveCamera();
+// 		this.cameraL.layers.enable( 1 );
+// 		this.cameraL.matrixAutoUpdate = false;
 
-		this.cameraR = new PerspectiveCamera();
-		this.cameraR.layers.enable( 2 );
-		this.cameraR.matrixAutoUpdate = false;
+// 		this.cameraR = new PerspectiveCamera();
+// 		this.cameraR.layers.enable( 2 );
+// 		this.cameraR.matrixAutoUpdate = false;
 
-		this._cache = {
-			focus: null,
-			fov: null,
-			aspect: null,
-			near: null,
-			far: null,
-			zoom: null,
-			eyeSep: null
-		};
+// 		this._cache = {
+// 			focus: null,
+// 			fov: null,
+// 			aspect: null,
+// 			near: null,
+// 			far: null,
+// 			zoom: null,
+// 			eyeSep: null
+// 		};
 
-	}
+// 	}
 
-	update( camera ) {
+// 	update( camera ) {
 
-		const cache = this._cache;
+// 		const cache = this._cache;
 
-		const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
-			cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
-			cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
+// 		const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
+// 			cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
+// 			cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
 
-		if ( needsUpdate ) {
+// 		if ( needsUpdate ) {
 
-			cache.focus = camera.focus;
-			cache.fov = camera.fov;
-			cache.aspect = camera.aspect * this.aspect;
-			cache.near = camera.near;
-			cache.far = camera.far;
-			cache.zoom = camera.zoom;
-			cache.eyeSep = this.eyeSep;
+// 			cache.focus = camera.focus;
+// 			cache.fov = camera.fov;
+// 			cache.aspect = camera.aspect * this.aspect;
+// 			cache.near = camera.near;
+// 			cache.far = camera.far;
+// 			cache.zoom = camera.zoom;
+// 			cache.eyeSep = this.eyeSep;
 
-			// Off-axis stereoscopic effect based on
-			// http://paulbourke.net/stereographics/stereorender/
+// 			// Off-axis stereoscopic effect based on
+// 			// http://paulbourke.net/stereographics/stereorender/
 
-			_projectionMatrix.copy( camera.projectionMatrix );
-			const eyeSepHalf = cache.eyeSep / 2;
-			const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
-			const ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
-			let xmin, xmax;
+// 			_projectionMatrix.copy( camera.projectionMatrix );
+// 			const eyeSepHalf = cache.eyeSep / 2;
+// 			const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
+// 			const ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
+// 			let xmin, xmax;
 
-			// translate xOffset
+// 			// translate xOffset
 
-			_eyeLeft.elements[ 12 ] = - eyeSepHalf;
-			_eyeRight.elements[ 12 ] = eyeSepHalf;
+// 			_eyeLeft.elements[ 12 ] = - eyeSepHalf;
+// 			_eyeRight.elements[ 12 ] = eyeSepHalf;
 
-			// for left eye
+// 			// for left eye
 
-			xmin = - ymax * cache.aspect + eyeSepOnProjection;
-			xmax = ymax * cache.aspect + eyeSepOnProjection;
+// 			xmin = - ymax * cache.aspect + eyeSepOnProjection;
+// 			xmax = ymax * cache.aspect + eyeSepOnProjection;
 
-			_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
-			_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
+// 			_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
+// 			_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
 
-			this.cameraL.projectionMatrix.copy( _projectionMatrix );
+// 			this.cameraL.projectionMatrix.copy( _projectionMatrix );
 
-			// for right eye
+// 			// for right eye
 
-			xmin = - ymax * cache.aspect - eyeSepOnProjection;
-			xmax = ymax * cache.aspect - eyeSepOnProjection;
+// 			xmin = - ymax * cache.aspect - eyeSepOnProjection;
+// 			xmax = ymax * cache.aspect - eyeSepOnProjection;
 
-			_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
-			_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
+// 			_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
+// 			_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
 
-			this.cameraR.projectionMatrix.copy( _projectionMatrix );
+// 			this.cameraR.projectionMatrix.copy( _projectionMatrix );
 
-		}
+// 		}
 
-		this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
-		this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );
+// 		this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
+// 		this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );
 
-	}
+// 	}
 
-}
+// }
 
-class Clock {
+// class Clock {
 
-	constructor( autoStart = true ) {
+// 	constructor( autoStart = true ) {
 
-		this.autoStart = autoStart;
+// 		this.autoStart = autoStart;
 
-		this.startTime = 0;
-		this.oldTime = 0;
-		this.elapsedTime = 0;
+// 		this.startTime = 0;
+// 		this.oldTime = 0;
+// 		this.elapsedTime = 0;
 
-		this.running = false;
+// 		this.running = false;
 
-	}
+// 	}
 
-	start() {
+// 	start() {
 
-		this.startTime = now();
+// 		this.startTime = now();
 
-		this.oldTime = this.startTime;
-		this.elapsedTime = 0;
-		this.running = true;
+// 		this.oldTime = this.startTime;
+// 		this.elapsedTime = 0;
+// 		this.running = true;
 
-	}
+// 	}
 
-	stop() {
+// 	stop() {
 
-		this.getElapsedTime();
-		this.running = false;
-		this.autoStart = false;
+// 		this.getElapsedTime();
+// 		this.running = false;
+// 		this.autoStart = false;
 
-	}
+// 	}
 
-	getElapsedTime() {
+// 	getElapsedTime() {
 
-		this.getDelta();
-		return this.elapsedTime;
+// 		this.getDelta();
+// 		return this.elapsedTime;
 
-	}
+// 	}
 
-	getDelta() {
+// 	getDelta() {
 
-		let diff = 0;
+// 		let diff = 0;
 
-		if ( this.autoStart && ! this.running ) {
+// 		if ( this.autoStart && ! this.running ) {
 
-			this.start();
-			return 0;
+// 			this.start();
+// 			return 0;
 
-		}
+// 		}
 
-		if ( this.running ) {
+// 		if ( this.running ) {
 
-			const newTime = now();
+// 			const newTime = now();
 
-			diff = ( newTime - this.oldTime ) / 1000;
-			this.oldTime = newTime;
+// 			diff = ( newTime - this.oldTime ) / 1000;
+// 			this.oldTime = newTime;
 
-			this.elapsedTime += diff;
+// 			this.elapsedTime += diff;
 
-		}
+// 		}
 
-		return diff;
+// 		return diff;
 
-	}
+// 	}
 
-}
+// }
 
-function now() {
+// function now() {
 
-	return ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732
+// 	return ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732
 
-}
+// }
 
-const _position$1 = /*@__PURE__*/ new Vector3();
-const _quaternion$1 = /*@__PURE__*/ new Quaternion();
-const _scale$1 = /*@__PURE__*/ new Vector3();
-const _orientation$1 = /*@__PURE__*/ new Vector3();
+// const _position$1 = /*@__PURE__*/ new Vector3();
+// const _quaternion$1 = /*@__PURE__*/ new Quaternion();
+// const _scale$1 = /*@__PURE__*/ new Vector3();
+// const _orientation$1 = /*@__PURE__*/ new Vector3();
 
-class AudioListener extends Object3D {
+// class AudioListener extends Object3D {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.type = 'AudioListener';
+// 		this.type = 'AudioListener';
 
-		this.context = AudioContext.getContext();
+// 		this.context = AudioContext.getContext();
 
-		this.gain = this.context.createGain();
-		this.gain.connect( this.context.destination );
+// 		this.gain = this.context.createGain();
+// 		this.gain.connect( this.context.destination );
 
-		this.filter = null;
+// 		this.filter = null;
 
-		this.timeDelta = 0;
+// 		this.timeDelta = 0;
 
-		// private
+// 		// private
 
-		this._clock = new Clock();
+// 		this._clock = new Clock();
 
-	}
+// 	}
 
-	getInput() {
+// 	getInput() {
 
-		return this.gain;
+// 		return this.gain;
 
-	}
+// 	}
 
-	removeFilter() {
+// 	removeFilter() {
 
-		if ( this.filter !== null ) {
+// 		if ( this.filter !== null ) {
 
-			this.gain.disconnect( this.filter );
-			this.filter.disconnect( this.context.destination );
-			this.gain.connect( this.context.destination );
-			this.filter = null;
+// 			this.gain.disconnect( this.filter );
+// 			this.filter.disconnect( this.context.destination );
+// 			this.gain.connect( this.context.destination );
+// 			this.filter = null;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getFilter() {
+// 	getFilter() {
 
-		return this.filter;
+// 		return this.filter;
 
-	}
+// 	}
 
-	setFilter( value ) {
+// 	setFilter( value ) {
 
-		if ( this.filter !== null ) {
+// 		if ( this.filter !== null ) {
 
-			this.gain.disconnect( this.filter );
-			this.filter.disconnect( this.context.destination );
+// 			this.gain.disconnect( this.filter );
+// 			this.filter.disconnect( this.context.destination );
 
-		} else {
+// 		} else {
 
-			this.gain.disconnect( this.context.destination );
+// 			this.gain.disconnect( this.context.destination );
 
-		}
+// 		}
 
-		this.filter = value;
-		this.gain.connect( this.filter );
-		this.filter.connect( this.context.destination );
+// 		this.filter = value;
+// 		this.gain.connect( this.filter );
+// 		this.filter.connect( this.context.destination );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getMasterVolume() {
+// 	getMasterVolume() {
 
-		return this.gain.gain.value;
+// 		return this.gain.gain.value;
 
-	}
+// 	}
 
-	setMasterVolume( value ) {
+// 	setMasterVolume( value ) {
 
-		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
+// 		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	updateMatrixWorld( force ) {
+// 	updateMatrixWorld( force ) {
 
-		super.updateMatrixWorld( force );
+// 		super.updateMatrixWorld( force );
 
-		const listener = this.context.listener;
-		const up = this.up;
+// 		const listener = this.context.listener;
+// 		const up = this.up;
 
-		this.timeDelta = this._clock.getDelta();
+// 		this.timeDelta = this._clock.getDelta();
 
-		this.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );
+// 		this.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );
 
-		_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );
+// 		_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );
 
-		if ( listener.positionX ) {
+// 		if ( listener.positionX ) {
 
-			// code path for Chrome (see #14393)
+// 			// code path for Chrome (see #14393)
 
-			const endTime = this.context.currentTime + this.timeDelta;
+// 			const endTime = this.context.currentTime + this.timeDelta;
 
-			listener.positionX.linearRampToValueAtTime( _position$1.x, endTime );
-			listener.positionY.linearRampToValueAtTime( _position$1.y, endTime );
-			listener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );
-			listener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );
-			listener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );
-			listener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );
-			listener.upX.linearRampToValueAtTime( up.x, endTime );
-			listener.upY.linearRampToValueAtTime( up.y, endTime );
-			listener.upZ.linearRampToValueAtTime( up.z, endTime );
+// 			listener.positionX.linearRampToValueAtTime( _position$1.x, endTime );
+// 			listener.positionY.linearRampToValueAtTime( _position$1.y, endTime );
+// 			listener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );
+// 			listener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );
+// 			listener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );
+// 			listener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );
+// 			listener.upX.linearRampToValueAtTime( up.x, endTime );
+// 			listener.upY.linearRampToValueAtTime( up.y, endTime );
+// 			listener.upZ.linearRampToValueAtTime( up.z, endTime );
 
-		} else {
+// 		} else {
 
-			listener.setPosition( _position$1.x, _position$1.y, _position$1.z );
-			listener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );
+// 			listener.setPosition( _position$1.x, _position$1.y, _position$1.z );
+// 			listener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-class Audio extends Object3D {
+// class Audio extends Object3D {
 
-	constructor( listener ) {
+// 	constructor( listener ) {
 
-		super();
+// 		super();
 
-		this.type = 'Audio';
+// 		this.type = 'Audio';
 
-		this.listener = listener;
-		this.context = listener.context;
+// 		this.listener = listener;
+// 		this.context = listener.context;
 
-		this.gain = this.context.createGain();
-		this.gain.connect( listener.getInput() );
+// 		this.gain = this.context.createGain();
+// 		this.gain.connect( listener.getInput() );
 
-		this.autoplay = false;
+// 		this.autoplay = false;
 
-		this.buffer = null;
-		this.detune = 0;
-		this.loop = false;
-		this.loopStart = 0;
-		this.loopEnd = 0;
-		this.offset = 0;
-		this.duration = undefined;
-		this.playbackRate = 1;
-		this.isPlaying = false;
-		this.hasPlaybackControl = true;
-		this.source = null;
-		this.sourceType = 'empty';
+// 		this.buffer = null;
+// 		this.detune = 0;
+// 		this.loop = false;
+// 		this.loopStart = 0;
+// 		this.loopEnd = 0;
+// 		this.offset = 0;
+// 		this.duration = undefined;
+// 		this.playbackRate = 1;
+// 		this.isPlaying = false;
+// 		this.hasPlaybackControl = true;
+// 		this.source = null;
+// 		this.sourceType = 'empty';
 
-		this._startedAt = 0;
-		this._progress = 0;
-		this._connected = false;
+// 		this._startedAt = 0;
+// 		this._progress = 0;
+// 		this._connected = false;
 
-		this.filters = [];
+// 		this.filters = [];
 
-	}
+// 	}
 
-	getOutput() {
+// 	getOutput() {
 
-		return this.gain;
+// 		return this.gain;
 
-	}
+// 	}
 
-	setNodeSource( audioNode ) {
+// 	setNodeSource( audioNode ) {
 
-		this.hasPlaybackControl = false;
-		this.sourceType = 'audioNode';
-		this.source = audioNode;
-		this.connect();
+// 		this.hasPlaybackControl = false;
+// 		this.sourceType = 'audioNode';
+// 		this.source = audioNode;
+// 		this.connect();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setMediaElementSource( mediaElement ) {
+// 	setMediaElementSource( mediaElement ) {
 
-		this.hasPlaybackControl = false;
-		this.sourceType = 'mediaNode';
-		this.source = this.context.createMediaElementSource( mediaElement );
-		this.connect();
+// 		this.hasPlaybackControl = false;
+// 		this.sourceType = 'mediaNode';
+// 		this.source = this.context.createMediaElementSource( mediaElement );
+// 		this.connect();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setMediaStreamSource( mediaStream ) {
+// 	setMediaStreamSource( mediaStream ) {
 
-		this.hasPlaybackControl = false;
-		this.sourceType = 'mediaStreamNode';
-		this.source = this.context.createMediaStreamSource( mediaStream );
-		this.connect();
+// 		this.hasPlaybackControl = false;
+// 		this.sourceType = 'mediaStreamNode';
+// 		this.source = this.context.createMediaStreamSource( mediaStream );
+// 		this.connect();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setBuffer( audioBuffer ) {
+// 	setBuffer( audioBuffer ) {
 
-		this.buffer = audioBuffer;
-		this.sourceType = 'buffer';
+// 		this.buffer = audioBuffer;
+// 		this.sourceType = 'buffer';
 
-		if ( this.autoplay ) this.play();
+// 		if ( this.autoplay ) this.play();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	play( delay = 0 ) {
+// 	play( delay = 0 ) {
 
-		if ( this.isPlaying === true ) {
+// 		if ( this.isPlaying === true ) {
 
-			console.warn( 'THREE.Audio: Audio is already playing.' );
-			return;
+// 			console.warn( 'THREE.Audio: Audio is already playing.' );
+// 			return;
 
-		}
+// 		}
 
-		if ( this.hasPlaybackControl === false ) {
+// 		if ( this.hasPlaybackControl === false ) {
 
-			console.warn( 'THREE.Audio: this Audio has no playback control.' );
-			return;
+// 			console.warn( 'THREE.Audio: this Audio has no playback control.' );
+// 			return;
 
-		}
+// 		}
 
-		this._startedAt = this.context.currentTime + delay;
+// 		this._startedAt = this.context.currentTime + delay;
 
-		const source = this.context.createBufferSource();
-		source.buffer = this.buffer;
-		source.loop = this.loop;
-		source.loopStart = this.loopStart;
-		source.loopEnd = this.loopEnd;
-		source.onended = this.onEnded.bind( this );
-		source.start( this._startedAt, this._progress + this.offset, this.duration );
+// 		const source = this.context.createBufferSource();
+// 		source.buffer = this.buffer;
+// 		source.loop = this.loop;
+// 		source.loopStart = this.loopStart;
+// 		source.loopEnd = this.loopEnd;
+// 		source.onended = this.onEnded.bind( this );
+// 		source.start( this._startedAt, this._progress + this.offset, this.duration );
 
-		this.isPlaying = true;
+// 		this.isPlaying = true;
 
-		this.source = source;
+// 		this.source = source;
 
-		this.setDetune( this.detune );
-		this.setPlaybackRate( this.playbackRate );
+// 		this.setDetune( this.detune );
+// 		this.setPlaybackRate( this.playbackRate );
 
-		return this.connect();
+// 		return this.connect();
 
-	}
+// 	}
 
-	pause() {
+// 	pause() {
 
-		if ( this.hasPlaybackControl === false ) {
+// 		if ( this.hasPlaybackControl === false ) {
 
-			console.warn( 'THREE.Audio: this Audio has no playback control.' );
-			return;
+// 			console.warn( 'THREE.Audio: this Audio has no playback control.' );
+// 			return;
 
-		}
+// 		}
 
-		if ( this.isPlaying === true ) {
+// 		if ( this.isPlaying === true ) {
 
-			// update current progress
+// 			// update current progress
 
-			this._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;
+// 			this._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;
 
-			if ( this.loop === true ) {
+// 			if ( this.loop === true ) {
 
-				// ensure _progress does not exceed duration with looped audios
+// 				// ensure _progress does not exceed duration with looped audios
 
-				this._progress = this._progress % ( this.duration || this.buffer.duration );
+// 				this._progress = this._progress % ( this.duration || this.buffer.duration );
 
-			}
+// 			}
 
-			this.source.stop();
-			this.source.onended = null;
+// 			this.source.stop();
+// 			this.source.onended = null;
 
-			this.isPlaying = false;
+// 			this.isPlaying = false;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	stop() {
+// 	stop() {
 
-		if ( this.hasPlaybackControl === false ) {
+// 		if ( this.hasPlaybackControl === false ) {
 
-			console.warn( 'THREE.Audio: this Audio has no playback control.' );
-			return;
+// 			console.warn( 'THREE.Audio: this Audio has no playback control.' );
+// 			return;
 
-		}
+// 		}
 
-		this._progress = 0;
+// 		this._progress = 0;
 
-		this.source.stop();
-		this.source.onended = null;
-		this.isPlaying = false;
+// 		this.source.stop();
+// 		this.source.onended = null;
+// 		this.isPlaying = false;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	connect() {
+// 	connect() {
 
-		if ( this.filters.length > 0 ) {
+// 		if ( this.filters.length > 0 ) {
 
-			this.source.connect( this.filters[ 0 ] );
+// 			this.source.connect( this.filters[ 0 ] );
 
-			for ( let i = 1, l = this.filters.length; i < l; i ++ ) {
+// 			for ( let i = 1, l = this.filters.length; i < l; i ++ ) {
 
-				this.filters[ i - 1 ].connect( this.filters[ i ] );
+// 				this.filters[ i - 1 ].connect( this.filters[ i ] );
 
-			}
+// 			}
 
-			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );
+// 			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );
 
-		} else {
+// 		} else {
 
-			this.source.connect( this.getOutput() );
+// 			this.source.connect( this.getOutput() );
 
-		}
+// 		}
 
-		this._connected = true;
+// 		this._connected = true;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	disconnect() {
+// 	disconnect() {
 
-		if ( this.filters.length > 0 ) {
+// 		if ( this.filters.length > 0 ) {
 
-			this.source.disconnect( this.filters[ 0 ] );
+// 			this.source.disconnect( this.filters[ 0 ] );
 
-			for ( let i = 1, l = this.filters.length; i < l; i ++ ) {
+// 			for ( let i = 1, l = this.filters.length; i < l; i ++ ) {
 
-				this.filters[ i - 1 ].disconnect( this.filters[ i ] );
+// 				this.filters[ i - 1 ].disconnect( this.filters[ i ] );
 
-			}
+// 			}
 
-			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );
+// 			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );
 
-		} else {
+// 		} else {
 
-			this.source.disconnect( this.getOutput() );
+// 			this.source.disconnect( this.getOutput() );
 
-		}
+// 		}
 
-		this._connected = false;
+// 		this._connected = false;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getFilters() {
+// 	getFilters() {
 
-		return this.filters;
+// 		return this.filters;
 
-	}
+// 	}
 
-	setFilters( value ) {
+// 	setFilters( value ) {
 
-		if ( ! value ) value = [];
+// 		if ( ! value ) value = [];
 
-		if ( this._connected === true ) {
+// 		if ( this._connected === true ) {
 
-			this.disconnect();
-			this.filters = value.slice();
-			this.connect();
+// 			this.disconnect();
+// 			this.filters = value.slice();
+// 			this.connect();
 
-		} else {
+// 		} else {
 
-			this.filters = value.slice();
+// 			this.filters = value.slice();
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setDetune( value ) {
+// 	setDetune( value ) {
 
-		this.detune = value;
+// 		this.detune = value;
 
-		if ( this.source.detune === undefined ) return; // only set detune when available
+// 		if ( this.source.detune === undefined ) return; // only set detune when available
 
-		if ( this.isPlaying === true ) {
+// 		if ( this.isPlaying === true ) {
 
-			this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );
+// 			this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getDetune() {
+// 	getDetune() {
 
-		return this.detune;
+// 		return this.detune;
 
-	}
+// 	}
 
-	getFilter() {
+// 	getFilter() {
 
-		return this.getFilters()[ 0 ];
+// 		return this.getFilters()[ 0 ];
 
-	}
+// 	}
 
-	setFilter( filter ) {
+// 	setFilter( filter ) {
 
-		return this.setFilters( filter ? [ filter ] : [] );
+// 		return this.setFilters( filter ? [ filter ] : [] );
 
-	}
+// 	}
 
-	setPlaybackRate( value ) {
+// 	setPlaybackRate( value ) {
 
-		if ( this.hasPlaybackControl === false ) {
+// 		if ( this.hasPlaybackControl === false ) {
 
-			console.warn( 'THREE.Audio: this Audio has no playback control.' );
-			return;
+// 			console.warn( 'THREE.Audio: this Audio has no playback control.' );
+// 			return;
 
-		}
+// 		}
 
-		this.playbackRate = value;
+// 		this.playbackRate = value;
 
-		if ( this.isPlaying === true ) {
+// 		if ( this.isPlaying === true ) {
 
-			this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );
+// 			this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getPlaybackRate() {
+// 	getPlaybackRate() {
 
-		return this.playbackRate;
+// 		return this.playbackRate;
 
-	}
+// 	}
 
-	onEnded() {
+// 	onEnded() {
 
-		this.isPlaying = false;
+// 		this.isPlaying = false;
 
-	}
+// 	}
 
-	getLoop() {
+// 	getLoop() {
 
-		if ( this.hasPlaybackControl === false ) {
+// 		if ( this.hasPlaybackControl === false ) {
 
-			console.warn( 'THREE.Audio: this Audio has no playback control.' );
-			return false;
+// 			console.warn( 'THREE.Audio: this Audio has no playback control.' );
+// 			return false;
 
-		}
+// 		}
 
-		return this.loop;
+// 		return this.loop;
 
-	}
+// 	}
 
-	setLoop( value ) {
+// 	setLoop( value ) {
 
-		if ( this.hasPlaybackControl === false ) {
+// 		if ( this.hasPlaybackControl === false ) {
 
-			console.warn( 'THREE.Audio: this Audio has no playback control.' );
-			return;
+// 			console.warn( 'THREE.Audio: this Audio has no playback control.' );
+// 			return;
 
-		}
+// 		}
 
-		this.loop = value;
+// 		this.loop = value;
 
-		if ( this.isPlaying === true ) {
+// 		if ( this.isPlaying === true ) {
 
-			this.source.loop = this.loop;
+// 			this.source.loop = this.loop;
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setLoopStart( value ) {
+// 	setLoopStart( value ) {
 
-		this.loopStart = value;
+// 		this.loopStart = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setLoopEnd( value ) {
+// 	setLoopEnd( value ) {
 
-		this.loopEnd = value;
+// 		this.loopEnd = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getVolume() {
+// 	getVolume() {
 
-		return this.gain.gain.value;
+// 		return this.gain.gain.value;
 
-	}
+// 	}
 
-	setVolume( value ) {
+// 	setVolume( value ) {
 
-		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
+// 		this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const _position = /*@__PURE__*/ new Vector3();
-const _quaternion = /*@__PURE__*/ new Quaternion();
-const _scale = /*@__PURE__*/ new Vector3();
-const _orientation = /*@__PURE__*/ new Vector3();
+// const _position = /*@__PURE__*/ new Vector3();
+// const _quaternion = /*@__PURE__*/ new Quaternion();
+// const _scale = /*@__PURE__*/ new Vector3();
+// const _orientation = /*@__PURE__*/ new Vector3();
 
-class PositionalAudio extends Audio {
+// class PositionalAudio extends Audio {
 
-	constructor( listener ) {
+// 	constructor( listener ) {
 
-		super( listener );
+// 		super( listener );
 
-		this.panner = this.context.createPanner();
-		this.panner.panningModel = 'HRTF';
-		this.panner.connect( this.gain );
+// 		this.panner = this.context.createPanner();
+// 		this.panner.panningModel = 'HRTF';
+// 		this.panner.connect( this.gain );
 
-	}
+// 	}
 
-	disconnect() {
+// 	disconnect() {
 
-		super.disconnect();
+// 		super.disconnect();
 
-		this.panner.disconnect( this.gain );
+// 		this.panner.disconnect( this.gain );
 
-	}
+// 	}
 
-	getOutput() {
+// 	getOutput() {
 
-		return this.panner;
+// 		return this.panner;
 
-	}
+// 	}
 
-	getRefDistance() {
+// 	getRefDistance() {
 
-		return this.panner.refDistance;
+// 		return this.panner.refDistance;
 
-	}
+// 	}
 
-	setRefDistance( value ) {
+// 	setRefDistance( value ) {
 
-		this.panner.refDistance = value;
+// 		this.panner.refDistance = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getRolloffFactor() {
+// 	getRolloffFactor() {
 
-		return this.panner.rolloffFactor;
+// 		return this.panner.rolloffFactor;
 
-	}
+// 	}
 
-	setRolloffFactor( value ) {
+// 	setRolloffFactor( value ) {
 
-		this.panner.rolloffFactor = value;
+// 		this.panner.rolloffFactor = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getDistanceModel() {
+// 	getDistanceModel() {
 
-		return this.panner.distanceModel;
+// 		return this.panner.distanceModel;
 
-	}
+// 	}
 
-	setDistanceModel( value ) {
+// 	setDistanceModel( value ) {
 
-		this.panner.distanceModel = value;
+// 		this.panner.distanceModel = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getMaxDistance() {
+// 	getMaxDistance() {
 
-		return this.panner.maxDistance;
+// 		return this.panner.maxDistance;
 
-	}
+// 	}
 
-	setMaxDistance( value ) {
+// 	setMaxDistance( value ) {
 
-		this.panner.maxDistance = value;
+// 		this.panner.maxDistance = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {
+// 	setDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {
 
-		this.panner.coneInnerAngle = coneInnerAngle;
-		this.panner.coneOuterAngle = coneOuterAngle;
-		this.panner.coneOuterGain = coneOuterGain;
+// 		this.panner.coneInnerAngle = coneInnerAngle;
+// 		this.panner.coneOuterAngle = coneOuterAngle;
+// 		this.panner.coneOuterGain = coneOuterGain;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	updateMatrixWorld( force ) {
+// 	updateMatrixWorld( force ) {
 
-		super.updateMatrixWorld( force );
+// 		super.updateMatrixWorld( force );
 
-		if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;
+// 		if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;
 
-		this.matrixWorld.decompose( _position, _quaternion, _scale );
+// 		this.matrixWorld.decompose( _position, _quaternion, _scale );
 
-		_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );
+// 		_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );
 
-		const panner = this.panner;
+// 		const panner = this.panner;
 
-		if ( panner.positionX ) {
+// 		if ( panner.positionX ) {
 
-			// code path for Chrome and Firefox (see #14393)
+// 			// code path for Chrome and Firefox (see #14393)
 
-			const endTime = this.context.currentTime + this.listener.timeDelta;
+// 			const endTime = this.context.currentTime + this.listener.timeDelta;
 
-			panner.positionX.linearRampToValueAtTime( _position.x, endTime );
-			panner.positionY.linearRampToValueAtTime( _position.y, endTime );
-			panner.positionZ.linearRampToValueAtTime( _position.z, endTime );
-			panner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );
-			panner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );
-			panner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );
+// 			panner.positionX.linearRampToValueAtTime( _position.x, endTime );
+// 			panner.positionY.linearRampToValueAtTime( _position.y, endTime );
+// 			panner.positionZ.linearRampToValueAtTime( _position.z, endTime );
+// 			panner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );
+// 			panner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );
+// 			panner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );
 
-		} else {
+// 		} else {
 
-			panner.setPosition( _position.x, _position.y, _position.z );
-			panner.setOrientation( _orientation.x, _orientation.y, _orientation.z );
+// 			panner.setPosition( _position.x, _position.y, _position.z );
+// 			panner.setOrientation( _orientation.x, _orientation.y, _orientation.z );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-class AudioAnalyser {
+// class AudioAnalyser {
 
-	constructor( audio, fftSize = 2048 ) {
+// 	constructor( audio, fftSize = 2048 ) {
 
-		this.analyser = audio.context.createAnalyser();
-		this.analyser.fftSize = fftSize;
+// 		this.analyser = audio.context.createAnalyser();
+// 		this.analyser.fftSize = fftSize;
 
-		this.data = new Uint8Array( this.analyser.frequencyBinCount );
+// 		this.data = new Uint8Array( this.analyser.frequencyBinCount );
 
-		audio.getOutput().connect( this.analyser );
+// 		audio.getOutput().connect( this.analyser );
 
-	}
+// 	}
 
 
-	getFrequencyData() {
+// 	getFrequencyData() {
 
-		this.analyser.getByteFrequencyData( this.data );
+// 		this.analyser.getByteFrequencyData( this.data );
 
-		return this.data;
+// 		return this.data;
 
-	}
+// 	}
 
-	getAverageFrequency() {
+// 	getAverageFrequency() {
 
-		let value = 0;
-		const data = this.getFrequencyData();
+// 		let value = 0;
+// 		const data = this.getFrequencyData();
 
-		for ( let i = 0; i < data.length; i ++ ) {
+// 		for ( let i = 0; i < data.length; i ++ ) {
 
-			value += data[ i ];
+// 			value += data[ i ];
 
-		}
+// 		}
 
-		return value / data.length;
+// 		return value / data.length;
 
-	}
+// 	}
 
-}
+// }
 
-class PropertyMixer {
+// class PropertyMixer {
 
-	constructor( binding, typeName, valueSize ) {
+// 	constructor( binding, typeName, valueSize ) {
 
-		this.binding = binding;
-		this.valueSize = valueSize;
+// 		this.binding = binding;
+// 		this.valueSize = valueSize;
 
-		let mixFunction,
-			mixFunctionAdditive,
-			setIdentity;
+// 		let mixFunction,
+// 			mixFunctionAdditive,
+// 			setIdentity;
 
-		// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
-		//
-		// interpolators can use .buffer as their .result
-		// the data then goes to 'incoming'
-		//
-		// 'accu0' and 'accu1' are used frame-interleaved for
-		// the cumulative result and are compared to detect
-		// changes
-		//
-		// 'orig' stores the original state of the property
-		//
-		// 'add' is used for additive cumulative results
-		//
-		// 'work' is optional and is only present for quaternion types. It is used
-		// to store intermediate quaternion multiplication results
+// 		// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
+// 		//
+// 		// interpolators can use .buffer as their .result
+// 		// the data then goes to 'incoming'
+// 		//
+// 		// 'accu0' and 'accu1' are used frame-interleaved for
+// 		// the cumulative result and are compared to detect
+// 		// changes
+// 		//
+// 		// 'orig' stores the original state of the property
+// 		//
+// 		// 'add' is used for additive cumulative results
+// 		//
+// 		// 'work' is optional and is only present for quaternion types. It is used
+// 		// to store intermediate quaternion multiplication results
 
-		switch ( typeName ) {
+// 		switch ( typeName ) {
 
-			case 'quaternion':
-				mixFunction = this._slerp;
-				mixFunctionAdditive = this._slerpAdditive;
-				setIdentity = this._setAdditiveIdentityQuaternion;
+// 			case 'quaternion':
+// 				mixFunction = this._slerp;
+// 				mixFunctionAdditive = this._slerpAdditive;
+// 				setIdentity = this._setAdditiveIdentityQuaternion;
 
-				this.buffer = new Float64Array( valueSize * 6 );
-				this._workIndex = 5;
-				break;
+// 				this.buffer = new Float64Array( valueSize * 6 );
+// 				this._workIndex = 5;
+// 				break;
 
-			case 'string':
-			case 'bool':
-				mixFunction = this._select;
+// 			case 'string':
+// 			case 'bool':
+// 				mixFunction = this._select;
 
-				// Use the regular mix function and for additive on these types,
-				// additive is not relevant for non-numeric types
-				mixFunctionAdditive = this._select;
+// 				// Use the regular mix function and for additive on these types,
+// 				// additive is not relevant for non-numeric types
+// 				mixFunctionAdditive = this._select;
 
-				setIdentity = this._setAdditiveIdentityOther;
+// 				setIdentity = this._setAdditiveIdentityOther;
 
-				this.buffer = new Array( valueSize * 5 );
-				break;
+// 				this.buffer = new Array( valueSize * 5 );
+// 				break;
 
-			default:
-				mixFunction = this._lerp;
-				mixFunctionAdditive = this._lerpAdditive;
-				setIdentity = this._setAdditiveIdentityNumeric;
+// 			default:
+// 				mixFunction = this._lerp;
+// 				mixFunctionAdditive = this._lerpAdditive;
+// 				setIdentity = this._setAdditiveIdentityNumeric;
 
-				this.buffer = new Float64Array( valueSize * 5 );
+// 				this.buffer = new Float64Array( valueSize * 5 );
 
-		}
+// 		}
 
-		this._mixBufferRegion = mixFunction;
-		this._mixBufferRegionAdditive = mixFunctionAdditive;
-		this._setIdentity = setIdentity;
-		this._origIndex = 3;
-		this._addIndex = 4;
+// 		this._mixBufferRegion = mixFunction;
+// 		this._mixBufferRegionAdditive = mixFunctionAdditive;
+// 		this._setIdentity = setIdentity;
+// 		this._origIndex = 3;
+// 		this._addIndex = 4;
 
-		this.cumulativeWeight = 0;
-		this.cumulativeWeightAdditive = 0;
+// 		this.cumulativeWeight = 0;
+// 		this.cumulativeWeightAdditive = 0;
 
-		this.useCount = 0;
-		this.referenceCount = 0;
+// 		this.useCount = 0;
+// 		this.referenceCount = 0;
 
-	}
+// 	}
 
-	// accumulate data in the 'incoming' region into 'accu<i>'
-	accumulate( accuIndex, weight ) {
+// 	// accumulate data in the 'incoming' region into 'accu<i>'
+// 	accumulate( accuIndex, weight ) {
 
-		// note: happily accumulating nothing when weight = 0, the caller knows
-		// the weight and shouldn't have made the call in the first place
+// 		// note: happily accumulating nothing when weight = 0, the caller knows
+// 		// the weight and shouldn't have made the call in the first place
 
-		const buffer = this.buffer,
-			stride = this.valueSize,
-			offset = accuIndex * stride + stride;
+// 		const buffer = this.buffer,
+// 			stride = this.valueSize,
+// 			offset = accuIndex * stride + stride;
 
-		let currentWeight = this.cumulativeWeight;
+// 		let currentWeight = this.cumulativeWeight;
 
-		if ( currentWeight === 0 ) {
+// 		if ( currentWeight === 0 ) {
 
-			// accuN := incoming * weight
+// 			// accuN := incoming * weight
 
-			for ( let i = 0; i !== stride; ++ i ) {
+// 			for ( let i = 0; i !== stride; ++ i ) {
 
-				buffer[ offset + i ] = buffer[ i ];
+// 				buffer[ offset + i ] = buffer[ i ];
 
-			}
+// 			}
 
-			currentWeight = weight;
+// 			currentWeight = weight;
 
-		} else {
+// 		} else {
 
-			// accuN := accuN + incoming * weight
+// 			// accuN := accuN + incoming * weight
 
-			currentWeight += weight;
-			const mix = weight / currentWeight;
-			this._mixBufferRegion( buffer, offset, 0, mix, stride );
+// 			currentWeight += weight;
+// 			const mix = weight / currentWeight;
+// 			this._mixBufferRegion( buffer, offset, 0, mix, stride );
 
-		}
+// 		}
 
-		this.cumulativeWeight = currentWeight;
+// 		this.cumulativeWeight = currentWeight;
 
-	}
+// 	}
 
-	// accumulate data in the 'incoming' region into 'add'
-	accumulateAdditive( weight ) {
+// 	// accumulate data in the 'incoming' region into 'add'
+// 	accumulateAdditive( weight ) {
 
-		const buffer = this.buffer,
-			stride = this.valueSize,
-			offset = stride * this._addIndex;
+// 		const buffer = this.buffer,
+// 			stride = this.valueSize,
+// 			offset = stride * this._addIndex;
 
-		if ( this.cumulativeWeightAdditive === 0 ) {
+// 		if ( this.cumulativeWeightAdditive === 0 ) {
 
-			// add = identity
+// 			// add = identity
 
-			this._setIdentity();
+// 			this._setIdentity();
 
-		}
+// 		}
 
-		// add := add + incoming * weight
+// 		// add := add + incoming * weight
 
-		this._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );
-		this.cumulativeWeightAdditive += weight;
+// 		this._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );
+// 		this.cumulativeWeightAdditive += weight;
 
-	}
+// 	}
 
-	// apply the state of 'accu<i>' to the binding when accus differ
-	apply( accuIndex ) {
+// 	// apply the state of 'accu<i>' to the binding when accus differ
+// 	apply( accuIndex ) {
 
-		const stride = this.valueSize,
-			buffer = this.buffer,
-			offset = accuIndex * stride + stride,
+// 		const stride = this.valueSize,
+// 			buffer = this.buffer,
+// 			offset = accuIndex * stride + stride,
 
-			weight = this.cumulativeWeight,
-			weightAdditive = this.cumulativeWeightAdditive,
+// 			weight = this.cumulativeWeight,
+// 			weightAdditive = this.cumulativeWeightAdditive,
 
-			binding = this.binding;
+// 			binding = this.binding;
 
-		this.cumulativeWeight = 0;
-		this.cumulativeWeightAdditive = 0;
+// 		this.cumulativeWeight = 0;
+// 		this.cumulativeWeightAdditive = 0;
 
-		if ( weight < 1 ) {
+// 		if ( weight < 1 ) {
 
-			// accuN := accuN + original * ( 1 - cumulativeWeight )
+// 			// accuN := accuN + original * ( 1 - cumulativeWeight )
 
-			const originalValueOffset = stride * this._origIndex;
+// 			const originalValueOffset = stride * this._origIndex;
 
-			this._mixBufferRegion(
-				buffer, offset, originalValueOffset, 1 - weight, stride );
+// 			this._mixBufferRegion(
+// 				buffer, offset, originalValueOffset, 1 - weight, stride );
 
-		}
+// 		}
 
-		if ( weightAdditive > 0 ) {
+// 		if ( weightAdditive > 0 ) {
 
-			// accuN := accuN + additive accuN
+// 			// accuN := accuN + additive accuN
 
-			this._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );
+// 			this._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );
 
-		}
+// 		}
 
-		for ( let i = stride, e = stride + stride; i !== e; ++ i ) {
+// 		for ( let i = stride, e = stride + stride; i !== e; ++ i ) {
 
-			if ( buffer[ i ] !== buffer[ i + stride ] ) {
+// 			if ( buffer[ i ] !== buffer[ i + stride ] ) {
 
-				// value has changed -> update scene graph
+// 				// value has changed -> update scene graph
 
-				binding.setValue( buffer, offset );
-				break;
+// 				binding.setValue( buffer, offset );
+// 				break;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// remember the state of the bound property and copy it to both accus
-	saveOriginalState() {
+// 	// remember the state of the bound property and copy it to both accus
+// 	saveOriginalState() {
 
-		const binding = this.binding;
+// 		const binding = this.binding;
 
-		const buffer = this.buffer,
-			stride = this.valueSize,
+// 		const buffer = this.buffer,
+// 			stride = this.valueSize,
 
-			originalValueOffset = stride * this._origIndex;
+// 			originalValueOffset = stride * this._origIndex;
 
-		binding.getValue( buffer, originalValueOffset );
+// 		binding.getValue( buffer, originalValueOffset );
 
-		// accu[0..1] := orig -- initially detect changes against the original
-		for ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {
+// 		// accu[0..1] := orig -- initially detect changes against the original
+// 		for ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {
 
-			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];
+// 			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];
 
-		}
+// 		}
 
-		// Add to identity for additive
-		this._setIdentity();
+// 		// Add to identity for additive
+// 		this._setIdentity();
 
-		this.cumulativeWeight = 0;
-		this.cumulativeWeightAdditive = 0;
+// 		this.cumulativeWeight = 0;
+// 		this.cumulativeWeightAdditive = 0;
 
-	}
+// 	}
 
-	// apply the state previously taken via 'saveOriginalState' to the binding
-	restoreOriginalState() {
+// 	// apply the state previously taken via 'saveOriginalState' to the binding
+// 	restoreOriginalState() {
 
-		const originalValueOffset = this.valueSize * 3;
-		this.binding.setValue( this.buffer, originalValueOffset );
+// 		const originalValueOffset = this.valueSize * 3;
+// 		this.binding.setValue( this.buffer, originalValueOffset );
 
-	}
+// 	}
 
-	_setAdditiveIdentityNumeric() {
+// 	_setAdditiveIdentityNumeric() {
 
-		const startIndex = this._addIndex * this.valueSize;
-		const endIndex = startIndex + this.valueSize;
+// 		const startIndex = this._addIndex * this.valueSize;
+// 		const endIndex = startIndex + this.valueSize;
 
-		for ( let i = startIndex; i < endIndex; i ++ ) {
+// 		for ( let i = startIndex; i < endIndex; i ++ ) {
 
-			this.buffer[ i ] = 0;
+// 			this.buffer[ i ] = 0;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_setAdditiveIdentityQuaternion() {
+// 	_setAdditiveIdentityQuaternion() {
 
-		this._setAdditiveIdentityNumeric();
-		this.buffer[ this._addIndex * this.valueSize + 3 ] = 1;
+// 		this._setAdditiveIdentityNumeric();
+// 		this.buffer[ this._addIndex * this.valueSize + 3 ] = 1;
 
-	}
+// 	}
 
-	_setAdditiveIdentityOther() {
+// 	_setAdditiveIdentityOther() {
 
-		const startIndex = this._origIndex * this.valueSize;
-		const targetIndex = this._addIndex * this.valueSize;
+// 		const startIndex = this._origIndex * this.valueSize;
+// 		const targetIndex = this._addIndex * this.valueSize;
 
-		for ( let i = 0; i < this.valueSize; i ++ ) {
+// 		for ( let i = 0; i < this.valueSize; i ++ ) {
 
-			this.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];
+// 			this.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];
 
-		}
+// 		}
 
-	}
+// 	}
 
 
-	// mix functions
+// 	// mix functions
 
-	_select( buffer, dstOffset, srcOffset, t, stride ) {
+// 	_select( buffer, dstOffset, srcOffset, t, stride ) {
 
-		if ( t >= 0.5 ) {
+// 		if ( t >= 0.5 ) {
 
-			for ( let i = 0; i !== stride; ++ i ) {
+// 			for ( let i = 0; i !== stride; ++ i ) {
 
-				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];
+// 				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_slerp( buffer, dstOffset, srcOffset, t ) {
+// 	_slerp( buffer, dstOffset, srcOffset, t ) {
 
-		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );
+// 		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );
 
-	}
+// 	}
 
-	_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {
+// 	_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {
 
-		const workOffset = this._workIndex * stride;
+// 		const workOffset = this._workIndex * stride;
 
-		// Store result in intermediate buffer offset
-		Quaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );
+// 		// Store result in intermediate buffer offset
+// 		Quaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );
 
-		// Slerp to the intermediate result
-		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );
+// 		// Slerp to the intermediate result
+// 		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );
 
-	}
+// 	}
 
-	_lerp( buffer, dstOffset, srcOffset, t, stride ) {
+// 	_lerp( buffer, dstOffset, srcOffset, t, stride ) {
 
-		const s = 1 - t;
+// 		const s = 1 - t;
 
-		for ( let i = 0; i !== stride; ++ i ) {
+// 		for ( let i = 0; i !== stride; ++ i ) {
 
-			const j = dstOffset + i;
+// 			const j = dstOffset + i;
 
-			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;
+// 			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {
+// 	_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {
 
-		for ( let i = 0; i !== stride; ++ i ) {
+// 		for ( let i = 0; i !== stride; ++ i ) {
 
-			const j = dstOffset + i;
+// 			const j = dstOffset + i;
 
-			buffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;
+// 			buffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-// Characters [].:/ are reserved for track binding syntax.
-const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
-const _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );
+// // Characters [].:/ are reserved for track binding syntax.
+// const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
+// const _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );
 
-// Attempts to allow node names from any language. ES5's `\w` regexp matches
-// only latin characters, and the unicode \p{L} is not yet supported. So
-// instead, we exclude reserved characters and match everything else.
-const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
-const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';
+// // Attempts to allow node names from any language. ES5's `\w` regexp matches
+// // only latin characters, and the unicode \p{L} is not yet supported. So
+// // instead, we exclude reserved characters and match everything else.
+// const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
+// const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';
 
-// Parent directories, delimited by '/' or ':'. Currently unused, but must
-// be matched to parse the rest of the track name.
-const _directoryRe = /*@__PURE__*/ /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );
+// // Parent directories, delimited by '/' or ':'. Currently unused, but must
+// // be matched to parse the rest of the track name.
+// const _directoryRe = /*@__PURE__*/ /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );
 
-// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
-const _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );
+// // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
+// const _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );
 
-// Object on target node, and accessor. May not contain reserved
-// characters. Accessor may contain any character except closing bracket.
-const _objectRe = /*@__PURE__*/ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );
+// // Object on target node, and accessor. May not contain reserved
+// // characters. Accessor may contain any character except closing bracket.
+// const _objectRe = /*@__PURE__*/ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );
 
-// Property and accessor. May not contain reserved characters. Accessor may
-// contain any non-bracket characters.
-const _propertyRe = /*@__PURE__*/ /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );
+// // Property and accessor. May not contain reserved characters. Accessor may
+// // contain any non-bracket characters.
+// const _propertyRe = /*@__PURE__*/ /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );
 
-const _trackRe = new RegExp( ''
-	+ '^'
-	+ _directoryRe
-	+ _nodeRe
-	+ _objectRe
-	+ _propertyRe
-	+ '$'
-);
+// const _trackRe = new RegExp( ''
+// 	+ '^'
+// 	+ _directoryRe
+// 	+ _nodeRe
+// 	+ _objectRe
+// 	+ _propertyRe
+// 	+ '$'
+// );
 
-const _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];
+// const _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];
 
-class Composite {
+// class Composite {
 
-	constructor( targetGroup, path, optionalParsedPath ) {
+// 	constructor( targetGroup, path, optionalParsedPath ) {
 
-		const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );
+// 		const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );
 
-		this._targetGroup = targetGroup;
-		this._bindings = targetGroup.subscribe_( path, parsedPath );
+// 		this._targetGroup = targetGroup;
+// 		this._bindings = targetGroup.subscribe_( path, parsedPath );
 
-	}
+// 	}
 
-	getValue( array, offset ) {
+// 	getValue( array, offset ) {
 
-		this.bind(); // bind all binding
+// 		this.bind(); // bind all binding
 
-		const firstValidIndex = this._targetGroup.nCachedObjects_,
-			binding = this._bindings[ firstValidIndex ];
+// 		const firstValidIndex = this._targetGroup.nCachedObjects_,
+// 			binding = this._bindings[ firstValidIndex ];
 
-		// and only call .getValue on the first
-		if ( binding !== undefined ) binding.getValue( array, offset );
+// 		// and only call .getValue on the first
+// 		if ( binding !== undefined ) binding.getValue( array, offset );
 
-	}
+// 	}
 
-	setValue( array, offset ) {
+// 	setValue( array, offset ) {
 
-		const bindings = this._bindings;
+// 		const bindings = this._bindings;
 
-		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
+// 		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
 
-			bindings[ i ].setValue( array, offset );
+// 			bindings[ i ].setValue( array, offset );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	bind() {
+// 	bind() {
 
-		const bindings = this._bindings;
+// 		const bindings = this._bindings;
 
-		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
+// 		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
 
-			bindings[ i ].bind();
+// 			bindings[ i ].bind();
 
-		}
+// 		}
 
-	}
+// 	}
 
-	unbind() {
+// 	unbind() {
 
-		const bindings = this._bindings;
+// 		const bindings = this._bindings;
 
-		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
+// 		for ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
 
-			bindings[ i ].unbind();
+// 			bindings[ i ].unbind();
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-// Note: This class uses a State pattern on a per-method basis:
-// 'bind' sets 'this.getValue' / 'setValue' and shadows the
-// prototype version of these methods with one that represents
-// the bound state. When the property is not found, the methods
-// become no-ops.
-class PropertyBinding {
+// // Note: This class uses a State pattern on a per-method basis:
+// // 'bind' sets 'this.getValue' / 'setValue' and shadows the
+// // prototype version of these methods with one that represents
+// // the bound state. When the property is not found, the methods
+// // become no-ops.
+// class PropertyBinding {
 
-	constructor( rootNode, path, parsedPath ) {
+// 	constructor( rootNode, path, parsedPath ) {
 
-		this.path = path;
-		this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );
+// 		this.path = path;
+// 		this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );
 
-		this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;
+// 		this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;
 
-		this.rootNode = rootNode;
+// 		this.rootNode = rootNode;
 
-		// initial state of these methods that calls 'bind'
-		this.getValue = this._getValue_unbound;
-		this.setValue = this._setValue_unbound;
+// 		// initial state of these methods that calls 'bind'
+// 		this.getValue = this._getValue_unbound;
+// 		this.setValue = this._setValue_unbound;
 
-	}
+// 	}
 
 
-	static create( root, path, parsedPath ) {
+// 	static create( root, path, parsedPath ) {
 
-		if ( ! ( root && root.isAnimationObjectGroup ) ) {
+// 		if ( ! ( root && root.isAnimationObjectGroup ) ) {
 
-			return new PropertyBinding( root, path, parsedPath );
+// 			return new PropertyBinding( root, path, parsedPath );
 
-		} else {
+// 		} else {
 
-			return new PropertyBinding.Composite( root, path, parsedPath );
+// 			return new PropertyBinding.Composite( root, path, parsedPath );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	/**
-	 * Replaces spaces with underscores and removes unsupported characters from
-	 * node names, to ensure compatibility with parseTrackName().
-	 *
-	 * @param {string} name Node name to be sanitized.
-	 * @return {string}
-	 */
-	static sanitizeNodeName( name ) {
+// 	/**
+// 	 * Replaces spaces with underscores and removes unsupported characters from
+// 	 * node names, to ensure compatibility with parseTrackName().
+// 	 *
+// 	 * @param {string} name Node name to be sanitized.
+// 	 * @return {string}
+// 	 */
+// 	static sanitizeNodeName( name ) {
 
-		return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );
+// 		return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );
 
-	}
+// 	}
 
-	static parseTrackName( trackName ) {
+// 	static parseTrackName( trackName ) {
 
-		const matches = _trackRe.exec( trackName );
+// 		const matches = _trackRe.exec( trackName );
 
-		if ( matches === null ) {
+// 		if ( matches === null ) {
 
-			throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );
+// 			throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );
 
-		}
+// 		}
 
-		const results = {
-			// directoryName: matches[ 1 ], // (tschw) currently unused
-			nodeName: matches[ 2 ],
-			objectName: matches[ 3 ],
-			objectIndex: matches[ 4 ],
-			propertyName: matches[ 5 ], // required
-			propertyIndex: matches[ 6 ]
-		};
+// 		const results = {
+// 			// directoryName: matches[ 1 ], // (tschw) currently unused
+// 			nodeName: matches[ 2 ],
+// 			objectName: matches[ 3 ],
+// 			objectIndex: matches[ 4 ],
+// 			propertyName: matches[ 5 ], // required
+// 			propertyIndex: matches[ 6 ]
+// 		};
 
-		const lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );
+// 		const lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );
 
-		if ( lastDot !== undefined && lastDot !== - 1 ) {
+// 		if ( lastDot !== undefined && lastDot !== - 1 ) {
 
-			const objectName = results.nodeName.substring( lastDot + 1 );
+// 			const objectName = results.nodeName.substring( lastDot + 1 );
 
-			// Object names must be checked against an allowlist. Otherwise, there
-			// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
-			// 'bar' could be the objectName, or part of a nodeName (which can
-			// include '.' characters).
-			if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {
+// 			// Object names must be checked against an allowlist. Otherwise, there
+// 			// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
+// 			// 'bar' could be the objectName, or part of a nodeName (which can
+// 			// include '.' characters).
+// 			if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {
 
-				results.nodeName = results.nodeName.substring( 0, lastDot );
-				results.objectName = objectName;
+// 				results.nodeName = results.nodeName.substring( 0, lastDot );
+// 				results.objectName = objectName;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( results.propertyName === null || results.propertyName.length === 0 ) {
+// 		if ( results.propertyName === null || results.propertyName.length === 0 ) {
 
-			throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );
+// 			throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );
 
-		}
+// 		}
 
-		return results;
+// 		return results;
 
-	}
+// 	}
 
-	static findNode( root, nodeName ) {
+// 	static findNode( root, nodeName ) {
 
-		if ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {
+// 		if ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {
 
-			return root;
+// 			return root;
 
-		}
+// 		}
 
-		// search into skeleton bones.
-		if ( root.skeleton ) {
+// 		// search into skeleton bones.
+// 		if ( root.skeleton ) {
 
-			const bone = root.skeleton.getBoneByName( nodeName );
+// 			const bone = root.skeleton.getBoneByName( nodeName );
 
-			if ( bone !== undefined ) {
+// 			if ( bone !== undefined ) {
 
-				return bone;
+// 				return bone;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// search into node subtree.
-		if ( root.children ) {
+// 		// search into node subtree.
+// 		if ( root.children ) {
 
-			const searchNodeSubtree = function ( children ) {
+// 			const searchNodeSubtree = function ( children ) {
 
-				for ( let i = 0; i < children.length; i ++ ) {
+// 				for ( let i = 0; i < children.length; i ++ ) {
 
-					const childNode = children[ i ];
+// 					const childNode = children[ i ];
 
-					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
+// 					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
 
-						return childNode;
+// 						return childNode;
 
-					}
+// 					}
 
-					const result = searchNodeSubtree( childNode.children );
+// 					const result = searchNodeSubtree( childNode.children );
 
-					if ( result ) return result;
+// 					if ( result ) return result;
 
-				}
+// 				}
 
-				return null;
+// 				return null;
 
-			};
+// 			};
 
-			const subTreeNode = searchNodeSubtree( root.children );
+// 			const subTreeNode = searchNodeSubtree( root.children );
 
-			if ( subTreeNode ) {
+// 			if ( subTreeNode ) {
 
-				return subTreeNode;
+// 				return subTreeNode;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return null;
+// 		return null;
 
-	}
+// 	}
 
-	// these are used to "bind" a nonexistent property
-	_getValue_unavailable() {}
-	_setValue_unavailable() {}
+// 	// these are used to "bind" a nonexistent property
+// 	_getValue_unavailable() {}
+// 	_setValue_unavailable() {}
 
-	// Getters
+// 	// Getters
 
-	_getValue_direct( buffer, offset ) {
+// 	_getValue_direct( buffer, offset ) {
 
-		buffer[ offset ] = this.targetObject[ this.propertyName ];
+// 		buffer[ offset ] = this.targetObject[ this.propertyName ];
 
-	}
+// 	}
 
-	_getValue_array( buffer, offset ) {
+// 	_getValue_array( buffer, offset ) {
 
-		const source = this.resolvedProperty;
+// 		const source = this.resolvedProperty;
 
-		for ( let i = 0, n = source.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = source.length; i !== n; ++ i ) {
 
-			buffer[ offset ++ ] = source[ i ];
+// 			buffer[ offset ++ ] = source[ i ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_getValue_arrayElement( buffer, offset ) {
+// 	_getValue_arrayElement( buffer, offset ) {
 
-		buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];
+// 		buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];
 
-	}
+// 	}
 
-	_getValue_toArray( buffer, offset ) {
+// 	_getValue_toArray( buffer, offset ) {
 
-		this.resolvedProperty.toArray( buffer, offset );
+// 		this.resolvedProperty.toArray( buffer, offset );
 
-	}
+// 	}
 
-	// Direct
+// 	// Direct
 
-	_setValue_direct( buffer, offset ) {
+// 	_setValue_direct( buffer, offset ) {
 
-		this.targetObject[ this.propertyName ] = buffer[ offset ];
+// 		this.targetObject[ this.propertyName ] = buffer[ offset ];
 
-	}
+// 	}
 
-	_setValue_direct_setNeedsUpdate( buffer, offset ) {
+// 	_setValue_direct_setNeedsUpdate( buffer, offset ) {
 
-		this.targetObject[ this.propertyName ] = buffer[ offset ];
-		this.targetObject.needsUpdate = true;
+// 		this.targetObject[ this.propertyName ] = buffer[ offset ];
+// 		this.targetObject.needsUpdate = true;
 
-	}
+// 	}
 
-	_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {
+// 	_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {
 
-		this.targetObject[ this.propertyName ] = buffer[ offset ];
-		this.targetObject.matrixWorldNeedsUpdate = true;
+// 		this.targetObject[ this.propertyName ] = buffer[ offset ];
+// 		this.targetObject.matrixWorldNeedsUpdate = true;
 
-	}
+// 	}
 
-	// EntireArray
+// 	// EntireArray
 
-	_setValue_array( buffer, offset ) {
+// 	_setValue_array( buffer, offset ) {
 
-		const dest = this.resolvedProperty;
+// 		const dest = this.resolvedProperty;
 
-		for ( let i = 0, n = dest.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = dest.length; i !== n; ++ i ) {
 
-			dest[ i ] = buffer[ offset ++ ];
+// 			dest[ i ] = buffer[ offset ++ ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_setValue_array_setNeedsUpdate( buffer, offset ) {
+// 	_setValue_array_setNeedsUpdate( buffer, offset ) {
 
-		const dest = this.resolvedProperty;
+// 		const dest = this.resolvedProperty;
 
-		for ( let i = 0, n = dest.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = dest.length; i !== n; ++ i ) {
 
-			dest[ i ] = buffer[ offset ++ ];
+// 			dest[ i ] = buffer[ offset ++ ];
 
-		}
+// 		}
 
-		this.targetObject.needsUpdate = true;
+// 		this.targetObject.needsUpdate = true;
 
-	}
+// 	}
 
-	_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {
+// 	_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {
 
-		const dest = this.resolvedProperty;
+// 		const dest = this.resolvedProperty;
 
-		for ( let i = 0, n = dest.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = dest.length; i !== n; ++ i ) {
 
-			dest[ i ] = buffer[ offset ++ ];
+// 			dest[ i ] = buffer[ offset ++ ];
 
-		}
+// 		}
 
-		this.targetObject.matrixWorldNeedsUpdate = true;
+// 		this.targetObject.matrixWorldNeedsUpdate = true;
 
-	}
+// 	}
 
-	// ArrayElement
+// 	// ArrayElement
 
-	_setValue_arrayElement( buffer, offset ) {
+// 	_setValue_arrayElement( buffer, offset ) {
 
-		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
+// 		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
 
-	}
+// 	}
 
-	_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {
+// 	_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {
 
-		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
-		this.targetObject.needsUpdate = true;
+// 		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
+// 		this.targetObject.needsUpdate = true;
 
-	}
+// 	}
 
-	_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {
+// 	_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {
 
-		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
-		this.targetObject.matrixWorldNeedsUpdate = true;
+// 		this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
+// 		this.targetObject.matrixWorldNeedsUpdate = true;
 
-	}
+// 	}
 
-	// HasToFromArray
+// 	// HasToFromArray
 
-	_setValue_fromArray( buffer, offset ) {
+// 	_setValue_fromArray( buffer, offset ) {
 
-		this.resolvedProperty.fromArray( buffer, offset );
+// 		this.resolvedProperty.fromArray( buffer, offset );
 
-	}
+// 	}
 
-	_setValue_fromArray_setNeedsUpdate( buffer, offset ) {
+// 	_setValue_fromArray_setNeedsUpdate( buffer, offset ) {
 
-		this.resolvedProperty.fromArray( buffer, offset );
-		this.targetObject.needsUpdate = true;
+// 		this.resolvedProperty.fromArray( buffer, offset );
+// 		this.targetObject.needsUpdate = true;
 
-	}
+// 	}
 
-	_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {
+// 	_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {
 
-		this.resolvedProperty.fromArray( buffer, offset );
-		this.targetObject.matrixWorldNeedsUpdate = true;
+// 		this.resolvedProperty.fromArray( buffer, offset );
+// 		this.targetObject.matrixWorldNeedsUpdate = true;
 
-	}
+// 	}
 
-	_getValue_unbound( targetArray, offset ) {
+// 	_getValue_unbound( targetArray, offset ) {
 
-		this.bind();
-		this.getValue( targetArray, offset );
+// 		this.bind();
+// 		this.getValue( targetArray, offset );
 
-	}
+// 	}
 
-	_setValue_unbound( sourceArray, offset ) {
+// 	_setValue_unbound( sourceArray, offset ) {
 
-		this.bind();
-		this.setValue( sourceArray, offset );
+// 		this.bind();
+// 		this.setValue( sourceArray, offset );
 
-	}
+// 	}
 
-	// create getter / setter pair for a property in the scene graph
-	bind() {
+// 	// create getter / setter pair for a property in the scene graph
+// 	bind() {
 
-		let targetObject = this.node;
-		const parsedPath = this.parsedPath;
+// 		let targetObject = this.node;
+// 		const parsedPath = this.parsedPath;
 
-		const objectName = parsedPath.objectName;
-		const propertyName = parsedPath.propertyName;
-		let propertyIndex = parsedPath.propertyIndex;
+// 		const objectName = parsedPath.objectName;
+// 		const propertyName = parsedPath.propertyName;
+// 		let propertyIndex = parsedPath.propertyIndex;
 
-		if ( ! targetObject ) {
+// 		if ( ! targetObject ) {
 
-			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;
+// 			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;
 
-			this.node = targetObject;
+// 			this.node = targetObject;
 
-		}
+// 		}
 
-		// set fail state so we can just 'return' on error
-		this.getValue = this._getValue_unavailable;
-		this.setValue = this._setValue_unavailable;
+// 		// set fail state so we can just 'return' on error
+// 		this.getValue = this._getValue_unavailable;
+// 		this.setValue = this._setValue_unavailable;
 
-		// ensure there is a value node
-		if ( ! targetObject ) {
+// 		// ensure there is a value node
+// 		if ( ! targetObject ) {
 
-			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
-			return;
+// 			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
+// 			return;
 
-		}
+// 		}
 
-		if ( objectName ) {
+// 		if ( objectName ) {
 
-			let objectIndex = parsedPath.objectIndex;
+// 			let objectIndex = parsedPath.objectIndex;
 
-			// special cases were we need to reach deeper into the hierarchy to get the face materials....
-			switch ( objectName ) {
+// 			// special cases were we need to reach deeper into the hierarchy to get the face materials....
+// 			switch ( objectName ) {
 
-				case 'materials':
+// 				case 'materials':
 
-					if ( ! targetObject.material ) {
+// 					if ( ! targetObject.material ) {
 
-						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
-						return;
+// 						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
+// 						return;
 
-					}
+// 					}
 
-					if ( ! targetObject.material.materials ) {
+// 					if ( ! targetObject.material.materials ) {
 
-						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
-						return;
+// 						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
+// 						return;
 
-					}
+// 					}
 
-					targetObject = targetObject.material.materials;
+// 					targetObject = targetObject.material.materials;
 
-					break;
+// 					break;
 
-				case 'bones':
+// 				case 'bones':
 
-					if ( ! targetObject.skeleton ) {
+// 					if ( ! targetObject.skeleton ) {
 
-						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
-						return;
+// 						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
+// 						return;
 
-					}
+// 					}
 
-					// potential future optimization: skip this if propertyIndex is already an integer
-					// and convert the integer string to a true integer.
+// 					// potential future optimization: skip this if propertyIndex is already an integer
+// 					// and convert the integer string to a true integer.
 
-					targetObject = targetObject.skeleton.bones;
+// 					targetObject = targetObject.skeleton.bones;
 
-					// support resolving morphTarget names into indices.
-					for ( let i = 0; i < targetObject.length; i ++ ) {
+// 					// support resolving morphTarget names into indices.
+// 					for ( let i = 0; i < targetObject.length; i ++ ) {
 
-						if ( targetObject[ i ].name === objectIndex ) {
+// 						if ( targetObject[ i ].name === objectIndex ) {
 
-							objectIndex = i;
-							break;
+// 							objectIndex = i;
+// 							break;
 
-						}
+// 						}
 
-					}
+// 					}
 
-					break;
+// 					break;
 
-				case 'map':
+// 				case 'map':
 
-					if ( 'map' in targetObject ) {
+// 					if ( 'map' in targetObject ) {
 
-						targetObject = targetObject.map;
-						break;
+// 						targetObject = targetObject.map;
+// 						break;
 
-					}
+// 					}
 
-					if ( ! targetObject.material ) {
+// 					if ( ! targetObject.material ) {
 
-						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
-						return;
+// 						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
+// 						return;
 
-					}
+// 					}
 
-					if ( ! targetObject.material.map ) {
+// 					if ( ! targetObject.material.map ) {
 
-						console.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );
-						return;
+// 						console.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );
+// 						return;
 
-					}
+// 					}
 
-					targetObject = targetObject.material.map;
-					break;
+// 					targetObject = targetObject.material.map;
+// 					break;
 
-				default:
+// 				default:
 
-					if ( targetObject[ objectName ] === undefined ) {
+// 					if ( targetObject[ objectName ] === undefined ) {
 
-						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
-						return;
+// 						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
+// 						return;
 
-					}
+// 					}
 
-					targetObject = targetObject[ objectName ];
+// 					targetObject = targetObject[ objectName ];
 
-			}
+// 			}
 
 
-			if ( objectIndex !== undefined ) {
+// 			if ( objectIndex !== undefined ) {
 
-				if ( targetObject[ objectIndex ] === undefined ) {
+// 				if ( targetObject[ objectIndex ] === undefined ) {
 
-					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
-					return;
+// 					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
+// 					return;
 
-				}
+// 				}
 
-				targetObject = targetObject[ objectIndex ];
+// 				targetObject = targetObject[ objectIndex ];
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// resolve property
-		const nodeProperty = targetObject[ propertyName ];
+// 		// resolve property
+// 		const nodeProperty = targetObject[ propertyName ];
 
-		if ( nodeProperty === undefined ) {
+// 		if ( nodeProperty === undefined ) {
 
-			const nodeName = parsedPath.nodeName;
+// 			const nodeName = parsedPath.nodeName;
 
-			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
-				'.' + propertyName + ' but it wasn\'t found.', targetObject );
-			return;
+// 			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
+// 				'.' + propertyName + ' but it wasn\'t found.', targetObject );
+// 			return;
 
-		}
+// 		}
 
-		// determine versioning scheme
-		let versioning = this.Versioning.None;
+// 		// determine versioning scheme
+// 		let versioning = this.Versioning.None;
 
-		this.targetObject = targetObject;
+// 		this.targetObject = targetObject;
 
-		if ( targetObject.needsUpdate !== undefined ) { // material
+// 		if ( targetObject.needsUpdate !== undefined ) { // material
 
-			versioning = this.Versioning.NeedsUpdate;
+// 			versioning = this.Versioning.NeedsUpdate;
 
-		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform
+// 		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform
 
-			versioning = this.Versioning.MatrixWorldNeedsUpdate;
+// 			versioning = this.Versioning.MatrixWorldNeedsUpdate;
 
-		}
+// 		}
 
-		// determine how the property gets bound
-		let bindingType = this.BindingType.Direct;
+// 		// determine how the property gets bound
+// 		let bindingType = this.BindingType.Direct;
 
-		if ( propertyIndex !== undefined ) {
+// 		if ( propertyIndex !== undefined ) {
 
-			// access a sub element of the property array (only primitives are supported right now)
+// 			// access a sub element of the property array (only primitives are supported right now)
 
-			if ( propertyName === 'morphTargetInfluences' ) {
+// 			if ( propertyName === 'morphTargetInfluences' ) {
 
-				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
+// 				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
 
-				// support resolving morphTarget names into indices.
-				if ( ! targetObject.geometry ) {
+// 				// support resolving morphTarget names into indices.
+// 				if ( ! targetObject.geometry ) {
 
-					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
-					return;
+// 					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
+// 					return;
 
-				}
+// 				}
 
-				if ( ! targetObject.geometry.morphAttributes ) {
+// 				if ( ! targetObject.geometry.morphAttributes ) {
 
-					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
-					return;
+// 					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
+// 					return;
 
-				}
+// 				}
 
-				if ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {
+// 				if ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {
 
-					propertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];
+// 					propertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];
 
-				}
+// 				}
 
-			}
+// 			}
 
-			bindingType = this.BindingType.ArrayElement;
+// 			bindingType = this.BindingType.ArrayElement;
 
-			this.resolvedProperty = nodeProperty;
-			this.propertyIndex = propertyIndex;
+// 			this.resolvedProperty = nodeProperty;
+// 			this.propertyIndex = propertyIndex;
 
-		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
+// 		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
 
-			// must use copy for Object3D.Euler/Quaternion
+// 			// must use copy for Object3D.Euler/Quaternion
 
-			bindingType = this.BindingType.HasFromToArray;
+// 			bindingType = this.BindingType.HasFromToArray;
 
-			this.resolvedProperty = nodeProperty;
+// 			this.resolvedProperty = nodeProperty;
 
-		} else if ( Array.isArray( nodeProperty ) ) {
+// 		} else if ( Array.isArray( nodeProperty ) ) {
 
-			bindingType = this.BindingType.EntireArray;
+// 			bindingType = this.BindingType.EntireArray;
 
-			this.resolvedProperty = nodeProperty;
+// 			this.resolvedProperty = nodeProperty;
 
-		} else {
+// 		} else {
 
-			this.propertyName = propertyName;
+// 			this.propertyName = propertyName;
 
-		}
+// 		}
 
-		// select getter / setter
-		this.getValue = this.GetterByBindingType[ bindingType ];
-		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];
+// 		// select getter / setter
+// 		this.getValue = this.GetterByBindingType[ bindingType ];
+// 		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];
 
-	}
+// 	}
 
-	unbind() {
+// 	unbind() {
 
-		this.node = null;
+// 		this.node = null;
 
-		// back to the prototype version of getValue / setValue
-		// note: avoiding to mutate the shape of 'this' via 'delete'
-		this.getValue = this._getValue_unbound;
-		this.setValue = this._setValue_unbound;
+// 		// back to the prototype version of getValue / setValue
+// 		// note: avoiding to mutate the shape of 'this' via 'delete'
+// 		this.getValue = this._getValue_unbound;
+// 		this.setValue = this._setValue_unbound;
 
-	}
+// 	}
 
-}
+// }
 
-PropertyBinding.Composite = Composite;
+// PropertyBinding.Composite = Composite;
 
-PropertyBinding.prototype.BindingType = {
-	Direct: 0,
-	EntireArray: 1,
-	ArrayElement: 2,
-	HasFromToArray: 3
-};
+// PropertyBinding.prototype.BindingType = {
+// 	Direct: 0,
+// 	EntireArray: 1,
+// 	ArrayElement: 2,
+// 	HasFromToArray: 3
+// };
 
-PropertyBinding.prototype.Versioning = {
-	None: 0,
-	NeedsUpdate: 1,
-	MatrixWorldNeedsUpdate: 2
-};
+// PropertyBinding.prototype.Versioning = {
+// 	None: 0,
+// 	NeedsUpdate: 1,
+// 	MatrixWorldNeedsUpdate: 2
+// };
 
-PropertyBinding.prototype.GetterByBindingType = [
+// PropertyBinding.prototype.GetterByBindingType = [
 
-	PropertyBinding.prototype._getValue_direct,
-	PropertyBinding.prototype._getValue_array,
-	PropertyBinding.prototype._getValue_arrayElement,
-	PropertyBinding.prototype._getValue_toArray,
+// 	PropertyBinding.prototype._getValue_direct,
+// 	PropertyBinding.prototype._getValue_array,
+// 	PropertyBinding.prototype._getValue_arrayElement,
+// 	PropertyBinding.prototype._getValue_toArray,
 
-];
+// ];
 
-PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
+// PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
 
-	[
-		// Direct
-		PropertyBinding.prototype._setValue_direct,
-		PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
-		PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,
+// 	[
+// 		// Direct
+// 		PropertyBinding.prototype._setValue_direct,
+// 		PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
+// 		PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,
 
-	], [
+// 	], [
 
-		// EntireArray
+// 		// EntireArray
 
-		PropertyBinding.prototype._setValue_array,
-		PropertyBinding.prototype._setValue_array_setNeedsUpdate,
-		PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,
+// 		PropertyBinding.prototype._setValue_array,
+// 		PropertyBinding.prototype._setValue_array_setNeedsUpdate,
+// 		PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,
 
-	], [
+// 	], [
 
-		// ArrayElement
-		PropertyBinding.prototype._setValue_arrayElement,
-		PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
-		PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,
+// 		// ArrayElement
+// 		PropertyBinding.prototype._setValue_arrayElement,
+// 		PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
+// 		PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,
 
-	], [
+// 	], [
 
-		// HasToFromArray
-		PropertyBinding.prototype._setValue_fromArray,
-		PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
-		PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,
+// 		// HasToFromArray
+// 		PropertyBinding.prototype._setValue_fromArray,
+// 		PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
+// 		PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,
 
-	]
+// 	]
 
-];
+// ];
 
-/**
- *
- * A group of objects that receives a shared animation state.
- *
- * Usage:
- *
- *  - Add objects you would otherwise pass as 'root' to the
- *    constructor or the .clipAction method of AnimationMixer.
- *
- *  - Instead pass this object as 'root'.
- *
- *  - You can also add and remove objects later when the mixer
- *    is running.
- *
- * Note:
- *
- *    Objects of this class appear as one object to the mixer,
- *    so cache control of the individual objects must be done
- *    on the group.
- *
- * Limitation:
- *
- *  - The animated properties must be compatible among the
- *    all objects in the group.
- *
- *  - A single property can either be controlled through a
- *    target group or directly, but not both.
- */
+// /**
+//  *
+//  * A group of objects that receives a shared animation state.
+//  *
+//  * Usage:
+//  *
+//  *  - Add objects you would otherwise pass as 'root' to the
+//  *    constructor or the .clipAction method of AnimationMixer.
+//  *
+//  *  - Instead pass this object as 'root'.
+//  *
+//  *  - You can also add and remove objects later when the mixer
+//  *    is running.
+//  *
+//  * Note:
+//  *
+//  *    Objects of this class appear as one object to the mixer,
+//  *    so cache control of the individual objects must be done
+//  *    on the group.
+//  *
+//  * Limitation:
+//  *
+//  *  - The animated properties must be compatible among the
+//  *    all objects in the group.
+//  *
+//  *  - A single property can either be controlled through a
+//  *    target group or directly, but not both.
+//  */
 
-class AnimationObjectGroup {
+// class AnimationObjectGroup {
 
-	constructor() {
+// 	constructor() {
 
-		this.isAnimationObjectGroup = true;
+// 		this.isAnimationObjectGroup = true;
 
-		this.uuid = generateUUID();
+// 		this.uuid = generateUUID();
 
-		// cached objects followed by the active ones
-		this._objects = Array.prototype.slice.call( arguments );
+// 		// cached objects followed by the active ones
+// 		this._objects = Array.prototype.slice.call( arguments );
 
-		this.nCachedObjects_ = 0; // threshold
-		// note: read by PropertyBinding.Composite
+// 		this.nCachedObjects_ = 0; // threshold
+// 		// note: read by PropertyBinding.Composite
 
-		const indices = {};
-		this._indicesByUUID = indices; // for bookkeeping
+// 		const indices = {};
+// 		this._indicesByUUID = indices; // for bookkeeping
 
-		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {
 
-			indices[ arguments[ i ].uuid ] = i;
+// 			indices[ arguments[ i ].uuid ] = i;
 
-		}
+// 		}
 
-		this._paths = []; // inside: string
-		this._parsedPaths = []; // inside: { we don't care, here }
-		this._bindings = []; // inside: Array< PropertyBinding >
-		this._bindingsIndicesByPath = {}; // inside: indices in these arrays
+// 		this._paths = []; // inside: string
+// 		this._parsedPaths = []; // inside: { we don't care, here }
+// 		this._bindings = []; // inside: Array< PropertyBinding >
+// 		this._bindingsIndicesByPath = {}; // inside: indices in these arrays
 
-		const scope = this;
+// 		const scope = this;
 
-		this.stats = {
+// 		this.stats = {
 
-			objects: {
-				get total() {
+// 			objects: {
+// 				get total() {
 
-					return scope._objects.length;
+// 					return scope._objects.length;
 
-				},
-				get inUse() {
+// 				},
+// 				get inUse() {
 
-					return this.total - scope.nCachedObjects_;
+// 					return this.total - scope.nCachedObjects_;
 
-				}
-			},
-			get bindingsPerObject() {
+// 				}
+// 			},
+// 			get bindingsPerObject() {
 
-				return scope._bindings.length;
+// 				return scope._bindings.length;
 
-			}
+// 			}
 
-		};
+// 		};
 
-	}
+// 	}
 
-	add() {
+// 	add() {
 
-		const objects = this._objects,
-			indicesByUUID = this._indicesByUUID,
-			paths = this._paths,
-			parsedPaths = this._parsedPaths,
-			bindings = this._bindings,
-			nBindings = bindings.length;
+// 		const objects = this._objects,
+// 			indicesByUUID = this._indicesByUUID,
+// 			paths = this._paths,
+// 			parsedPaths = this._parsedPaths,
+// 			bindings = this._bindings,
+// 			nBindings = bindings.length;
 
-		let knownObject = undefined,
-			nObjects = objects.length,
-			nCachedObjects = this.nCachedObjects_;
+// 		let knownObject = undefined,
+// 			nObjects = objects.length,
+// 			nCachedObjects = this.nCachedObjects_;
 
-		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {
 
-			const object = arguments[ i ],
-				uuid = object.uuid;
-			let index = indicesByUUID[ uuid ];
+// 			const object = arguments[ i ],
+// 				uuid = object.uuid;
+// 			let index = indicesByUUID[ uuid ];
 
-			if ( index === undefined ) {
+// 			if ( index === undefined ) {
 
-				// unknown object -> add it to the ACTIVE region
+// 				// unknown object -> add it to the ACTIVE region
 
-				index = nObjects ++;
-				indicesByUUID[ uuid ] = index;
-				objects.push( object );
+// 				index = nObjects ++;
+// 				indicesByUUID[ uuid ] = index;
+// 				objects.push( object );
 
-				// accounting is done, now do the same for all bindings
+// 				// accounting is done, now do the same for all bindings
 
-				for ( let j = 0, m = nBindings; j !== m; ++ j ) {
+// 				for ( let j = 0, m = nBindings; j !== m; ++ j ) {
 
-					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );
+// 					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );
 
-				}
+// 				}
 
-			} else if ( index < nCachedObjects ) {
+// 			} else if ( index < nCachedObjects ) {
 
-				knownObject = objects[ index ];
+// 				knownObject = objects[ index ];
 
-				// move existing object to the ACTIVE region
+// 				// move existing object to the ACTIVE region
 
-				const firstActiveIndex = -- nCachedObjects,
-					lastCachedObject = objects[ firstActiveIndex ];
+// 				const firstActiveIndex = -- nCachedObjects,
+// 					lastCachedObject = objects[ firstActiveIndex ];
 
-				indicesByUUID[ lastCachedObject.uuid ] = index;
-				objects[ index ] = lastCachedObject;
+// 				indicesByUUID[ lastCachedObject.uuid ] = index;
+// 				objects[ index ] = lastCachedObject;
 
-				indicesByUUID[ uuid ] = firstActiveIndex;
-				objects[ firstActiveIndex ] = object;
+// 				indicesByUUID[ uuid ] = firstActiveIndex;
+// 				objects[ firstActiveIndex ] = object;
 
-				// accounting is done, now do the same for all bindings
+// 				// accounting is done, now do the same for all bindings
 
-				for ( let j = 0, m = nBindings; j !== m; ++ j ) {
+// 				for ( let j = 0, m = nBindings; j !== m; ++ j ) {
 
-					const bindingsForPath = bindings[ j ],
-						lastCached = bindingsForPath[ firstActiveIndex ];
+// 					const bindingsForPath = bindings[ j ],
+// 						lastCached = bindingsForPath[ firstActiveIndex ];
 
-					let binding = bindingsForPath[ index ];
+// 					let binding = bindingsForPath[ index ];
 
-					bindingsForPath[ index ] = lastCached;
+// 					bindingsForPath[ index ] = lastCached;
 
-					if ( binding === undefined ) {
+// 					if ( binding === undefined ) {
 
-						// since we do not bother to create new bindings
-						// for objects that are cached, the binding may
-						// or may not exist
+// 						// since we do not bother to create new bindings
+// 						// for objects that are cached, the binding may
+// 						// or may not exist
 
-						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );
+// 						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );
 
-					}
+// 					}
 
-					bindingsForPath[ firstActiveIndex ] = binding;
+// 					bindingsForPath[ firstActiveIndex ] = binding;
 
-				}
+// 				}
 
-			} else if ( objects[ index ] !== knownObject ) {
+// 			} else if ( objects[ index ] !== knownObject ) {
 
-				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
-					'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );
+// 				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
+// 					'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );
 
-			} // else the object is already where we want it to be
+// 			} // else the object is already where we want it to be
 
-		} // for arguments
+// 		} // for arguments
 
-		this.nCachedObjects_ = nCachedObjects;
+// 		this.nCachedObjects_ = nCachedObjects;
 
-	}
+// 	}
 
-	remove() {
+// 	remove() {
 
-		const objects = this._objects,
-			indicesByUUID = this._indicesByUUID,
-			bindings = this._bindings,
-			nBindings = bindings.length;
+// 		const objects = this._objects,
+// 			indicesByUUID = this._indicesByUUID,
+// 			bindings = this._bindings,
+// 			nBindings = bindings.length;
 
-		let nCachedObjects = this.nCachedObjects_;
+// 		let nCachedObjects = this.nCachedObjects_;
 
-		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {
 
-			const object = arguments[ i ],
-				uuid = object.uuid,
-				index = indicesByUUID[ uuid ];
+// 			const object = arguments[ i ],
+// 				uuid = object.uuid,
+// 				index = indicesByUUID[ uuid ];
 
-			if ( index !== undefined && index >= nCachedObjects ) {
+// 			if ( index !== undefined && index >= nCachedObjects ) {
 
-				// move existing object into the CACHED region
+// 				// move existing object into the CACHED region
 
-				const lastCachedIndex = nCachedObjects ++,
-					firstActiveObject = objects[ lastCachedIndex ];
+// 				const lastCachedIndex = nCachedObjects ++,
+// 					firstActiveObject = objects[ lastCachedIndex ];
 
-				indicesByUUID[ firstActiveObject.uuid ] = index;
-				objects[ index ] = firstActiveObject;
+// 				indicesByUUID[ firstActiveObject.uuid ] = index;
+// 				objects[ index ] = firstActiveObject;
 
-				indicesByUUID[ uuid ] = lastCachedIndex;
-				objects[ lastCachedIndex ] = object;
+// 				indicesByUUID[ uuid ] = lastCachedIndex;
+// 				objects[ lastCachedIndex ] = object;
 
-				// accounting is done, now do the same for all bindings
+// 				// accounting is done, now do the same for all bindings
 
-				for ( let j = 0, m = nBindings; j !== m; ++ j ) {
+// 				for ( let j = 0, m = nBindings; j !== m; ++ j ) {
 
-					const bindingsForPath = bindings[ j ],
-						firstActive = bindingsForPath[ lastCachedIndex ],
-						binding = bindingsForPath[ index ];
+// 					const bindingsForPath = bindings[ j ],
+// 						firstActive = bindingsForPath[ lastCachedIndex ],
+// 						binding = bindingsForPath[ index ];
 
-					bindingsForPath[ index ] = firstActive;
-					bindingsForPath[ lastCachedIndex ] = binding;
+// 					bindingsForPath[ index ] = firstActive;
+// 					bindingsForPath[ lastCachedIndex ] = binding;
 
-				}
+// 				}
 
-			}
+// 			}
 
-		} // for arguments
+// 		} // for arguments
 
-		this.nCachedObjects_ = nCachedObjects;
+// 		this.nCachedObjects_ = nCachedObjects;
 
-	}
+// 	}
 
-	// remove & forget
-	uncache() {
+// 	// remove & forget
+// 	uncache() {
 
-		const objects = this._objects,
-			indicesByUUID = this._indicesByUUID,
-			bindings = this._bindings,
-			nBindings = bindings.length;
+// 		const objects = this._objects,
+// 			indicesByUUID = this._indicesByUUID,
+// 			bindings = this._bindings,
+// 			nBindings = bindings.length;
 
-		let nCachedObjects = this.nCachedObjects_,
-			nObjects = objects.length;
+// 		let nCachedObjects = this.nCachedObjects_,
+// 			nObjects = objects.length;
 
-		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = arguments.length; i !== n; ++ i ) {
 
-			const object = arguments[ i ],
-				uuid = object.uuid,
-				index = indicesByUUID[ uuid ];
+// 			const object = arguments[ i ],
+// 				uuid = object.uuid,
+// 				index = indicesByUUID[ uuid ];
 
-			if ( index !== undefined ) {
+// 			if ( index !== undefined ) {
 
-				delete indicesByUUID[ uuid ];
+// 				delete indicesByUUID[ uuid ];
 
-				if ( index < nCachedObjects ) {
+// 				if ( index < nCachedObjects ) {
 
-					// object is cached, shrink the CACHED region
+// 					// object is cached, shrink the CACHED region
 
-					const firstActiveIndex = -- nCachedObjects,
-						lastCachedObject = objects[ firstActiveIndex ],
-						lastIndex = -- nObjects,
-						lastObject = objects[ lastIndex ];
+// 					const firstActiveIndex = -- nCachedObjects,
+// 						lastCachedObject = objects[ firstActiveIndex ],
+// 						lastIndex = -- nObjects,
+// 						lastObject = objects[ lastIndex ];
 
-					// last cached object takes this object's place
-					indicesByUUID[ lastCachedObject.uuid ] = index;
-					objects[ index ] = lastCachedObject;
+// 					// last cached object takes this object's place
+// 					indicesByUUID[ lastCachedObject.uuid ] = index;
+// 					objects[ index ] = lastCachedObject;
 
-					// last object goes to the activated slot and pop
-					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
-					objects[ firstActiveIndex ] = lastObject;
-					objects.pop();
+// 					// last object goes to the activated slot and pop
+// 					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
+// 					objects[ firstActiveIndex ] = lastObject;
+// 					objects.pop();
 
-					// accounting is done, now do the same for all bindings
+// 					// accounting is done, now do the same for all bindings
 
-					for ( let j = 0, m = nBindings; j !== m; ++ j ) {
+// 					for ( let j = 0, m = nBindings; j !== m; ++ j ) {
 
-						const bindingsForPath = bindings[ j ],
-							lastCached = bindingsForPath[ firstActiveIndex ],
-							last = bindingsForPath[ lastIndex ];
+// 						const bindingsForPath = bindings[ j ],
+// 							lastCached = bindingsForPath[ firstActiveIndex ],
+// 							last = bindingsForPath[ lastIndex ];
 
-						bindingsForPath[ index ] = lastCached;
-						bindingsForPath[ firstActiveIndex ] = last;
-						bindingsForPath.pop();
+// 						bindingsForPath[ index ] = lastCached;
+// 						bindingsForPath[ firstActiveIndex ] = last;
+// 						bindingsForPath.pop();
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					// object is active, just swap with the last and pop
+// 					// object is active, just swap with the last and pop
 
-					const lastIndex = -- nObjects,
-						lastObject = objects[ lastIndex ];
+// 					const lastIndex = -- nObjects,
+// 						lastObject = objects[ lastIndex ];
 
-					if ( lastIndex > 0 ) {
+// 					if ( lastIndex > 0 ) {
 
-						indicesByUUID[ lastObject.uuid ] = index;
+// 						indicesByUUID[ lastObject.uuid ] = index;
 
-					}
+// 					}
 
-					objects[ index ] = lastObject;
-					objects.pop();
+// 					objects[ index ] = lastObject;
+// 					objects.pop();
 
-					// accounting is done, now do the same for all bindings
+// 					// accounting is done, now do the same for all bindings
 
-					for ( let j = 0, m = nBindings; j !== m; ++ j ) {
+// 					for ( let j = 0, m = nBindings; j !== m; ++ j ) {
 
-						const bindingsForPath = bindings[ j ];
+// 						const bindingsForPath = bindings[ j ];
 
-						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
-						bindingsForPath.pop();
+// 						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
+// 						bindingsForPath.pop();
 
-					}
+// 					}
 
-				} // cached or active
+// 				} // cached or active
 
-			} // if object is known
+// 			} // if object is known
 
-		} // for arguments
+// 		} // for arguments
 
-		this.nCachedObjects_ = nCachedObjects;
+// 		this.nCachedObjects_ = nCachedObjects;
 
-	}
+// 	}
 
-	// Internal interface used by befriended PropertyBinding.Composite:
+// 	// Internal interface used by befriended PropertyBinding.Composite:
 
-	subscribe_( path, parsedPath ) {
+// 	subscribe_( path, parsedPath ) {
 
-		// returns an array of bindings for the given path that is changed
-		// according to the contained objects in the group
+// 		// returns an array of bindings for the given path that is changed
+// 		// according to the contained objects in the group
 
-		const indicesByPath = this._bindingsIndicesByPath;
-		let index = indicesByPath[ path ];
-		const bindings = this._bindings;
+// 		const indicesByPath = this._bindingsIndicesByPath;
+// 		let index = indicesByPath[ path ];
+// 		const bindings = this._bindings;
 
-		if ( index !== undefined ) return bindings[ index ];
+// 		if ( index !== undefined ) return bindings[ index ];
 
-		const paths = this._paths,
-			parsedPaths = this._parsedPaths,
-			objects = this._objects,
-			nObjects = objects.length,
-			nCachedObjects = this.nCachedObjects_,
-			bindingsForPath = new Array( nObjects );
+// 		const paths = this._paths,
+// 			parsedPaths = this._parsedPaths,
+// 			objects = this._objects,
+// 			nObjects = objects.length,
+// 			nCachedObjects = this.nCachedObjects_,
+// 			bindingsForPath = new Array( nObjects );
 
-		index = bindings.length;
+// 		index = bindings.length;
 
-		indicesByPath[ path ] = index;
+// 		indicesByPath[ path ] = index;
 
-		paths.push( path );
-		parsedPaths.push( parsedPath );
-		bindings.push( bindingsForPath );
+// 		paths.push( path );
+// 		parsedPaths.push( parsedPath );
+// 		bindings.push( bindingsForPath );
 
-		for ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {
+// 		for ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {
 
-			const object = objects[ i ];
-			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );
+// 			const object = objects[ i ];
+// 			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );
 
-		}
+// 		}
 
-		return bindingsForPath;
+// 		return bindingsForPath;
 
-	}
+// 	}
 
-	unsubscribe_( path ) {
+// 	unsubscribe_( path ) {
 
-		// tells the group to forget about a property path and no longer
-		// update the array previously obtained with 'subscribe_'
+// 		// tells the group to forget about a property path and no longer
+// 		// update the array previously obtained with 'subscribe_'
 
-		const indicesByPath = this._bindingsIndicesByPath,
-			index = indicesByPath[ path ];
+// 		const indicesByPath = this._bindingsIndicesByPath,
+// 			index = indicesByPath[ path ];
 
-		if ( index !== undefined ) {
+// 		if ( index !== undefined ) {
 
-			const paths = this._paths,
-				parsedPaths = this._parsedPaths,
-				bindings = this._bindings,
-				lastBindingsIndex = bindings.length - 1,
-				lastBindings = bindings[ lastBindingsIndex ],
-				lastBindingsPath = path[ lastBindingsIndex ];
+// 			const paths = this._paths,
+// 				parsedPaths = this._parsedPaths,
+// 				bindings = this._bindings,
+// 				lastBindingsIndex = bindings.length - 1,
+// 				lastBindings = bindings[ lastBindingsIndex ],
+// 				lastBindingsPath = path[ lastBindingsIndex ];
 
-			indicesByPath[ lastBindingsPath ] = index;
+// 			indicesByPath[ lastBindingsPath ] = index;
 
-			bindings[ index ] = lastBindings;
-			bindings.pop();
+// 			bindings[ index ] = lastBindings;
+// 			bindings.pop();
 
-			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
-			parsedPaths.pop();
+// 			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
+// 			parsedPaths.pop();
 
-			paths[ index ] = paths[ lastBindingsIndex ];
-			paths.pop();
+// 			paths[ index ] = paths[ lastBindingsIndex ];
+// 			paths.pop();
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-class AnimationAction {
+// class AnimationAction {
 
-	constructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {
+// 	constructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {
 
-		this._mixer = mixer;
-		this._clip = clip;
-		this._localRoot = localRoot;
-		this.blendMode = blendMode;
+// 		this._mixer = mixer;
+// 		this._clip = clip;
+// 		this._localRoot = localRoot;
+// 		this.blendMode = blendMode;
 
-		const tracks = clip.tracks,
-			nTracks = tracks.length,
-			interpolants = new Array( nTracks );
+// 		const tracks = clip.tracks,
+// 			nTracks = tracks.length,
+// 			interpolants = new Array( nTracks );
 
-		const interpolantSettings = {
-			endingStart: ZeroCurvatureEnding,
-			endingEnd: ZeroCurvatureEnding
-		};
+// 		const interpolantSettings = {
+// 			endingStart: ZeroCurvatureEnding,
+// 			endingEnd: ZeroCurvatureEnding
+// 		};
 
-		for ( let i = 0; i !== nTracks; ++ i ) {
+// 		for ( let i = 0; i !== nTracks; ++ i ) {
 
-			const interpolant = tracks[ i ].createInterpolant( null );
-			interpolants[ i ] = interpolant;
-			interpolant.settings = interpolantSettings;
+// 			const interpolant = tracks[ i ].createInterpolant( null );
+// 			interpolants[ i ] = interpolant;
+// 			interpolant.settings = interpolantSettings;
 
-		}
+// 		}
 
-		this._interpolantSettings = interpolantSettings;
+// 		this._interpolantSettings = interpolantSettings;
 
-		this._interpolants = interpolants; // bound by the mixer
+// 		this._interpolants = interpolants; // bound by the mixer
 
-		// inside: PropertyMixer (managed by the mixer)
-		this._propertyBindings = new Array( nTracks );
+// 		// inside: PropertyMixer (managed by the mixer)
+// 		this._propertyBindings = new Array( nTracks );
 
-		this._cacheIndex = null; // for the memory manager
-		this._byClipCacheIndex = null; // for the memory manager
+// 		this._cacheIndex = null; // for the memory manager
+// 		this._byClipCacheIndex = null; // for the memory manager
 
-		this._timeScaleInterpolant = null;
-		this._weightInterpolant = null;
+// 		this._timeScaleInterpolant = null;
+// 		this._weightInterpolant = null;
 
-		this.loop = LoopRepeat;
-		this._loopCount = - 1;
+// 		this.loop = LoopRepeat;
+// 		this._loopCount = - 1;
 
-		// global mixer time when the action is to be started
-		// it's set back to 'null' upon start of the action
-		this._startTime = null;
+// 		// global mixer time when the action is to be started
+// 		// it's set back to 'null' upon start of the action
+// 		this._startTime = null;
 
-		// scaled local time of the action
-		// gets clamped or wrapped to 0..clip.duration according to loop
-		this.time = 0;
+// 		// scaled local time of the action
+// 		// gets clamped or wrapped to 0..clip.duration according to loop
+// 		this.time = 0;
 
-		this.timeScale = 1;
-		this._effectiveTimeScale = 1;
+// 		this.timeScale = 1;
+// 		this._effectiveTimeScale = 1;
 
-		this.weight = 1;
-		this._effectiveWeight = 1;
+// 		this.weight = 1;
+// 		this._effectiveWeight = 1;
 
-		this.repetitions = Infinity; // no. of repetitions when looping
+// 		this.repetitions = Infinity; // no. of repetitions when looping
 
-		this.paused = false; // true -> zero effective time scale
-		this.enabled = true; // false -> zero effective weight
+// 		this.paused = false; // true -> zero effective time scale
+// 		this.enabled = true; // false -> zero effective weight
 
-		this.clampWhenFinished = false;// keep feeding the last frame?
+// 		this.clampWhenFinished = false;// keep feeding the last frame?
 
-		this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
-		this.zeroSlopeAtEnd = true;// clips for start, loop and end
+// 		this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
+// 		this.zeroSlopeAtEnd = true;// clips for start, loop and end
 
-	}
+// 	}
 
-	// State & Scheduling
+// 	// State & Scheduling
 
-	play() {
+// 	play() {
 
-		this._mixer._activateAction( this );
+// 		this._mixer._activateAction( this );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	stop() {
+// 	stop() {
 
-		this._mixer._deactivateAction( this );
+// 		this._mixer._deactivateAction( this );
 
-		return this.reset();
+// 		return this.reset();
 
-	}
+// 	}
 
-	reset() {
+// 	reset() {
 
-		this.paused = false;
-		this.enabled = true;
+// 		this.paused = false;
+// 		this.enabled = true;
 
-		this.time = 0; // restart clip
-		this._loopCount = - 1;// forget previous loops
-		this._startTime = null;// forget scheduling
+// 		this.time = 0; // restart clip
+// 		this._loopCount = - 1;// forget previous loops
+// 		this._startTime = null;// forget scheduling
 
-		return this.stopFading().stopWarping();
+// 		return this.stopFading().stopWarping();
 
-	}
+// 	}
 
-	isRunning() {
+// 	isRunning() {
 
-		return this.enabled && ! this.paused && this.timeScale !== 0 &&
-			this._startTime === null && this._mixer._isActiveAction( this );
+// 		return this.enabled && ! this.paused && this.timeScale !== 0 &&
+// 			this._startTime === null && this._mixer._isActiveAction( this );
 
-	}
+// 	}
 
-	// return true when play has been called
-	isScheduled() {
+// 	// return true when play has been called
+// 	isScheduled() {
 
-		return this._mixer._isActiveAction( this );
+// 		return this._mixer._isActiveAction( this );
 
-	}
+// 	}
 
-	startAt( time ) {
+// 	startAt( time ) {
 
-		this._startTime = time;
+// 		this._startTime = time;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setLoop( mode, repetitions ) {
+// 	setLoop( mode, repetitions ) {
 
-		this.loop = mode;
-		this.repetitions = repetitions;
+// 		this.loop = mode;
+// 		this.repetitions = repetitions;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// Weight
+// 	// Weight
 
-	// set the weight stopping any scheduled fading
-	// although .enabled = false yields an effective weight of zero, this
-	// method does *not* change .enabled, because it would be confusing
-	setEffectiveWeight( weight ) {
+// 	// set the weight stopping any scheduled fading
+// 	// although .enabled = false yields an effective weight of zero, this
+// 	// method does *not* change .enabled, because it would be confusing
+// 	setEffectiveWeight( weight ) {
 
-		this.weight = weight;
+// 		this.weight = weight;
 
-		// note: same logic as when updated at runtime
-		this._effectiveWeight = this.enabled ? weight : 0;
+// 		// note: same logic as when updated at runtime
+// 		this._effectiveWeight = this.enabled ? weight : 0;
 
-		return this.stopFading();
+// 		return this.stopFading();
 
-	}
+// 	}
 
-	// return the weight considering fading and .enabled
-	getEffectiveWeight() {
+// 	// return the weight considering fading and .enabled
+// 	getEffectiveWeight() {
 
-		return this._effectiveWeight;
+// 		return this._effectiveWeight;
 
-	}
+// 	}
 
-	fadeIn( duration ) {
+// 	fadeIn( duration ) {
 
-		return this._scheduleFading( duration, 0, 1 );
+// 		return this._scheduleFading( duration, 0, 1 );
 
-	}
+// 	}
 
-	fadeOut( duration ) {
+// 	fadeOut( duration ) {
 
-		return this._scheduleFading( duration, 1, 0 );
+// 		return this._scheduleFading( duration, 1, 0 );
 
-	}
+// 	}
 
-	crossFadeFrom( fadeOutAction, duration, warp ) {
+// 	crossFadeFrom( fadeOutAction, duration, warp ) {
 
-		fadeOutAction.fadeOut( duration );
-		this.fadeIn( duration );
+// 		fadeOutAction.fadeOut( duration );
+// 		this.fadeIn( duration );
 
-		if ( warp ) {
+// 		if ( warp ) {
 
-			const fadeInDuration = this._clip.duration,
-				fadeOutDuration = fadeOutAction._clip.duration,
+// 			const fadeInDuration = this._clip.duration,
+// 				fadeOutDuration = fadeOutAction._clip.duration,
 
-				startEndRatio = fadeOutDuration / fadeInDuration,
-				endStartRatio = fadeInDuration / fadeOutDuration;
+// 				startEndRatio = fadeOutDuration / fadeInDuration,
+// 				endStartRatio = fadeInDuration / fadeOutDuration;
 
-			fadeOutAction.warp( 1.0, startEndRatio, duration );
-			this.warp( endStartRatio, 1.0, duration );
+// 			fadeOutAction.warp( 1.0, startEndRatio, duration );
+// 			this.warp( endStartRatio, 1.0, duration );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	crossFadeTo( fadeInAction, duration, warp ) {
+// 	crossFadeTo( fadeInAction, duration, warp ) {
 
-		return fadeInAction.crossFadeFrom( this, duration, warp );
+// 		return fadeInAction.crossFadeFrom( this, duration, warp );
 
-	}
+// 	}
 
-	stopFading() {
+// 	stopFading() {
 
-		const weightInterpolant = this._weightInterpolant;
+// 		const weightInterpolant = this._weightInterpolant;
 
-		if ( weightInterpolant !== null ) {
+// 		if ( weightInterpolant !== null ) {
 
-			this._weightInterpolant = null;
-			this._mixer._takeBackControlInterpolant( weightInterpolant );
+// 			this._weightInterpolant = null;
+// 			this._mixer._takeBackControlInterpolant( weightInterpolant );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// Time Scale Control
+// 	// Time Scale Control
 
-	// set the time scale stopping any scheduled warping
-	// although .paused = true yields an effective time scale of zero, this
-	// method does *not* change .paused, because it would be confusing
-	setEffectiveTimeScale( timeScale ) {
+// 	// set the time scale stopping any scheduled warping
+// 	// although .paused = true yields an effective time scale of zero, this
+// 	// method does *not* change .paused, because it would be confusing
+// 	setEffectiveTimeScale( timeScale ) {
 
-		this.timeScale = timeScale;
-		this._effectiveTimeScale = this.paused ? 0 : timeScale;
+// 		this.timeScale = timeScale;
+// 		this._effectiveTimeScale = this.paused ? 0 : timeScale;
 
-		return this.stopWarping();
+// 		return this.stopWarping();
 
-	}
+// 	}
 
-	// return the time scale considering warping and .paused
-	getEffectiveTimeScale() {
+// 	// return the time scale considering warping and .paused
+// 	getEffectiveTimeScale() {
 
-		return this._effectiveTimeScale;
+// 		return this._effectiveTimeScale;
 
-	}
+// 	}
 
-	setDuration( duration ) {
+// 	setDuration( duration ) {
 
-		this.timeScale = this._clip.duration / duration;
+// 		this.timeScale = this._clip.duration / duration;
 
-		return this.stopWarping();
+// 		return this.stopWarping();
 
-	}
+// 	}
 
-	syncWith( action ) {
+// 	syncWith( action ) {
 
-		this.time = action.time;
-		this.timeScale = action.timeScale;
+// 		this.time = action.time;
+// 		this.timeScale = action.timeScale;
 
-		return this.stopWarping();
+// 		return this.stopWarping();
 
-	}
+// 	}
 
-	halt( duration ) {
+// 	halt( duration ) {
 
-		return this.warp( this._effectiveTimeScale, 0, duration );
+// 		return this.warp( this._effectiveTimeScale, 0, duration );
 
-	}
+// 	}
 
-	warp( startTimeScale, endTimeScale, duration ) {
+// 	warp( startTimeScale, endTimeScale, duration ) {
 
-		const mixer = this._mixer,
-			now = mixer.time,
-			timeScale = this.timeScale;
+// 		const mixer = this._mixer,
+// 			now = mixer.time,
+// 			timeScale = this.timeScale;
 
-		let interpolant = this._timeScaleInterpolant;
+// 		let interpolant = this._timeScaleInterpolant;
 
-		if ( interpolant === null ) {
+// 		if ( interpolant === null ) {
 
-			interpolant = mixer._lendControlInterpolant();
-			this._timeScaleInterpolant = interpolant;
+// 			interpolant = mixer._lendControlInterpolant();
+// 			this._timeScaleInterpolant = interpolant;
 
-		}
+// 		}
 
-		const times = interpolant.parameterPositions,
-			values = interpolant.sampleValues;
+// 		const times = interpolant.parameterPositions,
+// 			values = interpolant.sampleValues;
 
-		times[ 0 ] = now;
-		times[ 1 ] = now + duration;
+// 		times[ 0 ] = now;
+// 		times[ 1 ] = now + duration;
 
-		values[ 0 ] = startTimeScale / timeScale;
-		values[ 1 ] = endTimeScale / timeScale;
+// 		values[ 0 ] = startTimeScale / timeScale;
+// 		values[ 1 ] = endTimeScale / timeScale;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	stopWarping() {
+// 	stopWarping() {
 
-		const timeScaleInterpolant = this._timeScaleInterpolant;
+// 		const timeScaleInterpolant = this._timeScaleInterpolant;
 
-		if ( timeScaleInterpolant !== null ) {
+// 		if ( timeScaleInterpolant !== null ) {
 
-			this._timeScaleInterpolant = null;
-			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );
+// 			this._timeScaleInterpolant = null;
+// 			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// Object Accessors
+// 	// Object Accessors
 
-	getMixer() {
+// 	getMixer() {
 
-		return this._mixer;
+// 		return this._mixer;
 
-	}
+// 	}
 
-	getClip() {
+// 	getClip() {
 
-		return this._clip;
+// 		return this._clip;
 
-	}
+// 	}
 
-	getRoot() {
+// 	getRoot() {
 
-		return this._localRoot || this._mixer._root;
+// 		return this._localRoot || this._mixer._root;
 
-	}
+// 	}
 
-	// Interna
+// 	// Interna
 
-	_update( time, deltaTime, timeDirection, accuIndex ) {
+// 	_update( time, deltaTime, timeDirection, accuIndex ) {
 
-		// called by the mixer
+// 		// called by the mixer
 
-		if ( ! this.enabled ) {
+// 		if ( ! this.enabled ) {
 
-			// call ._updateWeight() to update ._effectiveWeight
+// 			// call ._updateWeight() to update ._effectiveWeight
 
-			this._updateWeight( time );
-			return;
+// 			this._updateWeight( time );
+// 			return;
 
-		}
+// 		}
 
-		const startTime = this._startTime;
+// 		const startTime = this._startTime;
 
-		if ( startTime !== null ) {
+// 		if ( startTime !== null ) {
 
-			// check for scheduled start of action
+// 			// check for scheduled start of action
 
-			const timeRunning = ( time - startTime ) * timeDirection;
-			if ( timeRunning < 0 || timeDirection === 0 ) {
+// 			const timeRunning = ( time - startTime ) * timeDirection;
+// 			if ( timeRunning < 0 || timeDirection === 0 ) {
 
-				deltaTime = 0;
+// 				deltaTime = 0;
 
-			} else {
+// 			} else {
 
 
-				this._startTime = null; // unschedule
-				deltaTime = timeDirection * timeRunning;
+// 				this._startTime = null; // unschedule
+// 				deltaTime = timeDirection * timeRunning;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// apply time scale and advance time
+// 		// apply time scale and advance time
 
-		deltaTime *= this._updateTimeScale( time );
-		const clipTime = this._updateTime( deltaTime );
+// 		deltaTime *= this._updateTimeScale( time );
+// 		const clipTime = this._updateTime( deltaTime );
 
-		// note: _updateTime may disable the action resulting in
-		// an effective weight of 0
+// 		// note: _updateTime may disable the action resulting in
+// 		// an effective weight of 0
 
-		const weight = this._updateWeight( time );
+// 		const weight = this._updateWeight( time );
 
-		if ( weight > 0 ) {
+// 		if ( weight > 0 ) {
 
-			const interpolants = this._interpolants;
-			const propertyMixers = this._propertyBindings;
+// 			const interpolants = this._interpolants;
+// 			const propertyMixers = this._propertyBindings;
 
-			switch ( this.blendMode ) {
+// 			switch ( this.blendMode ) {
 
-				case AdditiveAnimationBlendMode:
+// 				case AdditiveAnimationBlendMode:
 
-					for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {
+// 					for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {
 
-						interpolants[ j ].evaluate( clipTime );
-						propertyMixers[ j ].accumulateAdditive( weight );
+// 						interpolants[ j ].evaluate( clipTime );
+// 						propertyMixers[ j ].accumulateAdditive( weight );
 
-					}
+// 					}
 
-					break;
+// 					break;
 
-				case NormalAnimationBlendMode:
-				default:
+// 				case NormalAnimationBlendMode:
+// 				default:
 
-					for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {
+// 					for ( let j = 0, m = interpolants.length; j !== m; ++ j ) {
 
-						interpolants[ j ].evaluate( clipTime );
-						propertyMixers[ j ].accumulate( accuIndex, weight );
+// 						interpolants[ j ].evaluate( clipTime );
+// 						propertyMixers[ j ].accumulate( accuIndex, weight );
 
-					}
+// 					}
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_updateWeight( time ) {
+// 	_updateWeight( time ) {
 
-		let weight = 0;
+// 		let weight = 0;
 
-		if ( this.enabled ) {
+// 		if ( this.enabled ) {
 
-			weight = this.weight;
-			const interpolant = this._weightInterpolant;
+// 			weight = this.weight;
+// 			const interpolant = this._weightInterpolant;
 
-			if ( interpolant !== null ) {
+// 			if ( interpolant !== null ) {
 
-				const interpolantValue = interpolant.evaluate( time )[ 0 ];
+// 				const interpolantValue = interpolant.evaluate( time )[ 0 ];
 
-				weight *= interpolantValue;
+// 				weight *= interpolantValue;
 
-				if ( time > interpolant.parameterPositions[ 1 ] ) {
+// 				if ( time > interpolant.parameterPositions[ 1 ] ) {
 
-					this.stopFading();
+// 					this.stopFading();
 
-					if ( interpolantValue === 0 ) {
+// 					if ( interpolantValue === 0 ) {
 
-						// faded out, disable
-						this.enabled = false;
+// 						// faded out, disable
+// 						this.enabled = false;
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		this._effectiveWeight = weight;
-		return weight;
+// 		this._effectiveWeight = weight;
+// 		return weight;
 
-	}
+// 	}
 
-	_updateTimeScale( time ) {
+// 	_updateTimeScale( time ) {
 
-		let timeScale = 0;
+// 		let timeScale = 0;
 
-		if ( ! this.paused ) {
+// 		if ( ! this.paused ) {
 
-			timeScale = this.timeScale;
+// 			timeScale = this.timeScale;
 
-			const interpolant = this._timeScaleInterpolant;
+// 			const interpolant = this._timeScaleInterpolant;
 
-			if ( interpolant !== null ) {
+// 			if ( interpolant !== null ) {
 
-				const interpolantValue = interpolant.evaluate( time )[ 0 ];
+// 				const interpolantValue = interpolant.evaluate( time )[ 0 ];
 
-				timeScale *= interpolantValue;
+// 				timeScale *= interpolantValue;
 
-				if ( time > interpolant.parameterPositions[ 1 ] ) {
+// 				if ( time > interpolant.parameterPositions[ 1 ] ) {
 
-					this.stopWarping();
+// 					this.stopWarping();
 
-					if ( timeScale === 0 ) {
+// 					if ( timeScale === 0 ) {
 
-						// motion has halted, pause
-						this.paused = true;
+// 						// motion has halted, pause
+// 						this.paused = true;
 
-					} else {
+// 					} else {
 
-						// warp done - apply final time scale
-						this.timeScale = timeScale;
+// 						// warp done - apply final time scale
+// 						this.timeScale = timeScale;
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-		}
+// 		}
 
-		this._effectiveTimeScale = timeScale;
-		return timeScale;
+// 		this._effectiveTimeScale = timeScale;
+// 		return timeScale;
 
-	}
+// 	}
 
-	_updateTime( deltaTime ) {
+// 	_updateTime( deltaTime ) {
 
-		const duration = this._clip.duration;
-		const loop = this.loop;
+// 		const duration = this._clip.duration;
+// 		const loop = this.loop;
 
-		let time = this.time + deltaTime;
-		let loopCount = this._loopCount;
+// 		let time = this.time + deltaTime;
+// 		let loopCount = this._loopCount;
 
-		const pingPong = ( loop === LoopPingPong );
+// 		const pingPong = ( loop === LoopPingPong );
 
-		if ( deltaTime === 0 ) {
+// 		if ( deltaTime === 0 ) {
 
-			if ( loopCount === - 1 ) return time;
+// 			if ( loopCount === - 1 ) return time;
 
-			return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;
+// 			return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;
 
-		}
+// 		}
 
-		if ( loop === LoopOnce ) {
+// 		if ( loop === LoopOnce ) {
 
-			if ( loopCount === - 1 ) {
+// 			if ( loopCount === - 1 ) {
 
-				// just started
+// 				// just started
 
-				this._loopCount = 0;
-				this._setEndings( true, true, false );
+// 				this._loopCount = 0;
+// 				this._setEndings( true, true, false );
 
-			}
+// 			}
 
-			handle_stop: {
+// 			handle_stop: {
 
-				if ( time >= duration ) {
+// 				if ( time >= duration ) {
 
-					time = duration;
+// 					time = duration;
 
-				} else if ( time < 0 ) {
+// 				} else if ( time < 0 ) {
 
-					time = 0;
+// 					time = 0;
 
-				} else {
+// 				} else {
 
-					this.time = time;
+// 					this.time = time;
 
-					break handle_stop;
+// 					break handle_stop;
 
-				}
+// 				}
 
-				if ( this.clampWhenFinished ) this.paused = true;
-				else this.enabled = false;
+// 				if ( this.clampWhenFinished ) this.paused = true;
+// 				else this.enabled = false;
 
-				this.time = time;
+// 				this.time = time;
 
-				this._mixer.dispatchEvent( {
-					type: 'finished', action: this,
-					direction: deltaTime < 0 ? - 1 : 1
-				} );
+// 				this._mixer.dispatchEvent( {
+// 					type: 'finished', action: this,
+// 					direction: deltaTime < 0 ? - 1 : 1
+// 				} );
 
-			}
+// 			}
 
-		} else { // repetitive Repeat or PingPong
+// 		} else { // repetitive Repeat or PingPong
 
-			if ( loopCount === - 1 ) {
+// 			if ( loopCount === - 1 ) {
 
-				// just started
+// 				// just started
 
-				if ( deltaTime >= 0 ) {
+// 				if ( deltaTime >= 0 ) {
 
-					loopCount = 0;
+// 					loopCount = 0;
 
-					this._setEndings( true, this.repetitions === 0, pingPong );
+// 					this._setEndings( true, this.repetitions === 0, pingPong );
 
-				} else {
+// 				} else {
 
-					// when looping in reverse direction, the initial
-					// transition through zero counts as a repetition,
-					// so leave loopCount at -1
+// 					// when looping in reverse direction, the initial
+// 					// transition through zero counts as a repetition,
+// 					// so leave loopCount at -1
 
-					this._setEndings( this.repetitions === 0, true, pingPong );
+// 					this._setEndings( this.repetitions === 0, true, pingPong );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( time >= duration || time < 0 ) {
+// 			if ( time >= duration || time < 0 ) {
 
-				// wrap around
+// 				// wrap around
 
-				const loopDelta = Math.floor( time / duration ); // signed
-				time -= duration * loopDelta;
+// 				const loopDelta = Math.floor( time / duration ); // signed
+// 				time -= duration * loopDelta;
 
-				loopCount += Math.abs( loopDelta );
+// 				loopCount += Math.abs( loopDelta );
 
-				const pending = this.repetitions - loopCount;
+// 				const pending = this.repetitions - loopCount;
 
-				if ( pending <= 0 ) {
+// 				if ( pending <= 0 ) {
 
-					// have to stop (switch state, clamp time, fire event)
+// 					// have to stop (switch state, clamp time, fire event)
 
-					if ( this.clampWhenFinished ) this.paused = true;
-					else this.enabled = false;
+// 					if ( this.clampWhenFinished ) this.paused = true;
+// 					else this.enabled = false;
 
-					time = deltaTime > 0 ? duration : 0;
+// 					time = deltaTime > 0 ? duration : 0;
 
-					this.time = time;
+// 					this.time = time;
 
-					this._mixer.dispatchEvent( {
-						type: 'finished', action: this,
-						direction: deltaTime > 0 ? 1 : - 1
-					} );
+// 					this._mixer.dispatchEvent( {
+// 						type: 'finished', action: this,
+// 						direction: deltaTime > 0 ? 1 : - 1
+// 					} );
 
-				} else {
+// 				} else {
 
-					// keep running
+// 					// keep running
 
-					if ( pending === 1 ) {
+// 					if ( pending === 1 ) {
 
-						// entering the last round
+// 						// entering the last round
 
-						const atStart = deltaTime < 0;
-						this._setEndings( atStart, ! atStart, pingPong );
+// 						const atStart = deltaTime < 0;
+// 						this._setEndings( atStart, ! atStart, pingPong );
 
-					} else {
+// 					} else {
 
-						this._setEndings( false, false, pingPong );
+// 						this._setEndings( false, false, pingPong );
 
-					}
+// 					}
 
-					this._loopCount = loopCount;
+// 					this._loopCount = loopCount;
 
-					this.time = time;
+// 					this.time = time;
 
-					this._mixer.dispatchEvent( {
-						type: 'loop', action: this, loopDelta: loopDelta
-					} );
+// 					this._mixer.dispatchEvent( {
+// 						type: 'loop', action: this, loopDelta: loopDelta
+// 					} );
 
-				}
+// 				}
 
-			} else {
+// 			} else {
 
-				this.time = time;
+// 				this.time = time;
 
-			}
+// 			}
 
-			if ( pingPong && ( loopCount & 1 ) === 1 ) {
+// 			if ( pingPong && ( loopCount & 1 ) === 1 ) {
 
-				// invert time for the "pong round"
+// 				// invert time for the "pong round"
 
-				return duration - time;
+// 				return duration - time;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		return time;
+// 		return time;
 
-	}
+// 	}
 
-	_setEndings( atStart, atEnd, pingPong ) {
+// 	_setEndings( atStart, atEnd, pingPong ) {
 
-		const settings = this._interpolantSettings;
+// 		const settings = this._interpolantSettings;
 
-		if ( pingPong ) {
+// 		if ( pingPong ) {
 
-			settings.endingStart = ZeroSlopeEnding;
-			settings.endingEnd = ZeroSlopeEnding;
+// 			settings.endingStart = ZeroSlopeEnding;
+// 			settings.endingEnd = ZeroSlopeEnding;
 
-		} else {
+// 		} else {
 
-			// assuming for LoopOnce atStart == atEnd == true
+// 			// assuming for LoopOnce atStart == atEnd == true
 
-			if ( atStart ) {
+// 			if ( atStart ) {
 
-				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
+// 				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
 
-			} else {
+// 			} else {
 
-				settings.endingStart = WrapAroundEnding;
+// 				settings.endingStart = WrapAroundEnding;
 
-			}
+// 			}
 
-			if ( atEnd ) {
+// 			if ( atEnd ) {
 
-				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
+// 				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
 
-			} else {
+// 			} else {
 
-				settings.endingEnd 	 = WrapAroundEnding;
+// 				settings.endingEnd 	 = WrapAroundEnding;
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_scheduleFading( duration, weightNow, weightThen ) {
+// 	_scheduleFading( duration, weightNow, weightThen ) {
 
-		const mixer = this._mixer, now = mixer.time;
-		let interpolant = this._weightInterpolant;
+// 		const mixer = this._mixer, now = mixer.time;
+// 		let interpolant = this._weightInterpolant;
 
-		if ( interpolant === null ) {
+// 		if ( interpolant === null ) {
 
-			interpolant = mixer._lendControlInterpolant();
-			this._weightInterpolant = interpolant;
+// 			interpolant = mixer._lendControlInterpolant();
+// 			this._weightInterpolant = interpolant;
 
-		}
+// 		}
 
-		const times = interpolant.parameterPositions,
-			values = interpolant.sampleValues;
+// 		const times = interpolant.parameterPositions,
+// 			values = interpolant.sampleValues;
 
-		times[ 0 ] = now;
-		values[ 0 ] = weightNow;
-		times[ 1 ] = now + duration;
-		values[ 1 ] = weightThen;
+// 		times[ 0 ] = now;
+// 		values[ 0 ] = weightNow;
+// 		times[ 1 ] = now + duration;
+// 		values[ 1 ] = weightThen;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-const _controlInterpolantsResultBuffer = new Float32Array( 1 );
+// const _controlInterpolantsResultBuffer = new Float32Array( 1 );
 
 
-class AnimationMixer extends EventDispatcher {
+// class AnimationMixer extends EventDispatcher {
 
-	constructor( root ) {
+// 	constructor( root ) {
 
-		super();
+// 		super();
 
-		this._root = root;
-		this._initMemoryManager();
-		this._accuIndex = 0;
-		this.time = 0;
-		this.timeScale = 1.0;
+// 		this._root = root;
+// 		this._initMemoryManager();
+// 		this._accuIndex = 0;
+// 		this.time = 0;
+// 		this.timeScale = 1.0;
 
-	}
+// 	}
 
-	_bindAction( action, prototypeAction ) {
+// 	_bindAction( action, prototypeAction ) {
 
-		const root = action._localRoot || this._root,
-			tracks = action._clip.tracks,
-			nTracks = tracks.length,
-			bindings = action._propertyBindings,
-			interpolants = action._interpolants,
-			rootUuid = root.uuid,
-			bindingsByRoot = this._bindingsByRootAndName;
+// 		const root = action._localRoot || this._root,
+// 			tracks = action._clip.tracks,
+// 			nTracks = tracks.length,
+// 			bindings = action._propertyBindings,
+// 			interpolants = action._interpolants,
+// 			rootUuid = root.uuid,
+// 			bindingsByRoot = this._bindingsByRootAndName;
 
-		let bindingsByName = bindingsByRoot[ rootUuid ];
+// 		let bindingsByName = bindingsByRoot[ rootUuid ];
 
-		if ( bindingsByName === undefined ) {
+// 		if ( bindingsByName === undefined ) {
 
-			bindingsByName = {};
-			bindingsByRoot[ rootUuid ] = bindingsByName;
+// 			bindingsByName = {};
+// 			bindingsByRoot[ rootUuid ] = bindingsByName;
 
-		}
+// 		}
 
-		for ( let i = 0; i !== nTracks; ++ i ) {
+// 		for ( let i = 0; i !== nTracks; ++ i ) {
 
-			const track = tracks[ i ],
-				trackName = track.name;
+// 			const track = tracks[ i ],
+// 				trackName = track.name;
 
-			let binding = bindingsByName[ trackName ];
+// 			let binding = bindingsByName[ trackName ];
 
-			if ( binding !== undefined ) {
+// 			if ( binding !== undefined ) {
 
-				++ binding.referenceCount;
-				bindings[ i ] = binding;
+// 				++ binding.referenceCount;
+// 				bindings[ i ] = binding;
 
-			} else {
+// 			} else {
 
-				binding = bindings[ i ];
+// 				binding = bindings[ i ];
 
-				if ( binding !== undefined ) {
+// 				if ( binding !== undefined ) {
 
-					// existing binding, make sure the cache knows
+// 					// existing binding, make sure the cache knows
 
-					if ( binding._cacheIndex === null ) {
+// 					if ( binding._cacheIndex === null ) {
 
-						++ binding.referenceCount;
-						this._addInactiveBinding( binding, rootUuid, trackName );
+// 						++ binding.referenceCount;
+// 						this._addInactiveBinding( binding, rootUuid, trackName );
 
-					}
+// 					}
 
-					continue;
+// 					continue;
 
-				}
+// 				}
 
-				const path = prototypeAction && prototypeAction.
-					_propertyBindings[ i ].binding.parsedPath;
+// 				const path = prototypeAction && prototypeAction.
+// 					_propertyBindings[ i ].binding.parsedPath;
 
-				binding = new PropertyMixer(
-					PropertyBinding.create( root, trackName, path ),
-					track.ValueTypeName, track.getValueSize() );
+// 				binding = new PropertyMixer(
+// 					PropertyBinding.create( root, trackName, path ),
+// 					track.ValueTypeName, track.getValueSize() );
 
-				++ binding.referenceCount;
-				this._addInactiveBinding( binding, rootUuid, trackName );
+// 				++ binding.referenceCount;
+// 				this._addInactiveBinding( binding, rootUuid, trackName );
 
-				bindings[ i ] = binding;
+// 				bindings[ i ] = binding;
 
-			}
+// 			}
 
-			interpolants[ i ].resultBuffer = binding.buffer;
+// 			interpolants[ i ].resultBuffer = binding.buffer;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_activateAction( action ) {
+// 	_activateAction( action ) {
 
-		if ( ! this._isActiveAction( action ) ) {
+// 		if ( ! this._isActiveAction( action ) ) {
 
-			if ( action._cacheIndex === null ) {
+// 			if ( action._cacheIndex === null ) {
 
-				// this action has been forgotten by the cache, but the user
-				// appears to be still using it -> rebind
+// 				// this action has been forgotten by the cache, but the user
+// 				// appears to be still using it -> rebind
 
-				const rootUuid = ( action._localRoot || this._root ).uuid,
-					clipUuid = action._clip.uuid,
-					actionsForClip = this._actionsByClip[ clipUuid ];
+// 				const rootUuid = ( action._localRoot || this._root ).uuid,
+// 					clipUuid = action._clip.uuid,
+// 					actionsForClip = this._actionsByClip[ clipUuid ];
 
-				this._bindAction( action,
-					actionsForClip && actionsForClip.knownActions[ 0 ] );
+// 				this._bindAction( action,
+// 					actionsForClip && actionsForClip.knownActions[ 0 ] );
 
-				this._addInactiveAction( action, clipUuid, rootUuid );
+// 				this._addInactiveAction( action, clipUuid, rootUuid );
 
-			}
+// 			}
 
-			const bindings = action._propertyBindings;
+// 			const bindings = action._propertyBindings;
 
-			// increment reference counts / sort out state
-			for ( let i = 0, n = bindings.length; i !== n; ++ i ) {
+// 			// increment reference counts / sort out state
+// 			for ( let i = 0, n = bindings.length; i !== n; ++ i ) {
 
-				const binding = bindings[ i ];
+// 				const binding = bindings[ i ];
 
-				if ( binding.useCount ++ === 0 ) {
+// 				if ( binding.useCount ++ === 0 ) {
 
-					this._lendBinding( binding );
-					binding.saveOriginalState();
+// 					this._lendBinding( binding );
+// 					binding.saveOriginalState();
 
-				}
+// 				}
 
-			}
+// 			}
 
-			this._lendAction( action );
+// 			this._lendAction( action );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_deactivateAction( action ) {
+// 	_deactivateAction( action ) {
 
-		if ( this._isActiveAction( action ) ) {
+// 		if ( this._isActiveAction( action ) ) {
 
-			const bindings = action._propertyBindings;
+// 			const bindings = action._propertyBindings;
 
-			// decrement reference counts / sort out state
-			for ( let i = 0, n = bindings.length; i !== n; ++ i ) {
+// 			// decrement reference counts / sort out state
+// 			for ( let i = 0, n = bindings.length; i !== n; ++ i ) {
 
-				const binding = bindings[ i ];
+// 				const binding = bindings[ i ];
 
-				if ( -- binding.useCount === 0 ) {
+// 				if ( -- binding.useCount === 0 ) {
 
-					binding.restoreOriginalState();
-					this._takeBackBinding( binding );
+// 					binding.restoreOriginalState();
+// 					this._takeBackBinding( binding );
 
-				}
+// 				}
 
-			}
+// 			}
 
-			this._takeBackAction( action );
+// 			this._takeBackAction( action );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// Memory manager
+// 	// Memory manager
 
-	_initMemoryManager() {
+// 	_initMemoryManager() {
 
-		this._actions = []; // 'nActiveActions' followed by inactive ones
-		this._nActiveActions = 0;
+// 		this._actions = []; // 'nActiveActions' followed by inactive ones
+// 		this._nActiveActions = 0;
 
-		this._actionsByClip = {};
-		// inside:
-		// {
-		// 	knownActions: Array< AnimationAction > - used as prototypes
-		// 	actionByRoot: AnimationAction - lookup
-		// }
+// 		this._actionsByClip = {};
+// 		// inside:
+// 		// {
+// 		// 	knownActions: Array< AnimationAction > - used as prototypes
+// 		// 	actionByRoot: AnimationAction - lookup
+// 		// }
 
 
-		this._bindings = []; // 'nActiveBindings' followed by inactive ones
-		this._nActiveBindings = 0;
+// 		this._bindings = []; // 'nActiveBindings' followed by inactive ones
+// 		this._nActiveBindings = 0;
 
-		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
+// 		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
 
 
-		this._controlInterpolants = []; // same game as above
-		this._nActiveControlInterpolants = 0;
+// 		this._controlInterpolants = []; // same game as above
+// 		this._nActiveControlInterpolants = 0;
 
-		const scope = this;
+// 		const scope = this;
 
-		this.stats = {
+// 		this.stats = {
 
-			actions: {
-				get total() {
+// 			actions: {
+// 				get total() {
 
-					return scope._actions.length;
+// 					return scope._actions.length;
 
-				},
-				get inUse() {
+// 				},
+// 				get inUse() {
 
-					return scope._nActiveActions;
+// 					return scope._nActiveActions;
 
-				}
-			},
-			bindings: {
-				get total() {
+// 				}
+// 			},
+// 			bindings: {
+// 				get total() {
 
-					return scope._bindings.length;
+// 					return scope._bindings.length;
 
-				},
-				get inUse() {
+// 				},
+// 				get inUse() {
 
-					return scope._nActiveBindings;
+// 					return scope._nActiveBindings;
 
-				}
-			},
-			controlInterpolants: {
-				get total() {
+// 				}
+// 			},
+// 			controlInterpolants: {
+// 				get total() {
 
-					return scope._controlInterpolants.length;
+// 					return scope._controlInterpolants.length;
 
-				},
-				get inUse() {
+// 				},
+// 				get inUse() {
 
-					return scope._nActiveControlInterpolants;
+// 					return scope._nActiveControlInterpolants;
 
-				}
-			}
+// 				}
+// 			}
 
-		};
+// 		};
 
-	}
+// 	}
 
-	// Memory management for AnimationAction objects
+// 	// Memory management for AnimationAction objects
 
-	_isActiveAction( action ) {
+// 	_isActiveAction( action ) {
 
-		const index = action._cacheIndex;
-		return index !== null && index < this._nActiveActions;
+// 		const index = action._cacheIndex;
+// 		return index !== null && index < this._nActiveActions;
 
-	}
+// 	}
 
-	_addInactiveAction( action, clipUuid, rootUuid ) {
+// 	_addInactiveAction( action, clipUuid, rootUuid ) {
 
-		const actions = this._actions,
-			actionsByClip = this._actionsByClip;
+// 		const actions = this._actions,
+// 			actionsByClip = this._actionsByClip;
 
-		let actionsForClip = actionsByClip[ clipUuid ];
+// 		let actionsForClip = actionsByClip[ clipUuid ];
 
-		if ( actionsForClip === undefined ) {
+// 		if ( actionsForClip === undefined ) {
 
-			actionsForClip = {
+// 			actionsForClip = {
 
-				knownActions: [ action ],
-				actionByRoot: {}
+// 				knownActions: [ action ],
+// 				actionByRoot: {}
 
-			};
+// 			};
 
-			action._byClipCacheIndex = 0;
+// 			action._byClipCacheIndex = 0;
 
-			actionsByClip[ clipUuid ] = actionsForClip;
+// 			actionsByClip[ clipUuid ] = actionsForClip;
 
-		} else {
+// 		} else {
 
-			const knownActions = actionsForClip.knownActions;
+// 			const knownActions = actionsForClip.knownActions;
 
-			action._byClipCacheIndex = knownActions.length;
-			knownActions.push( action );
+// 			action._byClipCacheIndex = knownActions.length;
+// 			knownActions.push( action );
 
-		}
+// 		}
 
-		action._cacheIndex = actions.length;
-		actions.push( action );
+// 		action._cacheIndex = actions.length;
+// 		actions.push( action );
 
-		actionsForClip.actionByRoot[ rootUuid ] = action;
+// 		actionsForClip.actionByRoot[ rootUuid ] = action;
 
-	}
+// 	}
 
-	_removeInactiveAction( action ) {
+// 	_removeInactiveAction( action ) {
 
-		const actions = this._actions,
-			lastInactiveAction = actions[ actions.length - 1 ],
-			cacheIndex = action._cacheIndex;
+// 		const actions = this._actions,
+// 			lastInactiveAction = actions[ actions.length - 1 ],
+// 			cacheIndex = action._cacheIndex;
 
-		lastInactiveAction._cacheIndex = cacheIndex;
-		actions[ cacheIndex ] = lastInactiveAction;
-		actions.pop();
+// 		lastInactiveAction._cacheIndex = cacheIndex;
+// 		actions[ cacheIndex ] = lastInactiveAction;
+// 		actions.pop();
 
-		action._cacheIndex = null;
+// 		action._cacheIndex = null;
 
 
-		const clipUuid = action._clip.uuid,
-			actionsByClip = this._actionsByClip,
-			actionsForClip = actionsByClip[ clipUuid ],
-			knownActionsForClip = actionsForClip.knownActions,
+// 		const clipUuid = action._clip.uuid,
+// 			actionsByClip = this._actionsByClip,
+// 			actionsForClip = actionsByClip[ clipUuid ],
+// 			knownActionsForClip = actionsForClip.knownActions,
 
-			lastKnownAction =
-				knownActionsForClip[ knownActionsForClip.length - 1 ],
+// 			lastKnownAction =
+// 				knownActionsForClip[ knownActionsForClip.length - 1 ],
 
-			byClipCacheIndex = action._byClipCacheIndex;
+// 			byClipCacheIndex = action._byClipCacheIndex;
 
-		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
-		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
-		knownActionsForClip.pop();
+// 		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
+// 		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
+// 		knownActionsForClip.pop();
 
-		action._byClipCacheIndex = null;
+// 		action._byClipCacheIndex = null;
 
 
-		const actionByRoot = actionsForClip.actionByRoot,
-			rootUuid = ( action._localRoot || this._root ).uuid;
+// 		const actionByRoot = actionsForClip.actionByRoot,
+// 			rootUuid = ( action._localRoot || this._root ).uuid;
 
-		delete actionByRoot[ rootUuid ];
+// 		delete actionByRoot[ rootUuid ];
 
-		if ( knownActionsForClip.length === 0 ) {
+// 		if ( knownActionsForClip.length === 0 ) {
 
-			delete actionsByClip[ clipUuid ];
+// 			delete actionsByClip[ clipUuid ];
 
-		}
+// 		}
 
-		this._removeInactiveBindingsForAction( action );
+// 		this._removeInactiveBindingsForAction( action );
 
-	}
+// 	}
 
-	_removeInactiveBindingsForAction( action ) {
+// 	_removeInactiveBindingsForAction( action ) {
 
-		const bindings = action._propertyBindings;
+// 		const bindings = action._propertyBindings;
 
-		for ( let i = 0, n = bindings.length; i !== n; ++ i ) {
+// 		for ( let i = 0, n = bindings.length; i !== n; ++ i ) {
 
-			const binding = bindings[ i ];
+// 			const binding = bindings[ i ];
 
-			if ( -- binding.referenceCount === 0 ) {
+// 			if ( -- binding.referenceCount === 0 ) {
 
-				this._removeInactiveBinding( binding );
+// 				this._removeInactiveBinding( binding );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_lendAction( action ) {
+// 	_lendAction( action ) {
 
-		// [ active actions |  inactive actions  ]
-		// [  active actions >| inactive actions ]
-		//                 s        a
-		//                  <-swap->
-		//                 a        s
+// 		// [ active actions |  inactive actions  ]
+// 		// [  active actions >| inactive actions ]
+// 		//                 s        a
+// 		//                  <-swap->
+// 		//                 a        s
 
-		const actions = this._actions,
-			prevIndex = action._cacheIndex,
+// 		const actions = this._actions,
+// 			prevIndex = action._cacheIndex,
 
-			lastActiveIndex = this._nActiveActions ++,
+// 			lastActiveIndex = this._nActiveActions ++,
 
-			firstInactiveAction = actions[ lastActiveIndex ];
+// 			firstInactiveAction = actions[ lastActiveIndex ];
 
-		action._cacheIndex = lastActiveIndex;
-		actions[ lastActiveIndex ] = action;
+// 		action._cacheIndex = lastActiveIndex;
+// 		actions[ lastActiveIndex ] = action;
 
-		firstInactiveAction._cacheIndex = prevIndex;
-		actions[ prevIndex ] = firstInactiveAction;
+// 		firstInactiveAction._cacheIndex = prevIndex;
+// 		actions[ prevIndex ] = firstInactiveAction;
 
-	}
+// 	}
 
-	_takeBackAction( action ) {
+// 	_takeBackAction( action ) {
 
-		// [  active actions  | inactive actions ]
-		// [ active actions |< inactive actions  ]
-		//        a        s
-		//         <-swap->
-		//        s        a
+// 		// [  active actions  | inactive actions ]
+// 		// [ active actions |< inactive actions  ]
+// 		//        a        s
+// 		//         <-swap->
+// 		//        s        a
 
-		const actions = this._actions,
-			prevIndex = action._cacheIndex,
+// 		const actions = this._actions,
+// 			prevIndex = action._cacheIndex,
 
-			firstInactiveIndex = -- this._nActiveActions,
+// 			firstInactiveIndex = -- this._nActiveActions,
 
-			lastActiveAction = actions[ firstInactiveIndex ];
+// 			lastActiveAction = actions[ firstInactiveIndex ];
 
-		action._cacheIndex = firstInactiveIndex;
-		actions[ firstInactiveIndex ] = action;
+// 		action._cacheIndex = firstInactiveIndex;
+// 		actions[ firstInactiveIndex ] = action;
 
-		lastActiveAction._cacheIndex = prevIndex;
-		actions[ prevIndex ] = lastActiveAction;
+// 		lastActiveAction._cacheIndex = prevIndex;
+// 		actions[ prevIndex ] = lastActiveAction;
 
-	}
+// 	}
 
-	// Memory management for PropertyMixer objects
+// 	// Memory management for PropertyMixer objects
 
-	_addInactiveBinding( binding, rootUuid, trackName ) {
+// 	_addInactiveBinding( binding, rootUuid, trackName ) {
 
-		const bindingsByRoot = this._bindingsByRootAndName,
-			bindings = this._bindings;
+// 		const bindingsByRoot = this._bindingsByRootAndName,
+// 			bindings = this._bindings;
 
-		let bindingByName = bindingsByRoot[ rootUuid ];
+// 		let bindingByName = bindingsByRoot[ rootUuid ];
 
-		if ( bindingByName === undefined ) {
+// 		if ( bindingByName === undefined ) {
 
-			bindingByName = {};
-			bindingsByRoot[ rootUuid ] = bindingByName;
+// 			bindingByName = {};
+// 			bindingsByRoot[ rootUuid ] = bindingByName;
 
-		}
+// 		}
 
-		bindingByName[ trackName ] = binding;
+// 		bindingByName[ trackName ] = binding;
 
-		binding._cacheIndex = bindings.length;
-		bindings.push( binding );
+// 		binding._cacheIndex = bindings.length;
+// 		bindings.push( binding );
 
-	}
+// 	}
 
-	_removeInactiveBinding( binding ) {
+// 	_removeInactiveBinding( binding ) {
 
-		const bindings = this._bindings,
-			propBinding = binding.binding,
-			rootUuid = propBinding.rootNode.uuid,
-			trackName = propBinding.path,
-			bindingsByRoot = this._bindingsByRootAndName,
-			bindingByName = bindingsByRoot[ rootUuid ],
+// 		const bindings = this._bindings,
+// 			propBinding = binding.binding,
+// 			rootUuid = propBinding.rootNode.uuid,
+// 			trackName = propBinding.path,
+// 			bindingsByRoot = this._bindingsByRootAndName,
+// 			bindingByName = bindingsByRoot[ rootUuid ],
 
-			lastInactiveBinding = bindings[ bindings.length - 1 ],
-			cacheIndex = binding._cacheIndex;
+// 			lastInactiveBinding = bindings[ bindings.length - 1 ],
+// 			cacheIndex = binding._cacheIndex;
 
-		lastInactiveBinding._cacheIndex = cacheIndex;
-		bindings[ cacheIndex ] = lastInactiveBinding;
-		bindings.pop();
+// 		lastInactiveBinding._cacheIndex = cacheIndex;
+// 		bindings[ cacheIndex ] = lastInactiveBinding;
+// 		bindings.pop();
 
-		delete bindingByName[ trackName ];
+// 		delete bindingByName[ trackName ];
 
-		if ( Object.keys( bindingByName ).length === 0 ) {
+// 		if ( Object.keys( bindingByName ).length === 0 ) {
 
-			delete bindingsByRoot[ rootUuid ];
+// 			delete bindingsByRoot[ rootUuid ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	_lendBinding( binding ) {
+// 	_lendBinding( binding ) {
 
-		const bindings = this._bindings,
-			prevIndex = binding._cacheIndex,
+// 		const bindings = this._bindings,
+// 			prevIndex = binding._cacheIndex,
 
-			lastActiveIndex = this._nActiveBindings ++,
+// 			lastActiveIndex = this._nActiveBindings ++,
 
-			firstInactiveBinding = bindings[ lastActiveIndex ];
+// 			firstInactiveBinding = bindings[ lastActiveIndex ];
 
-		binding._cacheIndex = lastActiveIndex;
-		bindings[ lastActiveIndex ] = binding;
+// 		binding._cacheIndex = lastActiveIndex;
+// 		bindings[ lastActiveIndex ] = binding;
 
-		firstInactiveBinding._cacheIndex = prevIndex;
-		bindings[ prevIndex ] = firstInactiveBinding;
+// 		firstInactiveBinding._cacheIndex = prevIndex;
+// 		bindings[ prevIndex ] = firstInactiveBinding;
 
-	}
+// 	}
 
-	_takeBackBinding( binding ) {
+// 	_takeBackBinding( binding ) {
 
-		const bindings = this._bindings,
-			prevIndex = binding._cacheIndex,
+// 		const bindings = this._bindings,
+// 			prevIndex = binding._cacheIndex,
 
-			firstInactiveIndex = -- this._nActiveBindings,
+// 			firstInactiveIndex = -- this._nActiveBindings,
 
-			lastActiveBinding = bindings[ firstInactiveIndex ];
+// 			lastActiveBinding = bindings[ firstInactiveIndex ];
 
-		binding._cacheIndex = firstInactiveIndex;
-		bindings[ firstInactiveIndex ] = binding;
+// 		binding._cacheIndex = firstInactiveIndex;
+// 		bindings[ firstInactiveIndex ] = binding;
 
-		lastActiveBinding._cacheIndex = prevIndex;
-		bindings[ prevIndex ] = lastActiveBinding;
+// 		lastActiveBinding._cacheIndex = prevIndex;
+// 		bindings[ prevIndex ] = lastActiveBinding;
 
-	}
+// 	}
 
 
-	// Memory management of Interpolants for weight and time scale
+// 	// Memory management of Interpolants for weight and time scale
 
-	_lendControlInterpolant() {
+// 	_lendControlInterpolant() {
 
-		const interpolants = this._controlInterpolants,
-			lastActiveIndex = this._nActiveControlInterpolants ++;
+// 		const interpolants = this._controlInterpolants,
+// 			lastActiveIndex = this._nActiveControlInterpolants ++;
 
-		let interpolant = interpolants[ lastActiveIndex ];
+// 		let interpolant = interpolants[ lastActiveIndex ];
 
-		if ( interpolant === undefined ) {
+// 		if ( interpolant === undefined ) {
 
-			interpolant = new LinearInterpolant(
-				new Float32Array( 2 ), new Float32Array( 2 ),
-				1, _controlInterpolantsResultBuffer );
+// 			interpolant = new LinearInterpolant(
+// 				new Float32Array( 2 ), new Float32Array( 2 ),
+// 				1, _controlInterpolantsResultBuffer );
 
-			interpolant.__cacheIndex = lastActiveIndex;
-			interpolants[ lastActiveIndex ] = interpolant;
+// 			interpolant.__cacheIndex = lastActiveIndex;
+// 			interpolants[ lastActiveIndex ] = interpolant;
 
-		}
+// 		}
 
-		return interpolant;
+// 		return interpolant;
 
-	}
+// 	}
 
-	_takeBackControlInterpolant( interpolant ) {
+// 	_takeBackControlInterpolant( interpolant ) {
 
-		const interpolants = this._controlInterpolants,
-			prevIndex = interpolant.__cacheIndex,
+// 		const interpolants = this._controlInterpolants,
+// 			prevIndex = interpolant.__cacheIndex,
 
-			firstInactiveIndex = -- this._nActiveControlInterpolants,
+// 			firstInactiveIndex = -- this._nActiveControlInterpolants,
 
-			lastActiveInterpolant = interpolants[ firstInactiveIndex ];
+// 			lastActiveInterpolant = interpolants[ firstInactiveIndex ];
 
-		interpolant.__cacheIndex = firstInactiveIndex;
-		interpolants[ firstInactiveIndex ] = interpolant;
+// 		interpolant.__cacheIndex = firstInactiveIndex;
+// 		interpolants[ firstInactiveIndex ] = interpolant;
 
-		lastActiveInterpolant.__cacheIndex = prevIndex;
-		interpolants[ prevIndex ] = lastActiveInterpolant;
+// 		lastActiveInterpolant.__cacheIndex = prevIndex;
+// 		interpolants[ prevIndex ] = lastActiveInterpolant;
 
-	}
+// 	}
 
-	// return an action for a clip optionally using a custom root target
-	// object (this method allocates a lot of dynamic memory in case a
-	// previously unknown clip/root combination is specified)
-	clipAction( clip, optionalRoot, blendMode ) {
+// 	// return an action for a clip optionally using a custom root target
+// 	// object (this method allocates a lot of dynamic memory in case a
+// 	// previously unknown clip/root combination is specified)
+// 	clipAction( clip, optionalRoot, blendMode ) {
 
-		const root = optionalRoot || this._root,
-			rootUuid = root.uuid;
+// 		const root = optionalRoot || this._root,
+// 			rootUuid = root.uuid;
 
-		let clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;
+// 		let clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;
 
-		const clipUuid = clipObject !== null ? clipObject.uuid : clip;
+// 		const clipUuid = clipObject !== null ? clipObject.uuid : clip;
 
-		const actionsForClip = this._actionsByClip[ clipUuid ];
-		let prototypeAction = null;
+// 		const actionsForClip = this._actionsByClip[ clipUuid ];
+// 		let prototypeAction = null;
 
-		if ( blendMode === undefined ) {
+// 		if ( blendMode === undefined ) {
 
-			if ( clipObject !== null ) {
+// 			if ( clipObject !== null ) {
 
-				blendMode = clipObject.blendMode;
+// 				blendMode = clipObject.blendMode;
 
-			} else {
+// 			} else {
 
-				blendMode = NormalAnimationBlendMode;
+// 				blendMode = NormalAnimationBlendMode;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		if ( actionsForClip !== undefined ) {
+// 		if ( actionsForClip !== undefined ) {
 
-			const existingAction = actionsForClip.actionByRoot[ rootUuid ];
+// 			const existingAction = actionsForClip.actionByRoot[ rootUuid ];
 
-			if ( existingAction !== undefined && existingAction.blendMode === blendMode ) {
+// 			if ( existingAction !== undefined && existingAction.blendMode === blendMode ) {
 
-				return existingAction;
+// 				return existingAction;
 
-			}
+// 			}
 
-			// we know the clip, so we don't have to parse all
-			// the bindings again but can just copy
-			prototypeAction = actionsForClip.knownActions[ 0 ];
+// 			// we know the clip, so we don't have to parse all
+// 			// the bindings again but can just copy
+// 			prototypeAction = actionsForClip.knownActions[ 0 ];
 
-			// also, take the clip from the prototype action
-			if ( clipObject === null )
-				clipObject = prototypeAction._clip;
+// 			// also, take the clip from the prototype action
+// 			if ( clipObject === null )
+// 				clipObject = prototypeAction._clip;
 
-		}
+// 		}
 
-		// clip must be known when specified via string
-		if ( clipObject === null ) return null;
+// 		// clip must be known when specified via string
+// 		if ( clipObject === null ) return null;
 
-		// allocate all resources required to run it
-		const newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );
+// 		// allocate all resources required to run it
+// 		const newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );
 
-		this._bindAction( newAction, prototypeAction );
+// 		this._bindAction( newAction, prototypeAction );
 
-		// and make the action known to the memory manager
-		this._addInactiveAction( newAction, clipUuid, rootUuid );
+// 		// and make the action known to the memory manager
+// 		this._addInactiveAction( newAction, clipUuid, rootUuid );
 
-		return newAction;
+// 		return newAction;
 
-	}
+// 	}
 
-	// get an existing action
-	existingAction( clip, optionalRoot ) {
+// 	// get an existing action
+// 	existingAction( clip, optionalRoot ) {
 
-		const root = optionalRoot || this._root,
-			rootUuid = root.uuid,
+// 		const root = optionalRoot || this._root,
+// 			rootUuid = root.uuid,
 
-			clipObject = typeof clip === 'string' ?
-				AnimationClip.findByName( root, clip ) : clip,
+// 			clipObject = typeof clip === 'string' ?
+// 				AnimationClip.findByName( root, clip ) : clip,
 
-			clipUuid = clipObject ? clipObject.uuid : clip,
+// 			clipUuid = clipObject ? clipObject.uuid : clip,
 
-			actionsForClip = this._actionsByClip[ clipUuid ];
+// 			actionsForClip = this._actionsByClip[ clipUuid ];
 
-		if ( actionsForClip !== undefined ) {
+// 		if ( actionsForClip !== undefined ) {
 
-			return actionsForClip.actionByRoot[ rootUuid ] || null;
+// 			return actionsForClip.actionByRoot[ rootUuid ] || null;
 
-		}
+// 		}
 
-		return null;
+// 		return null;
 
-	}
+// 	}
 
-	// deactivates all previously scheduled actions
-	stopAllAction() {
+// 	// deactivates all previously scheduled actions
+// 	stopAllAction() {
 
-		const actions = this._actions,
-			nActions = this._nActiveActions;
+// 		const actions = this._actions,
+// 			nActions = this._nActiveActions;
 
-		for ( let i = nActions - 1; i >= 0; -- i ) {
+// 		for ( let i = nActions - 1; i >= 0; -- i ) {
 
-			actions[ i ].stop();
+// 			actions[ i ].stop();
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// advance the time and update apply the animation
-	update( deltaTime ) {
+// 	// advance the time and update apply the animation
+// 	update( deltaTime ) {
 
-		deltaTime *= this.timeScale;
+// 		deltaTime *= this.timeScale;
 
-		const actions = this._actions,
-			nActions = this._nActiveActions,
+// 		const actions = this._actions,
+// 			nActions = this._nActiveActions,
 
-			time = this.time += deltaTime,
-			timeDirection = Math.sign( deltaTime ),
+// 			time = this.time += deltaTime,
+// 			timeDirection = Math.sign( deltaTime ),
 
-			accuIndex = this._accuIndex ^= 1;
+// 			accuIndex = this._accuIndex ^= 1;
 
-		// run active actions
+// 		// run active actions
 
-		for ( let i = 0; i !== nActions; ++ i ) {
+// 		for ( let i = 0; i !== nActions; ++ i ) {
 
-			const action = actions[ i ];
+// 			const action = actions[ i ];
 
-			action._update( time, deltaTime, timeDirection, accuIndex );
+// 			action._update( time, deltaTime, timeDirection, accuIndex );
 
-		}
+// 		}
 
-		// update scene graph
+// 		// update scene graph
 
-		const bindings = this._bindings,
-			nBindings = this._nActiveBindings;
+// 		const bindings = this._bindings,
+// 			nBindings = this._nActiveBindings;
 
-		for ( let i = 0; i !== nBindings; ++ i ) {
+// 		for ( let i = 0; i !== nBindings; ++ i ) {
 
-			bindings[ i ].apply( accuIndex );
+// 			bindings[ i ].apply( accuIndex );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// Allows you to seek to a specific time in an animation.
-	setTime( timeInSeconds ) {
+// 	// Allows you to seek to a specific time in an animation.
+// 	setTime( timeInSeconds ) {
 
-		this.time = 0; // Zero out time attribute for AnimationMixer object;
-		for ( let i = 0; i < this._actions.length; i ++ ) {
+// 		this.time = 0; // Zero out time attribute for AnimationMixer object;
+// 		for ( let i = 0; i < this._actions.length; i ++ ) {
 
-			this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.
+// 			this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.
 
-		}
+// 		}
 
-		return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.
+// 		return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.
 
-	}
+// 	}
 
-	// return this mixer's root target object
-	getRoot() {
+// 	// return this mixer's root target object
+// 	getRoot() {
 
-		return this._root;
+// 		return this._root;
 
-	}
+// 	}
 
-	// free all resources specific to a particular clip
-	uncacheClip( clip ) {
+// 	// free all resources specific to a particular clip
+// 	uncacheClip( clip ) {
 
-		const actions = this._actions,
-			clipUuid = clip.uuid,
-			actionsByClip = this._actionsByClip,
-			actionsForClip = actionsByClip[ clipUuid ];
+// 		const actions = this._actions,
+// 			clipUuid = clip.uuid,
+// 			actionsByClip = this._actionsByClip,
+// 			actionsForClip = actionsByClip[ clipUuid ];
 
-		if ( actionsForClip !== undefined ) {
+// 		if ( actionsForClip !== undefined ) {
 
-			// note: just calling _removeInactiveAction would mess up the
-			// iteration state and also require updating the state we can
-			// just throw away
+// 			// note: just calling _removeInactiveAction would mess up the
+// 			// iteration state and also require updating the state we can
+// 			// just throw away
 
-			const actionsToRemove = actionsForClip.knownActions;
+// 			const actionsToRemove = actionsForClip.knownActions;
 
-			for ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {
+// 			for ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {
 
-				const action = actionsToRemove[ i ];
+// 				const action = actionsToRemove[ i ];
 
-				this._deactivateAction( action );
+// 				this._deactivateAction( action );
 
-				const cacheIndex = action._cacheIndex,
-					lastInactiveAction = actions[ actions.length - 1 ];
+// 				const cacheIndex = action._cacheIndex,
+// 					lastInactiveAction = actions[ actions.length - 1 ];
 
-				action._cacheIndex = null;
-				action._byClipCacheIndex = null;
+// 				action._cacheIndex = null;
+// 				action._byClipCacheIndex = null;
 
-				lastInactiveAction._cacheIndex = cacheIndex;
-				actions[ cacheIndex ] = lastInactiveAction;
-				actions.pop();
+// 				lastInactiveAction._cacheIndex = cacheIndex;
+// 				actions[ cacheIndex ] = lastInactiveAction;
+// 				actions.pop();
 
-				this._removeInactiveBindingsForAction( action );
+// 				this._removeInactiveBindingsForAction( action );
 
-			}
+// 			}
 
-			delete actionsByClip[ clipUuid ];
+// 			delete actionsByClip[ clipUuid ];
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// free all resources specific to a particular root target object
-	uncacheRoot( root ) {
+// 	// free all resources specific to a particular root target object
+// 	uncacheRoot( root ) {
 
-		const rootUuid = root.uuid,
-			actionsByClip = this._actionsByClip;
+// 		const rootUuid = root.uuid,
+// 			actionsByClip = this._actionsByClip;
 
-		for ( const clipUuid in actionsByClip ) {
+// 		for ( const clipUuid in actionsByClip ) {
 
-			const actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
-				action = actionByRoot[ rootUuid ];
+// 			const actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
+// 				action = actionByRoot[ rootUuid ];
 
-			if ( action !== undefined ) {
+// 			if ( action !== undefined ) {
 
-				this._deactivateAction( action );
-				this._removeInactiveAction( action );
+// 				this._deactivateAction( action );
+// 				this._removeInactiveAction( action );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const bindingsByRoot = this._bindingsByRootAndName,
-			bindingByName = bindingsByRoot[ rootUuid ];
+// 		const bindingsByRoot = this._bindingsByRootAndName,
+// 			bindingByName = bindingsByRoot[ rootUuid ];
 
-		if ( bindingByName !== undefined ) {
+// 		if ( bindingByName !== undefined ) {
 
-			for ( const trackName in bindingByName ) {
+// 			for ( const trackName in bindingByName ) {
 
-				const binding = bindingByName[ trackName ];
-				binding.restoreOriginalState();
-				this._removeInactiveBinding( binding );
+// 				const binding = bindingByName[ trackName ];
+// 				binding.restoreOriginalState();
+// 				this._removeInactiveBinding( binding );
 
-			}
+// 			}
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// remove a targeted clip from the cache
-	uncacheAction( clip, optionalRoot ) {
+// 	// remove a targeted clip from the cache
+// 	uncacheAction( clip, optionalRoot ) {
 
-		const action = this.existingAction( clip, optionalRoot );
+// 		const action = this.existingAction( clip, optionalRoot );
 
-		if ( action !== null ) {
+// 		if ( action !== null ) {
 
-			this._deactivateAction( action );
-			this._removeInactiveAction( action );
+// 			this._deactivateAction( action );
+// 			this._removeInactiveAction( action );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-class Uniform {
+// class Uniform {
 
-	constructor( value ) {
+// 	constructor( value ) {
 
-		this.value = value;
+// 		this.value = value;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );
+// 		return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );
 
-	}
+// 	}
 
-}
+// }
 
-let id = 0;
+// let id = 0;
 
-class UniformsGroup extends EventDispatcher {
+// class UniformsGroup extends EventDispatcher {
 
-	constructor() {
+// 	constructor() {
 
-		super();
+// 		super();
 
-		this.isUniformsGroup = true;
+// 		this.isUniformsGroup = true;
 
-		Object.defineProperty( this, 'id', { value: id ++ } );
+// 		Object.defineProperty( this, 'id', { value: id ++ } );
 
-		this.name = '';
+// 		this.name = '';
 
-		this.usage = StaticDrawUsage;
-		this.uniforms = [];
+// 		this.usage = StaticDrawUsage;
+// 		this.uniforms = [];
 
-	}
+// 	}
 
-	add( uniform ) {
+// 	add( uniform ) {
 
-		this.uniforms.push( uniform );
+// 		this.uniforms.push( uniform );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	remove( uniform ) {
+// 	remove( uniform ) {
 
-		const index = this.uniforms.indexOf( uniform );
+// 		const index = this.uniforms.indexOf( uniform );
 
-		if ( index !== - 1 ) this.uniforms.splice( index, 1 );
+// 		if ( index !== - 1 ) this.uniforms.splice( index, 1 );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setName( name ) {
+// 	setName( name ) {
 
-		this.name = name;
+// 		this.name = name;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setUsage( value ) {
+// 	setUsage( value ) {
 
-		this.usage = value;
+// 		this.usage = value;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.dispatchEvent( { type: 'dispose' } );
+// 		this.dispatchEvent( { type: 'dispose' } );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		this.name = source.name;
-		this.usage = source.usage;
+// 		this.name = source.name;
+// 		this.usage = source.usage;
 
-		const uniformsSource = source.uniforms;
+// 		const uniformsSource = source.uniforms;
 
-		this.uniforms.length = 0;
+// 		this.uniforms.length = 0;
 
-		for ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {
 
-			this.uniforms.push( uniformsSource[ i ].clone() );
+// 			this.uniforms.push( uniformsSource[ i ].clone() );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-class InstancedInterleavedBuffer extends InterleavedBuffer {
+// class InstancedInterleavedBuffer extends InterleavedBuffer {
 
-	constructor( array, stride, meshPerAttribute = 1 ) {
+// 	constructor( array, stride, meshPerAttribute = 1 ) {
 
-		super( array, stride );
+// 		super( array, stride );
 
-		this.isInstancedInterleavedBuffer = true;
+// 		this.isInstancedInterleavedBuffer = true;
 
-		this.meshPerAttribute = meshPerAttribute;
+// 		this.meshPerAttribute = meshPerAttribute;
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source );
+// 		super.copy( source );
 
-		this.meshPerAttribute = source.meshPerAttribute;
+// 		this.meshPerAttribute = source.meshPerAttribute;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone( data ) {
+// 	clone( data ) {
 
-		const ib = super.clone( data );
+// 		const ib = super.clone( data );
 
-		ib.meshPerAttribute = this.meshPerAttribute;
+// 		ib.meshPerAttribute = this.meshPerAttribute;
 
-		return ib;
+// 		return ib;
 
-	}
+// 	}
 
-	toJSON( data ) {
+// 	toJSON( data ) {
 
-		const json = super.toJSON( data );
+// 		const json = super.toJSON( data );
 
-		json.isInstancedInterleavedBuffer = true;
-		json.meshPerAttribute = this.meshPerAttribute;
+// 		json.isInstancedInterleavedBuffer = true;
+// 		json.meshPerAttribute = this.meshPerAttribute;
 
-		return json;
+// 		return json;
 
-	}
+// 	}
 
-}
+// }
 
-class GLBufferAttribute {
+// class GLBufferAttribute {
 
-	constructor( buffer, type, itemSize, elementSize, count ) {
+// 	constructor( buffer, type, itemSize, elementSize, count ) {
 
-		this.isGLBufferAttribute = true;
+// 		this.isGLBufferAttribute = true;
 
-		this.buffer = buffer;
-		this.type = type;
-		this.itemSize = itemSize;
-		this.elementSize = elementSize;
-		this.count = count;
+// 		this.buffer = buffer;
+// 		this.type = type;
+// 		this.itemSize = itemSize;
+// 		this.elementSize = elementSize;
+// 		this.count = count;
 
-		this.version = 0;
+// 		this.version = 0;
 
-	}
+// 	}
 
-	set needsUpdate( value ) {
+// 	set needsUpdate( value ) {
 
-		if ( value === true ) this.version ++;
+// 		if ( value === true ) this.version ++;
 
-	}
+// 	}
 
-	setBuffer( buffer ) {
+// 	setBuffer( buffer ) {
 
-		this.buffer = buffer;
+// 		this.buffer = buffer;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setType( type, elementSize ) {
+// 	setType( type, elementSize ) {
 
-		this.type = type;
-		this.elementSize = elementSize;
+// 		this.type = type;
+// 		this.elementSize = elementSize;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setItemSize( itemSize ) {
+// 	setItemSize( itemSize ) {
 
-		this.itemSize = itemSize;
+// 		this.itemSize = itemSize;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setCount( count ) {
+// 	setCount( count ) {
 
-		this.count = count;
+// 		this.count = count;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-}
+// }
 
-class Raycaster {
+// class Raycaster {
 
-	constructor( origin, direction, near = 0, far = Infinity ) {
+// 	constructor( origin, direction, near = 0, far = Infinity ) {
 
-		this.ray = new Ray( origin, direction );
-		// direction is assumed to be normalized (for accurate distance calculations)
+// 		this.ray = new Ray( origin, direction );
+// 		// direction is assumed to be normalized (for accurate distance calculations)
 
-		this.near = near;
-		this.far = far;
-		this.camera = null;
-		this.layers = new Layers();
+// 		this.near = near;
+// 		this.far = far;
+// 		this.camera = null;
+// 		this.layers = new Layers();
 
-		this.params = {
-			Mesh: {},
-			Line: { threshold: 1 },
-			LOD: {},
-			Points: { threshold: 1 },
-			Sprite: {}
-		};
+// 		this.params = {
+// 			Mesh: {},
+// 			Line: { threshold: 1 },
+// 			LOD: {},
+// 			Points: { threshold: 1 },
+// 			Sprite: {}
+// 		};
 
-	}
+// 	}
 
-	set( origin, direction ) {
+// 	set( origin, direction ) {
 
-		// direction is assumed to be normalized (for accurate distance calculations)
+// 		// direction is assumed to be normalized (for accurate distance calculations)
 
-		this.ray.set( origin, direction );
+// 		this.ray.set( origin, direction );
 
-	}
+// 	}
 
-	setFromCamera( coords, camera ) {
+// 	setFromCamera( coords, camera ) {
 
-		if ( camera.isPerspectiveCamera ) {
+// 		if ( camera.isPerspectiveCamera ) {
 
-			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
-			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
-			this.camera = camera;
+// 			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
+// 			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
+// 			this.camera = camera;
 
-		} else if ( camera.isOrthographicCamera ) {
+// 		} else if ( camera.isOrthographicCamera ) {
 
-			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
-			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
-			this.camera = camera;
+// 			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
+// 			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
+// 			this.camera = camera;
 
-		} else {
+// 		} else {
 
-			console.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );
+// 			console.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	intersectObject( object, recursive = true, intersects = [] ) {
+// 	intersectObject( object, recursive = true, intersects = [] ) {
 
-		intersectObject( object, this, intersects, recursive );
+// 		intersectObject( object, this, intersects, recursive );
 
-		intersects.sort( ascSort );
+// 		intersects.sort( ascSort );
 
-		return intersects;
+// 		return intersects;
 
-	}
+// 	}
 
-	intersectObjects( objects, recursive = true, intersects = [] ) {
+// 	intersectObjects( objects, recursive = true, intersects = [] ) {
 
-		for ( let i = 0, l = objects.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = objects.length; i < l; i ++ ) {
 
-			intersectObject( objects[ i ], this, intersects, recursive );
+// 			intersectObject( objects[ i ], this, intersects, recursive );
 
-		}
+// 		}
 
-		intersects.sort( ascSort );
+// 		intersects.sort( ascSort );
 
-		return intersects;
+// 		return intersects;
 
-	}
+// 	}
 
-}
+// }
 
-function ascSort( a, b ) {
+// function ascSort( a, b ) {
 
-	return a.distance - b.distance;
+// 	return a.distance - b.distance;
 
-}
+// }
 
-function intersectObject( object, raycaster, intersects, recursive ) {
+// function intersectObject( object, raycaster, intersects, recursive ) {
 
-	if ( object.layers.test( raycaster.layers ) ) {
+// 	if ( object.layers.test( raycaster.layers ) ) {
 
-		object.raycast( raycaster, intersects );
+// 		object.raycast( raycaster, intersects );
 
-	}
+// 	}
 
-	if ( recursive === true ) {
+// 	if ( recursive === true ) {
 
-		const children = object.children;
+// 		const children = object.children;
 
-		for ( let i = 0, l = children.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = children.length; i < l; i ++ ) {
 
-			intersectObject( children[ i ], raycaster, intersects, true );
+// 			intersectObject( children[ i ], raycaster, intersects, true );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
- *
- * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
- * The azimuthal angle (theta) is measured from the positive z-axis.
- */
+// /**
+//  * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
+//  *
+//  * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
+//  * The azimuthal angle (theta) is measured from the positive z-axis.
+//  */
 
-class Spherical {
+// class Spherical {
 
-	constructor( radius = 1, phi = 0, theta = 0 ) {
+// 	constructor( radius = 1, phi = 0, theta = 0 ) {
 
-		this.radius = radius;
-		this.phi = phi; // polar angle
-		this.theta = theta; // azimuthal angle
+// 		this.radius = radius;
+// 		this.phi = phi; // polar angle
+// 		this.theta = theta; // azimuthal angle
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	set( radius, phi, theta ) {
+// 	set( radius, phi, theta ) {
 
-		this.radius = radius;
-		this.phi = phi;
-		this.theta = theta;
+// 		this.radius = radius;
+// 		this.phi = phi;
+// 		this.theta = theta;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( other ) {
+// 	copy( other ) {
 
-		this.radius = other.radius;
-		this.phi = other.phi;
-		this.theta = other.theta;
+// 		this.radius = other.radius;
+// 		this.phi = other.phi;
+// 		this.theta = other.theta;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	// restrict phi to be between EPS and PI-EPS
-	makeSafe() {
+// 	// restrict phi to be between EPS and PI-EPS
+// 	makeSafe() {
 
-		const EPS = 0.000001;
-		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );
+// 		const EPS = 0.000001;
+// 		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromVector3( v ) {
+// 	setFromVector3( v ) {
 
-		return this.setFromCartesianCoords( v.x, v.y, v.z );
+// 		return this.setFromCartesianCoords( v.x, v.y, v.z );
 
-	}
+// 	}
 
-	setFromCartesianCoords( x, y, z ) {
+// 	setFromCartesianCoords( x, y, z ) {
 
-		this.radius = Math.sqrt( x * x + y * y + z * z );
+// 		this.radius = Math.sqrt( x * x + y * y + z * z );
 
-		if ( this.radius === 0 ) {
+// 		if ( this.radius === 0 ) {
 
-			this.theta = 0;
-			this.phi = 0;
+// 			this.theta = 0;
+// 			this.phi = 0;
 
-		} else {
+// 		} else {
 
-			this.theta = Math.atan2( x, z );
-			this.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );
+// 			this.theta = Math.atan2( x, z );
+// 			this.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-/**
- * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
- */
+// /**
+//  * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
+//  */
 
-class Cylindrical {
+// class Cylindrical {
 
-	constructor( radius = 1, theta = 0, y = 0 ) {
+// 	constructor( radius = 1, theta = 0, y = 0 ) {
 
-		this.radius = radius; // distance from the origin to a point in the x-z plane
-		this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
-		this.y = y; // height above the x-z plane
+// 		this.radius = radius; // distance from the origin to a point in the x-z plane
+// 		this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
+// 		this.y = y; // height above the x-z plane
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	set( radius, theta, y ) {
+// 	set( radius, theta, y ) {
 
-		this.radius = radius;
-		this.theta = theta;
-		this.y = y;
+// 		this.radius = radius;
+// 		this.theta = theta;
+// 		this.y = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( other ) {
+// 	copy( other ) {
 
-		this.radius = other.radius;
-		this.theta = other.theta;
-		this.y = other.y;
+// 		this.radius = other.radius;
+// 		this.theta = other.theta;
+// 		this.y = other.y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromVector3( v ) {
+// 	setFromVector3( v ) {
 
-		return this.setFromCartesianCoords( v.x, v.y, v.z );
+// 		return this.setFromCartesianCoords( v.x, v.y, v.z );
 
-	}
+// 	}
 
-	setFromCartesianCoords( x, y, z ) {
+// 	setFromCartesianCoords( x, y, z ) {
 
-		this.radius = Math.sqrt( x * x + z * z );
-		this.theta = Math.atan2( x, z );
-		this.y = y;
+// 		this.radius = Math.sqrt( x * x + z * z );
+// 		this.theta = Math.atan2( x, z );
+// 		this.y = y;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-const _vector$4 = /*@__PURE__*/ new Vector2();
+// const _vector$4 = /*@__PURE__*/ new Vector2();
 
-class Box2 {
+// class Box2 {
 
-	constructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {
+// 	constructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {
 
-		this.isBox2 = true;
+// 		this.isBox2 = true;
 
-		this.min = min;
-		this.max = max;
+// 		this.min = min;
+// 		this.max = max;
 
-	}
+// 	}
 
-	set( min, max ) {
+// 	set( min, max ) {
 
-		this.min.copy( min );
-		this.max.copy( max );
+// 		this.min.copy( min );
+// 		this.max.copy( max );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromPoints( points ) {
+// 	setFromPoints( points ) {
 
-		this.makeEmpty();
+// 		this.makeEmpty();
 
-		for ( let i = 0, il = points.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = points.length; i < il; i ++ ) {
 
-			this.expandByPoint( points[ i ] );
+// 			this.expandByPoint( points[ i ] );
 
-		}
+// 		}
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	setFromCenterAndSize( center, size ) {
+// 	setFromCenterAndSize( center, size ) {
 
-		const halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );
-		this.min.copy( center ).sub( halfSize );
-		this.max.copy( center ).add( halfSize );
+// 		const halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );
+// 		this.min.copy( center ).sub( halfSize );
+// 		this.max.copy( center ).add( halfSize );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-	copy( box ) {
+// 	copy( box ) {
 
-		this.min.copy( box.min );
-		this.max.copy( box.max );
+// 		this.min.copy( box.min );
+// 		this.max.copy( box.max );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	makeEmpty() {
+// 	makeEmpty() {
 
-		this.min.x = this.min.y = + Infinity;
-		this.max.x = this.max.y = - Infinity;
+// 		this.min.x = this.min.y = + Infinity;
+// 		this.max.x = this.max.y = - Infinity;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	isEmpty() {
+// 	isEmpty() {
 
-		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
+// 		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
 
-		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
+// 		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
 
-	}
+// 	}
 
-	getCenter( target ) {
+// 	getCenter( target ) {
 
-		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
+// 		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
 
-	}
+// 	}
 
-	getSize( target ) {
+// 	getSize( target ) {
 
-		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );
+// 		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );
 
-	}
+// 	}
 
-	expandByPoint( point ) {
+// 	expandByPoint( point ) {
 
-		this.min.min( point );
-		this.max.max( point );
+// 		this.min.min( point );
+// 		this.max.max( point );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	expandByVector( vector ) {
+// 	expandByVector( vector ) {
 
-		this.min.sub( vector );
-		this.max.add( vector );
+// 		this.min.sub( vector );
+// 		this.max.add( vector );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	expandByScalar( scalar ) {
+// 	expandByScalar( scalar ) {
 
-		this.min.addScalar( - scalar );
-		this.max.addScalar( scalar );
+// 		this.min.addScalar( - scalar );
+// 		this.max.addScalar( scalar );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	containsPoint( point ) {
+// 	containsPoint( point ) {
 
-		return point.x < this.min.x || point.x > this.max.x ||
-			point.y < this.min.y || point.y > this.max.y ? false : true;
+// 		return point.x < this.min.x || point.x > this.max.x ||
+// 			point.y < this.min.y || point.y > this.max.y ? false : true;
 
-	}
+// 	}
 
-	containsBox( box ) {
+// 	containsBox( box ) {
 
-		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
-			this.min.y <= box.min.y && box.max.y <= this.max.y;
+// 		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
+// 			this.min.y <= box.min.y && box.max.y <= this.max.y;
 
-	}
+// 	}
 
-	getParameter( point, target ) {
+// 	getParameter( point, target ) {
 
-		// This can potentially have a divide by zero if the box
-		// has a size dimension of 0.
+// 		// This can potentially have a divide by zero if the box
+// 		// has a size dimension of 0.
 
-		return target.set(
-			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
-			( point.y - this.min.y ) / ( this.max.y - this.min.y )
-		);
+// 		return target.set(
+// 			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
+// 			( point.y - this.min.y ) / ( this.max.y - this.min.y )
+// 		);
 
-	}
+// 	}
 
-	intersectsBox( box ) {
+// 	intersectsBox( box ) {
 
-		// using 4 splitting planes to rule out intersections
+// 		// using 4 splitting planes to rule out intersections
 
-		return box.max.x < this.min.x || box.min.x > this.max.x ||
-			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
+// 		return box.max.x < this.min.x || box.min.x > this.max.x ||
+// 			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
 
-	}
+// 	}
 
-	clampPoint( point, target ) {
+// 	clampPoint( point, target ) {
 
-		return target.copy( point ).clamp( this.min, this.max );
+// 		return target.copy( point ).clamp( this.min, this.max );
 
-	}
+// 	}
 
-	distanceToPoint( point ) {
+// 	distanceToPoint( point ) {
 
-		const clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );
-		return clampedPoint.sub( point ).length();
+// 		const clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );
+// 		return clampedPoint.sub( point ).length();
 
-	}
+// 	}
 
-	intersect( box ) {
+// 	intersect( box ) {
 
-		this.min.max( box.min );
-		this.max.min( box.max );
+// 		this.min.max( box.min );
+// 		this.max.min( box.max );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	union( box ) {
+// 	union( box ) {
 
-		this.min.min( box.min );
-		this.max.max( box.max );
+// 		this.min.min( box.min );
+// 		this.max.max( box.max );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	translate( offset ) {
+// 	translate( offset ) {
 
-		this.min.add( offset );
-		this.max.add( offset );
+// 		this.min.add( offset );
+// 		this.max.add( offset );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( box ) {
+// 	equals( box ) {
 
-		return box.min.equals( this.min ) && box.max.equals( this.max );
+// 		return box.min.equals( this.min ) && box.max.equals( this.max );
 
-	}
+// 	}
 
-}
+// }
 
-const _startP = /*@__PURE__*/ new Vector3();
-const _startEnd = /*@__PURE__*/ new Vector3();
+// const _startP = /*@__PURE__*/ new Vector3();
+// const _startEnd = /*@__PURE__*/ new Vector3();
 
-class Line3 {
+// class Line3 {
 
-	constructor( start = new Vector3(), end = new Vector3() ) {
+// 	constructor( start = new Vector3(), end = new Vector3() ) {
 
-		this.start = start;
-		this.end = end;
+// 		this.start = start;
+// 		this.end = end;
 
-	}
+// 	}
 
-	set( start, end ) {
+// 	set( start, end ) {
 
-		this.start.copy( start );
-		this.end.copy( end );
+// 		this.start.copy( start );
+// 		this.end.copy( end );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( line ) {
+// 	copy( line ) {
 
-		this.start.copy( line.start );
-		this.end.copy( line.end );
+// 		this.start.copy( line.start );
+// 		this.end.copy( line.end );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	getCenter( target ) {
+// 	getCenter( target ) {
 
-		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
+// 		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
 
-	}
+// 	}
 
-	delta( target ) {
+// 	delta( target ) {
 
-		return target.subVectors( this.end, this.start );
+// 		return target.subVectors( this.end, this.start );
 
-	}
+// 	}
 
-	distanceSq() {
+// 	distanceSq() {
 
-		return this.start.distanceToSquared( this.end );
+// 		return this.start.distanceToSquared( this.end );
 
-	}
+// 	}
 
-	distance() {
+// 	distance() {
 
-		return this.start.distanceTo( this.end );
+// 		return this.start.distanceTo( this.end );
 
-	}
+// 	}
 
-	at( t, target ) {
+// 	at( t, target ) {
 
-		return this.delta( target ).multiplyScalar( t ).add( this.start );
+// 		return this.delta( target ).multiplyScalar( t ).add( this.start );
 
-	}
+// 	}
 
-	closestPointToPointParameter( point, clampToLine ) {
+// 	closestPointToPointParameter( point, clampToLine ) {
 
-		_startP.subVectors( point, this.start );
-		_startEnd.subVectors( this.end, this.start );
+// 		_startP.subVectors( point, this.start );
+// 		_startEnd.subVectors( this.end, this.start );
 
-		const startEnd2 = _startEnd.dot( _startEnd );
-		const startEnd_startP = _startEnd.dot( _startP );
+// 		const startEnd2 = _startEnd.dot( _startEnd );
+// 		const startEnd_startP = _startEnd.dot( _startP );
 
-		let t = startEnd_startP / startEnd2;
+// 		let t = startEnd_startP / startEnd2;
 
-		if ( clampToLine ) {
+// 		if ( clampToLine ) {
 
-			t = clamp( t, 0, 1 );
+// 			t = clamp( t, 0, 1 );
 
-		}
+// 		}
 
-		return t;
+// 		return t;
 
-	}
+// 	}
 
-	closestPointToPoint( point, clampToLine, target ) {
+// 	closestPointToPoint( point, clampToLine, target ) {
 
-		const t = this.closestPointToPointParameter( point, clampToLine );
+// 		const t = this.closestPointToPointParameter( point, clampToLine );
 
-		return this.delta( target ).multiplyScalar( t ).add( this.start );
+// 		return this.delta( target ).multiplyScalar( t ).add( this.start );
 
-	}
+// 	}
 
-	applyMatrix4( matrix ) {
+// 	applyMatrix4( matrix ) {
 
-		this.start.applyMatrix4( matrix );
-		this.end.applyMatrix4( matrix );
+// 		this.start.applyMatrix4( matrix );
+// 		this.end.applyMatrix4( matrix );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	equals( line ) {
+// 	equals( line ) {
 
-		return line.start.equals( this.start ) && line.end.equals( this.end );
+// 		return line.start.equals( this.start ) && line.end.equals( this.end );
 
-	}
+// 	}
 
-	clone() {
+// 	clone() {
 
-		return new this.constructor().copy( this );
+// 		return new this.constructor().copy( this );
 
-	}
+// 	}
 
-}
+// }
 
-const _vector$3 = /*@__PURE__*/ new Vector3();
+// const _vector$3 = /*@__PURE__*/ new Vector3();
 
-class SpotLightHelper extends Object3D {
+// class SpotLightHelper extends Object3D {
 
-	constructor( light, color ) {
+// 	constructor( light, color ) {
 
-		super();
+// 		super();
 
-		this.light = light;
-		this.light.updateMatrixWorld();
+// 		this.light = light;
+// 		this.light.updateMatrixWorld();
 
-		this.matrix = light.matrixWorld;
-		this.matrixAutoUpdate = false;
+// 		this.matrix = light.matrixWorld;
+// 		this.matrixAutoUpdate = false;
 
-		this.color = color;
+// 		this.color = color;
 
-		const geometry = new BufferGeometry();
+// 		const geometry = new BufferGeometry();
 
-		const positions = [
-			0, 0, 0, 	0, 0, 1,
-			0, 0, 0, 	1, 0, 1,
-			0, 0, 0,	- 1, 0, 1,
-			0, 0, 0, 	0, 1, 1,
-			0, 0, 0, 	0, - 1, 1
-		];
+// 		const positions = [
+// 			0, 0, 0, 	0, 0, 1,
+// 			0, 0, 0, 	1, 0, 1,
+// 			0, 0, 0,	- 1, 0, 1,
+// 			0, 0, 0, 	0, 1, 1,
+// 			0, 0, 0, 	0, - 1, 1
+// 		];
 
-		for ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {
+// 		for ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {
 
-			const p1 = ( i / l ) * Math.PI * 2;
-			const p2 = ( j / l ) * Math.PI * 2;
+// 			const p1 = ( i / l ) * Math.PI * 2;
+// 			const p2 = ( j / l ) * Math.PI * 2;
 
-			positions.push(
-				Math.cos( p1 ), Math.sin( p1 ), 1,
-				Math.cos( p2 ), Math.sin( p2 ), 1
-			);
+// 			positions.push(
+// 				Math.cos( p1 ), Math.sin( p1 ), 1,
+// 				Math.cos( p2 ), Math.sin( p2 ), 1
+// 			);
 
-		}
+// 		}
 
-		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
 
-		const material = new LineBasicMaterial( { fog: false, toneMapped: false } );
+// 		const material = new LineBasicMaterial( { fog: false, toneMapped: false } );
 
-		this.cone = new LineSegments( geometry, material );
-		this.add( this.cone );
+// 		this.cone = new LineSegments( geometry, material );
+// 		this.add( this.cone );
 
-		this.update();
+// 		this.update();
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.cone.geometry.dispose();
-		this.cone.material.dispose();
+// 		this.cone.geometry.dispose();
+// 		this.cone.material.dispose();
 
-	}
+// 	}
 
-	update() {
+// 	update() {
 
-		this.light.updateMatrixWorld();
+// 		this.light.updateMatrixWorld();
 
-		const coneLength = this.light.distance ? this.light.distance : 1000;
-		const coneWidth = coneLength * Math.tan( this.light.angle );
+// 		const coneLength = this.light.distance ? this.light.distance : 1000;
+// 		const coneWidth = coneLength * Math.tan( this.light.angle );
 
-		this.cone.scale.set( coneWidth, coneWidth, coneLength );
+// 		this.cone.scale.set( coneWidth, coneWidth, coneLength );
 
-		_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );
+// 		_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );
 
-		this.cone.lookAt( _vector$3 );
+// 		this.cone.lookAt( _vector$3 );
 
-		if ( this.color !== undefined ) {
+// 		if ( this.color !== undefined ) {
 
-			this.cone.material.color.set( this.color );
+// 			this.cone.material.color.set( this.color );
 
-		} else {
+// 		} else {
 
-			this.cone.material.color.copy( this.light.color );
+// 			this.cone.material.color.copy( this.light.color );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-const _vector$2 = /*@__PURE__*/ new Vector3();
-const _boneMatrix = /*@__PURE__*/ new Matrix4();
-const _matrixWorldInv = /*@__PURE__*/ new Matrix4();
+// const _vector$2 = /*@__PURE__*/ new Vector3();
+// const _boneMatrix = /*@__PURE__*/ new Matrix4();
+// const _matrixWorldInv = /*@__PURE__*/ new Matrix4();
 
 
-class SkeletonHelper extends LineSegments {
+// class SkeletonHelper extends LineSegments {
 
-	constructor( object ) {
+// 	constructor( object ) {
 
-		const bones = getBoneList( object );
+// 		const bones = getBoneList( object );
 
-		const geometry = new BufferGeometry();
+// 		const geometry = new BufferGeometry();
 
-		const vertices = [];
-		const colors = [];
+// 		const vertices = [];
+// 		const colors = [];
 
-		const color1 = new Color( 0, 0, 1 );
-		const color2 = new Color( 0, 1, 0 );
+// 		const color1 = new Color( 0, 0, 1 );
+// 		const color2 = new Color( 0, 1, 0 );
 
-		for ( let i = 0; i < bones.length; i ++ ) {
+// 		for ( let i = 0; i < bones.length; i ++ ) {
 
-			const bone = bones[ i ];
+// 			const bone = bones[ i ];
 
-			if ( bone.parent && bone.parent.isBone ) {
+// 			if ( bone.parent && bone.parent.isBone ) {
 
-				vertices.push( 0, 0, 0 );
-				vertices.push( 0, 0, 0 );
-				colors.push( color1.r, color1.g, color1.b );
-				colors.push( color2.r, color2.g, color2.b );
+// 				vertices.push( 0, 0, 0 );
+// 				vertices.push( 0, 0, 0 );
+// 				colors.push( color1.r, color1.g, color1.b );
+// 				colors.push( color2.r, color2.g, color2.b );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
 
-		const material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );
+// 		const material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.isSkeletonHelper = true;
+// 		this.isSkeletonHelper = true;
 
-		this.type = 'SkeletonHelper';
+// 		this.type = 'SkeletonHelper';
 
-		this.root = object;
-		this.bones = bones;
+// 		this.root = object;
+// 		this.bones = bones;
 
-		this.matrix = object.matrixWorld;
-		this.matrixAutoUpdate = false;
+// 		this.matrix = object.matrixWorld;
+// 		this.matrixAutoUpdate = false;
 
-	}
+// 	}
 
-	updateMatrixWorld( force ) {
+// 	updateMatrixWorld( force ) {
 
-		const bones = this.bones;
+// 		const bones = this.bones;
 
-		const geometry = this.geometry;
-		const position = geometry.getAttribute( 'position' );
+// 		const geometry = this.geometry;
+// 		const position = geometry.getAttribute( 'position' );
 
-		_matrixWorldInv.copy( this.root.matrixWorld ).invert();
+// 		_matrixWorldInv.copy( this.root.matrixWorld ).invert();
 
-		for ( let i = 0, j = 0; i < bones.length; i ++ ) {
+// 		for ( let i = 0, j = 0; i < bones.length; i ++ ) {
 
-			const bone = bones[ i ];
+// 			const bone = bones[ i ];
 
-			if ( bone.parent && bone.parent.isBone ) {
+// 			if ( bone.parent && bone.parent.isBone ) {
 
-				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
-				_vector$2.setFromMatrixPosition( _boneMatrix );
-				position.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );
+// 				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
+// 				_vector$2.setFromMatrixPosition( _boneMatrix );
+// 				position.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );
 
-				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
-				_vector$2.setFromMatrixPosition( _boneMatrix );
-				position.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );
+// 				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
+// 				_vector$2.setFromMatrixPosition( _boneMatrix );
+// 				position.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );
 
-				j += 2;
+// 				j += 2;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		geometry.getAttribute( 'position' ).needsUpdate = true;
+// 		geometry.getAttribute( 'position' ).needsUpdate = true;
 
-		super.updateMatrixWorld( force );
+// 		super.updateMatrixWorld( force );
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
 
-function getBoneList( object ) {
+// function getBoneList( object ) {
 
-	const boneList = [];
+// 	const boneList = [];
 
-	if ( object.isBone === true ) {
+// 	if ( object.isBone === true ) {
 
-		boneList.push( object );
+// 		boneList.push( object );
 
-	}
+// 	}
 
-	for ( let i = 0; i < object.children.length; i ++ ) {
+// 	for ( let i = 0; i < object.children.length; i ++ ) {
 
-		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );
+// 		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );
 
-	}
+// 	}
 
-	return boneList;
+// 	return boneList;
 
-}
+// }
 
-class PointLightHelper extends Mesh {
+// class PointLightHelper extends Mesh {
 
-	constructor( light, sphereSize, color ) {
+// 	constructor( light, sphereSize, color ) {
 
-		const geometry = new SphereGeometry( sphereSize, 4, 2 );
-		const material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );
+// 		const geometry = new SphereGeometry( sphereSize, 4, 2 );
+// 		const material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.light = light;
-		this.light.updateMatrixWorld();
+// 		this.light = light;
+// 		this.light.updateMatrixWorld();
 
-		this.color = color;
+// 		this.color = color;
 
-		this.type = 'PointLightHelper';
+// 		this.type = 'PointLightHelper';
 
-		this.matrix = this.light.matrixWorld;
-		this.matrixAutoUpdate = false;
+// 		this.matrix = this.light.matrixWorld;
+// 		this.matrixAutoUpdate = false;
 
-		this.update();
+// 		this.update();
 
 
-		/*
-	// TODO: delete this comment?
-	const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
-	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
+// 		/*
+// 	// TODO: delete this comment?
+// 	const distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
+// 	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
 
-	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
-	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
+// 	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
+// 	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
 
-	const d = light.distance;
+// 	const d = light.distance;
 
-	if ( d === 0.0 ) {
+// 	if ( d === 0.0 ) {
 
-		this.lightDistance.visible = false;
+// 		this.lightDistance.visible = false;
 
-	} else {
+// 	} else {
 
-		this.lightDistance.scale.set( d, d, d );
+// 		this.lightDistance.scale.set( d, d, d );
 
-	}
+// 	}
 
-	this.add( this.lightDistance );
-	*/
+// 	this.add( this.lightDistance );
+// 	*/
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
 
-	}
+// 	}
 
-	update() {
+// 	update() {
 
-		if ( this.color !== undefined ) {
+// 		if ( this.color !== undefined ) {
 
-			this.material.color.set( this.color );
+// 			this.material.color.set( this.color );
 
-		} else {
+// 		} else {
 
-			this.material.color.copy( this.light.color );
+// 			this.material.color.copy( this.light.color );
 
-		}
+// 		}
 
-		/*
-		const d = this.light.distance;
+// 		/*
+// 		const d = this.light.distance;
 
-		if ( d === 0.0 ) {
+// 		if ( d === 0.0 ) {
 
-			this.lightDistance.visible = false;
+// 			this.lightDistance.visible = false;
 
-		} else {
+// 		} else {
 
-			this.lightDistance.visible = true;
-			this.lightDistance.scale.set( d, d, d );
+// 			this.lightDistance.visible = true;
+// 			this.lightDistance.scale.set( d, d, d );
 
-		}
-		*/
+// 		}
+// 		*/
 
-	}
+// 	}
 
-}
+// }
 
-const _vector$1 = /*@__PURE__*/ new Vector3();
-const _color1 = /*@__PURE__*/ new Color();
-const _color2 = /*@__PURE__*/ new Color();
+// const _vector$1 = /*@__PURE__*/ new Vector3();
+// const _color1 = /*@__PURE__*/ new Color();
+// const _color2 = /*@__PURE__*/ new Color();
 
-class HemisphereLightHelper extends Object3D {
+// class HemisphereLightHelper extends Object3D {
 
-	constructor( light, size, color ) {
+// 	constructor( light, size, color ) {
 
-		super();
+// 		super();
 
-		this.light = light;
-		this.light.updateMatrixWorld();
+// 		this.light = light;
+// 		this.light.updateMatrixWorld();
 
-		this.matrix = light.matrixWorld;
-		this.matrixAutoUpdate = false;
+// 		this.matrix = light.matrixWorld;
+// 		this.matrixAutoUpdate = false;
 
-		this.color = color;
+// 		this.color = color;
 
-		const geometry = new OctahedronGeometry( size );
-		geometry.rotateY( Math.PI * 0.5 );
+// 		const geometry = new OctahedronGeometry( size );
+// 		geometry.rotateY( Math.PI * 0.5 );
 
-		this.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );
-		if ( this.color === undefined ) this.material.vertexColors = true;
+// 		this.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );
+// 		if ( this.color === undefined ) this.material.vertexColors = true;
 
-		const position = geometry.getAttribute( 'position' );
-		const colors = new Float32Array( position.count * 3 );
+// 		const position = geometry.getAttribute( 'position' );
+// 		const colors = new Float32Array( position.count * 3 );
 
-		geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );
+// 		geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );
 
-		this.add( new Mesh( geometry, this.material ) );
+// 		this.add( new Mesh( geometry, this.material ) );
 
-		this.update();
+// 		this.update();
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.children[ 0 ].geometry.dispose();
-		this.children[ 0 ].material.dispose();
+// 		this.children[ 0 ].geometry.dispose();
+// 		this.children[ 0 ].material.dispose();
 
-	}
+// 	}
 
-	update() {
+// 	update() {
 
-		const mesh = this.children[ 0 ];
+// 		const mesh = this.children[ 0 ];
 
-		if ( this.color !== undefined ) {
+// 		if ( this.color !== undefined ) {
 
-			this.material.color.set( this.color );
+// 			this.material.color.set( this.color );
 
-		} else {
+// 		} else {
 
-			const colors = mesh.geometry.getAttribute( 'color' );
+// 			const colors = mesh.geometry.getAttribute( 'color' );
 
-			_color1.copy( this.light.color );
-			_color2.copy( this.light.groundColor );
+// 			_color1.copy( this.light.color );
+// 			_color2.copy( this.light.groundColor );
 
-			for ( let i = 0, l = colors.count; i < l; i ++ ) {
+// 			for ( let i = 0, l = colors.count; i < l; i ++ ) {
 
-				const color = ( i < ( l / 2 ) ) ? _color1 : _color2;
+// 				const color = ( i < ( l / 2 ) ) ? _color1 : _color2;
 
-				colors.setXYZ( i, color.r, color.g, color.b );
+// 				colors.setXYZ( i, color.r, color.g, color.b );
 
-			}
+// 			}
 
-			colors.needsUpdate = true;
+// 			colors.needsUpdate = true;
 
-		}
+// 		}
 
-		mesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );
+// 		mesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );
 
-	}
+// 	}
 
-}
+// }
 
-class GridHelper extends LineSegments {
+// class GridHelper extends LineSegments {
 
-	constructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {
+// 	constructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {
 
-		color1 = new Color( color1 );
-		color2 = new Color( color2 );
+// 		color1 = new Color( color1 );
+// 		color2 = new Color( color2 );
 
-		const center = divisions / 2;
-		const step = size / divisions;
-		const halfSize = size / 2;
+// 		const center = divisions / 2;
+// 		const step = size / divisions;
+// 		const halfSize = size / 2;
 
-		const vertices = [], colors = [];
+// 		const vertices = [], colors = [];
 
-		for ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {
+// 		for ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {
 
-			vertices.push( - halfSize, 0, k, halfSize, 0, k );
-			vertices.push( k, 0, - halfSize, k, 0, halfSize );
+// 			vertices.push( - halfSize, 0, k, halfSize, 0, k );
+// 			vertices.push( k, 0, - halfSize, k, 0, halfSize );
 
-			const color = i === center ? color1 : color2;
+// 			const color = i === center ? color1 : color2;
 
-			color.toArray( colors, j ); j += 3;
-			color.toArray( colors, j ); j += 3;
-			color.toArray( colors, j ); j += 3;
-			color.toArray( colors, j ); j += 3;
+// 			color.toArray( colors, j ); j += 3;
+// 			color.toArray( colors, j ); j += 3;
+// 			color.toArray( colors, j ); j += 3;
+// 			color.toArray( colors, j ); j += 3;
 
-		}
+// 		}
 
-		const geometry = new BufferGeometry();
-		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
+// 		const geometry = new BufferGeometry();
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
 
-		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );
+// 		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.type = 'GridHelper';
+// 		this.type = 'GridHelper';
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
-class PolarGridHelper extends LineSegments {
+// class PolarGridHelper extends LineSegments {
 
-	constructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {
+// 	constructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {
 
-		color1 = new Color( color1 );
-		color2 = new Color( color2 );
+// 		color1 = new Color( color1 );
+// 		color2 = new Color( color2 );
 
-		const vertices = [];
-		const colors = [];
+// 		const vertices = [];
+// 		const colors = [];
 
-		// create the sectors
+// 		// create the sectors
 
-		if ( sectors > 1 ) {
+// 		if ( sectors > 1 ) {
 
-			for ( let i = 0; i < sectors; i ++ ) {
+// 			for ( let i = 0; i < sectors; i ++ ) {
 
-				const v = ( i / sectors ) * ( Math.PI * 2 );
+// 				const v = ( i / sectors ) * ( Math.PI * 2 );
 
-				const x = Math.sin( v ) * radius;
-				const z = Math.cos( v ) * radius;
+// 				const x = Math.sin( v ) * radius;
+// 				const z = Math.cos( v ) * radius;
 
-				vertices.push( 0, 0, 0 );
-				vertices.push( x, 0, z );
+// 				vertices.push( 0, 0, 0 );
+// 				vertices.push( x, 0, z );
 
-				const color = ( i & 1 ) ? color1 : color2;
+// 				const color = ( i & 1 ) ? color1 : color2;
 
-				colors.push( color.r, color.g, color.b );
-				colors.push( color.r, color.g, color.b );
+// 				colors.push( color.r, color.g, color.b );
+// 				colors.push( color.r, color.g, color.b );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// create the rings
+// 		// create the rings
 
-		for ( let i = 0; i < rings; i ++ ) {
+// 		for ( let i = 0; i < rings; i ++ ) {
 
-			const color = ( i & 1 ) ? color1 : color2;
+// 			const color = ( i & 1 ) ? color1 : color2;
 
-			const r = radius - ( radius / rings * i );
+// 			const r = radius - ( radius / rings * i );
 
-			for ( let j = 0; j < divisions; j ++ ) {
+// 			for ( let j = 0; j < divisions; j ++ ) {
 
-				// first vertex
+// 				// first vertex
 
-				let v = ( j / divisions ) * ( Math.PI * 2 );
+// 				let v = ( j / divisions ) * ( Math.PI * 2 );
 
-				let x = Math.sin( v ) * r;
-				let z = Math.cos( v ) * r;
+// 				let x = Math.sin( v ) * r;
+// 				let z = Math.cos( v ) * r;
 
-				vertices.push( x, 0, z );
-				colors.push( color.r, color.g, color.b );
+// 				vertices.push( x, 0, z );
+// 				colors.push( color.r, color.g, color.b );
 
-				// second vertex
+// 				// second vertex
 
-				v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );
+// 				v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );
 
-				x = Math.sin( v ) * r;
-				z = Math.cos( v ) * r;
+// 				x = Math.sin( v ) * r;
+// 				z = Math.cos( v ) * r;
 
-				vertices.push( x, 0, z );
-				colors.push( color.r, color.g, color.b );
+// 				vertices.push( x, 0, z );
+// 				colors.push( color.r, color.g, color.b );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		const geometry = new BufferGeometry();
-		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
+// 		const geometry = new BufferGeometry();
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
 
-		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );
+// 		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.type = 'PolarGridHelper';
+// 		this.type = 'PolarGridHelper';
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
-const _v1 = /*@__PURE__*/ new Vector3();
-const _v2 = /*@__PURE__*/ new Vector3();
-const _v3 = /*@__PURE__*/ new Vector3();
+// const _v1 = /*@__PURE__*/ new Vector3();
+// const _v2 = /*@__PURE__*/ new Vector3();
+// const _v3 = /*@__PURE__*/ new Vector3();
 
-class DirectionalLightHelper extends Object3D {
+// class DirectionalLightHelper extends Object3D {
 
-	constructor( light, size, color ) {
+// 	constructor( light, size, color ) {
 
-		super();
+// 		super();
 
-		this.light = light;
-		this.light.updateMatrixWorld();
+// 		this.light = light;
+// 		this.light.updateMatrixWorld();
 
-		this.matrix = light.matrixWorld;
-		this.matrixAutoUpdate = false;
+// 		this.matrix = light.matrixWorld;
+// 		this.matrixAutoUpdate = false;
 
-		this.color = color;
+// 		this.color = color;
 
-		if ( size === undefined ) size = 1;
+// 		if ( size === undefined ) size = 1;
 
-		let geometry = new BufferGeometry();
-		geometry.setAttribute( 'position', new Float32BufferAttribute( [
-			- size, size, 0,
-			size, size, 0,
-			size, - size, 0,
-			- size, - size, 0,
-			- size, size, 0
-		], 3 ) );
+// 		let geometry = new BufferGeometry();
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( [
+// 			- size, size, 0,
+// 			size, size, 0,
+// 			size, - size, 0,
+// 			- size, - size, 0,
+// 			- size, size, 0
+// 		], 3 ) );
 
-		const material = new LineBasicMaterial( { fog: false, toneMapped: false } );
+// 		const material = new LineBasicMaterial( { fog: false, toneMapped: false } );
 
-		this.lightPlane = new Line( geometry, material );
-		this.add( this.lightPlane );
+// 		this.lightPlane = new Line( geometry, material );
+// 		this.add( this.lightPlane );
 
-		geometry = new BufferGeometry();
-		geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );
+// 		geometry = new BufferGeometry();
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );
 
-		this.targetLine = new Line( geometry, material );
-		this.add( this.targetLine );
+// 		this.targetLine = new Line( geometry, material );
+// 		this.add( this.targetLine );
 
-		this.update();
+// 		this.update();
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.lightPlane.geometry.dispose();
-		this.lightPlane.material.dispose();
-		this.targetLine.geometry.dispose();
-		this.targetLine.material.dispose();
+// 		this.lightPlane.geometry.dispose();
+// 		this.lightPlane.material.dispose();
+// 		this.targetLine.geometry.dispose();
+// 		this.targetLine.material.dispose();
 
-	}
+// 	}
 
-	update() {
+// 	update() {
 
-		_v1.setFromMatrixPosition( this.light.matrixWorld );
-		_v2.setFromMatrixPosition( this.light.target.matrixWorld );
-		_v3.subVectors( _v2, _v1 );
+// 		_v1.setFromMatrixPosition( this.light.matrixWorld );
+// 		_v2.setFromMatrixPosition( this.light.target.matrixWorld );
+// 		_v3.subVectors( _v2, _v1 );
 
-		this.lightPlane.lookAt( _v2 );
+// 		this.lightPlane.lookAt( _v2 );
 
-		if ( this.color !== undefined ) {
+// 		if ( this.color !== undefined ) {
 
-			this.lightPlane.material.color.set( this.color );
-			this.targetLine.material.color.set( this.color );
+// 			this.lightPlane.material.color.set( this.color );
+// 			this.targetLine.material.color.set( this.color );
 
-		} else {
+// 		} else {
 
-			this.lightPlane.material.color.copy( this.light.color );
-			this.targetLine.material.color.copy( this.light.color );
+// 			this.lightPlane.material.color.copy( this.light.color );
+// 			this.targetLine.material.color.copy( this.light.color );
 
-		}
+// 		}
 
-		this.targetLine.lookAt( _v2 );
-		this.targetLine.scale.z = _v3.length();
+// 		this.targetLine.lookAt( _v2 );
+// 		this.targetLine.scale.z = _v3.length();
 
-	}
+// 	}
 
-}
+// }
 
-const _vector = /*@__PURE__*/ new Vector3();
-const _camera = /*@__PURE__*/ new Camera();
+// const _vector = /*@__PURE__*/ new Vector3();
+// const _camera = /*@__PURE__*/ new Camera();
 
-/**
- *	- shows frustum, line of sight and up of the camera
- *	- suitable for fast updates
- * 	- based on frustum visualization in lightgl.js shadowmap example
- *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
- */
+// /**
+//  *	- shows frustum, line of sight and up of the camera
+//  *	- suitable for fast updates
+//  * 	- based on frustum visualization in lightgl.js shadowmap example
+//  *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
+//  */
 
-class CameraHelper extends LineSegments {
+// class CameraHelper extends LineSegments {
 
-	constructor( camera ) {
+// 	constructor( camera ) {
 
-		const geometry = new BufferGeometry();
-		const material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );
+// 		const geometry = new BufferGeometry();
+// 		const material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );
 
-		const vertices = [];
-		const colors = [];
+// 		const vertices = [];
+// 		const colors = [];
 
-		const pointMap = {};
+// 		const pointMap = {};
 
-		// near
+// 		// near
 
-		addLine( 'n1', 'n2' );
-		addLine( 'n2', 'n4' );
-		addLine( 'n4', 'n3' );
-		addLine( 'n3', 'n1' );
+// 		addLine( 'n1', 'n2' );
+// 		addLine( 'n2', 'n4' );
+// 		addLine( 'n4', 'n3' );
+// 		addLine( 'n3', 'n1' );
 
-		// far
+// 		// far
 
-		addLine( 'f1', 'f2' );
-		addLine( 'f2', 'f4' );
-		addLine( 'f4', 'f3' );
-		addLine( 'f3', 'f1' );
+// 		addLine( 'f1', 'f2' );
+// 		addLine( 'f2', 'f4' );
+// 		addLine( 'f4', 'f3' );
+// 		addLine( 'f3', 'f1' );
 
-		// sides
+// 		// sides
 
-		addLine( 'n1', 'f1' );
-		addLine( 'n2', 'f2' );
-		addLine( 'n3', 'f3' );
-		addLine( 'n4', 'f4' );
+// 		addLine( 'n1', 'f1' );
+// 		addLine( 'n2', 'f2' );
+// 		addLine( 'n3', 'f3' );
+// 		addLine( 'n4', 'f4' );
 
-		// cone
+// 		// cone
 
-		addLine( 'p', 'n1' );
-		addLine( 'p', 'n2' );
-		addLine( 'p', 'n3' );
-		addLine( 'p', 'n4' );
+// 		addLine( 'p', 'n1' );
+// 		addLine( 'p', 'n2' );
+// 		addLine( 'p', 'n3' );
+// 		addLine( 'p', 'n4' );
 
-		// up
+// 		// up
 
-		addLine( 'u1', 'u2' );
-		addLine( 'u2', 'u3' );
-		addLine( 'u3', 'u1' );
+// 		addLine( 'u1', 'u2' );
+// 		addLine( 'u2', 'u3' );
+// 		addLine( 'u3', 'u1' );
 
-		// target
+// 		// target
 
-		addLine( 'c', 't' );
-		addLine( 'p', 'c' );
+// 		addLine( 'c', 't' );
+// 		addLine( 'p', 'c' );
 
-		// cross
+// 		// cross
 
-		addLine( 'cn1', 'cn2' );
-		addLine( 'cn3', 'cn4' );
+// 		addLine( 'cn1', 'cn2' );
+// 		addLine( 'cn3', 'cn4' );
 
-		addLine( 'cf1', 'cf2' );
-		addLine( 'cf3', 'cf4' );
+// 		addLine( 'cf1', 'cf2' );
+// 		addLine( 'cf3', 'cf4' );
 
-		function addLine( a, b ) {
+// 		function addLine( a, b ) {
 
-			addPoint( a );
-			addPoint( b );
+// 			addPoint( a );
+// 			addPoint( b );
 
-		}
+// 		}
 
-		function addPoint( id ) {
+// 		function addPoint( id ) {
 
-			vertices.push( 0, 0, 0 );
-			colors.push( 0, 0, 0 );
+// 			vertices.push( 0, 0, 0 );
+// 			colors.push( 0, 0, 0 );
 
-			if ( pointMap[ id ] === undefined ) {
+// 			if ( pointMap[ id ] === undefined ) {
 
-				pointMap[ id ] = [];
+// 				pointMap[ id ] = [];
 
-			}
+// 			}
 
-			pointMap[ id ].push( ( vertices.length / 3 ) - 1 );
+// 			pointMap[ id ].push( ( vertices.length / 3 ) - 1 );
 
-		}
+// 		}
 
-		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.type = 'CameraHelper';
+// 		this.type = 'CameraHelper';
 
-		this.camera = camera;
-		if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();
+// 		this.camera = camera;
+// 		if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();
 
-		this.matrix = camera.matrixWorld;
-		this.matrixAutoUpdate = false;
+// 		this.matrix = camera.matrixWorld;
+// 		this.matrixAutoUpdate = false;
 
-		this.pointMap = pointMap;
+// 		this.pointMap = pointMap;
 
-		this.update();
+// 		this.update();
 
-		// colors
+// 		// colors
 
-		const colorFrustum = new Color( 0xffaa00 );
-		const colorCone = new Color( 0xff0000 );
-		const colorUp = new Color( 0x00aaff );
-		const colorTarget = new Color( 0xffffff );
-		const colorCross = new Color( 0x333333 );
+// 		const colorFrustum = new Color( 0xffaa00 );
+// 		const colorCone = new Color( 0xff0000 );
+// 		const colorUp = new Color( 0x00aaff );
+// 		const colorTarget = new Color( 0xffffff );
+// 		const colorCross = new Color( 0x333333 );
 
-		this.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );
+// 		this.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );
 
-	}
+// 	}
 
-	setColors( frustum, cone, up, target, cross ) {
+// 	setColors( frustum, cone, up, target, cross ) {
 
-		const geometry = this.geometry;
+// 		const geometry = this.geometry;
 
-		const colorAttribute = geometry.getAttribute( 'color' );
+// 		const colorAttribute = geometry.getAttribute( 'color' );
 
-		// near
+// 		// near
 
-		colorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2
-		colorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4
-		colorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3
-		colorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1
+// 		colorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2
+// 		colorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4
+// 		colorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3
+// 		colorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1
 
-		// far
+// 		// far
 
-		colorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2
-		colorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4
-		colorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3
-		colorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1
+// 		colorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2
+// 		colorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4
+// 		colorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3
+// 		colorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1
 
-		// sides
+// 		// sides
 
-		colorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1
-		colorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2
-		colorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3
-		colorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4
+// 		colorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1
+// 		colorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2
+// 		colorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3
+// 		colorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4
 
-		// cone
+// 		// cone
 
-		colorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1
-		colorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2
-		colorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3
-		colorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4
+// 		colorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1
+// 		colorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2
+// 		colorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3
+// 		colorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4
 
-		// up
+// 		// up
 
-		colorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2
-		colorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3
-		colorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1
+// 		colorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2
+// 		colorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3
+// 		colorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1
 
-		// target
+// 		// target
 
-		colorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t
-		colorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c
+// 		colorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t
+// 		colorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c
 
-		// cross
+// 		// cross
 
-		colorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2
-		colorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4
+// 		colorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2
+// 		colorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4
 
-		colorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2
-		colorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4
+// 		colorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2
+// 		colorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4
 
-		colorAttribute.needsUpdate = true;
+// 		colorAttribute.needsUpdate = true;
 
-	}
+// 	}
 
-	update() {
+// 	update() {
 
-		const geometry = this.geometry;
-		const pointMap = this.pointMap;
+// 		const geometry = this.geometry;
+// 		const pointMap = this.pointMap;
 
-		const w = 1, h = 1;
+// 		const w = 1, h = 1;
 
-		// we need just camera projection matrix inverse
-		// world matrix must be identity
+// 		// we need just camera projection matrix inverse
+// 		// world matrix must be identity
 
-		_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );
+// 		_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );
 
-		// center / target
+// 		// center / target
 
-		setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
-		setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );
+// 		setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
+// 		setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );
 
-		// near
+// 		// near
 
-		setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
-		setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
-		setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
-		setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );
+// 		setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
+// 		setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
+// 		setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
+// 		setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );
 
-		// far
+// 		// far
 
-		setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
-		setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
-		setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
-		setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );
+// 		setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
+// 		setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
+// 		setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
+// 		setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );
 
-		// up
+// 		// up
 
-		setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
-		setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
-		setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );
+// 		setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
+// 		setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
+// 		setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );
 
-		// cross
+// 		// cross
 
-		setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
-		setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
-		setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
-		setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );
+// 		setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
+// 		setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
+// 		setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
+// 		setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );
 
-		setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
-		setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
-		setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
-		setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );
+// 		setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
+// 		setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
+// 		setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
+// 		setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );
 
-		geometry.getAttribute( 'position' ).needsUpdate = true;
+// 		geometry.getAttribute( 'position' ).needsUpdate = true;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
 
-function setPoint( point, pointMap, geometry, camera, x, y, z ) {
+// function setPoint( point, pointMap, geometry, camera, x, y, z ) {
 
-	_vector.set( x, y, z ).unproject( camera );
+// 	_vector.set( x, y, z ).unproject( camera );
 
-	const points = pointMap[ point ];
+// 	const points = pointMap[ point ];
 
-	if ( points !== undefined ) {
+// 	if ( points !== undefined ) {
 
-		const position = geometry.getAttribute( 'position' );
+// 		const position = geometry.getAttribute( 'position' );
 
-		for ( let i = 0, l = points.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = points.length; i < l; i ++ ) {
 
-			position.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );
+// 			position.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );
 
-		}
+// 		}
 
-	}
+// 	}
 
-}
+// }
 
-const _box = /*@__PURE__*/ new Box3();
+// const _box = /*@__PURE__*/ new Box3();
 
-class BoxHelper extends LineSegments {
+// class BoxHelper extends LineSegments {
 
-	constructor( object, color = 0xffff00 ) {
+// 	constructor( object, color = 0xffff00 ) {
 
-		const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
-		const positions = new Float32Array( 8 * 3 );
+// 		const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
+// 		const positions = new Float32Array( 8 * 3 );
 
-		const geometry = new BufferGeometry();
-		geometry.setIndex( new BufferAttribute( indices, 1 ) );
-		geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );
+// 		const geometry = new BufferGeometry();
+// 		geometry.setIndex( new BufferAttribute( indices, 1 ) );
+// 		geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );
 
-		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
+// 		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
 
-		this.object = object;
-		this.type = 'BoxHelper';
+// 		this.object = object;
+// 		this.type = 'BoxHelper';
 
-		this.matrixAutoUpdate = false;
+// 		this.matrixAutoUpdate = false;
 
-		this.update();
+// 		this.update();
 
-	}
+// 	}
 
-	update( object ) {
+// 	update( object ) {
 
-		if ( object !== undefined ) {
+// 		if ( object !== undefined ) {
 
-			console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );
+// 			console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );
 
-		}
+// 		}
 
-		if ( this.object !== undefined ) {
+// 		if ( this.object !== undefined ) {
 
-			_box.setFromObject( this.object );
+// 			_box.setFromObject( this.object );
 
-		}
+// 		}
 
-		if ( _box.isEmpty() ) return;
+// 		if ( _box.isEmpty() ) return;
 
-		const min = _box.min;
-		const max = _box.max;
+// 		const min = _box.min;
+// 		const max = _box.max;
 
-		/*
-			5____4
-		1/___0/|
-		| 6__|_7
-		2/___3/
+// 		/*
+// 			5____4
+// 		1/___0/|
+// 		| 6__|_7
+// 		2/___3/
 
-		0: max.x, max.y, max.z
-		1: min.x, max.y, max.z
-		2: min.x, min.y, max.z
-		3: max.x, min.y, max.z
-		4: max.x, max.y, min.z
-		5: min.x, max.y, min.z
-		6: min.x, min.y, min.z
-		7: max.x, min.y, min.z
-		*/
+// 		0: max.x, max.y, max.z
+// 		1: min.x, max.y, max.z
+// 		2: min.x, min.y, max.z
+// 		3: max.x, min.y, max.z
+// 		4: max.x, max.y, min.z
+// 		5: min.x, max.y, min.z
+// 		6: min.x, min.y, min.z
+// 		7: max.x, min.y, min.z
+// 		*/
 
-		const position = this.geometry.attributes.position;
-		const array = position.array;
+// 		const position = this.geometry.attributes.position;
+// 		const array = position.array;
 
-		array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
-		array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
-		array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
-		array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
-		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
-		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
-		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
-		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
+// 		array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
+// 		array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
+// 		array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
+// 		array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
+// 		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
+// 		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
+// 		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
+// 		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
 
-		position.needsUpdate = true;
+// 		position.needsUpdate = true;
 
-		this.geometry.computeBoundingSphere();
+// 		this.geometry.computeBoundingSphere();
 
-	}
+// 	}
 
-	setFromObject( object ) {
+// 	setFromObject( object ) {
 
-		this.object = object;
-		this.update();
+// 		this.object = object;
+// 		this.update();
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	copy( source, recursive ) {
+// 	copy( source, recursive ) {
 
-		super.copy( source, recursive );
+// 		super.copy( source, recursive );
 
-		this.object = source.object;
+// 		this.object = source.object;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
-class Box3Helper extends LineSegments {
+// class Box3Helper extends LineSegments {
 
-	constructor( box, color = 0xffff00 ) {
+// 	constructor( box, color = 0xffff00 ) {
 
-		const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
+// 		const indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
 
-		const positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];
+// 		const positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];
 
-		const geometry = new BufferGeometry();
+// 		const geometry = new BufferGeometry();
 
-		geometry.setIndex( new BufferAttribute( indices, 1 ) );
+// 		geometry.setIndex( new BufferAttribute( indices, 1 ) );
 
-		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
 
-		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
+// 		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
 
-		this.box = box;
+// 		this.box = box;
 
-		this.type = 'Box3Helper';
+// 		this.type = 'Box3Helper';
 
-		this.geometry.computeBoundingSphere();
+// 		this.geometry.computeBoundingSphere();
 
-	}
+// 	}
 
-	updateMatrixWorld( force ) {
+// 	updateMatrixWorld( force ) {
 
-		const box = this.box;
+// 		const box = this.box;
 
-		if ( box.isEmpty() ) return;
+// 		if ( box.isEmpty() ) return;
 
-		box.getCenter( this.position );
+// 		box.getCenter( this.position );
 
-		box.getSize( this.scale );
+// 		box.getSize( this.scale );
 
-		this.scale.multiplyScalar( 0.5 );
+// 		this.scale.multiplyScalar( 0.5 );
 
-		super.updateMatrixWorld( force );
+// 		super.updateMatrixWorld( force );
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
-class PlaneHelper extends Line {
+// class PlaneHelper extends Line {
 
-	constructor( plane, size = 1, hex = 0xffff00 ) {
+// 	constructor( plane, size = 1, hex = 0xffff00 ) {
 
-		const color = hex;
+// 		const color = hex;
 
-		const positions = [ 1, - 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];
+// 		const positions = [ 1, - 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];
 
-		const geometry = new BufferGeometry();
-		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
-		geometry.computeBoundingSphere();
+// 		const geometry = new BufferGeometry();
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
+// 		geometry.computeBoundingSphere();
 
-		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
+// 		super( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
 
-		this.type = 'PlaneHelper';
+// 		this.type = 'PlaneHelper';
 
-		this.plane = plane;
+// 		this.plane = plane;
 
-		this.size = size;
+// 		this.size = size;
 
-		const positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];
+// 		const positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];
 
-		const geometry2 = new BufferGeometry();
-		geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
-		geometry2.computeBoundingSphere();
+// 		const geometry2 = new BufferGeometry();
+// 		geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
+// 		geometry2.computeBoundingSphere();
 
-		this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );
+// 		this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );
 
-	}
+// 	}
 
-	updateMatrixWorld( force ) {
+// 	updateMatrixWorld( force ) {
 
-		this.position.set( 0, 0, 0 );
+// 		this.position.set( 0, 0, 0 );
 
-		this.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );
+// 		this.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );
 
-		this.lookAt( this.plane.normal );
+// 		this.lookAt( this.plane.normal );
 
-		this.translateZ( - this.plane.constant );
+// 		this.translateZ( - this.plane.constant );
 
-		super.updateMatrixWorld( force );
+// 		super.updateMatrixWorld( force );
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
-		this.children[ 0 ].geometry.dispose();
-		this.children[ 0 ].material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
+// 		this.children[ 0 ].geometry.dispose();
+// 		this.children[ 0 ].material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
-const _axis = /*@__PURE__*/ new Vector3();
-let _lineGeometry, _coneGeometry;
+// const _axis = /*@__PURE__*/ new Vector3();
+// let _lineGeometry, _coneGeometry;
 
-class ArrowHelper extends Object3D {
+// class ArrowHelper extends Object3D {
 
-	// dir is assumed to be normalized
+// 	// dir is assumed to be normalized
 
-	constructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {
+// 	constructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {
 
-		super();
+// 		super();
 
-		this.type = 'ArrowHelper';
+// 		this.type = 'ArrowHelper';
 
-		if ( _lineGeometry === undefined ) {
+// 		if ( _lineGeometry === undefined ) {
 
-			_lineGeometry = new BufferGeometry();
-			_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );
+// 			_lineGeometry = new BufferGeometry();
+// 			_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );
 
-			_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );
-			_coneGeometry.translate( 0, - 0.5, 0 );
+// 			_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );
+// 			_coneGeometry.translate( 0, - 0.5, 0 );
 
-		}
+// 		}
 
-		this.position.copy( origin );
+// 		this.position.copy( origin );
 
-		this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
-		this.line.matrixAutoUpdate = false;
-		this.add( this.line );
+// 		this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );
+// 		this.line.matrixAutoUpdate = false;
+// 		this.add( this.line );
 
-		this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );
-		this.cone.matrixAutoUpdate = false;
-		this.add( this.cone );
+// 		this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );
+// 		this.cone.matrixAutoUpdate = false;
+// 		this.add( this.cone );
 
-		this.setDirection( dir );
-		this.setLength( length, headLength, headWidth );
+// 		this.setDirection( dir );
+// 		this.setLength( length, headLength, headWidth );
 
-	}
+// 	}
 
-	setDirection( dir ) {
+// 	setDirection( dir ) {
 
-		// dir is assumed to be normalized
+// 		// dir is assumed to be normalized
 
-		if ( dir.y > 0.99999 ) {
+// 		if ( dir.y > 0.99999 ) {
 
-			this.quaternion.set( 0, 0, 0, 1 );
+// 			this.quaternion.set( 0, 0, 0, 1 );
 
-		} else if ( dir.y < - 0.99999 ) {
+// 		} else if ( dir.y < - 0.99999 ) {
 
-			this.quaternion.set( 1, 0, 0, 0 );
+// 			this.quaternion.set( 1, 0, 0, 0 );
 
-		} else {
+// 		} else {
 
-			_axis.set( dir.z, 0, - dir.x ).normalize();
+// 			_axis.set( dir.z, 0, - dir.x ).normalize();
 
-			const radians = Math.acos( dir.y );
+// 			const radians = Math.acos( dir.y );
 
-			this.quaternion.setFromAxisAngle( _axis, radians );
+// 			this.quaternion.setFromAxisAngle( _axis, radians );
 
-		}
+// 		}
 
-	}
+// 	}
 
-	setLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {
+// 	setLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {
 
-		this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
-		this.line.updateMatrix();
+// 		this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
+// 		this.line.updateMatrix();
 
-		this.cone.scale.set( headWidth, headLength, headWidth );
-		this.cone.position.y = length;
-		this.cone.updateMatrix();
+// 		this.cone.scale.set( headWidth, headLength, headWidth );
+// 		this.cone.position.y = length;
+// 		this.cone.updateMatrix();
 
-	}
+// 	}
 
-	setColor( color ) {
+// 	setColor( color ) {
 
-		this.line.material.color.set( color );
-		this.cone.material.color.set( color );
+// 		this.line.material.color.set( color );
+// 		this.cone.material.color.set( color );
 
-	}
+// 	}
 
-	copy( source ) {
+// 	copy( source ) {
 
-		super.copy( source, false );
+// 		super.copy( source, false );
 
-		this.line.copy( source.line );
-		this.cone.copy( source.cone );
+// 		this.line.copy( source.line );
+// 		this.cone.copy( source.cone );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.line.geometry.dispose();
-		this.line.material.dispose();
-		this.cone.geometry.dispose();
-		this.cone.material.dispose();
+// 		this.line.geometry.dispose();
+// 		this.line.material.dispose();
+// 		this.cone.geometry.dispose();
+// 		this.cone.material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
-class AxesHelper extends LineSegments {
+// class AxesHelper extends LineSegments {
 
-	constructor( size = 1 ) {
+// 	constructor( size = 1 ) {
 
-		const vertices = [
-			0, 0, 0,	size, 0, 0,
-			0, 0, 0,	0, size, 0,
-			0, 0, 0,	0, 0, size
-		];
+// 		const vertices = [
+// 			0, 0, 0,	size, 0, 0,
+// 			0, 0, 0,	0, size, 0,
+// 			0, 0, 0,	0, 0, size
+// 		];
 
-		const colors = [
-			1, 0, 0,	1, 0.6, 0,
-			0, 1, 0,	0.6, 1, 0,
-			0, 0, 1,	0, 0.6, 1
-		];
+// 		const colors = [
+// 			1, 0, 0,	1, 0.6, 0,
+// 			0, 1, 0,	0.6, 1, 0,
+// 			0, 0, 1,	0, 0.6, 1
+// 		];
 
-		const geometry = new BufferGeometry();
-		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
-		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
+// 		const geometry = new BufferGeometry();
+// 		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+// 		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
 
-		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );
+// 		const material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );
 
-		super( geometry, material );
+// 		super( geometry, material );
 
-		this.type = 'AxesHelper';
+// 		this.type = 'AxesHelper';
 
-	}
+// 	}
 
-	setColors( xAxisColor, yAxisColor, zAxisColor ) {
+// 	setColors( xAxisColor, yAxisColor, zAxisColor ) {
 
-		const color = new Color();
-		const array = this.geometry.attributes.color.array;
+// 		const color = new Color();
+// 		const array = this.geometry.attributes.color.array;
 
-		color.set( xAxisColor );
-		color.toArray( array, 0 );
-		color.toArray( array, 3 );
+// 		color.set( xAxisColor );
+// 		color.toArray( array, 0 );
+// 		color.toArray( array, 3 );
 
-		color.set( yAxisColor );
-		color.toArray( array, 6 );
-		color.toArray( array, 9 );
+// 		color.set( yAxisColor );
+// 		color.toArray( array, 6 );
+// 		color.toArray( array, 9 );
 
-		color.set( zAxisColor );
-		color.toArray( array, 12 );
-		color.toArray( array, 15 );
+// 		color.set( zAxisColor );
+// 		color.toArray( array, 12 );
+// 		color.toArray( array, 15 );
 
-		this.geometry.attributes.color.needsUpdate = true;
+// 		this.geometry.attributes.color.needsUpdate = true;
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	dispose() {
+// 	dispose() {
 
-		this.geometry.dispose();
-		this.material.dispose();
+// 		this.geometry.dispose();
+// 		this.material.dispose();
 
-	}
+// 	}
 
-}
+// }
 
-class ShapePath {
+// class ShapePath {
 
-	constructor() {
+// 	constructor() {
 
-		this.type = 'ShapePath';
+// 		this.type = 'ShapePath';
 
-		this.color = new Color();
+// 		this.color = new Color();
 
-		this.subPaths = [];
-		this.currentPath = null;
+// 		this.subPaths = [];
+// 		this.currentPath = null;
 
-	}
+// 	}
 
-	moveTo( x, y ) {
+// 	moveTo( x, y ) {
 
-		this.currentPath = new Path();
-		this.subPaths.push( this.currentPath );
-		this.currentPath.moveTo( x, y );
+// 		this.currentPath = new Path();
+// 		this.subPaths.push( this.currentPath );
+// 		this.currentPath.moveTo( x, y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	lineTo( x, y ) {
+// 	lineTo( x, y ) {
 
-		this.currentPath.lineTo( x, y );
+// 		this.currentPath.lineTo( x, y );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	quadraticCurveTo( aCPx, aCPy, aX, aY ) {
+// 	quadraticCurveTo( aCPx, aCPy, aX, aY ) {
 
-		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
+// 		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
+// 	bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
 
-		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
+// 		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	splineThru( pts ) {
+// 	splineThru( pts ) {
 
-		this.currentPath.splineThru( pts );
+// 		this.currentPath.splineThru( pts );
 
-		return this;
+// 		return this;
 
-	}
+// 	}
 
-	toShapes( isCCW ) {
+// 	toShapes( isCCW ) {
 
-		function toShapesNoHoles( inSubpaths ) {
+// 		function toShapesNoHoles( inSubpaths ) {
 
-			const shapes = [];
+// 			const shapes = [];
 
-			for ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {
+// 			for ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {
 
-				const tmpPath = inSubpaths[ i ];
+// 				const tmpPath = inSubpaths[ i ];
 
-				const tmpShape = new Shape();
-				tmpShape.curves = tmpPath.curves;
+// 				const tmpShape = new Shape();
+// 				tmpShape.curves = tmpPath.curves;
 
-				shapes.push( tmpShape );
+// 				shapes.push( tmpShape );
 
-			}
+// 			}
 
-			return shapes;
+// 			return shapes;
 
-		}
+// 		}
 
-		function isPointInsidePolygon( inPt, inPolygon ) {
+// 		function isPointInsidePolygon( inPt, inPolygon ) {
 
-			const polyLen = inPolygon.length;
+// 			const polyLen = inPolygon.length;
 
-			// inPt on polygon contour => immediate success    or
-			// toggling of inside/outside at every single! intersection point of an edge
-			//  with the horizontal line through inPt, left of inPt
-			//  not counting lowerY endpoints of edges and whole edges on that line
-			let inside = false;
-			for ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
+// 			// inPt on polygon contour => immediate success    or
+// 			// toggling of inside/outside at every single! intersection point of an edge
+// 			//  with the horizontal line through inPt, left of inPt
+// 			//  not counting lowerY endpoints of edges and whole edges on that line
+// 			let inside = false;
+// 			for ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
 
-				let edgeLowPt = inPolygon[ p ];
-				let edgeHighPt = inPolygon[ q ];
+// 				let edgeLowPt = inPolygon[ p ];
+// 				let edgeHighPt = inPolygon[ q ];
 
-				let edgeDx = edgeHighPt.x - edgeLowPt.x;
-				let edgeDy = edgeHighPt.y - edgeLowPt.y;
+// 				let edgeDx = edgeHighPt.x - edgeLowPt.x;
+// 				let edgeDy = edgeHighPt.y - edgeLowPt.y;
 
-				if ( Math.abs( edgeDy ) > Number.EPSILON ) {
+// 				if ( Math.abs( edgeDy ) > Number.EPSILON ) {
 
-					// not parallel
-					if ( edgeDy < 0 ) {
+// 					// not parallel
+// 					if ( edgeDy < 0 ) {
 
-						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
-						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
+// 						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
+// 						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
 
-					}
+// 					}
 
-					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
+// 					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
 
-					if ( inPt.y === edgeLowPt.y ) {
+// 					if ( inPt.y === edgeLowPt.y ) {
 
-						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
-						// continue;				// no intersection or edgeLowPt => doesn't count !!!
+// 						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
+// 						// continue;				// no intersection or edgeLowPt => doesn't count !!!
 
-					} else {
+// 					} else {
 
-						const perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
-						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
-						if ( perpEdge < 0 ) 				continue;
-						inside = ! inside;		// true intersection left of inPt
+// 						const perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
+// 						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
+// 						if ( perpEdge < 0 ) 				continue;
+// 						inside = ! inside;		// true intersection left of inPt
 
-					}
+// 					}
 
-				} else {
+// 				} else {
 
-					// parallel or collinear
-					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
-					// edge lies on the same horizontal line as inPt
-					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
-						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
-					// continue;
+// 					// parallel or collinear
+// 					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
+// 					// edge lies on the same horizontal line as inPt
+// 					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
+// 						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
+// 					// continue;
 
-				}
+// 				}
 
-			}
+// 			}
 
-			return	inside;
+// 			return	inside;
 
-		}
+// 		}
 
-		const isClockWise = ShapeUtils.isClockWise;
+// 		const isClockWise = ShapeUtils.isClockWise;
 
-		const subPaths = this.subPaths;
-		if ( subPaths.length === 0 ) return [];
+// 		const subPaths = this.subPaths;
+// 		if ( subPaths.length === 0 ) return [];
 
-		let solid, tmpPath, tmpShape;
-		const shapes = [];
+// 		let solid, tmpPath, tmpShape;
+// 		const shapes = [];
 
-		if ( subPaths.length === 1 ) {
+// 		if ( subPaths.length === 1 ) {
 
-			tmpPath = subPaths[ 0 ];
-			tmpShape = new Shape();
-			tmpShape.curves = tmpPath.curves;
-			shapes.push( tmpShape );
-			return shapes;
+// 			tmpPath = subPaths[ 0 ];
+// 			tmpShape = new Shape();
+// 			tmpShape.curves = tmpPath.curves;
+// 			shapes.push( tmpShape );
+// 			return shapes;
 
-		}
+// 		}
 
-		let holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
-		holesFirst = isCCW ? ! holesFirst : holesFirst;
+// 		let holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
+// 		holesFirst = isCCW ? ! holesFirst : holesFirst;
 
-		// console.log("Holes first", holesFirst);
+// 		// console.log("Holes first", holesFirst);
 
-		const betterShapeHoles = [];
-		const newShapes = [];
-		let newShapeHoles = [];
-		let mainIdx = 0;
-		let tmpPoints;
+// 		const betterShapeHoles = [];
+// 		const newShapes = [];
+// 		let newShapeHoles = [];
+// 		let mainIdx = 0;
+// 		let tmpPoints;
 
-		newShapes[ mainIdx ] = undefined;
-		newShapeHoles[ mainIdx ] = [];
+// 		newShapes[ mainIdx ] = undefined;
+// 		newShapeHoles[ mainIdx ] = [];
 
-		for ( let i = 0, l = subPaths.length; i < l; i ++ ) {
+// 		for ( let i = 0, l = subPaths.length; i < l; i ++ ) {
 
-			tmpPath = subPaths[ i ];
-			tmpPoints = tmpPath.getPoints();
-			solid = isClockWise( tmpPoints );
-			solid = isCCW ? ! solid : solid;
+// 			tmpPath = subPaths[ i ];
+// 			tmpPoints = tmpPath.getPoints();
+// 			solid = isClockWise( tmpPoints );
+// 			solid = isCCW ? ! solid : solid;
 
-			if ( solid ) {
+// 			if ( solid ) {
 
-				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;
+// 				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;
 
-				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
-				newShapes[ mainIdx ].s.curves = tmpPath.curves;
+// 				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
+// 				newShapes[ mainIdx ].s.curves = tmpPath.curves;
 
-				if ( holesFirst )	mainIdx ++;
-				newShapeHoles[ mainIdx ] = [];
+// 				if ( holesFirst )	mainIdx ++;
+// 				newShapeHoles[ mainIdx ] = [];
 
-				//console.log('cw', i);
+// 				//console.log('cw', i);
 
-			} else {
+// 			} else {
 
-				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
+// 				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
 
-				//console.log('ccw', i);
+// 				//console.log('ccw', i);
 
-			}
+// 			}
 
-		}
+// 		}
 
-		// only Holes? -> probably all Shapes with wrong orientation
-		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );
+// 		// only Holes? -> probably all Shapes with wrong orientation
+// 		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );
 
 
-		if ( newShapes.length > 1 ) {
+// 		if ( newShapes.length > 1 ) {
 
-			let ambiguous = false;
-			let toChange = 0;
+// 			let ambiguous = false;
+// 			let toChange = 0;
 
-			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
+// 			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
 
-				betterShapeHoles[ sIdx ] = [];
+// 				betterShapeHoles[ sIdx ] = [];
 
-			}
+// 			}
 
-			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
+// 			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
 
-				const sho = newShapeHoles[ sIdx ];
+// 				const sho = newShapeHoles[ sIdx ];
 
-				for ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {
+// 				for ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {
 
-					const ho = sho[ hIdx ];
-					let hole_unassigned = true;
+// 					const ho = sho[ hIdx ];
+// 					let hole_unassigned = true;
 
-					for ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
+// 					for ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
 
-						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
+// 						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
 
-							if ( sIdx !== s2Idx )	toChange ++;
+// 							if ( sIdx !== s2Idx )	toChange ++;
 
-							if ( hole_unassigned ) {
+// 							if ( hole_unassigned ) {
 
-								hole_unassigned = false;
-								betterShapeHoles[ s2Idx ].push( ho );
+// 								hole_unassigned = false;
+// 								betterShapeHoles[ s2Idx ].push( ho );
 
-							} else {
+// 							} else {
 
-								ambiguous = true;
+// 								ambiguous = true;
 
-							}
+// 							}
 
-						}
+// 						}
 
-					}
+// 					}
 
-					if ( hole_unassigned ) {
+// 					if ( hole_unassigned ) {
 
-						betterShapeHoles[ sIdx ].push( ho );
+// 						betterShapeHoles[ sIdx ].push( ho );
 
-					}
+// 					}
 
-				}
+// 				}
 
-			}
+// 			}
 
-			if ( toChange > 0 && ambiguous === false ) {
+// 			if ( toChange > 0 && ambiguous === false ) {
 
-				newShapeHoles = betterShapeHoles;
+// 				newShapeHoles = betterShapeHoles;
 
-			}
+// 			}
 
-		}
+// 		}
 
-		let tmpHoles;
+// 		let tmpHoles;
 
-		for ( let i = 0, il = newShapes.length; i < il; i ++ ) {
+// 		for ( let i = 0, il = newShapes.length; i < il; i ++ ) {
 
-			tmpShape = newShapes[ i ].s;
-			shapes.push( tmpShape );
-			tmpHoles = newShapeHoles[ i ];
+// 			tmpShape = newShapes[ i ].s;
+// 			shapes.push( tmpShape );
+// 			tmpHoles = newShapeHoles[ i ];
 
-			for ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
+// 			for ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
 
-				tmpShape.holes.push( tmpHoles[ j ].h );
+// 				tmpShape.holes.push( tmpHoles[ j ].h );
 
-			}
+// 			}
 
-		}
+// 		}
 
-		//console.log("shape", shapes);
+// 		//console.log("shape", shapes);
 
-		return shapes;
+// 		return shapes;
 
-	}
+// 	}
 
-}
+// }
 
-// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
+// // Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 
-const _tables = /*@__PURE__*/ _generateTables();
+// const _tables = /*@__PURE__*/ _generateTables();
 
-function _generateTables() {
+// function _generateTables() {
 
-	// float32 to float16 helpers
+// 	// float32 to float16 helpers
 
-	const buffer = new ArrayBuffer( 4 );
-	const floatView = new Float32Array( buffer );
-	const uint32View = new Uint32Array( buffer );
+// 	const buffer = new ArrayBuffer( 4 );
+// 	const floatView = new Float32Array( buffer );
+// 	const uint32View = new Uint32Array( buffer );
 
-	const baseTable = new Uint32Array( 512 );
-	const shiftTable = new Uint32Array( 512 );
+// 	const baseTable = new Uint32Array( 512 );
+// 	const shiftTable = new Uint32Array( 512 );
 
-	for ( let i = 0; i < 256; ++ i ) {
+// 	for ( let i = 0; i < 256; ++ i ) {
 
-		const e = i - 127;
+// 		const e = i - 127;
 
-		// very small number (0, -0)
+// 		// very small number (0, -0)
 
-		if ( e < - 27 ) {
+// 		if ( e < - 27 ) {
 
-			baseTable[ i ] = 0x0000;
-			baseTable[ i | 0x100 ] = 0x8000;
-			shiftTable[ i ] = 24;
-			shiftTable[ i | 0x100 ] = 24;
+// 			baseTable[ i ] = 0x0000;
+// 			baseTable[ i | 0x100 ] = 0x8000;
+// 			shiftTable[ i ] = 24;
+// 			shiftTable[ i | 0x100 ] = 24;
 
-			// small number (denorm)
+// 			// small number (denorm)
 
-		} else if ( e < - 14 ) {
+// 		} else if ( e < - 14 ) {
 
-			baseTable[ i ] = 0x0400 >> ( - e - 14 );
-			baseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;
-			shiftTable[ i ] = - e - 1;
-			shiftTable[ i | 0x100 ] = - e - 1;
+// 			baseTable[ i ] = 0x0400 >> ( - e - 14 );
+// 			baseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;
+// 			shiftTable[ i ] = - e - 1;
+// 			shiftTable[ i | 0x100 ] = - e - 1;
 
-			// normal number
+// 			// normal number
 
-		} else if ( e <= 15 ) {
+// 		} else if ( e <= 15 ) {
 
-			baseTable[ i ] = ( e + 15 ) << 10;
-			baseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;
-			shiftTable[ i ] = 13;
-			shiftTable[ i | 0x100 ] = 13;
+// 			baseTable[ i ] = ( e + 15 ) << 10;
+// 			baseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;
+// 			shiftTable[ i ] = 13;
+// 			shiftTable[ i | 0x100 ] = 13;
 
-			// large number (Infinity, -Infinity)
+// 			// large number (Infinity, -Infinity)
 
-		} else if ( e < 128 ) {
+// 		} else if ( e < 128 ) {
 
-			baseTable[ i ] = 0x7c00;
-			baseTable[ i | 0x100 ] = 0xfc00;
-			shiftTable[ i ] = 24;
-			shiftTable[ i | 0x100 ] = 24;
+// 			baseTable[ i ] = 0x7c00;
+// 			baseTable[ i | 0x100 ] = 0xfc00;
+// 			shiftTable[ i ] = 24;
+// 			shiftTable[ i | 0x100 ] = 24;
 
-			// stay (NaN, Infinity, -Infinity)
+// 			// stay (NaN, Infinity, -Infinity)
 
-		} else {
+// 		} else {
 
-			baseTable[ i ] = 0x7c00;
-			baseTable[ i | 0x100 ] = 0xfc00;
-			shiftTable[ i ] = 13;
-			shiftTable[ i | 0x100 ] = 13;
+// 			baseTable[ i ] = 0x7c00;
+// 			baseTable[ i | 0x100 ] = 0xfc00;
+// 			shiftTable[ i ] = 13;
+// 			shiftTable[ i | 0x100 ] = 13;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	// float16 to float32 helpers
+// 	// float16 to float32 helpers
 
-	const mantissaTable = new Uint32Array( 2048 );
-	const exponentTable = new Uint32Array( 64 );
-	const offsetTable = new Uint32Array( 64 );
+// 	const mantissaTable = new Uint32Array( 2048 );
+// 	const exponentTable = new Uint32Array( 64 );
+// 	const offsetTable = new Uint32Array( 64 );
 
-	for ( let i = 1; i < 1024; ++ i ) {
+// 	for ( let i = 1; i < 1024; ++ i ) {
 
-		let m = i << 13; // zero pad mantissa bits
-		let e = 0; // zero exponent
+// 		let m = i << 13; // zero pad mantissa bits
+// 		let e = 0; // zero exponent
 
-		// normalized
-		while ( ( m & 0x00800000 ) === 0 ) {
+// 		// normalized
+// 		while ( ( m & 0x00800000 ) === 0 ) {
 
-			m <<= 1;
-			e -= 0x00800000; // decrement exponent
+// 			m <<= 1;
+// 			e -= 0x00800000; // decrement exponent
 
-		}
+// 		}
 
-		m &= ~ 0x00800000; // clear leading 1 bit
-		e += 0x38800000; // adjust bias
+// 		m &= ~ 0x00800000; // clear leading 1 bit
+// 		e += 0x38800000; // adjust bias
 
-		mantissaTable[ i ] = m | e;
+// 		mantissaTable[ i ] = m | e;
 
-	}
+// 	}
 
-	for ( let i = 1024; i < 2048; ++ i ) {
+// 	for ( let i = 1024; i < 2048; ++ i ) {
 
-		mantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );
+// 		mantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );
 
-	}
+// 	}
 
-	for ( let i = 1; i < 31; ++ i ) {
+// 	for ( let i = 1; i < 31; ++ i ) {
 
-		exponentTable[ i ] = i << 23;
+// 		exponentTable[ i ] = i << 23;
 
-	}
+// 	}
 
-	exponentTable[ 31 ] = 0x47800000;
-	exponentTable[ 32 ] = 0x80000000;
+// 	exponentTable[ 31 ] = 0x47800000;
+// 	exponentTable[ 32 ] = 0x80000000;
 
-	for ( let i = 33; i < 63; ++ i ) {
+// 	for ( let i = 33; i < 63; ++ i ) {
 
-		exponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );
+// 		exponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );
 
-	}
+// 	}
 
-	exponentTable[ 63 ] = 0xc7800000;
+// 	exponentTable[ 63 ] = 0xc7800000;
 
-	for ( let i = 1; i < 64; ++ i ) {
+// 	for ( let i = 1; i < 64; ++ i ) {
 
-		if ( i !== 32 ) {
+// 		if ( i !== 32 ) {
 
-			offsetTable[ i ] = 1024;
+// 			offsetTable[ i ] = 1024;
 
-		}
+// 		}
 
-	}
+// 	}
 
-	return {
-		floatView: floatView,
-		uint32View: uint32View,
-		baseTable: baseTable,
-		shiftTable: shiftTable,
-		mantissaTable: mantissaTable,
-		exponentTable: exponentTable,
-		offsetTable: offsetTable
-	};
+// 	return {
+// 		floatView: floatView,
+// 		uint32View: uint32View,
+// 		baseTable: baseTable,
+// 		shiftTable: shiftTable,
+// 		mantissaTable: mantissaTable,
+// 		exponentTable: exponentTable,
+// 		offsetTable: offsetTable
+// 	};
 
-}
+// }
 
-// float32 to float16
+// // float32 to float16
 
-function toHalfFloat( val ) {
+// function toHalfFloat( val ) {
 
-	if ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );
+// 	if ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );
 
-	val = clamp( val, - 65504, 65504 );
+// 	val = clamp( val, - 65504, 65504 );
 
-	_tables.floatView[ 0 ] = val;
-	const f = _tables.uint32View[ 0 ];
-	const e = ( f >> 23 ) & 0x1ff;
-	return _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );
+// 	_tables.floatView[ 0 ] = val;
+// 	const f = _tables.uint32View[ 0 ];
+// 	const e = ( f >> 23 ) & 0x1ff;
+// 	return _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );
 
-}
+// }
 
-// float16 to float32
+// // float16 to float32
 
-function fromHalfFloat( val ) {
+// function fromHalfFloat( val ) {
 
-	const m = val >> 10;
-	_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];
-	return _tables.floatView[ 0 ];
+// 	const m = val >> 10;
+// 	_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];
+// 	return _tables.floatView[ 0 ];
 
-}
+// }
 
-var DataUtils = /*#__PURE__*/Object.freeze({
-	__proto__: null,
-	toHalfFloat: toHalfFloat,
-	fromHalfFloat: fromHalfFloat
-});
+// var DataUtils = /*#__PURE__*/Object.freeze({
+// 	__proto__: null,
+// 	toHalfFloat: toHalfFloat,
+// 	fromHalfFloat: fromHalfFloat
+// });
 
-// r134, d65e0af06644fe5a84a6fc0e372f4318f95a04c0
+// // r134, d65e0af06644fe5a84a6fc0e372f4318f95a04c0
 
-function ImmediateRenderObject() {
+// function ImmediateRenderObject() {
 
-	console.error( 'THREE.ImmediateRenderObject has been removed.' );
+// 	console.error( 'THREE.ImmediateRenderObject has been removed.' );
 
-}
+// }
 
-// r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17
+// // r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17
 
-class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
+// class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
 
-	constructor( width, height, options ) {
+// 	constructor( width, height, options ) {
 
-		console.error( 'THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.' );
-		super( width, height, options );
-		this.samples = 4;
+// 		console.error( 'THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.' );
+// 		super( width, height, options );
+// 		this.samples = 4;
 
-	}
+// 	}
 
-}
+// }
 
-// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
+// // r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
 
-class DataTexture2DArray extends DataArrayTexture {
+// class DataTexture2DArray extends DataArrayTexture {
 
-	constructor( data, width, height, depth ) {
+// 	constructor( data, width, height, depth ) {
 
-		console.warn( 'THREE.DataTexture2DArray has been renamed to DataArrayTexture.' );
-		super( data, width, height, depth );
+// 		console.warn( 'THREE.DataTexture2DArray has been renamed to DataArrayTexture.' );
+// 		super( data, width, height, depth );
 
-	}
+// 	}
 
-}
+// }
 
-// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
+// // r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
 
-class DataTexture3D extends Data3DTexture {
+// class DataTexture3D extends Data3DTexture {
 
-	constructor( data, width, height, depth ) {
+// 	constructor( data, width, height, depth ) {
 
-		console.warn( 'THREE.DataTexture3D has been renamed to Data3DTexture.' );
-		super( data, width, height, depth );
+// 		console.warn( 'THREE.DataTexture3D has been renamed to Data3DTexture.' );
+// 		super( data, width, height, depth );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class BoxBufferGeometry extends BoxGeometry {
+// class BoxBufferGeometry extends BoxGeometry {
 
-	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {
+// 	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {
 
-		console.warn( 'THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.' );
-		super( width, height, depth, widthSegments, heightSegments, depthSegments );
+// 		console.warn( 'THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.' );
+// 		super( width, height, depth, widthSegments, heightSegments, depthSegments );
 
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class CapsuleBufferGeometry extends CapsuleGeometry {
+// class CapsuleBufferGeometry extends CapsuleGeometry {
 
-	constructor( radius, length, capSegments, radialSegments ) {
+// 	constructor( radius, length, capSegments, radialSegments ) {
 
-		console.warn( 'THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.' );
-		super( radius, length, capSegments, radialSegments );
+// 		console.warn( 'THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.' );
+// 		super( radius, length, capSegments, radialSegments );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class CircleBufferGeometry extends CircleGeometry {
+// class CircleBufferGeometry extends CircleGeometry {
 
-	constructor( radius, segments, thetaStart, thetaLength ) {
+// 	constructor( radius, segments, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.' );
-		super( radius, segments, thetaStart, thetaLength );
+// 		console.warn( 'THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.' );
+// 		super( radius, segments, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class ConeBufferGeometry extends ConeGeometry {
+// class ConeBufferGeometry extends ConeGeometry {
 
-	constructor( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
+// 	constructor( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.' );
-		super( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
+// 		console.warn( 'THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.' );
+// 		super( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class CylinderBufferGeometry extends CylinderGeometry {
+// class CylinderBufferGeometry extends CylinderGeometry {
 
-	constructor( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
+// 	constructor( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.' );
-		super( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
+// 		console.warn( 'THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.' );
+// 		super( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class DodecahedronBufferGeometry extends DodecahedronGeometry {
+// class DodecahedronBufferGeometry extends DodecahedronGeometry {
 
-	constructor( radius, detail ) {
+// 	constructor( radius, detail ) {
 
-		console.warn( 'THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.' );
-		super( radius, detail );
+// 		console.warn( 'THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.' );
+// 		super( radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class ExtrudeBufferGeometry extends ExtrudeGeometry {
+// class ExtrudeBufferGeometry extends ExtrudeGeometry {
 
-	constructor( shapes, options ) {
+// 	constructor( shapes, options ) {
 
-		console.warn( 'THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.' );
-		super( shapes, options );
+// 		console.warn( 'THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.' );
+// 		super( shapes, options );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class IcosahedronBufferGeometry extends IcosahedronGeometry {
+// class IcosahedronBufferGeometry extends IcosahedronGeometry {
 
-	constructor( radius, detail ) {
+// 	constructor( radius, detail ) {
 
-		console.warn( 'THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.' );
-		super( radius, detail );
+// 		console.warn( 'THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.' );
+// 		super( radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class LatheBufferGeometry extends LatheGeometry {
+// class LatheBufferGeometry extends LatheGeometry {
 
-	constructor( points, segments, phiStart, phiLength ) {
+// 	constructor( points, segments, phiStart, phiLength ) {
 
-		console.warn( 'THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.' );
-		super( points, segments, phiStart, phiLength );
+// 		console.warn( 'THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.' );
+// 		super( points, segments, phiStart, phiLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class OctahedronBufferGeometry extends OctahedronGeometry {
+// class OctahedronBufferGeometry extends OctahedronGeometry {
 
-	constructor( radius, detail ) {
+// 	constructor( radius, detail ) {
 
-		console.warn( 'THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.' );
-		super( radius, detail );
+// 		console.warn( 'THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.' );
+// 		super( radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class PlaneBufferGeometry extends PlaneGeometry {
+// class PlaneBufferGeometry extends PlaneGeometry {
 
-	constructor( width, height, widthSegments, heightSegments ) {
+// 	constructor( width, height, widthSegments, heightSegments ) {
 
-		console.warn( 'THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.' );
-		super( width, height, widthSegments, heightSegments );
+// 		console.warn( 'THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry.' );
+// 		super( width, height, widthSegments, heightSegments );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class PolyhedronBufferGeometry extends PolyhedronGeometry {
+// class PolyhedronBufferGeometry extends PolyhedronGeometry {
 
-	constructor( vertices, indices, radius, detail ) {
+// 	constructor( vertices, indices, radius, detail ) {
 
-		console.warn( 'THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.' );
-		super( vertices, indices, radius, detail );
+// 		console.warn( 'THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.' );
+// 		super( vertices, indices, radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class RingBufferGeometry extends RingGeometry {
+// class RingBufferGeometry extends RingGeometry {
 
-	constructor( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
+// 	constructor( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.' );
-		super( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );
+// 		console.warn( 'THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.' );
+// 		super( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class ShapeBufferGeometry extends ShapeGeometry {
+// class ShapeBufferGeometry extends ShapeGeometry {
 
-	constructor( shapes, curveSegments ) {
+// 	constructor( shapes, curveSegments ) {
 
-		console.warn( 'THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.' );
-		super( shapes, curveSegments );
+// 		console.warn( 'THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.' );
+// 		super( shapes, curveSegments );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class SphereBufferGeometry extends SphereGeometry {
+// class SphereBufferGeometry extends SphereGeometry {
 
-	constructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
+// 	constructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.' );
-		super( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );
+// 		console.warn( 'THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.' );
+// 		super( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class TetrahedronBufferGeometry extends TetrahedronGeometry {
+// class TetrahedronBufferGeometry extends TetrahedronGeometry {
 
-	constructor( radius, detail ) {
+// 	constructor( radius, detail ) {
 
-		console.warn( 'THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.' );
-		super( radius, detail );
+// 		console.warn( 'THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.' );
+// 		super( radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class TorusBufferGeometry extends TorusGeometry {
+// class TorusBufferGeometry extends TorusGeometry {
 
-	constructor( radius, tube, radialSegments, tubularSegments, arc ) {
+// 	constructor( radius, tube, radialSegments, tubularSegments, arc ) {
 
-		console.warn( 'THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.' );
-		super( radius, tube, radialSegments, tubularSegments, arc );
+// 		console.warn( 'THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.' );
+// 		super( radius, tube, radialSegments, tubularSegments, arc );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class TorusKnotBufferGeometry extends TorusKnotGeometry {
+// class TorusKnotBufferGeometry extends TorusKnotGeometry {
 
-	constructor( radius, tube, tubularSegments, radialSegments, p, q ) {
+// 	constructor( radius, tube, tubularSegments, radialSegments, p, q ) {
 
-		console.warn( 'THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.' );
-		super( radius, tube, tubularSegments, radialSegments, p, q );
+// 		console.warn( 'THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.' );
+// 		super( radius, tube, tubularSegments, radialSegments, p, q );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-class TubeBufferGeometry extends TubeGeometry {
+// class TubeBufferGeometry extends TubeGeometry {
 
-	constructor( path, tubularSegments, radius, radialSegments, closed ) {
+// 	constructor( path, tubularSegments, radius, radialSegments, closed ) {
 
-		console.warn( 'THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.' );
-		super( path, tubularSegments, radius, radialSegments, closed );
+// 		console.warn( 'THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.' );
+// 		super( path, tubularSegments, radius, radialSegments, closed );
 
-	}
+// 	}
 
-}
+// }
 
-if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
+// if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
 
-	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
-		revision: REVISION,
-	} } ) );
+// 	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
+// 		revision: REVISION,
+// 	} } ) );
 
-}
+// }
 
-if ( typeof window !== 'undefined' ) {
+// if ( typeof window !== 'undefined' ) {
 
-	if ( window.__THREE__ ) {
+// 	if ( window.__THREE__ ) {
 
-		console.warn( 'WARNING: Multiple instances of Three.js being imported.' );
+// 		console.warn( 'WARNING: Multiple instances of Three.js being imported.' );
 
-	} else {
+// 	} else {
 
-		window.__THREE__ = REVISION;
+// 		window.__THREE__ = REVISION;
 
-	}
+// 	}
 
-}
+// }
 
-export { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightProbe, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxBufferGeometry, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleBufferGeometry, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleBufferGeometry, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedTexture, CompressedTextureLoader, ConeBufferGeometry, ConeGeometry, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderBufferGeometry, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTexture2DArray, DataTexture3D, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronBufferGeometry, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeBufferGeometry, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, Float64BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronBufferGeometry, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, ImmediateRenderObject, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheBufferGeometry, LatheGeometry, Layers, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronBufferGeometry, OctahedronGeometry, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, Path, PerspectiveCamera, Plane, PlaneBufferGeometry, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronBufferGeometry, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingBufferGeometry, RingGeometry, SRGBColorSpace, Scene, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeBufferGeometry, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereBufferGeometry, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronBufferGeometry, TetrahedronGeometry, Texture, TextureLoader, TorusBufferGeometry, TorusGeometry, TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeBufferGeometry, TubeGeometry, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoTexture, WebGL1Renderer, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCubeRenderTarget, WebGLMultipleRenderTargets, WebGLMultisampleRenderTarget, WebGLRenderTarget, WebGLRenderer, WebGLUtils, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, _SRGBAFormat, sRGBEncoding };
+// export { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightProbe, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxBufferGeometry, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleBufferGeometry, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleBufferGeometry, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedTexture, CompressedTextureLoader, ConeBufferGeometry, ConeGeometry, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderBufferGeometry, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTexture2DArray, DataTexture3D, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronBufferGeometry, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeBufferGeometry, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, Float64BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronBufferGeometry, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, ImmediateRenderObject, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheBufferGeometry, LatheGeometry, Layers, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronBufferGeometry, OctahedronGeometry, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, Path, PerspectiveCamera, Plane, PlaneBufferGeometry, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronBufferGeometry, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingBufferGeometry, RingGeometry, SRGBColorSpace, Scene, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeBufferGeometry, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereBufferGeometry, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronBufferGeometry, TetrahedronGeometry, Texture, TextureLoader, TorusBufferGeometry, TorusGeometry, TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeBufferGeometry, TubeGeometry, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoTexture, WebGL1Renderer, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCubeRenderTarget, WebGLMultipleRenderTargets, WebGLMultisampleRenderTarget, WebGLRenderTarget, WebGLRenderer, WebGLUtils, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, _SRGBAFormat, sRGBEncoding };
diff --git a/src/Three.Legacy.js b/src/Three.Legacy.js
index 336f55bd848ad9ca890d0389ea85135d85dc0de0..ce1794b550a98786517593bd89b0ba82e9b0dcfe 100644
--- a/src/Three.Legacy.js
+++ b/src/Three.Legacy.js
@@ -1,206 +1,206 @@
-import { WebGLRenderTarget } from './renderers/WebGLRenderTarget.js';
-import { DataArrayTexture } from './textures/DataArrayTexture.js';
-import { Data3DTexture } from './textures/Data3DTexture.js';
-import { BoxGeometry } from './geometries/BoxGeometry.js';
-import { CapsuleGeometry } from './geometries/CapsuleGeometry.js';
-import { CircleGeometry } from './geometries/CircleGeometry.js';
-import { ConeGeometry } from './geometries/ConeGeometry.js';
-import { CylinderGeometry } from './geometries/CylinderGeometry.js';
-import { DodecahedronGeometry } from './geometries/DodecahedronGeometry.js';
-import { ExtrudeGeometry } from './geometries/ExtrudeGeometry.js';
-import { IcosahedronGeometry } from './geometries/IcosahedronGeometry.js';
-import { LatheGeometry } from './geometries/LatheGeometry.js';
-import { OctahedronGeometry } from './geometries/OctahedronGeometry.js';
+// import { WebGLRenderTarget } from './renderers/WebGLRenderTarget.js';
+// import { DataArrayTexture } from './textures/DataArrayTexture.js';
+// import { Data3DTexture } from './textures/Data3DTexture.js';
+// import { BoxGeometry } from './geometries/BoxGeometry.js';
+// import { CapsuleGeometry } from './geometries/CapsuleGeometry.js';
+// import { CircleGeometry } from './geometries/CircleGeometry.js';
+// import { ConeGeometry } from './geometries/ConeGeometry.js';
+// import { CylinderGeometry } from './geometries/CylinderGeometry.js';
+// import { DodecahedronGeometry } from './geometries/DodecahedronGeometry.js';
+// import { ExtrudeGeometry } from './geometries/ExtrudeGeometry.js';
+// import { IcosahedronGeometry } from './geometries/IcosahedronGeometry.js';
+// import { LatheGeometry } from './geometries/LatheGeometry.js';
+// import { OctahedronGeometry } from './geometries/OctahedronGeometry.js';
 import { PlaneGeometry } from './geometries/PlaneGeometry.js';
-import { PolyhedronGeometry } from './geometries/PolyhedronGeometry.js';
-import { RingGeometry } from './geometries/RingGeometry.js';
-import { ShapeGeometry } from './geometries/ShapeGeometry.js';
-import { SphereGeometry } from './geometries/SphereGeometry.js';
-import { TetrahedronGeometry } from './geometries/TetrahedronGeometry.js';
-import { TorusGeometry } from './geometries/TorusGeometry.js';
-import { TorusKnotGeometry } from './geometries/TorusKnotGeometry.js';
-import { TubeGeometry } from './geometries/TubeGeometry.js';
+// import { PolyhedronGeometry } from './geometries/PolyhedronGeometry.js';
+// import { RingGeometry } from './geometries/RingGeometry.js';
+// import { ShapeGeometry } from './geometries/ShapeGeometry.js';
+// import { SphereGeometry } from './geometries/SphereGeometry.js';
+// import { TetrahedronGeometry } from './geometries/TetrahedronGeometry.js';
+// import { TorusGeometry } from './geometries/TorusGeometry.js';
+// import { TorusKnotGeometry } from './geometries/TorusKnotGeometry.js';
+// import { TubeGeometry } from './geometries/TubeGeometry.js';
 
-// r134, d65e0af06644fe5a84a6fc0e372f4318f95a04c0
+// // r134, d65e0af06644fe5a84a6fc0e372f4318f95a04c0
 
-export function ImmediateRenderObject() {
+// export function ImmediateRenderObject() {
 
-	console.error( 'THREE.ImmediateRenderObject has been removed.' );
+// 	console.error( 'THREE.ImmediateRenderObject has been removed.' );
 
-}
+// }
 
-// r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17
+// // r138, 48b05d3500acc084df50be9b4c90781ad9b8cb17
 
-export class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
+// export class WebGLMultisampleRenderTarget extends WebGLRenderTarget {
 
-	constructor( width, height, options ) {
+// 	constructor( width, height, options ) {
 
-		console.error( 'THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.' );
-		super( width, height, options );
-		this.samples = 4;
+// 		console.error( 'THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.' );
+// 		super( width, height, options );
+// 		this.samples = 4;
 
-	}
+// 	}
 
-}
+// }
 
-// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
+// // r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
 
-export class DataTexture2DArray extends DataArrayTexture {
+// export class DataTexture2DArray extends DataArrayTexture {
 
-	constructor( data, width, height, depth ) {
+// 	constructor( data, width, height, depth ) {
 
-		console.warn( 'THREE.DataTexture2DArray has been renamed to DataArrayTexture.' );
-		super( data, width, height, depth );
+// 		console.warn( 'THREE.DataTexture2DArray has been renamed to DataArrayTexture.' );
+// 		super( data, width, height, depth );
 
-	}
+// 	}
 
-}
+// }
 
-// r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
+// // r138, f9cd9cab03b7b64244e304900a3a2eeaa3a588ce
 
-export class DataTexture3D extends Data3DTexture {
+// export class DataTexture3D extends Data3DTexture {
 
-	constructor( data, width, height, depth ) {
+// 	constructor( data, width, height, depth ) {
 
-		console.warn( 'THREE.DataTexture3D has been renamed to Data3DTexture.' );
-		super( data, width, height, depth );
+// 		console.warn( 'THREE.DataTexture3D has been renamed to Data3DTexture.' );
+// 		super( data, width, height, depth );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class BoxBufferGeometry extends BoxGeometry {
+// export class BoxBufferGeometry extends BoxGeometry {
 
-	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {
+// 	constructor( width, height, depth, widthSegments, heightSegments, depthSegments ) {
 
-		console.warn( 'THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.' );
-		super( width, height, depth, widthSegments, heightSegments, depthSegments );
+// 		console.warn( 'THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry.' );
+// 		super( width, height, depth, widthSegments, heightSegments, depthSegments );
 
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class CapsuleBufferGeometry extends CapsuleGeometry {
+// export class CapsuleBufferGeometry extends CapsuleGeometry {
 
-	constructor( radius, length, capSegments, radialSegments ) {
+// 	constructor( radius, length, capSegments, radialSegments ) {
 
-		console.warn( 'THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.' );
-		super( radius, length, capSegments, radialSegments );
+// 		console.warn( 'THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry.' );
+// 		super( radius, length, capSegments, radialSegments );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class CircleBufferGeometry extends CircleGeometry {
+// export class CircleBufferGeometry extends CircleGeometry {
 
-	constructor( radius, segments, thetaStart, thetaLength ) {
+// 	constructor( radius, segments, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.' );
-		super( radius, segments, thetaStart, thetaLength );
+// 		console.warn( 'THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry.' );
+// 		super( radius, segments, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class ConeBufferGeometry extends ConeGeometry {
+// export class ConeBufferGeometry extends ConeGeometry {
 
-	constructor( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
+// 	constructor( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.' );
-		super( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
+// 		console.warn( 'THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry.' );
+// 		super( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class CylinderBufferGeometry extends CylinderGeometry {
+// export class CylinderBufferGeometry extends CylinderGeometry {
 
-	constructor( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
+// 	constructor( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.' );
-		super( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
+// 		console.warn( 'THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry.' );
+// 		super( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class DodecahedronBufferGeometry extends DodecahedronGeometry {
+// export class DodecahedronBufferGeometry extends DodecahedronGeometry {
 
-	constructor( radius, detail ) {
+// 	constructor( radius, detail ) {
 
-		console.warn( 'THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.' );
-		super( radius, detail );
+// 		console.warn( 'THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry.' );
+// 		super( radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class ExtrudeBufferGeometry extends ExtrudeGeometry {
+// export class ExtrudeBufferGeometry extends ExtrudeGeometry {
 
-	constructor( shapes, options ) {
+// 	constructor( shapes, options ) {
 
-		console.warn( 'THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.' );
-		super( shapes, options );
+// 		console.warn( 'THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry.' );
+// 		super( shapes, options );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class IcosahedronBufferGeometry extends IcosahedronGeometry {
+// export class IcosahedronBufferGeometry extends IcosahedronGeometry {
 
-	constructor( radius, detail ) {
+// 	constructor( radius, detail ) {
 
-		console.warn( 'THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.' );
-		super( radius, detail );
+// 		console.warn( 'THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry.' );
+// 		super( radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class LatheBufferGeometry extends LatheGeometry {
+// export class LatheBufferGeometry extends LatheGeometry {
 
-	constructor( points, segments, phiStart, phiLength ) {
+// 	constructor( points, segments, phiStart, phiLength ) {
 
-		console.warn( 'THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.' );
-		super( points, segments, phiStart, phiLength );
+// 		console.warn( 'THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry.' );
+// 		super( points, segments, phiStart, phiLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class OctahedronBufferGeometry extends OctahedronGeometry {
+// export class OctahedronBufferGeometry extends OctahedronGeometry {
 
-	constructor( radius, detail ) {
+// 	constructor( radius, detail ) {
 
-		console.warn( 'THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.' );
-		super( radius, detail );
+// 		console.warn( 'THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry.' );
+// 		super( radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
 export class PlaneBufferGeometry extends PlaneGeometry {
 
@@ -213,108 +213,108 @@ export class PlaneBufferGeometry extends PlaneGeometry {
 
 }
 
-// r144
+// // r144
 
-export class PolyhedronBufferGeometry extends PolyhedronGeometry {
+// export class PolyhedronBufferGeometry extends PolyhedronGeometry {
 
-	constructor( vertices, indices, radius, detail ) {
+// 	constructor( vertices, indices, radius, detail ) {
 
-		console.warn( 'THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.' );
-		super( vertices, indices, radius, detail );
+// 		console.warn( 'THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry.' );
+// 		super( vertices, indices, radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class RingBufferGeometry extends RingGeometry {
+// export class RingBufferGeometry extends RingGeometry {
 
-	constructor( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
+// 	constructor( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.' );
-		super( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );
+// 		console.warn( 'THREE.RingBufferGeometry has been renamed to THREE.RingGeometry.' );
+// 		super( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class ShapeBufferGeometry extends ShapeGeometry {
+// export class ShapeBufferGeometry extends ShapeGeometry {
 
-	constructor( shapes, curveSegments ) {
+// 	constructor( shapes, curveSegments ) {
 
-		console.warn( 'THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.' );
-		super( shapes, curveSegments );
+// 		console.warn( 'THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry.' );
+// 		super( shapes, curveSegments );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class SphereBufferGeometry extends SphereGeometry {
+// export class SphereBufferGeometry extends SphereGeometry {
 
-	constructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
+// 	constructor( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
 
-		console.warn( 'THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.' );
-		super( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );
+// 		console.warn( 'THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry.' );
+// 		super( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class TetrahedronBufferGeometry extends TetrahedronGeometry {
+// export class TetrahedronBufferGeometry extends TetrahedronGeometry {
 
-	constructor( radius, detail ) {
+// 	constructor( radius, detail ) {
 
-		console.warn( 'THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.' );
-		super( radius, detail );
+// 		console.warn( 'THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry.' );
+// 		super( radius, detail );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class TorusBufferGeometry extends TorusGeometry {
+// export class TorusBufferGeometry extends TorusGeometry {
 
-	constructor( radius, tube, radialSegments, tubularSegments, arc ) {
+// 	constructor( radius, tube, radialSegments, tubularSegments, arc ) {
 
-		console.warn( 'THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.' );
-		super( radius, tube, radialSegments, tubularSegments, arc );
+// 		console.warn( 'THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry.' );
+// 		super( radius, tube, radialSegments, tubularSegments, arc );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class TorusKnotBufferGeometry extends TorusKnotGeometry {
+// export class TorusKnotBufferGeometry extends TorusKnotGeometry {
 
-	constructor( radius, tube, tubularSegments, radialSegments, p, q ) {
+// 	constructor( radius, tube, tubularSegments, radialSegments, p, q ) {
 
-		console.warn( 'THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.' );
-		super( radius, tube, tubularSegments, radialSegments, p, q );
+// 		console.warn( 'THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry.' );
+// 		super( radius, tube, tubularSegments, radialSegments, p, q );
 
-	}
+// 	}
 
-}
+// }
 
-// r144
+// // r144
 
-export class TubeBufferGeometry extends TubeGeometry {
+// export class TubeBufferGeometry extends TubeGeometry {
 
-	constructor( path, tubularSegments, radius, radialSegments, closed ) {
+// 	constructor( path, tubularSegments, radius, radialSegments, closed ) {
 
-		console.warn( 'THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.' );
-		super( path, tubularSegments, radius, radialSegments, closed );
+// 		console.warn( 'THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry.' );
+// 		super( path, tubularSegments, radius, radialSegments, closed );
 
-	}
+// 	}
 
-}
+// }
 
 
diff --git a/src/Three.js b/src/Three.js
index 372352c7f91e24fc37a9044852f46f33675098a5..1d1c55038d9923f02ac9323ef116096dbb2da64b 100644
--- a/src/Three.js
+++ b/src/Three.js
@@ -1,161 +1,174 @@
 import { REVISION } from './constants.js';
 
-export { WebGLArrayRenderTarget } from './renderers/WebGLArrayRenderTarget.js';
-export { WebGL3DRenderTarget } from './renderers/WebGL3DRenderTarget.js';
-export { WebGLMultipleRenderTargets } from './renderers/WebGLMultipleRenderTargets.js';
-export { WebGLCubeRenderTarget } from './renderers/WebGLCubeRenderTarget.js';
+// export { WebGLArrayRenderTarget } from './renderers/WebGLArrayRenderTarget.js';
+// export { WebGL3DRenderTarget } from './renderers/WebGL3DRenderTarget.js';
+// export { WebGLMultipleRenderTargets } from './renderers/WebGLMultipleRenderTargets.js';
+// export { WebGLCubeRenderTarget } from './renderers/WebGLCubeRenderTarget.js';
 export { WebGLRenderTarget } from './renderers/WebGLRenderTarget.js';
 export { WebGLRenderer } from './renderers/WebGLRenderer.js';
-export { WebGL1Renderer } from './renderers/WebGL1Renderer.js';
-export { ShaderLib } from './renderers/shaders/ShaderLib.js';
-export { UniformsLib } from './renderers/shaders/UniformsLib.js';
-export { UniformsUtils } from './renderers/shaders/UniformsUtils.js';
+// export { WebGL1Renderer } from './renderers/WebGL1Renderer.js';
+// export { ShaderLib } from './renderers/shaders/ShaderLib.js';
+// export { UniformsLib } from './renderers/shaders/UniformsLib.js';
+// export { UniformsUtils } from './renderers/shaders/UniformsUtils.js';
 export { ShaderChunk } from './renderers/shaders/ShaderChunk.js';
-export { FogExp2 } from './scenes/FogExp2.js';
+// export { FogExp2 } from './scenes/FogExp2.js';
 export { Fog } from './scenes/Fog.js';
 export { Scene } from './scenes/Scene.js';
-export { Sprite } from './objects/Sprite.js';
-export { LOD } from './objects/LOD.js';
-export { SkinnedMesh } from './objects/SkinnedMesh.js';
-export { Skeleton } from './objects/Skeleton.js';
-export { Bone } from './objects/Bone.js';
+// export { Sprite } from './objects/Sprite.js';
+// export { LOD } from './objects/LOD.js';
+// export { SkinnedMesh } from './objects/SkinnedMesh.js';
+// export { Skeleton } from './objects/Skeleton.js';
+// export { Bone } from './objects/Bone.js';
 export { Mesh } from './objects/Mesh.js';
-export { InstancedMesh } from './objects/InstancedMesh.js';
-export { LineSegments } from './objects/LineSegments.js';
-export { LineLoop } from './objects/LineLoop.js';
-export { Line } from './objects/Line.js';
-export { Points } from './objects/Points.js';
-export { Group } from './objects/Group.js';
-export { VideoTexture } from './textures/VideoTexture.js';
-export { FramebufferTexture } from './textures/FramebufferTexture.js';
-export { Source } from './textures/Source.js';
-export { DataTexture } from './textures/DataTexture.js';
-export { DataArrayTexture } from './textures/DataArrayTexture.js';
-export { Data3DTexture } from './textures/Data3DTexture.js';
-export { CompressedTexture } from './textures/CompressedTexture.js';
-export { CubeTexture } from './textures/CubeTexture.js';
-export { CanvasTexture } from './textures/CanvasTexture.js';
+// export { InstancedMesh } from './objects/InstancedMesh.js';
+// export { LineSegments } from './objects/LineSegments.js';
+// export { LineLoop } from './objects/LineLoop.js';
+// export { Line } from './objects/Line.js';
+// export { Points } from './objects/Points.js';
+// export { Group } from './objects/Group.js';
+// export { VideoTexture } from './textures/VideoTexture.js';
+// export { FramebufferTexture } from './textures/FramebufferTexture.js';
+// export { Source } from './textures/Source.js';
+// export { DataTexture } from './textures/DataTexture.js';
+// export { DataArrayTexture } from './textures/DataArrayTexture.js';
+// export { Data3DTexture } from './textures/Data3DTexture.js';
+// export { CompressedTexture } from './textures/CompressedTexture.js';
+// export { CubeTexture } from './textures/CubeTexture.js';
+// export { CanvasTexture } from './textures/CanvasTexture.js';
 export { DepthTexture } from './textures/DepthTexture.js';
-export { Texture } from './textures/Texture.js';
-export * from './geometries/Geometries.js';
-export * from './materials/Materials.js';
-export { AnimationLoader } from './loaders/AnimationLoader.js';
-export { CompressedTextureLoader } from './loaders/CompressedTextureLoader.js';
-export { CubeTextureLoader } from './loaders/CubeTextureLoader.js';
-export { DataTextureLoader } from './loaders/DataTextureLoader.js';
-export { TextureLoader } from './loaders/TextureLoader.js';
-export { ObjectLoader } from './loaders/ObjectLoader.js';
-export { MaterialLoader } from './loaders/MaterialLoader.js';
-export { BufferGeometryLoader } from './loaders/BufferGeometryLoader.js';
-export { DefaultLoadingManager, LoadingManager } from './loaders/LoadingManager.js';
-export { ImageLoader } from './loaders/ImageLoader.js';
-export { ImageBitmapLoader } from './loaders/ImageBitmapLoader.js';
+// export { Texture } from './textures/Texture.js';
+// export * from './geometries/Geometries.js';
+// export * from './materials/Materials.js';
+export { Material, MeshLambertMaterial, MeshStandardMaterial, ShaderMaterial, ShadowMaterial } from './materials/Materials.js';
+// export { AnimationLoader } from './loaders/AnimationLoader.js';
+// export { CompressedTextureLoader } from './loaders/CompressedTextureLoader.js';
+// export { CubeTextureLoader } from './loaders/CubeTextureLoader.js';
+// export { DataTextureLoader } from './loaders/DataTextureLoader.js';
+// export { TextureLoader } from './loaders/TextureLoader.js';
+// export { ObjectLoader } from './loaders/ObjectLoader.js';
+// export { MaterialLoader } from './loaders/MaterialLoader.js';
+// export { BufferGeometryLoader } from './loaders/BufferGeometryLoader.js';
+// export { DefaultLoadingManager, LoadingManager } from './loaders/LoadingManager.js';
+// export { ImageLoader } from './loaders/ImageLoader.js';
+// export { ImageBitmapLoader } from './loaders/ImageBitmapLoader.js';
 export { FileLoader } from './loaders/FileLoader.js';
 export { Loader } from './loaders/Loader.js';
-export { LoaderUtils } from './loaders/LoaderUtils.js';
-export { Cache } from './loaders/Cache.js';
-export { AudioLoader } from './loaders/AudioLoader.js';
-export { SpotLight } from './lights/SpotLight.js';
+// export { LoaderUtils } from './loaders/LoaderUtils.js';
+// export { Cache } from './loaders/Cache.js';
+// export { AudioLoader } from './loaders/AudioLoader.js';
+// export { SpotLight } from './lights/SpotLight.js';
 export { PointLight } from './lights/PointLight.js';
-export { RectAreaLight } from './lights/RectAreaLight.js';
-export { HemisphereLight } from './lights/HemisphereLight.js';
-export { HemisphereLightProbe } from './lights/HemisphereLightProbe.js';
+// export { RectAreaLight } from './lights/RectAreaLight.js';
+// export { HemisphereLight } from './lights/HemisphereLight.js';
+// export { HemisphereLightProbe } from './lights/HemisphereLightProbe.js';
 export { DirectionalLight } from './lights/DirectionalLight.js';
 export { AmbientLight } from './lights/AmbientLight.js';
-export { AmbientLightProbe } from './lights/AmbientLightProbe.js';
-export { Light } from './lights/Light.js';
-export { LightProbe } from './lights/LightProbe.js';
-export { StereoCamera } from './cameras/StereoCamera.js';
+// export { AmbientLightProbe } from './lights/AmbientLightProbe.js';
+// export { Light } from './lights/Light.js';
+// export { LightProbe } from './lights/LightProbe.js';
+// export { StereoCamera } from './cameras/StereoCamera.js';
 export { PerspectiveCamera } from './cameras/PerspectiveCamera.js';
-export { OrthographicCamera } from './cameras/OrthographicCamera.js';
-export { CubeCamera } from './cameras/CubeCamera.js';
-export { ArrayCamera } from './cameras/ArrayCamera.js';
+// export { OrthographicCamera } from './cameras/OrthographicCamera.js';
+// export { CubeCamera } from './cameras/CubeCamera.js';
+// export { ArrayCamera } from './cameras/ArrayCamera.js';
 export { Camera } from './cameras/Camera.js';
-export { AudioListener } from './audio/AudioListener.js';
-export { PositionalAudio } from './audio/PositionalAudio.js';
-export { AudioContext } from './audio/AudioContext.js';
-export { AudioAnalyser } from './audio/AudioAnalyser.js';
-export { Audio } from './audio/Audio.js';
-export { VectorKeyframeTrack } from './animation/tracks/VectorKeyframeTrack.js';
-export { StringKeyframeTrack } from './animation/tracks/StringKeyframeTrack.js';
-export { QuaternionKeyframeTrack } from './animation/tracks/QuaternionKeyframeTrack.js';
-export { NumberKeyframeTrack } from './animation/tracks/NumberKeyframeTrack.js';
-export { ColorKeyframeTrack } from './animation/tracks/ColorKeyframeTrack.js';
-export { BooleanKeyframeTrack } from './animation/tracks/BooleanKeyframeTrack.js';
-export { PropertyMixer } from './animation/PropertyMixer.js';
-export { PropertyBinding } from './animation/PropertyBinding.js';
-export { KeyframeTrack } from './animation/KeyframeTrack.js';
-export * as AnimationUtils from './animation/AnimationUtils.js';
-export { AnimationObjectGroup } from './animation/AnimationObjectGroup.js';
-export { AnimationMixer } from './animation/AnimationMixer.js';
-export { AnimationClip } from './animation/AnimationClip.js';
+// export { AudioListener } from './audio/AudioListener.js';
+// export { PositionalAudio } from './audio/PositionalAudio.js';
+// export { AudioContext } from './audio/AudioContext.js';
+// export { AudioAnalyser } from './audio/AudioAnalyser.js';
+// export { Audio } from './audio/Audio.js';
+// export { VectorKeyframeTrack } from './animation/tracks/VectorKeyframeTrack.js';
+// export { StringKeyframeTrack } from './animation/tracks/StringKeyframeTrack.js';
+// export { QuaternionKeyframeTrack } from './animation/tracks/QuaternionKeyframeTrack.js';
+// export { NumberKeyframeTrack } from './animation/tracks/NumberKeyframeTrack.js';
+// export { ColorKeyframeTrack } from './animation/tracks/ColorKeyframeTrack.js';
+// export { BooleanKeyframeTrack } from './animation/tracks/BooleanKeyframeTrack.js';
+// export { PropertyMixer } from './animation/PropertyMixer.js';
+// export { PropertyBinding } from './animation/PropertyBinding.js';
+// export { KeyframeTrack } from './animation/KeyframeTrack.js';
+// export * as AnimationUtils from './animation/AnimationUtils.js';
+// export { AnimationObjectGroup } from './animation/AnimationObjectGroup.js';
+// export { AnimationMixer } from './animation/AnimationMixer.js';
+// export { AnimationClip } from './animation/AnimationClip.js';
 export { Uniform } from './core/Uniform.js';
-export { UniformsGroup } from './core/UniformsGroup.js';
-export { InstancedBufferGeometry } from './core/InstancedBufferGeometry.js';
+// export { UniformsGroup } from './core/UniformsGroup.js';
+// export { InstancedBufferGeometry } from './core/InstancedBufferGeometry.js';
 export { BufferGeometry } from './core/BufferGeometry.js';
-export { InterleavedBufferAttribute } from './core/InterleavedBufferAttribute.js';
-export { InstancedInterleavedBuffer } from './core/InstancedInterleavedBuffer.js';
-export { InterleavedBuffer } from './core/InterleavedBuffer.js';
-export { InstancedBufferAttribute } from './core/InstancedBufferAttribute.js';
-export { GLBufferAttribute } from './core/GLBufferAttribute.js';
-export * from './core/BufferAttribute.js';
-export { Object3D } from './core/Object3D.js';
-export { Raycaster } from './core/Raycaster.js';
-export { Layers } from './core/Layers.js';
-export { EventDispatcher } from './core/EventDispatcher.js';
+// export { InterleavedBufferAttribute } from './core/InterleavedBufferAttribute.js';
+// export { InstancedInterleavedBuffer } from './core/InstancedInterleavedBuffer.js';
+// export { InterleavedBuffer } from './core/InterleavedBuffer.js';
+// export { InstancedBufferAttribute } from './core/InstancedBufferAttribute.js';
+// export { GLBufferAttribute } from './core/GLBufferAttribute.js';
+export { BufferAttribute } from './core/BufferAttribute.js';
+// export { Object3D } from './core/Object3D.js';
+// export { Raycaster } from './core/Raycaster.js';
+// export { Layers } from './core/Layers.js';
+// export { EventDispatcher } from './core/EventDispatcher.js';
 export { Clock } from './core/Clock.js';
-export { QuaternionLinearInterpolant } from './math/interpolants/QuaternionLinearInterpolant.js';
-export { LinearInterpolant } from './math/interpolants/LinearInterpolant.js';
-export { DiscreteInterpolant } from './math/interpolants/DiscreteInterpolant.js';
-export { CubicInterpolant } from './math/interpolants/CubicInterpolant.js';
-export { Interpolant } from './math/Interpolant.js';
-export { Triangle } from './math/Triangle.js';
-export * as MathUtils from './math/MathUtils.js';
-export { Spherical } from './math/Spherical.js';
-export { Cylindrical } from './math/Cylindrical.js';
+// export { QuaternionLinearInterpolant } from './math/interpolants/QuaternionLinearInterpolant.js';
+// export { LinearInterpolant } from './math/interpolants/LinearInterpolant.js';
+// export { DiscreteInterpolant } from './math/interpolants/DiscreteInterpolant.js';
+// export { CubicInterpolant } from './math/interpolants/CubicInterpolant.js';
+// export { Interpolant } from './math/Interpolant.js';
+// export { Triangle } from './math/Triangle.js';
+// export * as MathUtils from './math/MathUtils.js';
+// export { Spherical } from './math/Spherical.js';
+// export { Cylindrical } from './math/Cylindrical.js';
 export { Plane } from './math/Plane.js';
-export { Frustum } from './math/Frustum.js';
-export { Sphere } from './math/Sphere.js';
-export { Ray } from './math/Ray.js';
+// export { Frustum } from './math/Frustum.js';
+// export { Sphere } from './math/Sphere.js';
+// export { Ray } from './math/Ray.js';
 export { Matrix4 } from './math/Matrix4.js';
-export { Matrix3 } from './math/Matrix3.js';
-export { Box3 } from './math/Box3.js';
-export { Box2 } from './math/Box2.js';
-export { Line3 } from './math/Line3.js';
-export { Euler } from './math/Euler.js';
+// export { Matrix3 } from './math/Matrix3.js';
+// export { Box3 } from './math/Box3.js';
+// export { Box2 } from './math/Box2.js';
+// export { Line3 } from './math/Line3.js';
+// export { Euler } from './math/Euler.js';
 export { Vector4 } from './math/Vector4.js';
 export { Vector3 } from './math/Vector3.js';
 export { Vector2 } from './math/Vector2.js';
-export { Quaternion } from './math/Quaternion.js';
+// export { Quaternion } from './math/Quaternion.js';
 export { Color } from './math/Color.js';
-export { ColorManagement } from './math/ColorManagement.js';
-export { SphericalHarmonics3 } from './math/SphericalHarmonics3.js';
-export { SpotLightHelper } from './helpers/SpotLightHelper.js';
-export { SkeletonHelper } from './helpers/SkeletonHelper.js';
-export { PointLightHelper } from './helpers/PointLightHelper.js';
-export { HemisphereLightHelper } from './helpers/HemisphereLightHelper.js';
-export { GridHelper } from './helpers/GridHelper.js';
-export { PolarGridHelper } from './helpers/PolarGridHelper.js';
-export { DirectionalLightHelper } from './helpers/DirectionalLightHelper.js';
-export { CameraHelper } from './helpers/CameraHelper.js';
-export { BoxHelper } from './helpers/BoxHelper.js';
-export { Box3Helper } from './helpers/Box3Helper.js';
-export { PlaneHelper } from './helpers/PlaneHelper.js';
-export { ArrowHelper } from './helpers/ArrowHelper.js';
-export { AxesHelper } from './helpers/AxesHelper.js';
-export * from './extras/curves/Curves.js';
-export { Shape } from './extras/core/Shape.js';
-export { Path } from './extras/core/Path.js';
+// export { ColorManagement } from './math/ColorManagement.js';
+// export { SphericalHarmonics3 } from './math/SphericalHarmonics3.js';
+// export { SpotLightHelper } from './helpers/SpotLightHelper.js';
+// export { SkeletonHelper } from './helpers/SkeletonHelper.js';
+// export { PointLightHelper } from './helpers/PointLightHelper.js';
+// export { HemisphereLightHelper } from './helpers/HemisphereLightHelper.js';
+// export { GridHelper } from './helpers/GridHelper.js';
+// export { PolarGridHelper } from './helpers/PolarGridHelper.js';
+// export { DirectionalLightHelper } from './helpers/DirectionalLightHelper.js';
+// export { CameraHelper } from './helpers/CameraHelper.js';
+// export { BoxHelper } from './helpers/BoxHelper.js';
+// export { Box3Helper } from './helpers/Box3Helper.js';
+// export { PlaneHelper } from './helpers/PlaneHelper.js';
+// export { ArrowHelper } from './helpers/ArrowHelper.js';
+// export { AxesHelper } from './helpers/AxesHelper.js';
+// export * from './extras/curves/Curves.js';
+// export { Shape } from './extras/core/Shape.js';
+// export { Path } from './extras/core/Path.js';
 export { ShapePath } from './extras/core/ShapePath.js';
-export { CurvePath } from './extras/core/CurvePath.js';
-export { Curve } from './extras/core/Curve.js';
-export * as DataUtils from './extras/DataUtils.js';
-export { ImageUtils } from './extras/ImageUtils.js';
-export { ShapeUtils } from './extras/ShapeUtils.js';
-export { PMREMGenerator } from './extras/PMREMGenerator.js';
-export { WebGLUtils } from './renderers/webgl/WebGLUtils.js';
+// export { CurvePath } from './extras/core/CurvePath.js';
+// export { Curve } from './extras/core/Curve.js';
+// export * as DataUtils from './extras/DataUtils.js';
+// export { ImageUtils } from './extras/ImageUtils.js';
+// export { ShapeUtils } from './extras/ShapeUtils.js';
+// export { PMREMGenerator } from './extras/PMREMGenerator.js';
+// export { WebGLUtils } from './renderers/webgl/WebGLUtils.js';
 export * from './constants.js';
-export * from './Three.Legacy.js';
+export { PlaneBufferGeometry } from './Three.Legacy.js';
+export { ExtrudeGeometry } from './geometries/ExtrudeGeometry.js';
+
+// Mocks
+export class Texture {}
+export class OrthographicCamera {}
+export class Raycaster {
+	setFromCamera() {}
+	intersectObjects() {
+	  return [];
+	}
+}
+export class Layers {}
 
 if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
 
diff --git a/src/extras/curves/Curves.js b/src/extras/curves/Curves.js
index c984a853942011a89bcd2add1be38392c751a639..889f3dd70382b1a3a7440d68dfe2c8a7ed7d1dae 100644
--- a/src/extras/curves/Curves.js
+++ b/src/extras/curves/Curves.js
@@ -1,10 +1,10 @@
-export { ArcCurve } from './ArcCurve.js';
-export { CatmullRomCurve3 } from './CatmullRomCurve3.js';
-export { CubicBezierCurve } from './CubicBezierCurve.js';
-export { CubicBezierCurve3 } from './CubicBezierCurve3.js';
-export { EllipseCurve } from './EllipseCurve.js';
-export { LineCurve } from './LineCurve.js';
-export { LineCurve3 } from './LineCurve3.js';
-export { QuadraticBezierCurve } from './QuadraticBezierCurve.js';
-export { QuadraticBezierCurve3 } from './QuadraticBezierCurve3.js';
-export { SplineCurve } from './SplineCurve.js';
+// export { ArcCurve } from './ArcCurve.js';
+// export { CatmullRomCurve3 } from './CatmullRomCurve3.js';
+// export { CubicBezierCurve } from './CubicBezierCurve.js';
+// export { CubicBezierCurve3 } from './CubicBezierCurve3.js';
+// export { EllipseCurve } from './EllipseCurve.js';
+// export { LineCurve } from './LineCurve.js';
+// export { LineCurve3 } from './LineCurve3.js';
+// export { QuadraticBezierCurve } from './QuadraticBezierCurve.js';
+// export { QuadraticBezierCurve3 } from './QuadraticBezierCurve3.js';
+// export { SplineCurve } from './SplineCurve.js';
diff --git a/src/materials/Materials.js b/src/materials/Materials.js
index 3497fac568b1825d1a5c35b6fa60f491c849d9a0..f243e07916b58fbad65fd1b7481c17dc12705f91 100644
--- a/src/materials/Materials.js
+++ b/src/materials/Materials.js
@@ -1,39 +1,39 @@
 import { ShadowMaterial } from './ShadowMaterial.js';
-import { SpriteMaterial } from './SpriteMaterial.js';
-import { RawShaderMaterial } from './RawShaderMaterial.js';
+// import { SpriteMaterial } from './SpriteMaterial.js';
+// import { RawShaderMaterial } from './RawShaderMaterial.js';
 import { ShaderMaterial } from './ShaderMaterial.js';
-import { PointsMaterial } from './PointsMaterial.js';
-import { MeshPhysicalMaterial } from './MeshPhysicalMaterial.js';
+// import { PointsMaterial } from './PointsMaterial.js';
+// import { MeshPhysicalMaterial } from './MeshPhysicalMaterial.js';
 import { MeshStandardMaterial } from './MeshStandardMaterial.js';
-import { MeshPhongMaterial } from './MeshPhongMaterial.js';
-import { MeshToonMaterial } from './MeshToonMaterial.js';
-import { MeshNormalMaterial } from './MeshNormalMaterial.js';
+// import { MeshPhongMaterial } from './MeshPhongMaterial.js';
+// import { MeshToonMaterial } from './MeshToonMaterial.js';
+// import { MeshNormalMaterial } from './MeshNormalMaterial.js';
 import { MeshLambertMaterial } from './MeshLambertMaterial.js';
-import { MeshDepthMaterial } from './MeshDepthMaterial.js';
-import { MeshDistanceMaterial } from './MeshDistanceMaterial.js';
-import { MeshBasicMaterial } from './MeshBasicMaterial.js';
-import { MeshMatcapMaterial } from './MeshMatcapMaterial.js';
-import { LineDashedMaterial } from './LineDashedMaterial.js';
-import { LineBasicMaterial } from './LineBasicMaterial.js';
+// import { MeshDepthMaterial } from './MeshDepthMaterial.js';
+// import { MeshDistanceMaterial } from './MeshDistanceMaterial.js';
+// import { MeshBasicMaterial } from './MeshBasicMaterial.js';
+// import { MeshMatcapMaterial } from './MeshMatcapMaterial.js';
+// import { LineDashedMaterial } from './LineDashedMaterial.js';
+// import { LineBasicMaterial } from './LineBasicMaterial.js';
 import { Material } from './Material.js';
 
 export {
 	ShadowMaterial,
-	SpriteMaterial,
-	RawShaderMaterial,
+// 	SpriteMaterial,
+// 	RawShaderMaterial,
 	ShaderMaterial,
-	PointsMaterial,
-	MeshPhysicalMaterial,
+// 	PointsMaterial,
+// 	MeshPhysicalMaterial,
 	MeshStandardMaterial,
-	MeshPhongMaterial,
-	MeshToonMaterial,
-	MeshNormalMaterial,
+// 	MeshPhongMaterial,
+// 	MeshToonMaterial,
+// 	MeshNormalMaterial,
 	MeshLambertMaterial,
-	MeshDepthMaterial,
-	MeshDistanceMaterial,
-	MeshBasicMaterial,
-	MeshMatcapMaterial,
-	LineDashedMaterial,
-	LineBasicMaterial,
+// 	MeshDepthMaterial,
+// 	MeshDistanceMaterial,
+// 	MeshBasicMaterial,
+// 	MeshMatcapMaterial,
+// 	LineDashedMaterial,
+// 	LineBasicMaterial,
 	Material
 };
diff --git a/src/renderers/shaders/ShaderChunk.js b/src/renderers/shaders/ShaderChunk.js
index d5722f72aac85b564f5f0f326d19631af7677922..809c3497d8e580f906ba5bcff21d1b3e5634fc53 100644
--- a/src/renderers/shaders/ShaderChunk.js
+++ b/src/renderers/shaders/ShaderChunk.js
@@ -105,22 +105,22 @@ import uv2_pars_vertex from './ShaderChunk/uv2_pars_vertex.glsl.js';
 import uv2_vertex from './ShaderChunk/uv2_vertex.glsl.js';
 import worldpos_vertex from './ShaderChunk/worldpos_vertex.glsl.js';
 
-import * as background from './ShaderLib/background.glsl.js';
-import * as cube from './ShaderLib/cube.glsl.js';
+// import * as background from './ShaderLib/background.glsl.js';
+// import * as cube from './ShaderLib/cube.glsl.js';
 import * as depth from './ShaderLib/depth.glsl.js';
-import * as distanceRGBA from './ShaderLib/distanceRGBA.glsl.js';
-import * as equirect from './ShaderLib/equirect.glsl.js';
-import * as linedashed from './ShaderLib/linedashed.glsl.js';
-import * as meshbasic from './ShaderLib/meshbasic.glsl.js';
-import * as meshlambert from './ShaderLib/meshlambert.glsl.js';
-import * as meshmatcap from './ShaderLib/meshmatcap.glsl.js';
-import * as meshnormal from './ShaderLib/meshnormal.glsl.js';
-import * as meshphong from './ShaderLib/meshphong.glsl.js';
+// import * as distanceRGBA from './ShaderLib/distanceRGBA.glsl.js';
+// import * as equirect from './ShaderLib/equirect.glsl.js';
+// import * as linedashed from './ShaderLib/linedashed.glsl.js';
+// import * as meshbasic from './ShaderLib/meshbasic.glsl.js';
+// import * as meshlambert from './ShaderLib/meshlambert.glsl.js';
+// import * as meshmatcap from './ShaderLib/meshmatcap.glsl.js';
+// import * as meshnormal from './ShaderLib/meshnormal.glsl.js';
+// import * as meshphong from './ShaderLib/meshphong.glsl.js';
 import * as meshphysical from './ShaderLib/meshphysical.glsl.js';
-import * as meshtoon from './ShaderLib/meshtoon.glsl.js';
-import * as points from './ShaderLib/points.glsl.js';
+// import * as meshtoon from './ShaderLib/meshtoon.glsl.js';
+// import * as points from './ShaderLib/points.glsl.js';
 import * as shadow from './ShaderLib/shadow.glsl.js';
-import * as sprite from './ShaderLib/sprite.glsl.js';
+// import * as sprite from './ShaderLib/sprite.glsl.js';
 
 export const ShaderChunk = {
 	alphamap_fragment: alphamap_fragment,
@@ -230,36 +230,36 @@ export const ShaderChunk = {
 	uv2_vertex: uv2_vertex,
 	worldpos_vertex: worldpos_vertex,
 
-	background_vert: background.vertex,
-	background_frag: background.fragment,
-	cube_vert: cube.vertex,
-	cube_frag: cube.fragment,
+	// background_vert: background.vertex,
+	// background_frag: background.fragment,
+	// cube_vert: cube.vertex,
+	// cube_frag: cube.fragment,
 	depth_vert: depth.vertex,
 	depth_frag: depth.fragment,
-	distanceRGBA_vert: distanceRGBA.vertex,
-	distanceRGBA_frag: distanceRGBA.fragment,
-	equirect_vert: equirect.vertex,
-	equirect_frag: equirect.fragment,
-	linedashed_vert: linedashed.vertex,
-	linedashed_frag: linedashed.fragment,
-	meshbasic_vert: meshbasic.vertex,
-	meshbasic_frag: meshbasic.fragment,
-	meshlambert_vert: meshlambert.vertex,
-	meshlambert_frag: meshlambert.fragment,
-	meshmatcap_vert: meshmatcap.vertex,
-	meshmatcap_frag: meshmatcap.fragment,
-	meshnormal_vert: meshnormal.vertex,
-	meshnormal_frag: meshnormal.fragment,
-	meshphong_vert: meshphong.vertex,
-	meshphong_frag: meshphong.fragment,
+	// distanceRGBA_vert: distanceRGBA.vertex,
+	// distanceRGBA_frag: distanceRGBA.fragment,
+	// equirect_vert: equirect.vertex,
+	// equirect_frag: equirect.fragment,
+	// linedashed_vert: linedashed.vertex,
+	// linedashed_frag: linedashed.fragment,
+	// meshbasic_vert: meshbasic.vertex,
+	// meshbasic_frag: meshbasic.fragment,
+	// meshlambert_vert: meshlambert.vertex,
+	// meshlambert_frag: meshlambert.fragment,
+	// meshmatcap_vert: meshmatcap.vertex,
+	// meshmatcap_frag: meshmatcap.fragment,
+	// meshnormal_vert: meshnormal.vertex,
+	// meshnormal_frag: meshnormal.fragment,
+	// meshphong_vert: meshphong.vertex,
+	// meshphong_frag: meshphong.fragment,
 	meshphysical_vert: meshphysical.vertex,
 	meshphysical_frag: meshphysical.fragment,
-	meshtoon_vert: meshtoon.vertex,
-	meshtoon_frag: meshtoon.fragment,
-	points_vert: points.vertex,
-	points_frag: points.fragment,
+	// meshtoon_vert: meshtoon.vertex,
+	// meshtoon_frag: meshtoon.fragment,
+	// points_vert: points.vertex,
+	// points_frag: points.fragment,
 	shadow_vert: shadow.vertex,
 	shadow_frag: shadow.fragment,
-	sprite_vert: sprite.vertex,
-	sprite_frag: sprite.fragment
+	// sprite_vert: sprite.vertex,
+	// sprite_frag: sprite.fragment
 };